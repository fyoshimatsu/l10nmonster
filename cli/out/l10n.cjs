#!/usr/bin/env node
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/commander/lib/error.js
var require_error = __commonJS({
  "node_modules/commander/lib/error.js"(exports) {
    var CommanderError2 = class extends Error {
      /**
       * Constructs the CommanderError class
       * @param {number} exitCode suggested exit code which could be used with process.exit
       * @param {string} code an id string representing the error
       * @param {string} message human-readable description of the error
       * @constructor
       */
      constructor(exitCode, code, message) {
        super(message);
        Error.captureStackTrace(this, this.constructor);
        this.name = this.constructor.name;
        this.code = code;
        this.exitCode = exitCode;
        this.nestedError = void 0;
      }
    };
    var InvalidArgumentError2 = class extends CommanderError2 {
      /**
       * Constructs the InvalidArgumentError class
       * @param {string} [message] explanation of why argument is invalid
       * @constructor
       */
      constructor(message) {
        super(1, "commander.invalidArgument", message);
        Error.captureStackTrace(this, this.constructor);
        this.name = this.constructor.name;
      }
    };
    exports.CommanderError = CommanderError2;
    exports.InvalidArgumentError = InvalidArgumentError2;
  }
});

// node_modules/commander/lib/argument.js
var require_argument = __commonJS({
  "node_modules/commander/lib/argument.js"(exports) {
    var { InvalidArgumentError: InvalidArgumentError2 } = require_error();
    var Argument2 = class {
      /**
       * Initialize a new command argument with the given name and description.
       * The default is that the argument is required, and you can explicitly
       * indicate this with <> around the name. Put [] around the name for an optional argument.
       *
       * @param {string} name
       * @param {string} [description]
       */
      constructor(name, description) {
        this.description = description || "";
        this.variadic = false;
        this.parseArg = void 0;
        this.defaultValue = void 0;
        this.defaultValueDescription = void 0;
        this.argChoices = void 0;
        switch (name[0]) {
          case "<":
            this.required = true;
            this._name = name.slice(1, -1);
            break;
          case "[":
            this.required = false;
            this._name = name.slice(1, -1);
            break;
          default:
            this.required = true;
            this._name = name;
            break;
        }
        if (this._name.length > 3 && this._name.slice(-3) === "...") {
          this.variadic = true;
          this._name = this._name.slice(0, -3);
        }
      }
      /**
       * Return argument name.
       *
       * @return {string}
       */
      name() {
        return this._name;
      }
      /**
       * @api private
       */
      _concatValue(value, previous) {
        if (previous === this.defaultValue || !Array.isArray(previous)) {
          return [value];
        }
        return previous.concat(value);
      }
      /**
       * Set the default value, and optionally supply the description to be displayed in the help.
       *
       * @param {any} value
       * @param {string} [description]
       * @return {Argument}
       */
      default(value, description) {
        this.defaultValue = value;
        this.defaultValueDescription = description;
        return this;
      }
      /**
       * Set the custom handler for processing CLI command arguments into argument values.
       *
       * @param {Function} [fn]
       * @return {Argument}
       */
      argParser(fn) {
        this.parseArg = fn;
        return this;
      }
      /**
       * Only allow argument value to be one of choices.
       *
       * @param {string[]} values
       * @return {Argument}
       */
      choices(values) {
        this.argChoices = values.slice();
        this.parseArg = (arg, previous) => {
          if (!this.argChoices.includes(arg)) {
            throw new InvalidArgumentError2(`Allowed choices are ${this.argChoices.join(", ")}.`);
          }
          if (this.variadic) {
            return this._concatValue(arg, previous);
          }
          return arg;
        };
        return this;
      }
      /**
       * Make argument required.
       */
      argRequired() {
        this.required = true;
        return this;
      }
      /**
       * Make argument optional.
       */
      argOptional() {
        this.required = false;
        return this;
      }
    };
    function humanReadableArgName(arg) {
      const nameOutput = arg.name() + (arg.variadic === true ? "..." : "");
      return arg.required ? "<" + nameOutput + ">" : "[" + nameOutput + "]";
    }
    exports.Argument = Argument2;
    exports.humanReadableArgName = humanReadableArgName;
  }
});

// node_modules/commander/lib/help.js
var require_help = __commonJS({
  "node_modules/commander/lib/help.js"(exports) {
    var { humanReadableArgName } = require_argument();
    var Help2 = class {
      constructor() {
        this.helpWidth = void 0;
        this.sortSubcommands = false;
        this.sortOptions = false;
        this.showGlobalOptions = false;
      }
      /**
       * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.
       *
       * @param {Command} cmd
       * @returns {Command[]}
       */
      visibleCommands(cmd) {
        const visibleCommands = cmd.commands.filter((cmd2) => !cmd2._hidden);
        if (cmd._hasImplicitHelpCommand()) {
          const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);
          const helpCommand = cmd.createCommand(helpName).helpOption(false);
          helpCommand.description(cmd._helpCommandDescription);
          if (helpArgs)
            helpCommand.arguments(helpArgs);
          visibleCommands.push(helpCommand);
        }
        if (this.sortSubcommands) {
          visibleCommands.sort((a, b) => {
            return a.name().localeCompare(b.name());
          });
        }
        return visibleCommands;
      }
      /**
       * Compare options for sort.
       *
       * @param {Option} a
       * @param {Option} b
       * @returns number
       */
      compareOptions(a, b) {
        const getSortKey = (option) => {
          return option.short ? option.short.replace(/^-/, "") : option.long.replace(/^--/, "");
        };
        return getSortKey(a).localeCompare(getSortKey(b));
      }
      /**
       * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.
       *
       * @param {Command} cmd
       * @returns {Option[]}
       */
      visibleOptions(cmd) {
        const visibleOptions = cmd.options.filter((option) => !option.hidden);
        const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);
        const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);
        if (showShortHelpFlag || showLongHelpFlag) {
          let helpOption;
          if (!showShortHelpFlag) {
            helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);
          } else if (!showLongHelpFlag) {
            helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);
          } else {
            helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);
          }
          visibleOptions.push(helpOption);
        }
        if (this.sortOptions) {
          visibleOptions.sort(this.compareOptions);
        }
        return visibleOptions;
      }
      /**
       * Get an array of the visible global options. (Not including help.)
       *
       * @param {Command} cmd
       * @returns {Option[]}
       */
      visibleGlobalOptions(cmd) {
        if (!this.showGlobalOptions)
          return [];
        const globalOptions = [];
        for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {
          const visibleOptions = parentCmd.options.filter((option) => !option.hidden);
          globalOptions.push(...visibleOptions);
        }
        if (this.sortOptions) {
          globalOptions.sort(this.compareOptions);
        }
        return globalOptions;
      }
      /**
       * Get an array of the arguments if any have a description.
       *
       * @param {Command} cmd
       * @returns {Argument[]}
       */
      visibleArguments(cmd) {
        if (cmd._argsDescription) {
          cmd._args.forEach((argument) => {
            argument.description = argument.description || cmd._argsDescription[argument.name()] || "";
          });
        }
        if (cmd._args.find((argument) => argument.description)) {
          return cmd._args;
        }
        return [];
      }
      /**
       * Get the command term to show in the list of subcommands.
       *
       * @param {Command} cmd
       * @returns {string}
       */
      subcommandTerm(cmd) {
        const args = cmd._args.map((arg) => humanReadableArgName(arg)).join(" ");
        return cmd._name + (cmd._aliases[0] ? "|" + cmd._aliases[0] : "") + (cmd.options.length ? " [options]" : "") + // simplistic check for non-help option
        (args ? " " + args : "");
      }
      /**
       * Get the option term to show in the list of options.
       *
       * @param {Option} option
       * @returns {string}
       */
      optionTerm(option) {
        return option.flags;
      }
      /**
       * Get the argument term to show in the list of arguments.
       *
       * @param {Argument} argument
       * @returns {string}
       */
      argumentTerm(argument) {
        return argument.name();
      }
      /**
       * Get the longest command term length.
       *
       * @param {Command} cmd
       * @param {Help} helper
       * @returns {number}
       */
      longestSubcommandTermLength(cmd, helper) {
        return helper.visibleCommands(cmd).reduce((max, command) => {
          return Math.max(max, helper.subcommandTerm(command).length);
        }, 0);
      }
      /**
       * Get the longest option term length.
       *
       * @param {Command} cmd
       * @param {Help} helper
       * @returns {number}
       */
      longestOptionTermLength(cmd, helper) {
        return helper.visibleOptions(cmd).reduce((max, option) => {
          return Math.max(max, helper.optionTerm(option).length);
        }, 0);
      }
      /**
       * Get the longest global option term length.
       *
       * @param {Command} cmd
       * @param {Help} helper
       * @returns {number}
       */
      longestGlobalOptionTermLength(cmd, helper) {
        return helper.visibleGlobalOptions(cmd).reduce((max, option) => {
          return Math.max(max, helper.optionTerm(option).length);
        }, 0);
      }
      /**
       * Get the longest argument term length.
       *
       * @param {Command} cmd
       * @param {Help} helper
       * @returns {number}
       */
      longestArgumentTermLength(cmd, helper) {
        return helper.visibleArguments(cmd).reduce((max, argument) => {
          return Math.max(max, helper.argumentTerm(argument).length);
        }, 0);
      }
      /**
       * Get the command usage to be displayed at the top of the built-in help.
       *
       * @param {Command} cmd
       * @returns {string}
       */
      commandUsage(cmd) {
        let cmdName = cmd._name;
        if (cmd._aliases[0]) {
          cmdName = cmdName + "|" + cmd._aliases[0];
        }
        let parentCmdNames = "";
        for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {
          parentCmdNames = parentCmd.name() + " " + parentCmdNames;
        }
        return parentCmdNames + cmdName + " " + cmd.usage();
      }
      /**
       * Get the description for the command.
       *
       * @param {Command} cmd
       * @returns {string}
       */
      commandDescription(cmd) {
        return cmd.description();
      }
      /**
       * Get the subcommand summary to show in the list of subcommands.
       * (Fallback to description for backwards compatibility.)
       *
       * @param {Command} cmd
       * @returns {string}
       */
      subcommandDescription(cmd) {
        return cmd.summary() || cmd.description();
      }
      /**
       * Get the option description to show in the list of options.
       *
       * @param {Option} option
       * @return {string}
       */
      optionDescription(option) {
        const extraInfo = [];
        if (option.argChoices) {
          extraInfo.push(
            // use stringify to match the display of the default value
            `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(", ")}`
          );
        }
        if (option.defaultValue !== void 0) {
          const showDefault = option.required || option.optional || option.isBoolean() && typeof option.defaultValue === "boolean";
          if (showDefault) {
            extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);
          }
        }
        if (option.presetArg !== void 0 && option.optional) {
          extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);
        }
        if (option.envVar !== void 0) {
          extraInfo.push(`env: ${option.envVar}`);
        }
        if (extraInfo.length > 0) {
          return `${option.description} (${extraInfo.join(", ")})`;
        }
        return option.description;
      }
      /**
       * Get the argument description to show in the list of arguments.
       *
       * @param {Argument} argument
       * @return {string}
       */
      argumentDescription(argument) {
        const extraInfo = [];
        if (argument.argChoices) {
          extraInfo.push(
            // use stringify to match the display of the default value
            `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(", ")}`
          );
        }
        if (argument.defaultValue !== void 0) {
          extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);
        }
        if (extraInfo.length > 0) {
          const extraDescripton = `(${extraInfo.join(", ")})`;
          if (argument.description) {
            return `${argument.description} ${extraDescripton}`;
          }
          return extraDescripton;
        }
        return argument.description;
      }
      /**
       * Generate the built-in help text.
       *
       * @param {Command} cmd
       * @param {Help} helper
       * @returns {string}
       */
      formatHelp(cmd, helper) {
        const termWidth = helper.padWidth(cmd, helper);
        const helpWidth = helper.helpWidth || 80;
        const itemIndentWidth = 2;
        const itemSeparatorWidth = 2;
        function formatItem(term, description) {
          if (description) {
            const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;
            return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);
          }
          return term;
        }
        function formatList(textArray) {
          return textArray.join("\n").replace(/^/gm, " ".repeat(itemIndentWidth));
        }
        let output = [`Usage: ${helper.commandUsage(cmd)}`, ""];
        const commandDescription = helper.commandDescription(cmd);
        if (commandDescription.length > 0) {
          output = output.concat([helper.wrap(commandDescription, helpWidth, 0), ""]);
        }
        const argumentList = helper.visibleArguments(cmd).map((argument) => {
          return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));
        });
        if (argumentList.length > 0) {
          output = output.concat(["Arguments:", formatList(argumentList), ""]);
        }
        const optionList = helper.visibleOptions(cmd).map((option) => {
          return formatItem(helper.optionTerm(option), helper.optionDescription(option));
        });
        if (optionList.length > 0) {
          output = output.concat(["Options:", formatList(optionList), ""]);
        }
        if (this.showGlobalOptions) {
          const globalOptionList = helper.visibleGlobalOptions(cmd).map((option) => {
            return formatItem(helper.optionTerm(option), helper.optionDescription(option));
          });
          if (globalOptionList.length > 0) {
            output = output.concat(["Global Options:", formatList(globalOptionList), ""]);
          }
        }
        const commandList = helper.visibleCommands(cmd).map((cmd2) => {
          return formatItem(helper.subcommandTerm(cmd2), helper.subcommandDescription(cmd2));
        });
        if (commandList.length > 0) {
          output = output.concat(["Commands:", formatList(commandList), ""]);
        }
        return output.join("\n");
      }
      /**
       * Calculate the pad width from the maximum term length.
       *
       * @param {Command} cmd
       * @param {Help} helper
       * @returns {number}
       */
      padWidth(cmd, helper) {
        return Math.max(
          helper.longestOptionTermLength(cmd, helper),
          helper.longestGlobalOptionTermLength(cmd, helper),
          helper.longestSubcommandTermLength(cmd, helper),
          helper.longestArgumentTermLength(cmd, helper)
        );
      }
      /**
       * Wrap the given string to width characters per line, with lines after the first indented.
       * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.
       *
       * @param {string} str
       * @param {number} width
       * @param {number} indent
       * @param {number} [minColumnWidth=40]
       * @return {string}
       *
       */
      wrap(str, width, indent, minColumnWidth = 40) {
        const indents = " \\f\\t\\v\xA0\u1680\u2000-\u200A\u202F\u205F\u3000\uFEFF";
        const manualIndent = new RegExp(`[\\n][${indents}]+`);
        if (str.match(manualIndent))
          return str;
        const columnWidth = width - indent;
        if (columnWidth < minColumnWidth)
          return str;
        const leadingStr = str.slice(0, indent);
        const columnText = str.slice(indent).replace("\r\n", "\n");
        const indentString = " ".repeat(indent);
        const zeroWidthSpace = "\u200B";
        const breaks = `\\s${zeroWidthSpace}`;
        const regex = new RegExp(`
|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`, "g");
        const lines = columnText.match(regex) || [];
        return leadingStr + lines.map((line, i) => {
          if (line === "\n")
            return "";
          return (i > 0 ? indentString : "") + line.trimEnd();
        }).join("\n");
      }
    };
    exports.Help = Help2;
  }
});

// node_modules/commander/lib/option.js
var require_option = __commonJS({
  "node_modules/commander/lib/option.js"(exports) {
    var { InvalidArgumentError: InvalidArgumentError2 } = require_error();
    var Option2 = class {
      /**
       * Initialize a new `Option` with the given `flags` and `description`.
       *
       * @param {string} flags
       * @param {string} [description]
       */
      constructor(flags, description) {
        this.flags = flags;
        this.description = description || "";
        this.required = flags.includes("<");
        this.optional = flags.includes("[");
        this.variadic = /\w\.\.\.[>\]]$/.test(flags);
        this.mandatory = false;
        const optionFlags = splitOptionFlags(flags);
        this.short = optionFlags.shortFlag;
        this.long = optionFlags.longFlag;
        this.negate = false;
        if (this.long) {
          this.negate = this.long.startsWith("--no-");
        }
        this.defaultValue = void 0;
        this.defaultValueDescription = void 0;
        this.presetArg = void 0;
        this.envVar = void 0;
        this.parseArg = void 0;
        this.hidden = false;
        this.argChoices = void 0;
        this.conflictsWith = [];
        this.implied = void 0;
      }
      /**
       * Set the default value, and optionally supply the description to be displayed in the help.
       *
       * @param {any} value
       * @param {string} [description]
       * @return {Option}
       */
      default(value, description) {
        this.defaultValue = value;
        this.defaultValueDescription = description;
        return this;
      }
      /**
       * Preset to use when option used without option-argument, especially optional but also boolean and negated.
       * The custom processing (parseArg) is called.
       *
       * @example
       * new Option('--color').default('GREYSCALE').preset('RGB');
       * new Option('--donate [amount]').preset('20').argParser(parseFloat);
       *
       * @param {any} arg
       * @return {Option}
       */
      preset(arg) {
        this.presetArg = arg;
        return this;
      }
      /**
       * Add option name(s) that conflict with this option.
       * An error will be displayed if conflicting options are found during parsing.
       *
       * @example
       * new Option('--rgb').conflicts('cmyk');
       * new Option('--js').conflicts(['ts', 'jsx']);
       *
       * @param {string | string[]} names
       * @return {Option}
       */
      conflicts(names) {
        this.conflictsWith = this.conflictsWith.concat(names);
        return this;
      }
      /**
       * Specify implied option values for when this option is set and the implied options are not.
       *
       * The custom processing (parseArg) is not called on the implied values.
       *
       * @example
       * program
       *   .addOption(new Option('--log', 'write logging information to file'))
       *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));
       *
       * @param {Object} impliedOptionValues
       * @return {Option}
       */
      implies(impliedOptionValues) {
        let newImplied = impliedOptionValues;
        if (typeof impliedOptionValues === "string") {
          newImplied = { [impliedOptionValues]: true };
        }
        this.implied = Object.assign(this.implied || {}, newImplied);
        return this;
      }
      /**
       * Set environment variable to check for option value.
       *
       * An environment variable is only used if when processed the current option value is
       * undefined, or the source of the current value is 'default' or 'config' or 'env'.
       *
       * @param {string} name
       * @return {Option}
       */
      env(name) {
        this.envVar = name;
        return this;
      }
      /**
       * Set the custom handler for processing CLI option arguments into option values.
       *
       * @param {Function} [fn]
       * @return {Option}
       */
      argParser(fn) {
        this.parseArg = fn;
        return this;
      }
      /**
       * Whether the option is mandatory and must have a value after parsing.
       *
       * @param {boolean} [mandatory=true]
       * @return {Option}
       */
      makeOptionMandatory(mandatory = true) {
        this.mandatory = !!mandatory;
        return this;
      }
      /**
       * Hide option in help.
       *
       * @param {boolean} [hide=true]
       * @return {Option}
       */
      hideHelp(hide = true) {
        this.hidden = !!hide;
        return this;
      }
      /**
       * @api private
       */
      _concatValue(value, previous) {
        if (previous === this.defaultValue || !Array.isArray(previous)) {
          return [value];
        }
        return previous.concat(value);
      }
      /**
       * Only allow option value to be one of choices.
       *
       * @param {string[]} values
       * @return {Option}
       */
      choices(values) {
        this.argChoices = values.slice();
        this.parseArg = (arg, previous) => {
          if (!this.argChoices.includes(arg)) {
            throw new InvalidArgumentError2(`Allowed choices are ${this.argChoices.join(", ")}.`);
          }
          if (this.variadic) {
            return this._concatValue(arg, previous);
          }
          return arg;
        };
        return this;
      }
      /**
       * Return option name.
       *
       * @return {string}
       */
      name() {
        if (this.long) {
          return this.long.replace(/^--/, "");
        }
        return this.short.replace(/^-/, "");
      }
      /**
       * Return option name, in a camelcase format that can be used
       * as a object attribute key.
       *
       * @return {string}
       * @api private
       */
      attributeName() {
        return camelcase(this.name().replace(/^no-/, ""));
      }
      /**
       * Check if `arg` matches the short or long flag.
       *
       * @param {string} arg
       * @return {boolean}
       * @api private
       */
      is(arg) {
        return this.short === arg || this.long === arg;
      }
      /**
       * Return whether a boolean option.
       *
       * Options are one of boolean, negated, required argument, or optional argument.
       *
       * @return {boolean}
       * @api private
       */
      isBoolean() {
        return !this.required && !this.optional && !this.negate;
      }
    };
    var DualOptions = class {
      /**
       * @param {Option[]} options
       */
      constructor(options) {
        this.positiveOptions = /* @__PURE__ */ new Map();
        this.negativeOptions = /* @__PURE__ */ new Map();
        this.dualOptions = /* @__PURE__ */ new Set();
        options.forEach((option) => {
          if (option.negate) {
            this.negativeOptions.set(option.attributeName(), option);
          } else {
            this.positiveOptions.set(option.attributeName(), option);
          }
        });
        this.negativeOptions.forEach((value, key) => {
          if (this.positiveOptions.has(key)) {
            this.dualOptions.add(key);
          }
        });
      }
      /**
       * Did the value come from the option, and not from possible matching dual option?
       *
       * @param {any} value
       * @param {Option} option
       * @returns {boolean}
       */
      valueFromOption(value, option) {
        const optionKey = option.attributeName();
        if (!this.dualOptions.has(optionKey))
          return true;
        const preset = this.negativeOptions.get(optionKey).presetArg;
        const negativeValue = preset !== void 0 ? preset : false;
        return option.negate === (negativeValue === value);
      }
    };
    function camelcase(str) {
      return str.split("-").reduce((str2, word) => {
        return str2 + word[0].toUpperCase() + word.slice(1);
      });
    }
    function splitOptionFlags(flags) {
      let shortFlag;
      let longFlag;
      const flagParts = flags.split(/[ |,]+/);
      if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1]))
        shortFlag = flagParts.shift();
      longFlag = flagParts.shift();
      if (!shortFlag && /^-[^-]$/.test(longFlag)) {
        shortFlag = longFlag;
        longFlag = void 0;
      }
      return { shortFlag, longFlag };
    }
    exports.Option = Option2;
    exports.splitOptionFlags = splitOptionFlags;
    exports.DualOptions = DualOptions;
  }
});

// node_modules/commander/lib/suggestSimilar.js
var require_suggestSimilar = __commonJS({
  "node_modules/commander/lib/suggestSimilar.js"(exports) {
    var maxDistance = 3;
    function editDistance(a, b) {
      if (Math.abs(a.length - b.length) > maxDistance)
        return Math.max(a.length, b.length);
      const d = [];
      for (let i = 0; i <= a.length; i++) {
        d[i] = [i];
      }
      for (let j2 = 0; j2 <= b.length; j2++) {
        d[0][j2] = j2;
      }
      for (let j2 = 1; j2 <= b.length; j2++) {
        for (let i = 1; i <= a.length; i++) {
          let cost = 1;
          if (a[i - 1] === b[j2 - 1]) {
            cost = 0;
          } else {
            cost = 1;
          }
          d[i][j2] = Math.min(
            d[i - 1][j2] + 1,
            // deletion
            d[i][j2 - 1] + 1,
            // insertion
            d[i - 1][j2 - 1] + cost
            // substitution
          );
          if (i > 1 && j2 > 1 && a[i - 1] === b[j2 - 2] && a[i - 2] === b[j2 - 1]) {
            d[i][j2] = Math.min(d[i][j2], d[i - 2][j2 - 2] + 1);
          }
        }
      }
      return d[a.length][b.length];
    }
    function suggestSimilar(word, candidates) {
      if (!candidates || candidates.length === 0)
        return "";
      candidates = Array.from(new Set(candidates));
      const searchingOptions = word.startsWith("--");
      if (searchingOptions) {
        word = word.slice(2);
        candidates = candidates.map((candidate) => candidate.slice(2));
      }
      let similar = [];
      let bestDistance = maxDistance;
      const minSimilarity = 0.4;
      candidates.forEach((candidate) => {
        if (candidate.length <= 1)
          return;
        const distance = editDistance(word, candidate);
        const length = Math.max(word.length, candidate.length);
        const similarity = (length - distance) / length;
        if (similarity > minSimilarity) {
          if (distance < bestDistance) {
            bestDistance = distance;
            similar = [candidate];
          } else if (distance === bestDistance) {
            similar.push(candidate);
          }
        }
      });
      similar.sort((a, b) => a.localeCompare(b));
      if (searchingOptions) {
        similar = similar.map((candidate) => `--${candidate}`);
      }
      if (similar.length > 1) {
        return `
(Did you mean one of ${similar.join(", ")}?)`;
      }
      if (similar.length === 1) {
        return `
(Did you mean ${similar[0]}?)`;
      }
      return "";
    }
    exports.suggestSimilar = suggestSimilar;
  }
});

// node_modules/commander/lib/command.js
var require_command = __commonJS({
  "node_modules/commander/lib/command.js"(exports) {
    var EventEmitter = require("events").EventEmitter;
    var childProcess = require("child_process");
    var path11 = require("path");
    var fs5 = require("fs");
    var process3 = require("process");
    var { Argument: Argument2, humanReadableArgName } = require_argument();
    var { CommanderError: CommanderError2 } = require_error();
    var { Help: Help2 } = require_help();
    var { Option: Option2, splitOptionFlags, DualOptions } = require_option();
    var { suggestSimilar } = require_suggestSimilar();
    var Command2 = class extends EventEmitter {
      /**
       * Initialize a new `Command`.
       *
       * @param {string} [name]
       */
      constructor(name) {
        super();
        this.commands = [];
        this.options = [];
        this.parent = null;
        this._allowUnknownOption = false;
        this._allowExcessArguments = true;
        this._args = [];
        this.args = [];
        this.rawArgs = [];
        this.processedArgs = [];
        this._scriptPath = null;
        this._name = name || "";
        this._optionValues = {};
        this._optionValueSources = {};
        this._storeOptionsAsProperties = false;
        this._actionHandler = null;
        this._executableHandler = false;
        this._executableFile = null;
        this._executableDir = null;
        this._defaultCommandName = null;
        this._exitCallback = null;
        this._aliases = [];
        this._combineFlagAndOptionalValue = true;
        this._description = "";
        this._summary = "";
        this._argsDescription = void 0;
        this._enablePositionalOptions = false;
        this._passThroughOptions = false;
        this._lifeCycleHooks = {};
        this._showHelpAfterError = false;
        this._showSuggestionAfterError = true;
        this._outputConfiguration = {
          writeOut: (str) => process3.stdout.write(str),
          writeErr: (str) => process3.stderr.write(str),
          getOutHelpWidth: () => process3.stdout.isTTY ? process3.stdout.columns : void 0,
          getErrHelpWidth: () => process3.stderr.isTTY ? process3.stderr.columns : void 0,
          outputError: (str, write) => write(str)
        };
        this._hidden = false;
        this._hasHelpOption = true;
        this._helpFlags = "-h, --help";
        this._helpDescription = "display help for command";
        this._helpShortFlag = "-h";
        this._helpLongFlag = "--help";
        this._addImplicitHelpCommand = void 0;
        this._helpCommandName = "help";
        this._helpCommandnameAndArgs = "help [command]";
        this._helpCommandDescription = "display help for command";
        this._helpConfiguration = {};
      }
      /**
       * Copy settings that are useful to have in common across root command and subcommands.
       *
       * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)
       *
       * @param {Command} sourceCommand
       * @return {Command} `this` command for chaining
       */
      copyInheritedSettings(sourceCommand) {
        this._outputConfiguration = sourceCommand._outputConfiguration;
        this._hasHelpOption = sourceCommand._hasHelpOption;
        this._helpFlags = sourceCommand._helpFlags;
        this._helpDescription = sourceCommand._helpDescription;
        this._helpShortFlag = sourceCommand._helpShortFlag;
        this._helpLongFlag = sourceCommand._helpLongFlag;
        this._helpCommandName = sourceCommand._helpCommandName;
        this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;
        this._helpCommandDescription = sourceCommand._helpCommandDescription;
        this._helpConfiguration = sourceCommand._helpConfiguration;
        this._exitCallback = sourceCommand._exitCallback;
        this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;
        this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;
        this._allowExcessArguments = sourceCommand._allowExcessArguments;
        this._enablePositionalOptions = sourceCommand._enablePositionalOptions;
        this._showHelpAfterError = sourceCommand._showHelpAfterError;
        this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;
        return this;
      }
      /**
       * Define a command.
       *
       * There are two styles of command: pay attention to where to put the description.
       *
       * @example
       * // Command implemented using action handler (description is supplied separately to `.command`)
       * program
       *   .command('clone <source> [destination]')
       *   .description('clone a repository into a newly created directory')
       *   .action((source, destination) => {
       *     console.log('clone command called');
       *   });
       *
       * // Command implemented using separate executable file (description is second parameter to `.command`)
       * program
       *   .command('start <service>', 'start named service')
       *   .command('stop [service]', 'stop named service, or all if no name supplied');
       *
       * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`
       * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)
       * @param {Object} [execOpts] - configuration options (for executable)
       * @return {Command} returns new command for action handler, or `this` for executable command
       */
      command(nameAndArgs, actionOptsOrExecDesc, execOpts) {
        let desc = actionOptsOrExecDesc;
        let opts = execOpts;
        if (typeof desc === "object" && desc !== null) {
          opts = desc;
          desc = null;
        }
        opts = opts || {};
        const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);
        const cmd = this.createCommand(name);
        if (desc) {
          cmd.description(desc);
          cmd._executableHandler = true;
        }
        if (opts.isDefault)
          this._defaultCommandName = cmd._name;
        cmd._hidden = !!(opts.noHelp || opts.hidden);
        cmd._executableFile = opts.executableFile || null;
        if (args)
          cmd.arguments(args);
        this.commands.push(cmd);
        cmd.parent = this;
        cmd.copyInheritedSettings(this);
        if (desc)
          return this;
        return cmd;
      }
      /**
       * Factory routine to create a new unattached command.
       *
       * See .command() for creating an attached subcommand, which uses this routine to
       * create the command. You can override createCommand to customise subcommands.
       *
       * @param {string} [name]
       * @return {Command} new command
       */
      createCommand(name) {
        return new Command2(name);
      }
      /**
       * You can customise the help with a subclass of Help by overriding createHelp,
       * or by overriding Help properties using configureHelp().
       *
       * @return {Help}
       */
      createHelp() {
        return Object.assign(new Help2(), this.configureHelp());
      }
      /**
       * You can customise the help by overriding Help properties using configureHelp(),
       * or with a subclass of Help by overriding createHelp().
       *
       * @param {Object} [configuration] - configuration options
       * @return {Command|Object} `this` command for chaining, or stored configuration
       */
      configureHelp(configuration) {
        if (configuration === void 0)
          return this._helpConfiguration;
        this._helpConfiguration = configuration;
        return this;
      }
      /**
       * The default output goes to stdout and stderr. You can customise this for special
       * applications. You can also customise the display of errors by overriding outputError.
       *
       * The configuration properties are all functions:
       *
       *     // functions to change where being written, stdout and stderr
       *     writeOut(str)
       *     writeErr(str)
       *     // matching functions to specify width for wrapping help
       *     getOutHelpWidth()
       *     getErrHelpWidth()
       *     // functions based on what is being written out
       *     outputError(str, write) // used for displaying errors, and not used for displaying help
       *
       * @param {Object} [configuration] - configuration options
       * @return {Command|Object} `this` command for chaining, or stored configuration
       */
      configureOutput(configuration) {
        if (configuration === void 0)
          return this._outputConfiguration;
        Object.assign(this._outputConfiguration, configuration);
        return this;
      }
      /**
       * Display the help or a custom message after an error occurs.
       *
       * @param {boolean|string} [displayHelp]
       * @return {Command} `this` command for chaining
       */
      showHelpAfterError(displayHelp = true) {
        if (typeof displayHelp !== "string")
          displayHelp = !!displayHelp;
        this._showHelpAfterError = displayHelp;
        return this;
      }
      /**
       * Display suggestion of similar commands for unknown commands, or options for unknown options.
       *
       * @param {boolean} [displaySuggestion]
       * @return {Command} `this` command for chaining
       */
      showSuggestionAfterError(displaySuggestion = true) {
        this._showSuggestionAfterError = !!displaySuggestion;
        return this;
      }
      /**
       * Add a prepared subcommand.
       *
       * See .command() for creating an attached subcommand which inherits settings from its parent.
       *
       * @param {Command} cmd - new subcommand
       * @param {Object} [opts] - configuration options
       * @return {Command} `this` command for chaining
       */
      addCommand(cmd, opts) {
        if (!cmd._name) {
          throw new Error(`Command passed to .addCommand() must have a name
- specify the name in Command constructor or using .name()`);
        }
        opts = opts || {};
        if (opts.isDefault)
          this._defaultCommandName = cmd._name;
        if (opts.noHelp || opts.hidden)
          cmd._hidden = true;
        this.commands.push(cmd);
        cmd.parent = this;
        return this;
      }
      /**
       * Factory routine to create a new unattached argument.
       *
       * See .argument() for creating an attached argument, which uses this routine to
       * create the argument. You can override createArgument to return a custom argument.
       *
       * @param {string} name
       * @param {string} [description]
       * @return {Argument} new argument
       */
      createArgument(name, description) {
        return new Argument2(name, description);
      }
      /**
       * Define argument syntax for command.
       *
       * The default is that the argument is required, and you can explicitly
       * indicate this with <> around the name. Put [] around the name for an optional argument.
       *
       * @example
       * program.argument('<input-file>');
       * program.argument('[output-file]');
       *
       * @param {string} name
       * @param {string} [description]
       * @param {Function|*} [fn] - custom argument processing function
       * @param {*} [defaultValue]
       * @return {Command} `this` command for chaining
       */
      argument(name, description, fn, defaultValue) {
        const argument = this.createArgument(name, description);
        if (typeof fn === "function") {
          argument.default(defaultValue).argParser(fn);
        } else {
          argument.default(fn);
        }
        this.addArgument(argument);
        return this;
      }
      /**
       * Define argument syntax for command, adding multiple at once (without descriptions).
       *
       * See also .argument().
       *
       * @example
       * program.arguments('<cmd> [env]');
       *
       * @param {string} names
       * @return {Command} `this` command for chaining
       */
      arguments(names) {
        names.split(/ +/).forEach((detail) => {
          this.argument(detail);
        });
        return this;
      }
      /**
       * Define argument syntax for command, adding a prepared argument.
       *
       * @param {Argument} argument
       * @return {Command} `this` command for chaining
       */
      addArgument(argument) {
        const previousArgument = this._args.slice(-1)[0];
        if (previousArgument && previousArgument.variadic) {
          throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);
        }
        if (argument.required && argument.defaultValue !== void 0 && argument.parseArg === void 0) {
          throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);
        }
        this._args.push(argument);
        return this;
      }
      /**
       * Override default decision whether to add implicit help command.
       *
       *    addHelpCommand() // force on
       *    addHelpCommand(false); // force off
       *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details
       *
       * @return {Command} `this` command for chaining
       */
      addHelpCommand(enableOrNameAndArgs, description) {
        if (enableOrNameAndArgs === false) {
          this._addImplicitHelpCommand = false;
        } else {
          this._addImplicitHelpCommand = true;
          if (typeof enableOrNameAndArgs === "string") {
            this._helpCommandName = enableOrNameAndArgs.split(" ")[0];
            this._helpCommandnameAndArgs = enableOrNameAndArgs;
          }
          this._helpCommandDescription = description || this._helpCommandDescription;
        }
        return this;
      }
      /**
       * @return {boolean}
       * @api private
       */
      _hasImplicitHelpCommand() {
        if (this._addImplicitHelpCommand === void 0) {
          return this.commands.length && !this._actionHandler && !this._findCommand("help");
        }
        return this._addImplicitHelpCommand;
      }
      /**
       * Add hook for life cycle event.
       *
       * @param {string} event
       * @param {Function} listener
       * @return {Command} `this` command for chaining
       */
      hook(event, listener) {
        const allowedValues = ["preSubcommand", "preAction", "postAction"];
        if (!allowedValues.includes(event)) {
          throw new Error(`Unexpected value for event passed to hook : '${event}'.
Expecting one of '${allowedValues.join("', '")}'`);
        }
        if (this._lifeCycleHooks[event]) {
          this._lifeCycleHooks[event].push(listener);
        } else {
          this._lifeCycleHooks[event] = [listener];
        }
        return this;
      }
      /**
       * Register callback to use as replacement for calling process.exit.
       *
       * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing
       * @return {Command} `this` command for chaining
       */
      exitOverride(fn) {
        if (fn) {
          this._exitCallback = fn;
        } else {
          this._exitCallback = (err) => {
            if (err.code !== "commander.executeSubCommandAsync") {
              throw err;
            } else {
            }
          };
        }
        return this;
      }
      /**
       * Call process.exit, and _exitCallback if defined.
       *
       * @param {number} exitCode exit code for using with process.exit
       * @param {string} code an id string representing the error
       * @param {string} message human-readable description of the error
       * @return never
       * @api private
       */
      _exit(exitCode, code, message) {
        if (this._exitCallback) {
          this._exitCallback(new CommanderError2(exitCode, code, message));
        }
        process3.exit(exitCode);
      }
      /**
       * Register callback `fn` for the command.
       *
       * @example
       * program
       *   .command('serve')
       *   .description('start service')
       *   .action(function() {
       *      // do work here
       *   });
       *
       * @param {Function} fn
       * @return {Command} `this` command for chaining
       */
      action(fn) {
        const listener = (args) => {
          const expectedArgsCount = this._args.length;
          const actionArgs = args.slice(0, expectedArgsCount);
          if (this._storeOptionsAsProperties) {
            actionArgs[expectedArgsCount] = this;
          } else {
            actionArgs[expectedArgsCount] = this.opts();
          }
          actionArgs.push(this);
          return fn.apply(this, actionArgs);
        };
        this._actionHandler = listener;
        return this;
      }
      /**
       * Factory routine to create a new unattached option.
       *
       * See .option() for creating an attached option, which uses this routine to
       * create the option. You can override createOption to return a custom option.
       *
       * @param {string} flags
       * @param {string} [description]
       * @return {Option} new option
       */
      createOption(flags, description) {
        return new Option2(flags, description);
      }
      /**
       * Add an option.
       *
       * @param {Option} option
       * @return {Command} `this` command for chaining
       */
      addOption(option) {
        const oname = option.name();
        const name = option.attributeName();
        if (option.negate) {
          const positiveLongFlag = option.long.replace(/^--no-/, "--");
          if (!this._findOption(positiveLongFlag)) {
            this.setOptionValueWithSource(name, option.defaultValue === void 0 ? true : option.defaultValue, "default");
          }
        } else if (option.defaultValue !== void 0) {
          this.setOptionValueWithSource(name, option.defaultValue, "default");
        }
        this.options.push(option);
        const handleOptionValue = (val, invalidValueMessage, valueSource) => {
          if (val == null && option.presetArg !== void 0) {
            val = option.presetArg;
          }
          const oldValue = this.getOptionValue(name);
          if (val !== null && option.parseArg) {
            try {
              val = option.parseArg(val, oldValue);
            } catch (err) {
              if (err.code === "commander.invalidArgument") {
                const message = `${invalidValueMessage} ${err.message}`;
                this.error(message, { exitCode: err.exitCode, code: err.code });
              }
              throw err;
            }
          } else if (val !== null && option.variadic) {
            val = option._concatValue(val, oldValue);
          }
          if (val == null) {
            if (option.negate) {
              val = false;
            } else if (option.isBoolean() || option.optional) {
              val = true;
            } else {
              val = "";
            }
          }
          this.setOptionValueWithSource(name, val, valueSource);
        };
        this.on("option:" + oname, (val) => {
          const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;
          handleOptionValue(val, invalidValueMessage, "cli");
        });
        if (option.envVar) {
          this.on("optionEnv:" + oname, (val) => {
            const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;
            handleOptionValue(val, invalidValueMessage, "env");
          });
        }
        return this;
      }
      /**
       * Internal implementation shared by .option() and .requiredOption()
       *
       * @api private
       */
      _optionEx(config, flags, description, fn, defaultValue) {
        if (typeof flags === "object" && flags instanceof Option2) {
          throw new Error("To add an Option object use addOption() instead of option() or requiredOption()");
        }
        const option = this.createOption(flags, description);
        option.makeOptionMandatory(!!config.mandatory);
        if (typeof fn === "function") {
          option.default(defaultValue).argParser(fn);
        } else if (fn instanceof RegExp) {
          const regex = fn;
          fn = (val, def) => {
            const m2 = regex.exec(val);
            return m2 ? m2[0] : def;
          };
          option.default(defaultValue).argParser(fn);
        } else {
          option.default(fn);
        }
        return this.addOption(option);
      }
      /**
       * Define option with `flags`, `description` and optional
       * coercion `fn`.
       *
       * The `flags` string contains the short and/or long flags,
       * separated by comma, a pipe or space. The following are all valid
       * all will output this way when `--help` is used.
       *
       *     "-p, --pepper"
       *     "-p|--pepper"
       *     "-p --pepper"
       *
       * @example
       * // simple boolean defaulting to undefined
       * program.option('-p, --pepper', 'add pepper');
       *
       * program.pepper
       * // => undefined
       *
       * --pepper
       * program.pepper
       * // => true
       *
       * // simple boolean defaulting to true (unless non-negated option is also defined)
       * program.option('-C, --no-cheese', 'remove cheese');
       *
       * program.cheese
       * // => true
       *
       * --no-cheese
       * program.cheese
       * // => false
       *
       * // required argument
       * program.option('-C, --chdir <path>', 'change the working directory');
       *
       * --chdir /tmp
       * program.chdir
       * // => "/tmp"
       *
       * // optional argument
       * program.option('-c, --cheese [type]', 'add cheese [marble]');
       *
       * @param {string} flags
       * @param {string} [description]
       * @param {Function|*} [fn] - custom option processing function or default value
       * @param {*} [defaultValue]
       * @return {Command} `this` command for chaining
       */
      option(flags, description, fn, defaultValue) {
        return this._optionEx({}, flags, description, fn, defaultValue);
      }
      /**
      * Add a required option which must have a value after parsing. This usually means
      * the option must be specified on the command line. (Otherwise the same as .option().)
      *
      * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.
      *
      * @param {string} flags
      * @param {string} [description]
      * @param {Function|*} [fn] - custom option processing function or default value
      * @param {*} [defaultValue]
      * @return {Command} `this` command for chaining
      */
      requiredOption(flags, description, fn, defaultValue) {
        return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);
      }
      /**
       * Alter parsing of short flags with optional values.
       *
       * @example
       * // for `.option('-f,--flag [value]'):
       * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour
       * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`
       *
       * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.
       */
      combineFlagAndOptionalValue(combine = true) {
        this._combineFlagAndOptionalValue = !!combine;
        return this;
      }
      /**
       * Allow unknown options on the command line.
       *
       * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown
       * for unknown options.
       */
      allowUnknownOption(allowUnknown = true) {
        this._allowUnknownOption = !!allowUnknown;
        return this;
      }
      /**
       * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.
       *
       * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown
       * for excess arguments.
       */
      allowExcessArguments(allowExcess = true) {
        this._allowExcessArguments = !!allowExcess;
        return this;
      }
      /**
       * Enable positional options. Positional means global options are specified before subcommands which lets
       * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.
       * The default behaviour is non-positional and global options may appear anywhere on the command line.
       *
       * @param {Boolean} [positional=true]
       */
      enablePositionalOptions(positional = true) {
        this._enablePositionalOptions = !!positional;
        return this;
      }
      /**
       * Pass through options that come after command-arguments rather than treat them as command-options,
       * so actual command-options come before command-arguments. Turning this on for a subcommand requires
       * positional options to have been enabled on the program (parent commands).
       * The default behaviour is non-positional and options may appear before or after command-arguments.
       *
       * @param {Boolean} [passThrough=true]
       * for unknown options.
       */
      passThroughOptions(passThrough = true) {
        this._passThroughOptions = !!passThrough;
        if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {
          throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");
        }
        return this;
      }
      /**
        * Whether to store option values as properties on command object,
        * or store separately (specify false). In both cases the option values can be accessed using .opts().
        *
        * @param {boolean} [storeAsProperties=true]
        * @return {Command} `this` command for chaining
        */
      storeOptionsAsProperties(storeAsProperties = true) {
        this._storeOptionsAsProperties = !!storeAsProperties;
        if (this.options.length) {
          throw new Error("call .storeOptionsAsProperties() before adding options");
        }
        return this;
      }
      /**
       * Retrieve option value.
       *
       * @param {string} key
       * @return {Object} value
       */
      getOptionValue(key) {
        if (this._storeOptionsAsProperties) {
          return this[key];
        }
        return this._optionValues[key];
      }
      /**
       * Store option value.
       *
       * @param {string} key
       * @param {Object} value
       * @return {Command} `this` command for chaining
       */
      setOptionValue(key, value) {
        return this.setOptionValueWithSource(key, value, void 0);
      }
      /**
        * Store option value and where the value came from.
        *
        * @param {string} key
        * @param {Object} value
        * @param {string} source - expected values are default/config/env/cli/implied
        * @return {Command} `this` command for chaining
        */
      setOptionValueWithSource(key, value, source) {
        if (this._storeOptionsAsProperties) {
          this[key] = value;
        } else {
          this._optionValues[key] = value;
        }
        this._optionValueSources[key] = source;
        return this;
      }
      /**
        * Get source of option value.
        * Expected values are default | config | env | cli | implied
        *
        * @param {string} key
        * @return {string}
        */
      getOptionValueSource(key) {
        return this._optionValueSources[key];
      }
      /**
        * Get source of option value. See also .optsWithGlobals().
        * Expected values are default | config | env | cli | implied
        *
        * @param {string} key
        * @return {string}
        */
      getOptionValueSourceWithGlobals(key) {
        let source;
        getCommandAndParents(this).forEach((cmd) => {
          if (cmd.getOptionValueSource(key) !== void 0) {
            source = cmd.getOptionValueSource(key);
          }
        });
        return source;
      }
      /**
       * Get user arguments from implied or explicit arguments.
       * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.
       *
       * @api private
       */
      _prepareUserArgs(argv, parseOptions) {
        if (argv !== void 0 && !Array.isArray(argv)) {
          throw new Error("first parameter to parse must be array or undefined");
        }
        parseOptions = parseOptions || {};
        if (argv === void 0) {
          argv = process3.argv;
          if (process3.versions && process3.versions.electron) {
            parseOptions.from = "electron";
          }
        }
        this.rawArgs = argv.slice();
        let userArgs;
        switch (parseOptions.from) {
          case void 0:
          case "node":
            this._scriptPath = argv[1];
            userArgs = argv.slice(2);
            break;
          case "electron":
            if (process3.defaultApp) {
              this._scriptPath = argv[1];
              userArgs = argv.slice(2);
            } else {
              userArgs = argv.slice(1);
            }
            break;
          case "user":
            userArgs = argv.slice(0);
            break;
          default:
            throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);
        }
        if (!this._name && this._scriptPath)
          this.nameFromFilename(this._scriptPath);
        this._name = this._name || "program";
        return userArgs;
      }
      /**
       * Parse `argv`, setting options and invoking commands when defined.
       *
       * The default expectation is that the arguments are from node and have the application as argv[0]
       * and the script being run in argv[1], with user parameters after that.
       *
       * @example
       * program.parse(process.argv);
       * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions
       * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]
       *
       * @param {string[]} [argv] - optional, defaults to process.argv
       * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron
       * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'
       * @return {Command} `this` command for chaining
       */
      parse(argv, parseOptions) {
        const userArgs = this._prepareUserArgs(argv, parseOptions);
        this._parseCommand([], userArgs);
        return this;
      }
      /**
       * Parse `argv`, setting options and invoking commands when defined.
       *
       * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.
       *
       * The default expectation is that the arguments are from node and have the application as argv[0]
       * and the script being run in argv[1], with user parameters after that.
       *
       * @example
       * await program.parseAsync(process.argv);
       * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions
       * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]
       *
       * @param {string[]} [argv]
       * @param {Object} [parseOptions]
       * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'
       * @return {Promise}
       */
      async parseAsync(argv, parseOptions) {
        const userArgs = this._prepareUserArgs(argv, parseOptions);
        await this._parseCommand([], userArgs);
        return this;
      }
      /**
       * Execute a sub-command executable.
       *
       * @api private
       */
      _executeSubCommand(subcommand, args) {
        args = args.slice();
        let launchWithNode = false;
        const sourceExt = [".js", ".ts", ".tsx", ".mjs", ".cjs"];
        function findFile(baseDir, baseName) {
          const localBin = path11.resolve(baseDir, baseName);
          if (fs5.existsSync(localBin))
            return localBin;
          if (sourceExt.includes(path11.extname(baseName)))
            return void 0;
          const foundExt = sourceExt.find((ext) => fs5.existsSync(`${localBin}${ext}`));
          if (foundExt)
            return `${localBin}${foundExt}`;
          return void 0;
        }
        this._checkForMissingMandatoryOptions();
        this._checkForConflictingOptions();
        let executableFile = subcommand._executableFile || `${this._name}-${subcommand._name}`;
        let executableDir = this._executableDir || "";
        if (this._scriptPath) {
          let resolvedScriptPath;
          try {
            resolvedScriptPath = fs5.realpathSync(this._scriptPath);
          } catch (err) {
            resolvedScriptPath = this._scriptPath;
          }
          executableDir = path11.resolve(path11.dirname(resolvedScriptPath), executableDir);
        }
        if (executableDir) {
          let localFile = findFile(executableDir, executableFile);
          if (!localFile && !subcommand._executableFile && this._scriptPath) {
            const legacyName = path11.basename(this._scriptPath, path11.extname(this._scriptPath));
            if (legacyName !== this._name) {
              localFile = findFile(executableDir, `${legacyName}-${subcommand._name}`);
            }
          }
          executableFile = localFile || executableFile;
        }
        launchWithNode = sourceExt.includes(path11.extname(executableFile));
        let proc;
        if (process3.platform !== "win32") {
          if (launchWithNode) {
            args.unshift(executableFile);
            args = incrementNodeInspectorPort(process3.execArgv).concat(args);
            proc = childProcess.spawn(process3.argv[0], args, { stdio: "inherit" });
          } else {
            proc = childProcess.spawn(executableFile, args, { stdio: "inherit" });
          }
        } else {
          args.unshift(executableFile);
          args = incrementNodeInspectorPort(process3.execArgv).concat(args);
          proc = childProcess.spawn(process3.execPath, args, { stdio: "inherit" });
        }
        if (!proc.killed) {
          const signals = ["SIGUSR1", "SIGUSR2", "SIGTERM", "SIGINT", "SIGHUP"];
          signals.forEach((signal) => {
            process3.on(signal, () => {
              if (proc.killed === false && proc.exitCode === null) {
                proc.kill(signal);
              }
            });
          });
        }
        const exitCallback = this._exitCallback;
        if (!exitCallback) {
          proc.on("close", process3.exit.bind(process3));
        } else {
          proc.on("close", () => {
            exitCallback(new CommanderError2(process3.exitCode || 0, "commander.executeSubCommandAsync", "(close)"));
          });
        }
        proc.on("error", (err) => {
          if (err.code === "ENOENT") {
            const executableDirMessage = executableDir ? `searched for local subcommand relative to directory '${executableDir}'` : "no directory for search for local subcommand, use .executableDir() to supply a custom directory";
            const executableMissing = `'${executableFile}' does not exist
 - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name or path
 - ${executableDirMessage}`;
            throw new Error(executableMissing);
          } else if (err.code === "EACCES") {
            throw new Error(`'${executableFile}' not executable`);
          }
          if (!exitCallback) {
            process3.exit(1);
          } else {
            const wrappedError = new CommanderError2(1, "commander.executeSubCommandAsync", "(error)");
            wrappedError.nestedError = err;
            exitCallback(wrappedError);
          }
        });
        this.runningCommand = proc;
      }
      /**
       * @api private
       */
      _dispatchSubcommand(commandName, operands, unknown) {
        const subCommand = this._findCommand(commandName);
        if (!subCommand)
          this.help({ error: true });
        let hookResult;
        hookResult = this._chainOrCallSubCommandHook(hookResult, subCommand, "preSubcommand");
        hookResult = this._chainOrCall(hookResult, () => {
          if (subCommand._executableHandler) {
            this._executeSubCommand(subCommand, operands.concat(unknown));
          } else {
            return subCommand._parseCommand(operands, unknown);
          }
        });
        return hookResult;
      }
      /**
       * Check this.args against expected this._args.
       *
       * @api private
       */
      _checkNumberOfArguments() {
        this._args.forEach((arg, i) => {
          if (arg.required && this.args[i] == null) {
            this.missingArgument(arg.name());
          }
        });
        if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {
          return;
        }
        if (this.args.length > this._args.length) {
          this._excessArguments(this.args);
        }
      }
      /**
       * Process this.args using this._args and save as this.processedArgs!
       *
       * @api private
       */
      _processArguments() {
        const myParseArg = (argument, value, previous) => {
          let parsedValue = value;
          if (value !== null && argument.parseArg) {
            try {
              parsedValue = argument.parseArg(value, previous);
            } catch (err) {
              if (err.code === "commander.invalidArgument") {
                const message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;
                this.error(message, { exitCode: err.exitCode, code: err.code });
              }
              throw err;
            }
          }
          return parsedValue;
        };
        this._checkNumberOfArguments();
        const processedArgs = [];
        this._args.forEach((declaredArg, index) => {
          let value = declaredArg.defaultValue;
          if (declaredArg.variadic) {
            if (index < this.args.length) {
              value = this.args.slice(index);
              if (declaredArg.parseArg) {
                value = value.reduce((processed, v2) => {
                  return myParseArg(declaredArg, v2, processed);
                }, declaredArg.defaultValue);
              }
            } else if (value === void 0) {
              value = [];
            }
          } else if (index < this.args.length) {
            value = this.args[index];
            if (declaredArg.parseArg) {
              value = myParseArg(declaredArg, value, declaredArg.defaultValue);
            }
          }
          processedArgs[index] = value;
        });
        this.processedArgs = processedArgs;
      }
      /**
       * Once we have a promise we chain, but call synchronously until then.
       *
       * @param {Promise|undefined} promise
       * @param {Function} fn
       * @return {Promise|undefined}
       * @api private
       */
      _chainOrCall(promise, fn) {
        if (promise && promise.then && typeof promise.then === "function") {
          return promise.then(() => fn());
        }
        return fn();
      }
      /**
       *
       * @param {Promise|undefined} promise
       * @param {string} event
       * @return {Promise|undefined}
       * @api private
       */
      _chainOrCallHooks(promise, event) {
        let result = promise;
        const hooks = [];
        getCommandAndParents(this).reverse().filter((cmd) => cmd._lifeCycleHooks[event] !== void 0).forEach((hookedCommand) => {
          hookedCommand._lifeCycleHooks[event].forEach((callback) => {
            hooks.push({ hookedCommand, callback });
          });
        });
        if (event === "postAction") {
          hooks.reverse();
        }
        hooks.forEach((hookDetail) => {
          result = this._chainOrCall(result, () => {
            return hookDetail.callback(hookDetail.hookedCommand, this);
          });
        });
        return result;
      }
      /**
       *
       * @param {Promise|undefined} promise
       * @param {Command} subCommand
       * @param {string} event
       * @return {Promise|undefined}
       * @api private
       */
      _chainOrCallSubCommandHook(promise, subCommand, event) {
        let result = promise;
        if (this._lifeCycleHooks[event] !== void 0) {
          this._lifeCycleHooks[event].forEach((hook) => {
            result = this._chainOrCall(result, () => {
              return hook(this, subCommand);
            });
          });
        }
        return result;
      }
      /**
       * Process arguments in context of this command.
       * Returns action result, in case it is a promise.
       *
       * @api private
       */
      _parseCommand(operands, unknown) {
        const parsed = this.parseOptions(unknown);
        this._parseOptionsEnv();
        this._parseOptionsImplied();
        operands = operands.concat(parsed.operands);
        unknown = parsed.unknown;
        this.args = operands.concat(unknown);
        if (operands && this._findCommand(operands[0])) {
          return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);
        }
        if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {
          if (operands.length === 1) {
            this.help();
          }
          return this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);
        }
        if (this._defaultCommandName) {
          outputHelpIfRequested(this, unknown);
          return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);
        }
        if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {
          this.help({ error: true });
        }
        outputHelpIfRequested(this, parsed.unknown);
        this._checkForMissingMandatoryOptions();
        this._checkForConflictingOptions();
        const checkForUnknownOptions = () => {
          if (parsed.unknown.length > 0) {
            this.unknownOption(parsed.unknown[0]);
          }
        };
        const commandEvent = `command:${this.name()}`;
        if (this._actionHandler) {
          checkForUnknownOptions();
          this._processArguments();
          let actionResult;
          actionResult = this._chainOrCallHooks(actionResult, "preAction");
          actionResult = this._chainOrCall(actionResult, () => this._actionHandler(this.processedArgs));
          if (this.parent) {
            actionResult = this._chainOrCall(actionResult, () => {
              this.parent.emit(commandEvent, operands, unknown);
            });
          }
          actionResult = this._chainOrCallHooks(actionResult, "postAction");
          return actionResult;
        }
        if (this.parent && this.parent.listenerCount(commandEvent)) {
          checkForUnknownOptions();
          this._processArguments();
          this.parent.emit(commandEvent, operands, unknown);
        } else if (operands.length) {
          if (this._findCommand("*")) {
            return this._dispatchSubcommand("*", operands, unknown);
          }
          if (this.listenerCount("command:*")) {
            this.emit("command:*", operands, unknown);
          } else if (this.commands.length) {
            this.unknownCommand();
          } else {
            checkForUnknownOptions();
            this._processArguments();
          }
        } else if (this.commands.length) {
          checkForUnknownOptions();
          this.help({ error: true });
        } else {
          checkForUnknownOptions();
          this._processArguments();
        }
      }
      /**
       * Find matching command.
       *
       * @api private
       */
      _findCommand(name) {
        if (!name)
          return void 0;
        return this.commands.find((cmd) => cmd._name === name || cmd._aliases.includes(name));
      }
      /**
       * Return an option matching `arg` if any.
       *
       * @param {string} arg
       * @return {Option}
       * @api private
       */
      _findOption(arg) {
        return this.options.find((option) => option.is(arg));
      }
      /**
       * Display an error message if a mandatory option does not have a value.
       * Called after checking for help flags in leaf subcommand.
       *
       * @api private
       */
      _checkForMissingMandatoryOptions() {
        for (let cmd = this; cmd; cmd = cmd.parent) {
          cmd.options.forEach((anOption) => {
            if (anOption.mandatory && cmd.getOptionValue(anOption.attributeName()) === void 0) {
              cmd.missingMandatoryOptionValue(anOption);
            }
          });
        }
      }
      /**
       * Display an error message if conflicting options are used together in this.
       *
       * @api private
       */
      _checkForConflictingLocalOptions() {
        const definedNonDefaultOptions = this.options.filter(
          (option) => {
            const optionKey = option.attributeName();
            if (this.getOptionValue(optionKey) === void 0) {
              return false;
            }
            return this.getOptionValueSource(optionKey) !== "default";
          }
        );
        const optionsWithConflicting = definedNonDefaultOptions.filter(
          (option) => option.conflictsWith.length > 0
        );
        optionsWithConflicting.forEach((option) => {
          const conflictingAndDefined = definedNonDefaultOptions.find(
            (defined) => option.conflictsWith.includes(defined.attributeName())
          );
          if (conflictingAndDefined) {
            this._conflictingOption(option, conflictingAndDefined);
          }
        });
      }
      /**
       * Display an error message if conflicting options are used together.
       * Called after checking for help flags in leaf subcommand.
       *
       * @api private
       */
      _checkForConflictingOptions() {
        for (let cmd = this; cmd; cmd = cmd.parent) {
          cmd._checkForConflictingLocalOptions();
        }
      }
      /**
       * Parse options from `argv` removing known options,
       * and return argv split into operands and unknown arguments.
       *
       * Examples:
       *
       *     argv => operands, unknown
       *     --known kkk op => [op], []
       *     op --known kkk => [op], []
       *     sub --unknown uuu op => [sub], [--unknown uuu op]
       *     sub -- --unknown uuu op => [sub --unknown uuu op], []
       *
       * @param {String[]} argv
       * @return {{operands: String[], unknown: String[]}}
       */
      parseOptions(argv) {
        const operands = [];
        const unknown = [];
        let dest = operands;
        const args = argv.slice();
        function maybeOption(arg) {
          return arg.length > 1 && arg[0] === "-";
        }
        let activeVariadicOption = null;
        while (args.length) {
          const arg = args.shift();
          if (arg === "--") {
            if (dest === unknown)
              dest.push(arg);
            dest.push(...args);
            break;
          }
          if (activeVariadicOption && !maybeOption(arg)) {
            this.emit(`option:${activeVariadicOption.name()}`, arg);
            continue;
          }
          activeVariadicOption = null;
          if (maybeOption(arg)) {
            const option = this._findOption(arg);
            if (option) {
              if (option.required) {
                const value = args.shift();
                if (value === void 0)
                  this.optionMissingArgument(option);
                this.emit(`option:${option.name()}`, value);
              } else if (option.optional) {
                let value = null;
                if (args.length > 0 && !maybeOption(args[0])) {
                  value = args.shift();
                }
                this.emit(`option:${option.name()}`, value);
              } else {
                this.emit(`option:${option.name()}`);
              }
              activeVariadicOption = option.variadic ? option : null;
              continue;
            }
          }
          if (arg.length > 2 && arg[0] === "-" && arg[1] !== "-") {
            const option = this._findOption(`-${arg[1]}`);
            if (option) {
              if (option.required || option.optional && this._combineFlagAndOptionalValue) {
                this.emit(`option:${option.name()}`, arg.slice(2));
              } else {
                this.emit(`option:${option.name()}`);
                args.unshift(`-${arg.slice(2)}`);
              }
              continue;
            }
          }
          if (/^--[^=]+=/.test(arg)) {
            const index = arg.indexOf("=");
            const option = this._findOption(arg.slice(0, index));
            if (option && (option.required || option.optional)) {
              this.emit(`option:${option.name()}`, arg.slice(index + 1));
              continue;
            }
          }
          if (maybeOption(arg)) {
            dest = unknown;
          }
          if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {
            if (this._findCommand(arg)) {
              operands.push(arg);
              if (args.length > 0)
                unknown.push(...args);
              break;
            } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {
              operands.push(arg);
              if (args.length > 0)
                operands.push(...args);
              break;
            } else if (this._defaultCommandName) {
              unknown.push(arg);
              if (args.length > 0)
                unknown.push(...args);
              break;
            }
          }
          if (this._passThroughOptions) {
            dest.push(arg);
            if (args.length > 0)
              dest.push(...args);
            break;
          }
          dest.push(arg);
        }
        return { operands, unknown };
      }
      /**
       * Return an object containing local option values as key-value pairs.
       *
       * @return {Object}
       */
      opts() {
        if (this._storeOptionsAsProperties) {
          const result = {};
          const len = this.options.length;
          for (let i = 0; i < len; i++) {
            const key = this.options[i].attributeName();
            result[key] = key === this._versionOptionName ? this._version : this[key];
          }
          return result;
        }
        return this._optionValues;
      }
      /**
       * Return an object containing merged local and global option values as key-value pairs.
       *
       * @return {Object}
       */
      optsWithGlobals() {
        return getCommandAndParents(this).reduce(
          (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),
          {}
        );
      }
      /**
       * Display error message and exit (or call exitOverride).
       *
       * @param {string} message
       * @param {Object} [errorOptions]
       * @param {string} [errorOptions.code] - an id string representing the error
       * @param {number} [errorOptions.exitCode] - used with process.exit
       */
      error(message, errorOptions) {
        this._outputConfiguration.outputError(`${message}
`, this._outputConfiguration.writeErr);
        if (typeof this._showHelpAfterError === "string") {
          this._outputConfiguration.writeErr(`${this._showHelpAfterError}
`);
        } else if (this._showHelpAfterError) {
          this._outputConfiguration.writeErr("\n");
          this.outputHelp({ error: true });
        }
        const config = errorOptions || {};
        const exitCode = config.exitCode || 1;
        const code = config.code || "commander.error";
        this._exit(exitCode, code, message);
      }
      /**
       * Apply any option related environment variables, if option does
       * not have a value from cli or client code.
       *
       * @api private
       */
      _parseOptionsEnv() {
        this.options.forEach((option) => {
          if (option.envVar && option.envVar in process3.env) {
            const optionKey = option.attributeName();
            if (this.getOptionValue(optionKey) === void 0 || ["default", "config", "env"].includes(this.getOptionValueSource(optionKey))) {
              if (option.required || option.optional) {
                this.emit(`optionEnv:${option.name()}`, process3.env[option.envVar]);
              } else {
                this.emit(`optionEnv:${option.name()}`);
              }
            }
          }
        });
      }
      /**
       * Apply any implied option values, if option is undefined or default value.
       *
       * @api private
       */
      _parseOptionsImplied() {
        const dualHelper = new DualOptions(this.options);
        const hasCustomOptionValue = (optionKey) => {
          return this.getOptionValue(optionKey) !== void 0 && !["default", "implied"].includes(this.getOptionValueSource(optionKey));
        };
        this.options.filter((option) => option.implied !== void 0 && hasCustomOptionValue(option.attributeName()) && dualHelper.valueFromOption(this.getOptionValue(option.attributeName()), option)).forEach((option) => {
          Object.keys(option.implied).filter((impliedKey) => !hasCustomOptionValue(impliedKey)).forEach((impliedKey) => {
            this.setOptionValueWithSource(impliedKey, option.implied[impliedKey], "implied");
          });
        });
      }
      /**
       * Argument `name` is missing.
       *
       * @param {string} name
       * @api private
       */
      missingArgument(name) {
        const message = `error: missing required argument '${name}'`;
        this.error(message, { code: "commander.missingArgument" });
      }
      /**
       * `Option` is missing an argument.
       *
       * @param {Option} option
       * @api private
       */
      optionMissingArgument(option) {
        const message = `error: option '${option.flags}' argument missing`;
        this.error(message, { code: "commander.optionMissingArgument" });
      }
      /**
       * `Option` does not have a value, and is a mandatory option.
       *
       * @param {Option} option
       * @api private
       */
      missingMandatoryOptionValue(option) {
        const message = `error: required option '${option.flags}' not specified`;
        this.error(message, { code: "commander.missingMandatoryOptionValue" });
      }
      /**
       * `Option` conflicts with another option.
       *
       * @param {Option} option
       * @param {Option} conflictingOption
       * @api private
       */
      _conflictingOption(option, conflictingOption) {
        const findBestOptionFromValue = (option2) => {
          const optionKey = option2.attributeName();
          const optionValue = this.getOptionValue(optionKey);
          const negativeOption = this.options.find((target) => target.negate && optionKey === target.attributeName());
          const positiveOption = this.options.find((target) => !target.negate && optionKey === target.attributeName());
          if (negativeOption && (negativeOption.presetArg === void 0 && optionValue === false || negativeOption.presetArg !== void 0 && optionValue === negativeOption.presetArg)) {
            return negativeOption;
          }
          return positiveOption || option2;
        };
        const getErrorMessage = (option2) => {
          const bestOption = findBestOptionFromValue(option2);
          const optionKey = bestOption.attributeName();
          const source = this.getOptionValueSource(optionKey);
          if (source === "env") {
            return `environment variable '${bestOption.envVar}'`;
          }
          return `option '${bestOption.flags}'`;
        };
        const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;
        this.error(message, { code: "commander.conflictingOption" });
      }
      /**
       * Unknown option `flag`.
       *
       * @param {string} flag
       * @api private
       */
      unknownOption(flag) {
        if (this._allowUnknownOption)
          return;
        let suggestion = "";
        if (flag.startsWith("--") && this._showSuggestionAfterError) {
          let candidateFlags = [];
          let command = this;
          do {
            const moreFlags = command.createHelp().visibleOptions(command).filter((option) => option.long).map((option) => option.long);
            candidateFlags = candidateFlags.concat(moreFlags);
            command = command.parent;
          } while (command && !command._enablePositionalOptions);
          suggestion = suggestSimilar(flag, candidateFlags);
        }
        const message = `error: unknown option '${flag}'${suggestion}`;
        this.error(message, { code: "commander.unknownOption" });
      }
      /**
       * Excess arguments, more than expected.
       *
       * @param {string[]} receivedArgs
       * @api private
       */
      _excessArguments(receivedArgs) {
        if (this._allowExcessArguments)
          return;
        const expected = this._args.length;
        const s = expected === 1 ? "" : "s";
        const forSubcommand = this.parent ? ` for '${this.name()}'` : "";
        const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;
        this.error(message, { code: "commander.excessArguments" });
      }
      /**
       * Unknown command.
       *
       * @api private
       */
      unknownCommand() {
        const unknownName = this.args[0];
        let suggestion = "";
        if (this._showSuggestionAfterError) {
          const candidateNames = [];
          this.createHelp().visibleCommands(this).forEach((command) => {
            candidateNames.push(command.name());
            if (command.alias())
              candidateNames.push(command.alias());
          });
          suggestion = suggestSimilar(unknownName, candidateNames);
        }
        const message = `error: unknown command '${unknownName}'${suggestion}`;
        this.error(message, { code: "commander.unknownCommand" });
      }
      /**
       * Set the program version to `str`.
       *
       * This method auto-registers the "-V, --version" flag
       * which will print the version number when passed.
       *
       * You can optionally supply the  flags and description to override the defaults.
       *
       * @param {string} str
       * @param {string} [flags]
       * @param {string} [description]
       * @return {this | string} `this` command for chaining, or version string if no arguments
       */
      version(str, flags, description) {
        if (str === void 0)
          return this._version;
        this._version = str;
        flags = flags || "-V, --version";
        description = description || "output the version number";
        const versionOption = this.createOption(flags, description);
        this._versionOptionName = versionOption.attributeName();
        this.options.push(versionOption);
        this.on("option:" + versionOption.name(), () => {
          this._outputConfiguration.writeOut(`${str}
`);
          this._exit(0, "commander.version", str);
        });
        return this;
      }
      /**
       * Set the description.
       *
       * @param {string} [str]
       * @param {Object} [argsDescription]
       * @return {string|Command}
       */
      description(str, argsDescription) {
        if (str === void 0 && argsDescription === void 0)
          return this._description;
        this._description = str;
        if (argsDescription) {
          this._argsDescription = argsDescription;
        }
        return this;
      }
      /**
       * Set the summary. Used when listed as subcommand of parent.
       *
       * @param {string} [str]
       * @return {string|Command}
       */
      summary(str) {
        if (str === void 0)
          return this._summary;
        this._summary = str;
        return this;
      }
      /**
       * Set an alias for the command.
       *
       * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.
       *
       * @param {string} [alias]
       * @return {string|Command}
       */
      alias(alias) {
        if (alias === void 0)
          return this._aliases[0];
        let command = this;
        if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {
          command = this.commands[this.commands.length - 1];
        }
        if (alias === command._name)
          throw new Error("Command alias can't be the same as its name");
        command._aliases.push(alias);
        return this;
      }
      /**
       * Set aliases for the command.
       *
       * Only the first alias is shown in the auto-generated help.
       *
       * @param {string[]} [aliases]
       * @return {string[]|Command}
       */
      aliases(aliases) {
        if (aliases === void 0)
          return this._aliases;
        aliases.forEach((alias) => this.alias(alias));
        return this;
      }
      /**
       * Set / get the command usage `str`.
       *
       * @param {string} [str]
       * @return {String|Command}
       */
      usage(str) {
        if (str === void 0) {
          if (this._usage)
            return this._usage;
          const args = this._args.map((arg) => {
            return humanReadableArgName(arg);
          });
          return [].concat(
            this.options.length || this._hasHelpOption ? "[options]" : [],
            this.commands.length ? "[command]" : [],
            this._args.length ? args : []
          ).join(" ");
        }
        this._usage = str;
        return this;
      }
      /**
       * Get or set the name of the command.
       *
       * @param {string} [str]
       * @return {string|Command}
       */
      name(str) {
        if (str === void 0)
          return this._name;
        this._name = str;
        return this;
      }
      /**
       * Set the name of the command from script filename, such as process.argv[1],
       * or require.main.filename, or __filename.
       *
       * (Used internally and public although not documented in README.)
       *
       * @example
       * program.nameFromFilename(require.main.filename);
       *
       * @param {string} filename
       * @return {Command}
       */
      nameFromFilename(filename) {
        this._name = path11.basename(filename, path11.extname(filename));
        return this;
      }
      /**
       * Get or set the directory for searching for executable subcommands of this command.
       *
       * @example
       * program.executableDir(__dirname);
       * // or
       * program.executableDir('subcommands');
       *
       * @param {string} [path]
       * @return {string|Command}
       */
      executableDir(path12) {
        if (path12 === void 0)
          return this._executableDir;
        this._executableDir = path12;
        return this;
      }
      /**
       * Return program help documentation.
       *
       * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout
       * @return {string}
       */
      helpInformation(contextOptions) {
        const helper = this.createHelp();
        if (helper.helpWidth === void 0) {
          helper.helpWidth = contextOptions && contextOptions.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();
        }
        return helper.formatHelp(this, helper);
      }
      /**
       * @api private
       */
      _getHelpContext(contextOptions) {
        contextOptions = contextOptions || {};
        const context = { error: !!contextOptions.error };
        let write;
        if (context.error) {
          write = (arg) => this._outputConfiguration.writeErr(arg);
        } else {
          write = (arg) => this._outputConfiguration.writeOut(arg);
        }
        context.write = contextOptions.write || write;
        context.command = this;
        return context;
      }
      /**
       * Output help information for this command.
       *
       * Outputs built-in help, and custom text added using `.addHelpText()`.
       *
       * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout
       */
      outputHelp(contextOptions) {
        let deprecatedCallback;
        if (typeof contextOptions === "function") {
          deprecatedCallback = contextOptions;
          contextOptions = void 0;
        }
        const context = this._getHelpContext(contextOptions);
        getCommandAndParents(this).reverse().forEach((command) => command.emit("beforeAllHelp", context));
        this.emit("beforeHelp", context);
        let helpInformation = this.helpInformation(context);
        if (deprecatedCallback) {
          helpInformation = deprecatedCallback(helpInformation);
          if (typeof helpInformation !== "string" && !Buffer.isBuffer(helpInformation)) {
            throw new Error("outputHelp callback must return a string or a Buffer");
          }
        }
        context.write(helpInformation);
        this.emit(this._helpLongFlag);
        this.emit("afterHelp", context);
        getCommandAndParents(this).forEach((command) => command.emit("afterAllHelp", context));
      }
      /**
       * You can pass in flags and a description to override the help
       * flags and help description for your command. Pass in false to
       * disable the built-in help option.
       *
       * @param {string | boolean} [flags]
       * @param {string} [description]
       * @return {Command} `this` command for chaining
       */
      helpOption(flags, description) {
        if (typeof flags === "boolean") {
          this._hasHelpOption = flags;
          return this;
        }
        this._helpFlags = flags || this._helpFlags;
        this._helpDescription = description || this._helpDescription;
        const helpFlags = splitOptionFlags(this._helpFlags);
        this._helpShortFlag = helpFlags.shortFlag;
        this._helpLongFlag = helpFlags.longFlag;
        return this;
      }
      /**
       * Output help information and exit.
       *
       * Outputs built-in help, and custom text added using `.addHelpText()`.
       *
       * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout
       */
      help(contextOptions) {
        this.outputHelp(contextOptions);
        let exitCode = process3.exitCode || 0;
        if (exitCode === 0 && contextOptions && typeof contextOptions !== "function" && contextOptions.error) {
          exitCode = 1;
        }
        this._exit(exitCode, "commander.help", "(outputHelp)");
      }
      /**
       * Add additional text to be displayed with the built-in help.
       *
       * Position is 'before' or 'after' to affect just this command,
       * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.
       *
       * @param {string} position - before or after built-in help
       * @param {string | Function} text - string to add, or a function returning a string
       * @return {Command} `this` command for chaining
       */
      addHelpText(position, text) {
        const allowedValues = ["beforeAll", "before", "after", "afterAll"];
        if (!allowedValues.includes(position)) {
          throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${allowedValues.join("', '")}'`);
        }
        const helpEvent = `${position}Help`;
        this.on(helpEvent, (context) => {
          let helpStr;
          if (typeof text === "function") {
            helpStr = text({ error: context.error, command: context.command });
          } else {
            helpStr = text;
          }
          if (helpStr) {
            context.write(`${helpStr}
`);
          }
        });
        return this;
      }
    };
    function outputHelpIfRequested(cmd, args) {
      const helpOption = cmd._hasHelpOption && args.find((arg) => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);
      if (helpOption) {
        cmd.outputHelp();
        cmd._exit(0, "commander.helpDisplayed", "(outputHelp)");
      }
    }
    function incrementNodeInspectorPort(args) {
      return args.map((arg) => {
        if (!arg.startsWith("--inspect")) {
          return arg;
        }
        let debugOption;
        let debugHost = "127.0.0.1";
        let debugPort = "9229";
        let match;
        if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {
          debugOption = match[1];
        } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {
          debugOption = match[1];
          if (/^\d+$/.test(match[3])) {
            debugPort = match[3];
          } else {
            debugHost = match[3];
          }
        } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/)) !== null) {
          debugOption = match[1];
          debugHost = match[3];
          debugPort = match[4];
        }
        if (debugOption && debugPort !== "0") {
          return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;
        }
        return arg;
      });
    }
    function getCommandAndParents(startCommand) {
      const result = [];
      for (let command = startCommand; command; command = command.parent) {
        result.push(command);
      }
      return result;
    }
    exports.Command = Command2;
  }
});

// node_modules/commander/index.js
var require_commander = __commonJS({
  "node_modules/commander/index.js"(exports, module2) {
    var { Argument: Argument2 } = require_argument();
    var { Command: Command2 } = require_command();
    var { CommanderError: CommanderError2, InvalidArgumentError: InvalidArgumentError2 } = require_error();
    var { Help: Help2 } = require_help();
    var { Option: Option2 } = require_option();
    exports = module2.exports = new Command2();
    exports.program = exports;
    exports.Argument = Argument2;
    exports.Command = Command2;
    exports.CommanderError = CommanderError2;
    exports.Help = Help2;
    exports.InvalidArgumentError = InvalidArgumentError2;
    exports.InvalidOptionArgumentError = InvalidArgumentError2;
    exports.Option = Option2;
  }
});

// ../core/node_modules/words-count/dist/index.js
var require_dist = __commonJS({
  "../core/node_modules/words-count/dist/index.js"(exports, module2) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define("words-count", [], t) : "object" == typeof exports ? exports["words-count"] = t() : e["words-count"] = t();
    }(exports, function() {
      return (() => {
        "use strict";
        var e = { 314: (e2, t2, r2) => {
          r2.r(t2), r2.d(t2, { default: () => a, wordsCount: () => c2, wordsSplit: () => i, wordsDetect: () => u2 });
          var o = [",", "\uFF0C", ".", "\u3002", ":", "\uFF1A", ";", "\uFF1B", "[", "]", "\u3010", "]", "\u3011", "{", "\uFF5B", "}", "\uFF5D", "(", "\uFF08", ")", "\uFF09", "<", "\u300A", ">", "\u300B", "$", "\uFFE5", "!", "\uFF01", "?", "\uFF1F", "~", "\uFF5E", "'", "\u2019", '"', "\u201C", "\u201D", "*", "/", "\\", "&", "%", "@", "#", "^", "\u3001", "\u3001", "\u3001", "\u3001"], n = { words: [], count: 0 }, u2 = function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (!e3)
              return n;
            var r3 = String(e3);
            if ("" === r3.trim())
              return n;
            var u3 = t3.punctuationAsBreaker ? " " : "", c3 = t3.disableDefaultPunctuation ? [] : o, i2 = t3.punctuation || [], a2 = c3.concat(i2);
            a2.forEach(function(e4) {
              var t4 = new RegExp("\\" + e4, "g");
              r3 = r3.replace(t4, u3);
            }), r3 = (r3 = (r3 = (r3 = r3.replace(/[\uFF00-\uFFEF\u2000-\u206F]/g, "")).replace(/\s+/, " ")).split(" ")).filter(function(e4) {
              return e4.trim();
            });
            var d = "(\\d+)|[a-zA-Z\xC0-\xFF\u0100-\u017F\u0180-\u024F\u0250-\u02AF\u1E00-\u1EFF\u0400-\u04FF\u0500-\u052F\u0D00-\u0D7F]+|", f = "\u2E80-\u2EFF\u2F00-\u2FDF\u3000-\u303F\u31C0-\u31EF\u3200-\u32FF\u3300-\u33FF\u3400-\u3FFF\u4000-\u4DBF\u4E00-\u4FFF\u5000-\u5FFF\u6000-\u6FFF\u7000-\u7FFF\u8000-\u8FFF\u9000-\u9FFF\uF900-\uFAFF", p2 = "\u3040-\u309F\u30A0-\u30FF\u31F0-\u31FF\u3190-\u319F", s = "\u1100-\u11FF\u3130-\u318F\uA960-\uA97F\uAC00-\uAFFF\uB000-\uBFFF\uC000-\uCFFF\uD000-\uD7AF\uD7B0-\uD7FF", l = new RegExp(d + "[" + f + p2 + s + "]", "g"), v2 = [];
            return r3.forEach(function(e4) {
              var t4, r4 = [];
              do {
                (t4 = l.exec(e4)) && r4.push(t4[0]);
              } while (t4);
              0 === r4.length ? v2.push(e4) : v2 = v2.concat(r4);
            }), { words: v2, count: v2.length };
          }, c2 = function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = u2(e3, t3), o2 = r3.count;
            return o2;
          }, i = function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = u2(e3, t3), o2 = r3.words;
            return o2;
          };
          const a = c2;
        } }, t = {};
        function r(o) {
          if (t[o])
            return t[o].exports;
          var n = t[o] = { exports: {} };
          return e[o](n, n.exports, r), n.exports;
        }
        return r.d = (e2, t2) => {
          for (var o in t2)
            r.o(t2, o) && !r.o(e2, o) && Object.defineProperty(e2, o, { enumerable: true, get: t2[o] });
        }, r.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r.r = (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, r(314);
      })();
    });
  }
});

// ../helpers/utils.js
var require_utils = __commonJS({
  "../helpers/utils.js"(exports) {
    var { createHash } = require("crypto");
    function generateGuid(str) {
      const sidContentHash = createHash("sha256");
      sidContentHash.update(str, "utf8");
      return sidContentHash.digest().toString("base64").substring(0, 43).replaceAll("+", "-").replaceAll("/", "_");
    }
    exports.generateGuid = generateGuid;
    exports.generateFullyQualifiedGuid = function generateFullyQualifiedGuid(rid, sid, str) {
      return generateGuid(`${rid}|${sid}|${str}`);
    };
    function consolidateDecodedParts(parts, flags, convertToString) {
      const consolidatedParts = [];
      let accumulatedString = "";
      for (const part of parts) {
        if (part.t === "s" || typeof part === "string") {
          accumulatedString += typeof part === "string" ? part : part.v;
          part.flag && (flags[part.flag] = true);
        } else {
          if (accumulatedString.length > 0) {
            consolidatedParts.push(convertToString ? accumulatedString : { t: "s", v: accumulatedString });
            accumulatedString = "";
          }
          consolidatedParts.push(part);
        }
      }
      if (accumulatedString.length > 0) {
        consolidatedParts.push(convertToString ? accumulatedString : { t: "s", v: accumulatedString });
      }
      return consolidatedParts;
    }
    exports.consolidateDecodedParts = consolidateDecodedParts;
    function decodeNormalizedString(nstr, decoderList, flags = {}) {
      if (decoderList) {
        for (const decoder of decoderList) {
          nstr = consolidateDecodedParts(decoder(nstr), flags);
        }
      }
      return consolidateDecodedParts(nstr, flags, true);
    }
    exports.decodeNormalizedString = decodeNormalizedString;
    exports.getNormalizedString = function getNormalizedString(str, decoderList, flags = {}) {
      return decodeNormalizedString([{ t: "s", v: str }], decoderList, flags);
    };
    exports.partEncoderMaker = function partEncoderMaker(textEncoders, codeEncoders) {
      return function encodePart(part, flags) {
        const encoders = typeof part === "string" ? textEncoders : codeEncoders;
        const str = typeof part === "string" ? part : part.v;
        if (encoders) {
          return encoders.reduce((s, encoder) => encoder(s, flags), str);
        } else {
          return str;
        }
      };
    };
    exports.flattenNormalizedSourceToOrdinal = function flattenNormalizedSourceToOrdinal(nsrc) {
      return nsrc.map((e) => typeof e === "string" ? e : `{{${e.t}}}`).join("");
    };
    function flattenNormalizedSourceV1(nsrc) {
      const normalizedStr = [], phMap = {};
      let phIdx = 0;
      for (const part of nsrc) {
        if (typeof part === "string") {
          normalizedStr.push(part);
        } else {
          phIdx++;
          const phPrefix = phIdx < 26 ? String.fromCharCode(96 + phIdx) : `z${phIdx}`;
          const mangledPh = `${phPrefix}_${part.t}_${(part.v?.match(/[0-9A-Za-z_]+/) || [""])[0]}`;
          normalizedStr.push(`{{${mangledPh}}}`);
          phMap[mangledPh] = {
            ...part,
            v1: mangledPh
          };
        }
      }
      return [normalizedStr.join(""), phMap];
    }
    exports.flattenNormalizedSourceV1 = flattenNormalizedSourceV1;
    exports.extractNormalizedPartsV1 = function extractNormalizedPartsV1(str, phMap) {
      const normalizedParts = [];
      let pos = 0;
      for (const match of str.matchAll(/{{(?<ph>(?<phIdx>[a-y]|z\d+)_(?<t>x|bx|ex)_(?<phName>[0-9A-Za-z_]*))}}/g)) {
        if (match.index > pos) {
          normalizedParts.push(match.input.substring(pos, match.index));
        }
        normalizedParts.push(phMap[match.groups.ph] && {
          ...phMap[match.groups.ph],
          v1: match.groups.ph
          // TODO: why do we need this? shouldn't the phMap already contain v1?
        });
        pos = match.index + match[0].length;
      }
      if (pos < str.length) {
        normalizedParts.push(str.substring(pos, str.length));
      }
      return normalizedParts;
    };
    exports.flattenNormalizedSourceToXmlV1 = function flattenNormalizedSourceToXmlV1(nsrc) {
      const normalizedStr = [], phMap = {};
      let phIdx = 0, nestingLevel = 0, openTagShorthand = [];
      for (const part of nsrc) {
        if (typeof part === "string") {
          normalizedStr.push(part.replaceAll("<", "&lt;"));
        } else {
          phIdx++;
          const phPrefix = phIdx < 26 ? String.fromCharCode(96 + phIdx) : `z${phIdx}`;
          const mangledPh = `${phPrefix}_${part.t}_${(part.v.match(/[0-9A-Za-z_]+/) || [""])[0]}`;
          let phShorthand = `x${phIdx}`;
          if (part.t === "x" || part.t === "ex" && nestingLevel === 0) {
            if (part.s) {
              normalizedStr.push(`<${phShorthand}>${part.s}</${phShorthand}>`);
            } else {
              normalizedStr.push(`<${phShorthand} />`);
            }
          } else if (part.t === "bx") {
            normalizedStr.push(`<${phShorthand}>`);
            openTagShorthand[nestingLevel] = phShorthand;
            nestingLevel++;
            phShorthand = `b${phShorthand}`;
          } else if (part.t === "ex") {
            nestingLevel--;
            phShorthand = openTagShorthand[nestingLevel];
            normalizedStr.push(`</${phShorthand}>`);
            phShorthand = `e${phShorthand}`;
          }
          phMap[phShorthand] = {
            ...part,
            v1: mangledPh
          };
        }
      }
      return [normalizedStr.join(""), phMap];
    };
    var cleanXMLEntities = (str) => str.replaceAll("&lt;", "<").replaceAll("&gt;", ">").replaceAll("&quot;", '"').replaceAll("&apos;", "'").replaceAll("&nbsp;", "\xA0").replaceAll("&amp;", "&");
    exports.extractNormalizedPartsFromXmlV1 = function extractNormalizedPartsFromXmlV1(str, phMap) {
      const normalizedParts = [];
      let pos = 0;
      for (const match of str.matchAll(/<(?<x>x\d+) \/>|<(?<bx>x\d+)>|<\/(?<ex>x\d+)>/g)) {
        const phSample = phMap[match.groups.ex];
        if (match.index > pos) {
          if (phSample) {
            match.input.charAt(pos) === " " && normalizedParts.push(" ");
          } else {
            normalizedParts.push(cleanXMLEntities(match.input.substring(pos, match.index)));
          }
        }
        !phMap[match.groups.bx] && // if we have a ph sample, skip the open tag
        normalizedParts.push(phSample ?? phMap[match.groups.x] ?? phMap[match.groups.bx && `b${match.groups.bx}`] ?? phMap[match.groups.ex && `e${match.groups.ex}`]);
        match.index > pos && phSample && match.input.charAt(match.index - 1) === " " && normalizedParts.push(" ");
        pos = match.index + match[0].length;
      }
      if (pos < str.length) {
        normalizedParts.push(cleanXMLEntities(str.substring(pos, str.length)));
      }
      return normalizedParts;
    };
    var minifyV1PH = (v1ph) => v1ph && v1ph.split("_").slice(0, -1).join("_");
    function phMatcherMaker(nsrc) {
      const phMap = flattenNormalizedSourceV1(nsrc)[1];
      const v1PhMap = Object.fromEntries(Object.entries(phMap).map(([k2, v2]) => [minifyV1PH(k2), v2]));
      const valueMap = Object.fromEntries(Object.values(v1PhMap).map((e) => [e.v, true]));
      return function matchPH(part) {
        return v1PhMap[minifyV1PH(part.v1)] ?? (valueMap[part.v] && part);
      };
    }
    exports.phMatcherMaker = phMatcherMaker;
    function sourceAndTargetAreCompatible(nsrc, ntgt) {
      if (Boolean(nsrc) && Boolean(ntgt)) {
        !Array.isArray(nsrc) && (nsrc = [nsrc]);
        !Array.isArray(ntgt) && (ntgt = [ntgt]);
        const phMatcher = phMatcherMaker(nsrc);
        if (!phMatcher) {
          return false;
        }
        for (const part of ntgt) {
          if (typeof part === "object") {
            if (phMatcher(part) === void 0) {
              return false;
            }
          }
        }
        return Object.keys(nsrc.filter((e) => typeof e === "object")).length === Object.keys(ntgt.filter((e) => typeof e === "object")).length;
      }
      return false;
    }
    exports.sourceAndTargetAreCompatible = sourceAndTargetAreCompatible;
    exports.translateWithEntry = function translateWithEntry(src, nsrc, entry, flags, encodePart) {
      if (entry && !entry.inflight) {
        if (sourceAndTargetAreCompatible(nsrc ?? src, entry.ntgt ?? entry.tgt)) {
          if (entry.ntgt) {
            const phMatcher = phMatcherMaker(nsrc ?? [src]);
            const ntgtEntries = entry.ntgt.entries();
            const tgt = [];
            for (const [idx, part] of ntgtEntries) {
              const partFlags = { ...flags, isFirst: idx === 0, isLast: idx === ntgtEntries.length - 1 };
              if (typeof part === "string") {
                tgt.push(encodePart(part, partFlags));
              } else {
                const ph = phMatcher(part);
                if (ph) {
                  tgt.push(encodePart(ph, partFlags));
                } else {
                  throw `unknown placeholder found: ${JSON.stringify(part)}`;
                }
              }
            }
            return tgt.join("");
          } else {
            return encodePart(entry.tgt, { ...flags, isFirst: true, isLast: true });
          }
        } else {
          throw `source and target are incompatible`;
        }
      } else {
        throw `TM entry missing or in flight`;
      }
    };
    function flattenNormalizedSourceToMiniV1(nsrc) {
      return nsrc.map((e) => typeof e === "string" ? e : `{{${e.v1 ? minifyV1PH(e.v1) : e.v}}}`).join("");
    }
    exports.normalizedStringsAreEqual = function normalizedStringsAreEqual(s1, s2) {
      const f1 = Array.isArray(s1) ? flattenNormalizedSourceToMiniV1(s1) : s1;
      const f2 = Array.isArray(s2) ? flattenNormalizedSourceToMiniV1(s2) : s2;
      return f1 === f2;
    };
    exports.getTUMaps = function getTUMaps(tus) {
      const contentMap = {};
      const tuMeta = {};
      const phNotes = {};
      for (const tu of tus) {
        const guid = tu.guid;
        if (tu.nsrc) {
          const [normalizedStr, phMap] = flattenNormalizedSourceV1(tu.nsrc);
          contentMap[guid] = normalizedStr;
          if (Object.keys(phMap).length > 0) {
            tuMeta[guid] = { phMap, nsrc: tu.nsrc };
            const sourcePhNotes = tu?.notes?.ph ?? {};
            phNotes[guid] = Object.entries(phMap).reduce((p2, c2, i) => `${p2}
  ${String.fromCodePoint(9312 + i)}  ${c2[0]} \u2192 ${c2[1].v}${c2[1].s === void 0 ? "" : ` \u2192 ${c2[1].s}`}${sourcePhNotes[c2[1].v]?.sample ? ` \u2192 ${sourcePhNotes[c2[1].v]?.sample}` : ""}${sourcePhNotes[c2[1].v]?.desc ? `   (${sourcePhNotes[c2[1].v].desc})` : ""}`, "\n ph:").replaceAll("<", "\u1438").replaceAll(">", "\u1433");
          }
          if (tu.ntgt) {
            const [normalizedStr2, phMap2] = flattenNormalizedSourceV1(tu.ntgt);
            phNotes[guid] += `
 current translation: ${normalizedStr2}`;
          }
        } else {
          contentMap[guid] = tu.src;
          tuMeta[guid] = { src: tu.src };
          if (tu.tgt) {
            phNotes[guid] = `
 current translation: ${tu.tgt}`;
          }
        }
      }
      return { contentMap, tuMeta, phNotes };
    };
    function nstrHasV1Missing(nstr) {
      for (const part of nstr) {
        if (typeof part === "object" && !part.v1) {
          return true;
        }
      }
      return false;
    }
    exports.makeTU = function makeTU(res, segment) {
      const { str, nstr, ...seg } = segment;
      const tu = {
        ...seg,
        src: str,
        rid: res.id,
        ts: new Date(res.modified).getTime()
      };
      if (nstr !== void 0) {
        tu.nsrc = nstr;
      }
      if (res.prj !== void 0) {
        tu.prj = res.prj;
      }
      return tu;
    };
    exports.cleanupTU = function cleanupTU(tu, whitelist) {
      const cleanTU = Object.fromEntries(Object.entries(tu).filter((e) => whitelist.has(e[0])));
      if (cleanTU.nsrc && cleanTU.ntgt && nstrHasV1Missing(cleanTU.ntgt)) {
        const lookup = {};
        const sourcePhMap = flattenNormalizedSourceV1(cleanTU.nsrc)[1];
        Object.values(sourcePhMap).forEach((part) => (lookup[part.v] ??= []).push(part.v1));
        for (const part of cleanTU.ntgt) {
          if (typeof part === "object") {
            part.v1 = lookup[part.v].shift();
          }
        }
      }
      return cleanTU;
    };
    var notesAnnotationRegex = /(?:PH\((?<phName>(?:[^()|]+|[^(|]*\([^()|]*\)[^()|]*))(?:\|(?<phSample>[^)|]+))(?:\|(?<phDesc>[^)|]+))?\)|MAXWIDTH\((?<maxWidth>\d+)\)|SCREENSHOT\((?<screenshot>[^)]+)\)|TAG\((?<tags>[^)]+)\))/g;
    exports.extractStructuredNotes = function extractStructuredNotes(notes) {
      const sNotes = {};
      const cleanDesc = notes.replaceAll(notesAnnotationRegex, (match, phName, phSample, phDesc, maxWidth, screenshot, tags) => {
        if (maxWidth !== void 0) {
          sNotes.maxWidth = Number(maxWidth);
        } else if (phName !== void 0) {
          phName = phName.trim();
          sNotes.ph = sNotes.ph ?? {};
          sNotes.ph[phName] = {
            sample: phSample.trim()
          };
          phDesc && (sNotes.ph[phName].desc = phDesc.trim());
        } else if (screenshot !== void 0) {
          sNotes.screenshot = screenshot;
        } else if (tags !== void 0) {
          sNotes.tags = tags.split(",").map((s) => s.trim());
        }
        return "";
      });
      sNotes.desc = cleanDesc;
      return sNotes;
    };
    var base32Chars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789";
    exports.integerToLabel = function integerToLabel(int) {
      const label = [];
      while (int > 0) {
        label.push(base32Chars.charAt(int % 32));
        int = Math.floor(int / 32);
      }
      return label.join("");
    };
    exports.fixCaseInsensitiveKey = function fixCaseInsensitiveKey(object, key) {
      const asLowercase = key.toLowerCase();
      return Object.keys(object).find((k2) => k2.toLowerCase() === asLowercase);
    };
  }
});

// ../helpers/regex.js
var require_regex = __commonJS({
  "../helpers/regex.js"(exports) {
    exports.decoderMaker = function regexDecoderMaker(flag, regex, partDecoder) {
      const fn = function decoder(parts) {
        const decodedParts = parts.map((p2) => {
          if (p2.t === "s") {
            const expandedPart = [];
            let pos = 0;
            for (const match of p2.v.matchAll(regex)) {
              if (match.index > pos) {
                expandedPart.push({
                  t: "s",
                  v: match.input.substring(pos, match.index)
                });
              }
              const decodedMatch = partDecoder(match.groups);
              if (typeof decodedMatch === "string") {
                expandedPart.push({
                  t: "s",
                  v: decodedMatch,
                  flag
                });
              } else {
                expandedPart.push(decodedMatch);
              }
              pos = match.index + match[0].length;
            }
            if (pos < p2.v.length) {
              expandedPart.push({
                t: "s",
                v: p2.v.substring(pos, p2.v.length)
              });
            }
            return expandedPart;
          } else {
            return p2;
          }
        });
        return decodedParts.flat(1);
      };
      Object.defineProperty(fn, "name", { value: flag });
      return fn;
    };
    exports.encoderMaker = function regexEncoderMaker(name, regex, matchMap) {
      const fn = function encoder(str, flags = {}) {
        return str.replaceAll(regex, (match, ...capture) => {
          const matchToReplace = capture.reduce((p2, c2) => p2 ?? c2);
          return typeof matchMap === "function" ? matchMap(match, flags, ...capture) : match.replace(matchToReplace, matchMap[matchToReplace]);
        });
      };
      Object.defineProperty(fn, "name", { value: name });
      return fn;
    };
  }
});

// ../helpers/normalizers.js
var require_normalizers = __commonJS({
  "../helpers/normalizers.js"(exports) {
    var regex = require_regex();
    exports.namedDecoder = function named(name, decoder) {
      const fn = function namedDecoder(parts) {
        return decoder(parts).map((p2) => p2.flag === decoder.name ? { ...p2, flag: name } : p2);
      };
      Object.defineProperty(fn, "name", { value: name });
      return fn;
    };
    exports.doublePercentDecoder = regex.decoderMaker(
      "doublePercentDecoder",
      /(?<percent>%%)/g,
      () => "%"
    );
    exports.gatedEncoder = function gated(encoder, ...flagNames) {
      const fn = function gatedEncoder(str, flags = {}) {
        const run = flagNames.reduce((run2, flag) => run2 || (flag.charAt(0) === "!" ? !flags[flag.substring(1)] : flags[flag]), false);
        return run ? encoder(str, flags) : str;
      };
      Object.defineProperty(fn, "name", { value: `gatedEncoder_${flagNames.join("_")}` });
      return fn;
    };
    exports.doublePercentEncoder = (str) => str.replaceAll("%", "%%");
    exports.bracePHDecoder = regex.decoderMaker(
      "bracePHDecoder",
      /(?<x>{[^}]+})/g,
      (groups) => ({ t: "x", v: groups.x })
    );
    exports.keywordTranslatorMaker = function keywordTranslatorMaker(name, keywordToTranslationMap) {
      if (keywordToTranslationMap && Object.keys(keywordToTranslationMap).length > 0) {
        const decoder = regex.decoderMaker(
          name,
          new RegExp(`(?<kw>${Object.keys(keywordToTranslationMap).join("|")})`, "g"),
          (groups) => ({ t: "x", v: `${name}:${groups.kw}`, s: groups.kw })
        );
        const encoder = regex.encoderMaker(
          name,
          new RegExp(`^(?:${name}:(?<kw>.+))$`, "g"),
          (match, flags, kw) => {
            const tx = keywordToTranslationMap[kw];
            return tx && typeof tx === "object" ? tx[flags.targetLang] ?? tx[flags.prj] ?? kw : kw;
          }
        );
        return [decoder, encoder];
      } else {
        throw "You have to specify a keyword map to keywordTranslatorMaker";
      }
    };
  }
});

// ../helpers/xml.js
var require_xml = __commonJS({
  "../helpers/xml.js"(exports) {
    var regex = require_regex();
    var namedEntities = {
      "&nbsp;": "\xA0",
      "&amp;": "&",
      "&apos;": "'",
      "&quot;": '"',
      "&lt;": "<",
      "&gt;": ">"
    };
    exports.entityDecoder = regex.decoderMaker(
      "xmlEntityDecoder",
      /(?<node>&#x(?<hexEntity>[0-9a-fA-F]+);|(?<namedEntity>&[^#;]+;)|&#(?<numericEntity>\d+);)/g,
      // eslint-disable-next-line no-nested-ternary
      (groups) => groups.namedEntity ? namedEntities[groups.namedEntity] || groups.namedEntity : groups.hexEntity ? String.fromCharCode(parseInt(groups.hexEntity, 16)) : String.fromCharCode(parseInt(groups.numericEntity, 10))
    );
    exports.CDataDecoder = regex.decoderMaker(
      "xmlCDataDecoder",
      /(?:<!\[CDATA\[(?<cdata>.*?)\]\]>|(?:(?<firstChar>[^\\])"|^")(?<quoted>.*?)(?<lastChar>[^\\])")/gs,
      (groups) => groups.cdata ?? (groups.firstChar || "") + groups.quoted + (groups.lastChar ?? "")
    );
    exports.entityEncoder = regex.encoderMaker(
      "xmlEntityEncoder",
      // eslint-disable-next-line prefer-named-capture-group
      /(&)|(<)|(\u00a0)/g,
      {
        "&": "&amp;",
        "<": "&lt;",
        "\xA0": "&#160;"
      }
    );
    exports.tagDecoder = regex.decoderMaker(
      "xmlDecoder",
      /(?<tag>(?<x><[^>]+\/>)|(?<bx><[^/!][^>]*>)|(?<ex><\/[^>]+>))/g,
      // eslint-disable-next-line no-nested-ternary
      (groups) => ({ t: groups.bx ? "bx" : groups.ex ? "ex" : "x", v: groups.tag })
    );
  }
});

// ../helpers/index.js
var require_helpers = __commonJS({
  "../helpers/index.js"(exports) {
    var sharedCtx14 = {
      version: 1
    };
    exports.sharedCtx = () => sharedCtx14;
    exports.mergeProps = (props) => {
      Object.assign(sharedCtx14, props);
    };
    exports.setCtx = (ctx) => {
      if (sharedCtx14.version !== ctx.version) {
        throw `Incompatible shared contexts assigning version ${ctx.version} to version ${sharedCtx14.version}`;
      }
      sharedCtx14 = ctx;
    };
    exports.utils = require_utils();
    exports.regex = require_regex();
    exports.normalizers = require_normalizers();
    exports.xml = require_xml();
  }
});

// ../core/node_modules/merge2/index.js
var require_merge2 = __commonJS({
  "../core/node_modules/merge2/index.js"(exports, module2) {
    "use strict";
    var Stream = require("stream");
    var PassThrough = Stream.PassThrough;
    var slice = Array.prototype.slice;
    module2.exports = merge22;
    function merge22() {
      const streamsQueue = [];
      const args = slice.call(arguments);
      let merging = false;
      let options = args[args.length - 1];
      if (options && !Array.isArray(options) && options.pipe == null) {
        args.pop();
      } else {
        options = {};
      }
      const doEnd = options.end !== false;
      const doPipeError = options.pipeError === true;
      if (options.objectMode == null) {
        options.objectMode = true;
      }
      if (options.highWaterMark == null) {
        options.highWaterMark = 64 * 1024;
      }
      const mergedStream = PassThrough(options);
      function addStream() {
        for (let i = 0, len = arguments.length; i < len; i++) {
          streamsQueue.push(pauseStreams(arguments[i], options));
        }
        mergeStream();
        return this;
      }
      function mergeStream() {
        if (merging) {
          return;
        }
        merging = true;
        let streams = streamsQueue.shift();
        if (!streams) {
          process.nextTick(endStream);
          return;
        }
        if (!Array.isArray(streams)) {
          streams = [streams];
        }
        let pipesCount = streams.length + 1;
        function next() {
          if (--pipesCount > 0) {
            return;
          }
          merging = false;
          mergeStream();
        }
        function pipe(stream) {
          function onend() {
            stream.removeListener("merge2UnpipeEnd", onend);
            stream.removeListener("end", onend);
            if (doPipeError) {
              stream.removeListener("error", onerror);
            }
            next();
          }
          function onerror(err) {
            mergedStream.emit("error", err);
          }
          if (stream._readableState.endEmitted) {
            return next();
          }
          stream.on("merge2UnpipeEnd", onend);
          stream.on("end", onend);
          if (doPipeError) {
            stream.on("error", onerror);
          }
          stream.pipe(mergedStream, { end: false });
          stream.resume();
        }
        for (let i = 0; i < streams.length; i++) {
          pipe(streams[i]);
        }
        next();
      }
      function endStream() {
        merging = false;
        mergedStream.emit("queueDrain");
        if (doEnd) {
          mergedStream.end();
        }
      }
      mergedStream.setMaxListeners(0);
      mergedStream.add = addStream;
      mergedStream.on("unpipe", function(stream) {
        stream.emit("merge2UnpipeEnd");
      });
      if (args.length) {
        addStream.apply(null, args);
      }
      return mergedStream;
    }
    function pauseStreams(streams, options) {
      if (!Array.isArray(streams)) {
        if (!streams._readableState && streams.pipe) {
          streams = streams.pipe(PassThrough(options));
        }
        if (!streams._readableState || !streams.pause || !streams.pipe) {
          throw new Error("Only readable stream can be merged.");
        }
        streams.pause();
      } else {
        for (let i = 0, len = streams.length; i < len; i++) {
          streams[i] = pauseStreams(streams[i], options);
        }
      }
      return streams;
    }
  }
});

// ../core/node_modules/fast-glob/out/utils/array.js
var require_array = __commonJS({
  "../core/node_modules/fast-glob/out/utils/array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitWhen = exports.flatten = void 0;
    function flatten(items) {
      return items.reduce((collection, item) => [].concat(collection, item), []);
    }
    exports.flatten = flatten;
    function splitWhen(items, predicate) {
      const result = [[]];
      let groupIndex = 0;
      for (const item of items) {
        if (predicate(item)) {
          groupIndex++;
          result[groupIndex] = [];
        } else {
          result[groupIndex].push(item);
        }
      }
      return result;
    }
    exports.splitWhen = splitWhen;
  }
});

// ../core/node_modules/fast-glob/out/utils/errno.js
var require_errno = __commonJS({
  "../core/node_modules/fast-glob/out/utils/errno.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEnoentCodeError = void 0;
    function isEnoentCodeError(error) {
      return error.code === "ENOENT";
    }
    exports.isEnoentCodeError = isEnoentCodeError;
  }
});

// ../core/node_modules/fast-glob/out/utils/fs.js
var require_fs = __commonJS({
  "../core/node_modules/fast-glob/out/utils/fs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDirentFromStats = void 0;
    var DirentFromStats = class {
      constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
      }
    };
    function createDirentFromStats(name, stats) {
      return new DirentFromStats(name, stats);
    }
    exports.createDirentFromStats = createDirentFromStats;
  }
});

// ../core/node_modules/fast-glob/out/utils/path.js
var require_path = __commonJS({
  "../core/node_modules/fast-glob/out/utils/path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeLeadingDotSegment = exports.escape = exports.makeAbsolute = exports.unixify = void 0;
    var path11 = require("path");
    var LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
    var UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;
    function unixify(filepath) {
      return filepath.replace(/\\/g, "/");
    }
    exports.unixify = unixify;
    function makeAbsolute(cwd, filepath) {
      return path11.resolve(cwd, filepath);
    }
    exports.makeAbsolute = makeAbsolute;
    function escape(pattern) {
      return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
    }
    exports.escape = escape;
    function removeLeadingDotSegment(entry) {
      if (entry.charAt(0) === ".") {
        const secondCharactery = entry.charAt(1);
        if (secondCharactery === "/" || secondCharactery === "\\") {
          return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
        }
      }
      return entry;
    }
    exports.removeLeadingDotSegment = removeLeadingDotSegment;
  }
});

// ../core/node_modules/is-extglob/index.js
var require_is_extglob = __commonJS({
  "../core/node_modules/is-extglob/index.js"(exports, module2) {
    module2.exports = function isExtglob(str) {
      if (typeof str !== "string" || str === "") {
        return false;
      }
      var match;
      while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
        if (match[2])
          return true;
        str = str.slice(match.index + match[0].length);
      }
      return false;
    };
  }
});

// ../core/node_modules/is-glob/index.js
var require_is_glob = __commonJS({
  "../core/node_modules/is-glob/index.js"(exports, module2) {
    var isExtglob = require_is_extglob();
    var chars = { "{": "}", "(": ")", "[": "]" };
    var strictCheck = function(str) {
      if (str[0] === "!") {
        return true;
      }
      var index = 0;
      var pipeIndex = -2;
      var closeSquareIndex = -2;
      var closeCurlyIndex = -2;
      var closeParenIndex = -2;
      var backSlashIndex = -2;
      while (index < str.length) {
        if (str[index] === "*") {
          return true;
        }
        if (str[index + 1] === "?" && /[\].+)]/.test(str[index])) {
          return true;
        }
        if (closeSquareIndex !== -1 && str[index] === "[" && str[index + 1] !== "]") {
          if (closeSquareIndex < index) {
            closeSquareIndex = str.indexOf("]", index);
          }
          if (closeSquareIndex > index) {
            if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
              return true;
            }
            backSlashIndex = str.indexOf("\\", index);
            if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
              return true;
            }
          }
        }
        if (closeCurlyIndex !== -1 && str[index] === "{" && str[index + 1] !== "}") {
          closeCurlyIndex = str.indexOf("}", index);
          if (closeCurlyIndex > index) {
            backSlashIndex = str.indexOf("\\", index);
            if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
              return true;
            }
          }
        }
        if (closeParenIndex !== -1 && str[index] === "(" && str[index + 1] === "?" && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ")") {
          closeParenIndex = str.indexOf(")", index);
          if (closeParenIndex > index) {
            backSlashIndex = str.indexOf("\\", index);
            if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
              return true;
            }
          }
        }
        if (pipeIndex !== -1 && str[index] === "(" && str[index + 1] !== "|") {
          if (pipeIndex < index) {
            pipeIndex = str.indexOf("|", index);
          }
          if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
            closeParenIndex = str.indexOf(")", pipeIndex);
            if (closeParenIndex > pipeIndex) {
              backSlashIndex = str.indexOf("\\", pipeIndex);
              if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                return true;
              }
            }
          }
        }
        if (str[index] === "\\") {
          var open = str[index + 1];
          index += 2;
          var close = chars[open];
          if (close) {
            var n = str.indexOf(close, index);
            if (n !== -1) {
              index = n + 1;
            }
          }
          if (str[index] === "!") {
            return true;
          }
        } else {
          index++;
        }
      }
      return false;
    };
    var relaxedCheck = function(str) {
      if (str[0] === "!") {
        return true;
      }
      var index = 0;
      while (index < str.length) {
        if (/[*?{}()[\]]/.test(str[index])) {
          return true;
        }
        if (str[index] === "\\") {
          var open = str[index + 1];
          index += 2;
          var close = chars[open];
          if (close) {
            var n = str.indexOf(close, index);
            if (n !== -1) {
              index = n + 1;
            }
          }
          if (str[index] === "!") {
            return true;
          }
        } else {
          index++;
        }
      }
      return false;
    };
    module2.exports = function isGlob(str, options) {
      if (typeof str !== "string" || str === "") {
        return false;
      }
      if (isExtglob(str)) {
        return true;
      }
      var check = strictCheck;
      if (options && options.strict === false) {
        check = relaxedCheck;
      }
      return check(str);
    };
  }
});

// ../core/node_modules/fast-glob/node_modules/glob-parent/index.js
var require_glob_parent = __commonJS({
  "../core/node_modules/fast-glob/node_modules/glob-parent/index.js"(exports, module2) {
    "use strict";
    var isGlob = require_is_glob();
    var pathPosixDirname = require("path").posix.dirname;
    var isWin32 = require("os").platform() === "win32";
    var slash2 = "/";
    var backslash = /\\/g;
    var enclosure = /[\{\[].*[\}\]]$/;
    var globby2 = /(^|[^\\])([\{\[]|\([^\)]+$)/;
    var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
    module2.exports = function globParent(str, opts) {
      var options = Object.assign({ flipBackslashes: true }, opts);
      if (options.flipBackslashes && isWin32 && str.indexOf(slash2) < 0) {
        str = str.replace(backslash, slash2);
      }
      if (enclosure.test(str)) {
        str += slash2;
      }
      str += "a";
      do {
        str = pathPosixDirname(str);
      } while (isGlob(str) || globby2.test(str));
      return str.replace(escaped, "$1");
    };
  }
});

// ../core/node_modules/braces/lib/utils.js
var require_utils2 = __commonJS({
  "../core/node_modules/braces/lib/utils.js"(exports) {
    "use strict";
    exports.isInteger = (num) => {
      if (typeof num === "number") {
        return Number.isInteger(num);
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isInteger(Number(num));
      }
      return false;
    };
    exports.find = (node, type) => node.nodes.find((node2) => node2.type === type);
    exports.exceedsLimit = (min, max, step = 1, limit) => {
      if (limit === false)
        return false;
      if (!exports.isInteger(min) || !exports.isInteger(max))
        return false;
      return (Number(max) - Number(min)) / Number(step) >= limit;
    };
    exports.escapeNode = (block, n = 0, type) => {
      let node = block.nodes[n];
      if (!node)
        return;
      if (type && node.type === type || node.type === "open" || node.type === "close") {
        if (node.escaped !== true) {
          node.value = "\\" + node.value;
          node.escaped = true;
        }
      }
    };
    exports.encloseBrace = (node) => {
      if (node.type !== "brace")
        return false;
      if (node.commas >> 0 + node.ranges >> 0 === 0) {
        node.invalid = true;
        return true;
      }
      return false;
    };
    exports.isInvalidBrace = (block) => {
      if (block.type !== "brace")
        return false;
      if (block.invalid === true || block.dollar)
        return true;
      if (block.commas >> 0 + block.ranges >> 0 === 0) {
        block.invalid = true;
        return true;
      }
      if (block.open !== true || block.close !== true) {
        block.invalid = true;
        return true;
      }
      return false;
    };
    exports.isOpenOrClose = (node) => {
      if (node.type === "open" || node.type === "close") {
        return true;
      }
      return node.open === true || node.close === true;
    };
    exports.reduce = (nodes) => nodes.reduce((acc, node) => {
      if (node.type === "text")
        acc.push(node.value);
      if (node.type === "range")
        node.type = "text";
      return acc;
    }, []);
    exports.flatten = (...args) => {
      const result = [];
      const flat = (arr) => {
        for (let i = 0; i < arr.length; i++) {
          let ele = arr[i];
          Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
        }
        return result;
      };
      flat(args);
      return result;
    };
  }
});

// ../core/node_modules/braces/lib/stringify.js
var require_stringify = __commonJS({
  "../core/node_modules/braces/lib/stringify.js"(exports, module2) {
    "use strict";
    var utils12 = require_utils2();
    module2.exports = (ast, options = {}) => {
      let stringify = (node, parent = {}) => {
        let invalidBlock = options.escapeInvalid && utils12.isInvalidBrace(parent);
        let invalidNode = node.invalid === true && options.escapeInvalid === true;
        let output = "";
        if (node.value) {
          if ((invalidBlock || invalidNode) && utils12.isOpenOrClose(node)) {
            return "\\" + node.value;
          }
          return node.value;
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes) {
          for (let child of node.nodes) {
            output += stringify(child);
          }
        }
        return output;
      };
      return stringify(ast);
    };
  }
});

// ../core/node_modules/is-number/index.js
var require_is_number = __commonJS({
  "../core/node_modules/is-number/index.js"(exports, module2) {
    "use strict";
    module2.exports = function(num) {
      if (typeof num === "number") {
        return num - num === 0;
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
      }
      return false;
    };
  }
});

// ../core/node_modules/to-regex-range/index.js
var require_to_regex_range = __commonJS({
  "../core/node_modules/to-regex-range/index.js"(exports, module2) {
    "use strict";
    var isNumber = require_is_number();
    var toRegexRange = (min, max, options) => {
      if (isNumber(min) === false) {
        throw new TypeError("toRegexRange: expected the first argument to be a number");
      }
      if (max === void 0 || min === max) {
        return String(min);
      }
      if (isNumber(max) === false) {
        throw new TypeError("toRegexRange: expected the second argument to be a number.");
      }
      let opts = { relaxZeros: true, ...options };
      if (typeof opts.strictZeros === "boolean") {
        opts.relaxZeros = opts.strictZeros === false;
      }
      let relax = String(opts.relaxZeros);
      let shorthand = String(opts.shorthand);
      let capture = String(opts.capture);
      let wrap = String(opts.wrap);
      let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
      if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
        return toRegexRange.cache[cacheKey].result;
      }
      let a = Math.min(min, max);
      let b = Math.max(min, max);
      if (Math.abs(a - b) === 1) {
        let result = min + "|" + max;
        if (opts.capture) {
          return `(${result})`;
        }
        if (opts.wrap === false) {
          return result;
        }
        return `(?:${result})`;
      }
      let isPadded = hasPadding(min) || hasPadding(max);
      let state = { min, max, a, b };
      let positives = [];
      let negatives = [];
      if (isPadded) {
        state.isPadded = isPadded;
        state.maxLen = String(state.max).length;
      }
      if (a < 0) {
        let newMin = b < 0 ? Math.abs(b) : 1;
        negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
        a = state.a = 0;
      }
      if (b >= 0) {
        positives = splitToPatterns(a, b, state, opts);
      }
      state.negatives = negatives;
      state.positives = positives;
      state.result = collatePatterns(negatives, positives, opts);
      if (opts.capture === true) {
        state.result = `(${state.result})`;
      } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
        state.result = `(?:${state.result})`;
      }
      toRegexRange.cache[cacheKey] = state;
      return state.result;
    };
    function collatePatterns(neg, pos, options) {
      let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
      let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
      let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
      let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
      return subpatterns.join("|");
    }
    function splitToRanges(min, max) {
      let nines = 1;
      let zeros = 1;
      let stop = countNines(min, nines);
      let stops = /* @__PURE__ */ new Set([max]);
      while (min <= stop && stop <= max) {
        stops.add(stop);
        nines += 1;
        stop = countNines(min, nines);
      }
      stop = countZeros(max + 1, zeros) - 1;
      while (min < stop && stop <= max) {
        stops.add(stop);
        zeros += 1;
        stop = countZeros(max + 1, zeros) - 1;
      }
      stops = [...stops];
      stops.sort(compare);
      return stops;
    }
    function rangeToPattern(start, stop, options) {
      if (start === stop) {
        return { pattern: start, count: [], digits: 0 };
      }
      let zipped = zip(start, stop);
      let digits = zipped.length;
      let pattern = "";
      let count = 0;
      for (let i = 0; i < digits; i++) {
        let [startDigit, stopDigit] = zipped[i];
        if (startDigit === stopDigit) {
          pattern += startDigit;
        } else if (startDigit !== "0" || stopDigit !== "9") {
          pattern += toCharacterClass(startDigit, stopDigit, options);
        } else {
          count++;
        }
      }
      if (count) {
        pattern += options.shorthand === true ? "\\d" : "[0-9]";
      }
      return { pattern, count: [count], digits };
    }
    function splitToPatterns(min, max, tok, options) {
      let ranges = splitToRanges(min, max);
      let tokens = [];
      let start = min;
      let prev;
      for (let i = 0; i < ranges.length; i++) {
        let max2 = ranges[i];
        let obj = rangeToPattern(String(start), String(max2), options);
        let zeros = "";
        if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
          if (prev.count.length > 1) {
            prev.count.pop();
          }
          prev.count.push(obj.count[0]);
          prev.string = prev.pattern + toQuantifier(prev.count);
          start = max2 + 1;
          continue;
        }
        if (tok.isPadded) {
          zeros = padZeros(max2, tok, options);
        }
        obj.string = zeros + obj.pattern + toQuantifier(obj.count);
        tokens.push(obj);
        start = max2 + 1;
        prev = obj;
      }
      return tokens;
    }
    function filterPatterns(arr, comparison, prefix, intersection, options) {
      let result = [];
      for (let ele of arr) {
        let { string } = ele;
        if (!intersection && !contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
        if (intersection && contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
      }
      return result;
    }
    function zip(a, b) {
      let arr = [];
      for (let i = 0; i < a.length; i++)
        arr.push([a[i], b[i]]);
      return arr;
    }
    function compare(a, b) {
      return a > b ? 1 : b > a ? -1 : 0;
    }
    function contains(arr, key, val) {
      return arr.some((ele) => ele[key] === val);
    }
    function countNines(min, len) {
      return Number(String(min).slice(0, -len) + "9".repeat(len));
    }
    function countZeros(integer, zeros) {
      return integer - integer % Math.pow(10, zeros);
    }
    function toQuantifier(digits) {
      let [start = 0, stop = ""] = digits;
      if (stop || start > 1) {
        return `{${start + (stop ? "," + stop : "")}}`;
      }
      return "";
    }
    function toCharacterClass(a, b, options) {
      return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
    }
    function hasPadding(str) {
      return /^-?(0+)\d/.test(str);
    }
    function padZeros(value, tok, options) {
      if (!tok.isPadded) {
        return value;
      }
      let diff2 = Math.abs(tok.maxLen - String(value).length);
      let relax = options.relaxZeros !== false;
      switch (diff2) {
        case 0:
          return "";
        case 1:
          return relax ? "0?" : "0";
        case 2:
          return relax ? "0{0,2}" : "00";
        default: {
          return relax ? `0{0,${diff2}}` : `0{${diff2}}`;
        }
      }
    }
    toRegexRange.cache = {};
    toRegexRange.clearCache = () => toRegexRange.cache = {};
    module2.exports = toRegexRange;
  }
});

// ../core/node_modules/fill-range/index.js
var require_fill_range = __commonJS({
  "../core/node_modules/fill-range/index.js"(exports, module2) {
    "use strict";
    var util2 = require("util");
    var toRegexRange = require_to_regex_range();
    var isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    var transform = (toNumber) => {
      return (value) => toNumber === true ? Number(value) : String(value);
    };
    var isValidValue = (value) => {
      return typeof value === "number" || typeof value === "string" && value !== "";
    };
    var isNumber = (num) => Number.isInteger(+num);
    var zeros = (input) => {
      let value = `${input}`;
      let index = -1;
      if (value[0] === "-")
        value = value.slice(1);
      if (value === "0")
        return false;
      while (value[++index] === "0")
        ;
      return index > 0;
    };
    var stringify = (start, end, options) => {
      if (typeof start === "string" || typeof end === "string") {
        return true;
      }
      return options.stringify === true;
    };
    var pad = (input, maxLength, toNumber) => {
      if (maxLength > 0) {
        let dash = input[0] === "-" ? "-" : "";
        if (dash)
          input = input.slice(1);
        input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
      }
      if (toNumber === false) {
        return String(input);
      }
      return input;
    };
    var toMaxLen = (input, maxLength) => {
      let negative = input[0] === "-" ? "-" : "";
      if (negative) {
        input = input.slice(1);
        maxLength--;
      }
      while (input.length < maxLength)
        input = "0" + input;
      return negative ? "-" + input : input;
    };
    var toSequence = (parts, options) => {
      parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
      parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
      let prefix = options.capture ? "" : "?:";
      let positives = "";
      let negatives = "";
      let result;
      if (parts.positives.length) {
        positives = parts.positives.join("|");
      }
      if (parts.negatives.length) {
        negatives = `-(${prefix}${parts.negatives.join("|")})`;
      }
      if (positives && negatives) {
        result = `${positives}|${negatives}`;
      } else {
        result = positives || negatives;
      }
      if (options.wrap) {
        return `(${prefix}${result})`;
      }
      return result;
    };
    var toRange = (a, b, isNumbers, options) => {
      if (isNumbers) {
        return toRegexRange(a, b, { wrap: false, ...options });
      }
      let start = String.fromCharCode(a);
      if (a === b)
        return start;
      let stop = String.fromCharCode(b);
      return `[${start}-${stop}]`;
    };
    var toRegex = (start, end, options) => {
      if (Array.isArray(start)) {
        let wrap = options.wrap === true;
        let prefix = options.capture ? "" : "?:";
        return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
      }
      return toRegexRange(start, end, options);
    };
    var rangeError = (...args) => {
      return new RangeError("Invalid range arguments: " + util2.inspect(...args));
    };
    var invalidRange = (start, end, options) => {
      if (options.strictRanges === true)
        throw rangeError([start, end]);
      return [];
    };
    var invalidStep = (step, options) => {
      if (options.strictRanges === true) {
        throw new TypeError(`Expected step "${step}" to be a number`);
      }
      return [];
    };
    var fillNumbers = (start, end, step = 1, options = {}) => {
      let a = Number(start);
      let b = Number(end);
      if (!Number.isInteger(a) || !Number.isInteger(b)) {
        if (options.strictRanges === true)
          throw rangeError([start, end]);
        return [];
      }
      if (a === 0)
        a = 0;
      if (b === 0)
        b = 0;
      let descending = a > b;
      let startString = String(start);
      let endString = String(end);
      let stepString = String(step);
      step = Math.max(Math.abs(step), 1);
      let padded = zeros(startString) || zeros(endString) || zeros(stepString);
      let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
      let toNumber = padded === false && stringify(start, end, options) === false;
      let format2 = options.transform || transform(toNumber);
      if (options.toRegex && step === 1) {
        return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
      }
      let parts = { negatives: [], positives: [] };
      let push2 = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
      let range = [];
      let index = 0;
      while (descending ? a >= b : a <= b) {
        if (options.toRegex === true && step > 1) {
          push2(a);
        } else {
          range.push(pad(format2(a, index), maxLen, toNumber));
        }
        a = descending ? a - step : a + step;
        index++;
      }
      if (options.toRegex === true) {
        return step > 1 ? toSequence(parts, options) : toRegex(range, null, { wrap: false, ...options });
      }
      return range;
    };
    var fillLetters = (start, end, step = 1, options = {}) => {
      if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
        return invalidRange(start, end, options);
      }
      let format2 = options.transform || ((val) => String.fromCharCode(val));
      let a = `${start}`.charCodeAt(0);
      let b = `${end}`.charCodeAt(0);
      let descending = a > b;
      let min = Math.min(a, b);
      let max = Math.max(a, b);
      if (options.toRegex && step === 1) {
        return toRange(min, max, false, options);
      }
      let range = [];
      let index = 0;
      while (descending ? a >= b : a <= b) {
        range.push(format2(a, index));
        a = descending ? a - step : a + step;
        index++;
      }
      if (options.toRegex === true) {
        return toRegex(range, null, { wrap: false, options });
      }
      return range;
    };
    var fill = (start, end, step, options = {}) => {
      if (end == null && isValidValue(start)) {
        return [start];
      }
      if (!isValidValue(start) || !isValidValue(end)) {
        return invalidRange(start, end, options);
      }
      if (typeof step === "function") {
        return fill(start, end, 1, { transform: step });
      }
      if (isObject(step)) {
        return fill(start, end, 0, step);
      }
      let opts = { ...options };
      if (opts.capture === true)
        opts.wrap = true;
      step = step || opts.step || 1;
      if (!isNumber(step)) {
        if (step != null && !isObject(step))
          return invalidStep(step, opts);
        return fill(start, end, 1, step);
      }
      if (isNumber(start) && isNumber(end)) {
        return fillNumbers(start, end, step, opts);
      }
      return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
    };
    module2.exports = fill;
  }
});

// ../core/node_modules/braces/lib/compile.js
var require_compile = __commonJS({
  "../core/node_modules/braces/lib/compile.js"(exports, module2) {
    "use strict";
    var fill = require_fill_range();
    var utils12 = require_utils2();
    var compile = (ast, options = {}) => {
      let walk = (node, parent = {}) => {
        let invalidBlock = utils12.isInvalidBrace(parent);
        let invalidNode = node.invalid === true && options.escapeInvalid === true;
        let invalid = invalidBlock === true || invalidNode === true;
        let prefix = options.escapeInvalid === true ? "\\" : "";
        let output = "";
        if (node.isOpen === true) {
          return prefix + node.value;
        }
        if (node.isClose === true) {
          return prefix + node.value;
        }
        if (node.type === "open") {
          return invalid ? prefix + node.value : "(";
        }
        if (node.type === "close") {
          return invalid ? prefix + node.value : ")";
        }
        if (node.type === "comma") {
          return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes && node.ranges > 0) {
          let args = utils12.reduce(node.nodes);
          let range = fill(...args, { ...options, wrap: false, toRegex: true });
          if (range.length !== 0) {
            return args.length > 1 && range.length > 1 ? `(${range})` : range;
          }
        }
        if (node.nodes) {
          for (let child of node.nodes) {
            output += walk(child, node);
          }
        }
        return output;
      };
      return walk(ast);
    };
    module2.exports = compile;
  }
});

// ../core/node_modules/braces/lib/expand.js
var require_expand = __commonJS({
  "../core/node_modules/braces/lib/expand.js"(exports, module2) {
    "use strict";
    var fill = require_fill_range();
    var stringify = require_stringify();
    var utils12 = require_utils2();
    var append = (queue = "", stash = "", enclose = false) => {
      let result = [];
      queue = [].concat(queue);
      stash = [].concat(stash);
      if (!stash.length)
        return queue;
      if (!queue.length) {
        return enclose ? utils12.flatten(stash).map((ele) => `{${ele}}`) : stash;
      }
      for (let item of queue) {
        if (Array.isArray(item)) {
          for (let value of item) {
            result.push(append(value, stash, enclose));
          }
        } else {
          for (let ele of stash) {
            if (enclose === true && typeof ele === "string")
              ele = `{${ele}}`;
            result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
          }
        }
      }
      return utils12.flatten(result);
    };
    var expand = (ast, options = {}) => {
      let rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
      let walk = (node, parent = {}) => {
        node.queue = [];
        let p2 = parent;
        let q2 = parent.queue;
        while (p2.type !== "brace" && p2.type !== "root" && p2.parent) {
          p2 = p2.parent;
          q2 = p2.queue;
        }
        if (node.invalid || node.dollar) {
          q2.push(append(q2.pop(), stringify(node, options)));
          return;
        }
        if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
          q2.push(append(q2.pop(), ["{}"]));
          return;
        }
        if (node.nodes && node.ranges > 0) {
          let args = utils12.reduce(node.nodes);
          if (utils12.exceedsLimit(...args, options.step, rangeLimit)) {
            throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
          }
          let range = fill(...args, options);
          if (range.length === 0) {
            range = stringify(node, options);
          }
          q2.push(append(q2.pop(), range));
          node.nodes = [];
          return;
        }
        let enclose = utils12.encloseBrace(node);
        let queue = node.queue;
        let block = node;
        while (block.type !== "brace" && block.type !== "root" && block.parent) {
          block = block.parent;
          queue = block.queue;
        }
        for (let i = 0; i < node.nodes.length; i++) {
          let child = node.nodes[i];
          if (child.type === "comma" && node.type === "brace") {
            if (i === 1)
              queue.push("");
            queue.push("");
            continue;
          }
          if (child.type === "close") {
            q2.push(append(q2.pop(), queue, enclose));
            continue;
          }
          if (child.value && child.type !== "open") {
            queue.push(append(queue.pop(), child.value));
            continue;
          }
          if (child.nodes) {
            walk(child, node);
          }
        }
        return queue;
      };
      return utils12.flatten(walk(ast));
    };
    module2.exports = expand;
  }
});

// ../core/node_modules/braces/lib/constants.js
var require_constants = __commonJS({
  "../core/node_modules/braces/lib/constants.js"(exports, module2) {
    "use strict";
    module2.exports = {
      MAX_LENGTH: 1024 * 64,
      // Digits
      CHAR_0: "0",
      /* 0 */
      CHAR_9: "9",
      /* 9 */
      // Alphabet chars.
      CHAR_UPPERCASE_A: "A",
      /* A */
      CHAR_LOWERCASE_A: "a",
      /* a */
      CHAR_UPPERCASE_Z: "Z",
      /* Z */
      CHAR_LOWERCASE_Z: "z",
      /* z */
      CHAR_LEFT_PARENTHESES: "(",
      /* ( */
      CHAR_RIGHT_PARENTHESES: ")",
      /* ) */
      CHAR_ASTERISK: "*",
      /* * */
      // Non-alphabetic chars.
      CHAR_AMPERSAND: "&",
      /* & */
      CHAR_AT: "@",
      /* @ */
      CHAR_BACKSLASH: "\\",
      /* \ */
      CHAR_BACKTICK: "`",
      /* ` */
      CHAR_CARRIAGE_RETURN: "\r",
      /* \r */
      CHAR_CIRCUMFLEX_ACCENT: "^",
      /* ^ */
      CHAR_COLON: ":",
      /* : */
      CHAR_COMMA: ",",
      /* , */
      CHAR_DOLLAR: "$",
      /* . */
      CHAR_DOT: ".",
      /* . */
      CHAR_DOUBLE_QUOTE: '"',
      /* " */
      CHAR_EQUAL: "=",
      /* = */
      CHAR_EXCLAMATION_MARK: "!",
      /* ! */
      CHAR_FORM_FEED: "\f",
      /* \f */
      CHAR_FORWARD_SLASH: "/",
      /* / */
      CHAR_HASH: "#",
      /* # */
      CHAR_HYPHEN_MINUS: "-",
      /* - */
      CHAR_LEFT_ANGLE_BRACKET: "<",
      /* < */
      CHAR_LEFT_CURLY_BRACE: "{",
      /* { */
      CHAR_LEFT_SQUARE_BRACKET: "[",
      /* [ */
      CHAR_LINE_FEED: "\n",
      /* \n */
      CHAR_NO_BREAK_SPACE: "\xA0",
      /* \u00A0 */
      CHAR_PERCENT: "%",
      /* % */
      CHAR_PLUS: "+",
      /* + */
      CHAR_QUESTION_MARK: "?",
      /* ? */
      CHAR_RIGHT_ANGLE_BRACKET: ">",
      /* > */
      CHAR_RIGHT_CURLY_BRACE: "}",
      /* } */
      CHAR_RIGHT_SQUARE_BRACKET: "]",
      /* ] */
      CHAR_SEMICOLON: ";",
      /* ; */
      CHAR_SINGLE_QUOTE: "'",
      /* ' */
      CHAR_SPACE: " ",
      /*   */
      CHAR_TAB: "	",
      /* \t */
      CHAR_UNDERSCORE: "_",
      /* _ */
      CHAR_VERTICAL_LINE: "|",
      /* | */
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
      /* \uFEFF */
    };
  }
});

// ../core/node_modules/braces/lib/parse.js
var require_parse = __commonJS({
  "../core/node_modules/braces/lib/parse.js"(exports, module2) {
    "use strict";
    var stringify = require_stringify();
    var {
      MAX_LENGTH,
      CHAR_BACKSLASH,
      /* \ */
      CHAR_BACKTICK,
      /* ` */
      CHAR_COMMA,
      /* , */
      CHAR_DOT,
      /* . */
      CHAR_LEFT_PARENTHESES,
      /* ( */
      CHAR_RIGHT_PARENTHESES,
      /* ) */
      CHAR_LEFT_CURLY_BRACE,
      /* { */
      CHAR_RIGHT_CURLY_BRACE,
      /* } */
      CHAR_LEFT_SQUARE_BRACKET,
      /* [ */
      CHAR_RIGHT_SQUARE_BRACKET,
      /* ] */
      CHAR_DOUBLE_QUOTE,
      /* " */
      CHAR_SINGLE_QUOTE,
      /* ' */
      CHAR_NO_BREAK_SPACE,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE
    } = require_constants();
    var parse = (input, options = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      let opts = options || {};
      let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      if (input.length > max) {
        throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
      }
      let ast = { type: "root", input, nodes: [] };
      let stack = [ast];
      let block = ast;
      let prev = ast;
      let brackets = 0;
      let length = input.length;
      let index = 0;
      let depth = 0;
      let value;
      let memo = {};
      const advance = () => input[index++];
      const push2 = (node) => {
        if (node.type === "text" && prev.type === "dot") {
          prev.type = "text";
        }
        if (prev && prev.type === "text" && node.type === "text") {
          prev.value += node.value;
          return;
        }
        block.nodes.push(node);
        node.parent = block;
        node.prev = prev;
        prev = node;
        return node;
      };
      push2({ type: "bos" });
      while (index < length) {
        block = stack[stack.length - 1];
        value = advance();
        if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
          continue;
        }
        if (value === CHAR_BACKSLASH) {
          push2({ type: "text", value: (options.keepEscaping ? value : "") + advance() });
          continue;
        }
        if (value === CHAR_RIGHT_SQUARE_BRACKET) {
          push2({ type: "text", value: "\\" + value });
          continue;
        }
        if (value === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          let closed = true;
          let next;
          while (index < length && (next = advance())) {
            value += next;
            if (next === CHAR_LEFT_SQUARE_BRACKET) {
              brackets++;
              continue;
            }
            if (next === CHAR_BACKSLASH) {
              value += advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              brackets--;
              if (brackets === 0) {
                break;
              }
            }
          }
          push2({ type: "text", value });
          continue;
        }
        if (value === CHAR_LEFT_PARENTHESES) {
          block = push2({ type: "paren", nodes: [] });
          stack.push(block);
          push2({ type: "text", value });
          continue;
        }
        if (value === CHAR_RIGHT_PARENTHESES) {
          if (block.type !== "paren") {
            push2({ type: "text", value });
            continue;
          }
          block = stack.pop();
          push2({ type: "text", value });
          block = stack[stack.length - 1];
          continue;
        }
        if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
          let open = value;
          let next;
          if (options.keepQuotes !== true) {
            value = "";
          }
          while (index < length && (next = advance())) {
            if (next === CHAR_BACKSLASH) {
              value += next + advance();
              continue;
            }
            if (next === open) {
              if (options.keepQuotes === true)
                value += next;
              break;
            }
            value += next;
          }
          push2({ type: "text", value });
          continue;
        }
        if (value === CHAR_LEFT_CURLY_BRACE) {
          depth++;
          let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
          let brace = {
            type: "brace",
            open: true,
            close: false,
            dollar,
            depth,
            commas: 0,
            ranges: 0,
            nodes: []
          };
          block = push2(brace);
          stack.push(block);
          push2({ type: "open", value });
          continue;
        }
        if (value === CHAR_RIGHT_CURLY_BRACE) {
          if (block.type !== "brace") {
            push2({ type: "text", value });
            continue;
          }
          let type = "close";
          block = stack.pop();
          block.close = true;
          push2({ type, value });
          depth--;
          block = stack[stack.length - 1];
          continue;
        }
        if (value === CHAR_COMMA && depth > 0) {
          if (block.ranges > 0) {
            block.ranges = 0;
            let open = block.nodes.shift();
            block.nodes = [open, { type: "text", value: stringify(block) }];
          }
          push2({ type: "comma", value });
          block.commas++;
          continue;
        }
        if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
          let siblings = block.nodes;
          if (depth === 0 || siblings.length === 0) {
            push2({ type: "text", value });
            continue;
          }
          if (prev.type === "dot") {
            block.range = [];
            prev.value += value;
            prev.type = "range";
            if (block.nodes.length !== 3 && block.nodes.length !== 5) {
              block.invalid = true;
              block.ranges = 0;
              prev.type = "text";
              continue;
            }
            block.ranges++;
            block.args = [];
            continue;
          }
          if (prev.type === "range") {
            siblings.pop();
            let before = siblings[siblings.length - 1];
            before.value += prev.value + value;
            prev = before;
            block.ranges--;
            continue;
          }
          push2({ type: "dot", value });
          continue;
        }
        push2({ type: "text", value });
      }
      do {
        block = stack.pop();
        if (block.type !== "root") {
          block.nodes.forEach((node) => {
            if (!node.nodes) {
              if (node.type === "open")
                node.isOpen = true;
              if (node.type === "close")
                node.isClose = true;
              if (!node.nodes)
                node.type = "text";
              node.invalid = true;
            }
          });
          let parent = stack[stack.length - 1];
          let index2 = parent.nodes.indexOf(block);
          parent.nodes.splice(index2, 1, ...block.nodes);
        }
      } while (stack.length > 0);
      push2({ type: "eos" });
      return ast;
    };
    module2.exports = parse;
  }
});

// ../core/node_modules/braces/index.js
var require_braces = __commonJS({
  "../core/node_modules/braces/index.js"(exports, module2) {
    "use strict";
    var stringify = require_stringify();
    var compile = require_compile();
    var expand = require_expand();
    var parse = require_parse();
    var braces = (input, options = {}) => {
      let output = [];
      if (Array.isArray(input)) {
        for (let pattern of input) {
          let result = braces.create(pattern, options);
          if (Array.isArray(result)) {
            output.push(...result);
          } else {
            output.push(result);
          }
        }
      } else {
        output = [].concat(braces.create(input, options));
      }
      if (options && options.expand === true && options.nodupes === true) {
        output = [...new Set(output)];
      }
      return output;
    };
    braces.parse = (input, options = {}) => parse(input, options);
    braces.stringify = (input, options = {}) => {
      if (typeof input === "string") {
        return stringify(braces.parse(input, options), options);
      }
      return stringify(input, options);
    };
    braces.compile = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      return compile(input, options);
    };
    braces.expand = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      let result = expand(input, options);
      if (options.noempty === true) {
        result = result.filter(Boolean);
      }
      if (options.nodupes === true) {
        result = [...new Set(result)];
      }
      return result;
    };
    braces.create = (input, options = {}) => {
      if (input === "" || input.length < 3) {
        return [input];
      }
      return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
    };
    module2.exports = braces;
  }
});

// ../core/node_modules/picomatch/lib/constants.js
var require_constants2 = __commonJS({
  "../core/node_modules/picomatch/lib/constants.js"(exports, module2) {
    "use strict";
    var path11 = require("path");
    var WIN_SLASH = "\\\\/";
    var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
    var DOT_LITERAL = "\\.";
    var PLUS_LITERAL = "\\+";
    var QMARK_LITERAL = "\\?";
    var SLASH_LITERAL = "\\/";
    var ONE_CHAR = "(?=.)";
    var QMARK = "[^/]";
    var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
    var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
    var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
    var NO_DOT = `(?!${DOT_LITERAL})`;
    var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
    var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
    var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
    var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
    var STAR = `${QMARK}*?`;
    var POSIX_CHARS = {
      DOT_LITERAL,
      PLUS_LITERAL,
      QMARK_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      QMARK,
      END_ANCHOR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    };
    var WINDOWS_CHARS = {
      ...POSIX_CHARS,
      SLASH_LITERAL: `[${WIN_SLASH}]`,
      QMARK: WIN_NO_SLASH,
      STAR: `${WIN_NO_SLASH}*?`,
      DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
      NO_DOT: `(?!${DOT_LITERAL})`,
      NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
      NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
      START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
      END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
    };
    var POSIX_REGEX_SOURCE = {
      alnum: "a-zA-Z0-9",
      alpha: "a-zA-Z",
      ascii: "\\x00-\\x7F",
      blank: " \\t",
      cntrl: "\\x00-\\x1F\\x7F",
      digit: "0-9",
      graph: "\\x21-\\x7E",
      lower: "a-z",
      print: "\\x20-\\x7E ",
      punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
      space: " \\t\\r\\n\\v\\f",
      upper: "A-Z",
      word: "A-Za-z0-9_",
      xdigit: "A-Fa-f0-9"
    };
    module2.exports = {
      MAX_LENGTH: 1024 * 64,
      POSIX_REGEX_SOURCE,
      // regular expressions
      REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
      REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
      REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
      REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
      REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
      REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
      // Replace globs with equivalent patterns to reduce parsing time.
      REPLACEMENTS: {
        "***": "*",
        "**/**": "**",
        "**/**/**": "**"
      },
      // Digits
      CHAR_0: 48,
      /* 0 */
      CHAR_9: 57,
      /* 9 */
      // Alphabet chars.
      CHAR_UPPERCASE_A: 65,
      /* A */
      CHAR_LOWERCASE_A: 97,
      /* a */
      CHAR_UPPERCASE_Z: 90,
      /* Z */
      CHAR_LOWERCASE_Z: 122,
      /* z */
      CHAR_LEFT_PARENTHESES: 40,
      /* ( */
      CHAR_RIGHT_PARENTHESES: 41,
      /* ) */
      CHAR_ASTERISK: 42,
      /* * */
      // Non-alphabetic chars.
      CHAR_AMPERSAND: 38,
      /* & */
      CHAR_AT: 64,
      /* @ */
      CHAR_BACKWARD_SLASH: 92,
      /* \ */
      CHAR_CARRIAGE_RETURN: 13,
      /* \r */
      CHAR_CIRCUMFLEX_ACCENT: 94,
      /* ^ */
      CHAR_COLON: 58,
      /* : */
      CHAR_COMMA: 44,
      /* , */
      CHAR_DOT: 46,
      /* . */
      CHAR_DOUBLE_QUOTE: 34,
      /* " */
      CHAR_EQUAL: 61,
      /* = */
      CHAR_EXCLAMATION_MARK: 33,
      /* ! */
      CHAR_FORM_FEED: 12,
      /* \f */
      CHAR_FORWARD_SLASH: 47,
      /* / */
      CHAR_GRAVE_ACCENT: 96,
      /* ` */
      CHAR_HASH: 35,
      /* # */
      CHAR_HYPHEN_MINUS: 45,
      /* - */
      CHAR_LEFT_ANGLE_BRACKET: 60,
      /* < */
      CHAR_LEFT_CURLY_BRACE: 123,
      /* { */
      CHAR_LEFT_SQUARE_BRACKET: 91,
      /* [ */
      CHAR_LINE_FEED: 10,
      /* \n */
      CHAR_NO_BREAK_SPACE: 160,
      /* \u00A0 */
      CHAR_PERCENT: 37,
      /* % */
      CHAR_PLUS: 43,
      /* + */
      CHAR_QUESTION_MARK: 63,
      /* ? */
      CHAR_RIGHT_ANGLE_BRACKET: 62,
      /* > */
      CHAR_RIGHT_CURLY_BRACE: 125,
      /* } */
      CHAR_RIGHT_SQUARE_BRACKET: 93,
      /* ] */
      CHAR_SEMICOLON: 59,
      /* ; */
      CHAR_SINGLE_QUOTE: 39,
      /* ' */
      CHAR_SPACE: 32,
      /*   */
      CHAR_TAB: 9,
      /* \t */
      CHAR_UNDERSCORE: 95,
      /* _ */
      CHAR_VERTICAL_LINE: 124,
      /* | */
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
      /* \uFEFF */
      SEP: path11.sep,
      /**
       * Create EXTGLOB_CHARS
       */
      extglobChars(chars) {
        return {
          "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
          "?": { type: "qmark", open: "(?:", close: ")?" },
          "+": { type: "plus", open: "(?:", close: ")+" },
          "*": { type: "star", open: "(?:", close: ")*" },
          "@": { type: "at", open: "(?:", close: ")" }
        };
      },
      /**
       * Create GLOB_CHARS
       */
      globChars(win32) {
        return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
      }
    };
  }
});

// ../core/node_modules/picomatch/lib/utils.js
var require_utils3 = __commonJS({
  "../core/node_modules/picomatch/lib/utils.js"(exports) {
    "use strict";
    var path11 = require("path");
    var win32 = process.platform === "win32";
    var {
      REGEX_BACKSLASH,
      REGEX_REMOVE_BACKSLASH,
      REGEX_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_GLOBAL
    } = require_constants2();
    exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
    exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
    exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
    exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
    exports.removeBackslashes = (str) => {
      return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
        return match === "\\" ? "" : match;
      });
    };
    exports.supportsLookbehinds = () => {
      const segs = process.version.slice(1).split(".").map(Number);
      if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
        return true;
      }
      return false;
    };
    exports.isWindows = (options) => {
      if (options && typeof options.windows === "boolean") {
        return options.windows;
      }
      return win32 === true || path11.sep === "\\";
    };
    exports.escapeLast = (input, char, lastIdx) => {
      const idx = input.lastIndexOf(char, lastIdx);
      if (idx === -1)
        return input;
      if (input[idx - 1] === "\\")
        return exports.escapeLast(input, char, idx - 1);
      return `${input.slice(0, idx)}\\${input.slice(idx)}`;
    };
    exports.removePrefix = (input, state = {}) => {
      let output = input;
      if (output.startsWith("./")) {
        output = output.slice(2);
        state.prefix = "./";
      }
      return output;
    };
    exports.wrapOutput = (input, state = {}, options = {}) => {
      const prepend = options.contains ? "" : "^";
      const append = options.contains ? "" : "$";
      let output = `${prepend}(?:${input})${append}`;
      if (state.negated === true) {
        output = `(?:^(?!${output}).*$)`;
      }
      return output;
    };
  }
});

// ../core/node_modules/picomatch/lib/scan.js
var require_scan = __commonJS({
  "../core/node_modules/picomatch/lib/scan.js"(exports, module2) {
    "use strict";
    var utils12 = require_utils3();
    var {
      CHAR_ASTERISK,
      /* * */
      CHAR_AT,
      /* @ */
      CHAR_BACKWARD_SLASH,
      /* \ */
      CHAR_COMMA,
      /* , */
      CHAR_DOT,
      /* . */
      CHAR_EXCLAMATION_MARK,
      /* ! */
      CHAR_FORWARD_SLASH,
      /* / */
      CHAR_LEFT_CURLY_BRACE,
      /* { */
      CHAR_LEFT_PARENTHESES,
      /* ( */
      CHAR_LEFT_SQUARE_BRACKET,
      /* [ */
      CHAR_PLUS,
      /* + */
      CHAR_QUESTION_MARK,
      /* ? */
      CHAR_RIGHT_CURLY_BRACE,
      /* } */
      CHAR_RIGHT_PARENTHESES,
      /* ) */
      CHAR_RIGHT_SQUARE_BRACKET
      /* ] */
    } = require_constants2();
    var isPathSeparator = (code) => {
      return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
    };
    var depth = (token) => {
      if (token.isPrefix !== true) {
        token.depth = token.isGlobstar ? Infinity : 1;
      }
    };
    var scan = (input, options) => {
      const opts = options || {};
      const length = input.length - 1;
      const scanToEnd = opts.parts === true || opts.scanToEnd === true;
      const slashes = [];
      const tokens = [];
      const parts = [];
      let str = input;
      let index = -1;
      let start = 0;
      let lastIndex = 0;
      let isBrace = false;
      let isBracket = false;
      let isGlob = false;
      let isExtglob = false;
      let isGlobstar = false;
      let braceEscaped = false;
      let backslashes = false;
      let negated = false;
      let negatedExtglob = false;
      let finished = false;
      let braces = 0;
      let prev;
      let code;
      let token = { value: "", depth: 0, isGlob: false };
      const eos = () => index >= length;
      const peek = () => str.charCodeAt(index + 1);
      const advance = () => {
        prev = code;
        return str.charCodeAt(++index);
      };
      while (index < length) {
        code = advance();
        let next;
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          code = advance();
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braceEscaped = true;
          }
          continue;
        }
        if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
          braces++;
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (code === CHAR_LEFT_CURLY_BRACE) {
              braces++;
              continue;
            }
            if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (braceEscaped !== true && code === CHAR_COMMA) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_RIGHT_CURLY_BRACE) {
              braces--;
              if (braces === 0) {
                braceEscaped = false;
                isBrace = token.isBrace = true;
                finished = true;
                break;
              }
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_FORWARD_SLASH) {
          slashes.push(index);
          tokens.push(token);
          token = { value: "", depth: 0, isGlob: false };
          if (finished === true)
            continue;
          if (prev === CHAR_DOT && index === start + 1) {
            start += 2;
            continue;
          }
          lastIndex = index + 1;
          continue;
        }
        if (opts.noext !== true) {
          const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
          if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            isExtglob = token.isExtglob = true;
            finished = true;
            if (code === CHAR_EXCLAMATION_MARK && index === start) {
              negatedExtglob = true;
            }
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_BACKWARD_SLASH) {
                  backslashes = token.backslashes = true;
                  code = advance();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES) {
                  isGlob = token.isGlob = true;
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
        }
        if (code === CHAR_ASTERISK) {
          if (prev === CHAR_ASTERISK)
            isGlobstar = token.isGlobstar = true;
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_QUESTION_MARK) {
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_LEFT_SQUARE_BRACKET) {
          while (eos() !== true && (next = advance())) {
            if (next === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              isBracket = token.isBracket = true;
              isGlob = token.isGlob = true;
              finished = true;
              break;
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
          negated = token.negated = true;
          start++;
          continue;
        }
        if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_LEFT_PARENTHESES) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
        if (isGlob === true) {
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
      }
      if (opts.noext === true) {
        isExtglob = false;
        isGlob = false;
      }
      let base = str;
      let prefix = "";
      let glob = "";
      if (start > 0) {
        prefix = str.slice(0, start);
        str = str.slice(start);
        lastIndex -= start;
      }
      if (base && isGlob === true && lastIndex > 0) {
        base = str.slice(0, lastIndex);
        glob = str.slice(lastIndex);
      } else if (isGlob === true) {
        base = "";
        glob = str;
      } else {
        base = str;
      }
      if (base && base !== "" && base !== "/" && base !== str) {
        if (isPathSeparator(base.charCodeAt(base.length - 1))) {
          base = base.slice(0, -1);
        }
      }
      if (opts.unescape === true) {
        if (glob)
          glob = utils12.removeBackslashes(glob);
        if (base && backslashes === true) {
          base = utils12.removeBackslashes(base);
        }
      }
      const state = {
        prefix,
        input,
        start,
        base,
        glob,
        isBrace,
        isBracket,
        isGlob,
        isExtglob,
        isGlobstar,
        negated,
        negatedExtglob
      };
      if (opts.tokens === true) {
        state.maxDepth = 0;
        if (!isPathSeparator(code)) {
          tokens.push(token);
        }
        state.tokens = tokens;
      }
      if (opts.parts === true || opts.tokens === true) {
        let prevIndex;
        for (let idx = 0; idx < slashes.length; idx++) {
          const n = prevIndex ? prevIndex + 1 : start;
          const i = slashes[idx];
          const value = input.slice(n, i);
          if (opts.tokens) {
            if (idx === 0 && start !== 0) {
              tokens[idx].isPrefix = true;
              tokens[idx].value = prefix;
            } else {
              tokens[idx].value = value;
            }
            depth(tokens[idx]);
            state.maxDepth += tokens[idx].depth;
          }
          if (idx !== 0 || value !== "") {
            parts.push(value);
          }
          prevIndex = i;
        }
        if (prevIndex && prevIndex + 1 < input.length) {
          const value = input.slice(prevIndex + 1);
          parts.push(value);
          if (opts.tokens) {
            tokens[tokens.length - 1].value = value;
            depth(tokens[tokens.length - 1]);
            state.maxDepth += tokens[tokens.length - 1].depth;
          }
        }
        state.slashes = slashes;
        state.parts = parts;
      }
      return state;
    };
    module2.exports = scan;
  }
});

// ../core/node_modules/picomatch/lib/parse.js
var require_parse2 = __commonJS({
  "../core/node_modules/picomatch/lib/parse.js"(exports, module2) {
    "use strict";
    var constants = require_constants2();
    var utils12 = require_utils3();
    var {
      MAX_LENGTH,
      POSIX_REGEX_SOURCE,
      REGEX_NON_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_BACKREF,
      REPLACEMENTS
    } = constants;
    var expandRange = (args, options) => {
      if (typeof options.expandRange === "function") {
        return options.expandRange(...args, options);
      }
      args.sort();
      const value = `[${args.join("-")}]`;
      try {
        new RegExp(value);
      } catch (ex) {
        return args.map((v2) => utils12.escapeRegex(v2)).join("..");
      }
      return value;
    };
    var syntaxError = (type, char) => {
      return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
    };
    var parse = (input, options) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      input = REPLACEMENTS[input] || input;
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      let len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      const bos = { type: "bos", value: "", output: opts.prepend || "" };
      const tokens = [bos];
      const capture = opts.capture ? "" : "?:";
      const win32 = utils12.isWindows(options);
      const PLATFORM_CHARS = constants.globChars(win32);
      const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
      const {
        DOT_LITERAL,
        PLUS_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR
      } = PLATFORM_CHARS;
      const globstar = (opts2) => {
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const nodot = opts.dot ? "" : NO_DOT;
      const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
      let star = opts.bash === true ? globstar(opts) : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      if (typeof opts.noext === "boolean") {
        opts.noextglob = opts.noext;
      }
      const state = {
        input,
        index: -1,
        start: 0,
        dot: opts.dot === true,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: false,
        negated: false,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: false,
        tokens
      };
      input = utils12.removePrefix(input, state);
      len = input.length;
      const extglobs = [];
      const braces = [];
      const stack = [];
      let prev = bos;
      let value;
      const eos = () => state.index === len - 1;
      const peek = state.peek = (n = 1) => input[state.index + n];
      const advance = state.advance = () => input[++state.index] || "";
      const remaining = () => input.slice(state.index + 1);
      const consume = (value2 = "", num = 0) => {
        state.consumed += value2;
        state.index += num;
      };
      const append = (token) => {
        state.output += token.output != null ? token.output : token.value;
        consume(token.value);
      };
      const negate = () => {
        let count = 1;
        while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
          advance();
          state.start++;
          count++;
        }
        if (count % 2 === 0) {
          return false;
        }
        state.negated = true;
        state.start++;
        return true;
      };
      const increment = (type) => {
        state[type]++;
        stack.push(type);
      };
      const decrement = (type) => {
        state[type]--;
        stack.pop();
      };
      const push2 = (tok) => {
        if (prev.type === "globstar") {
          const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
          const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
          if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "star";
            prev.value = "*";
            prev.output = star;
            state.output += prev.output;
          }
        }
        if (extglobs.length && tok.type !== "paren") {
          extglobs[extglobs.length - 1].inner += tok.value;
        }
        if (tok.value || tok.output)
          append(tok);
        if (prev && prev.type === "text" && tok.type === "text") {
          prev.value += tok.value;
          prev.output = (prev.output || "") + tok.value;
          return;
        }
        tok.prev = prev;
        tokens.push(tok);
        prev = tok;
      };
      const extglobOpen = (type, value2) => {
        const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
        token.prev = prev;
        token.parens = state.parens;
        token.output = state.output;
        const output = (opts.capture ? "(" : "") + token.open;
        increment("parens");
        push2({ type, value: value2, output: state.output ? "" : ONE_CHAR });
        push2({ type: "paren", extglob: true, value: advance(), output });
        extglobs.push(token);
      };
      const extglobClose = (token) => {
        let output = token.close + (opts.capture ? ")" : "");
        let rest;
        if (token.type === "negate") {
          let extglobStar = star;
          if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
            extglobStar = globstar(opts);
          }
          if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
            output = token.close = `)$))${extglobStar}`;
          }
          if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
            const expression = parse(rest, { ...options, fastpaths: false }).output;
            output = token.close = `)${expression})${extglobStar})`;
          }
          if (token.prev.type === "bos") {
            state.negatedExtglob = true;
          }
        }
        push2({ type: "paren", extglob: true, value, output });
        decrement("parens");
      };
      if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
        let backslashes = false;
        let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m2, esc, chars, first, rest, index) => {
          if (first === "\\") {
            backslashes = true;
            return m2;
          }
          if (first === "?") {
            if (esc) {
              return esc + first + (rest ? QMARK.repeat(rest.length) : "");
            }
            if (index === 0) {
              return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
            }
            return QMARK.repeat(chars.length);
          }
          if (first === ".") {
            return DOT_LITERAL.repeat(chars.length);
          }
          if (first === "*") {
            if (esc) {
              return esc + first + (rest ? star : "");
            }
            return star;
          }
          return esc ? m2 : `\\${m2}`;
        });
        if (backslashes === true) {
          if (opts.unescape === true) {
            output = output.replace(/\\/g, "");
          } else {
            output = output.replace(/\\+/g, (m2) => {
              return m2.length % 2 === 0 ? "\\\\" : m2 ? "\\" : "";
            });
          }
        }
        if (output === input && opts.contains === true) {
          state.output = input;
          return state;
        }
        state.output = utils12.wrapOutput(output, state, options);
        return state;
      }
      while (!eos()) {
        value = advance();
        if (value === "\0") {
          continue;
        }
        if (value === "\\") {
          const next = peek();
          if (next === "/" && opts.bash !== true) {
            continue;
          }
          if (next === "." || next === ";") {
            continue;
          }
          if (!next) {
            value += "\\";
            push2({ type: "text", value });
            continue;
          }
          const match = /^\\+/.exec(remaining());
          let slashes = 0;
          if (match && match[0].length > 2) {
            slashes = match[0].length;
            state.index += slashes;
            if (slashes % 2 !== 0) {
              value += "\\";
            }
          }
          if (opts.unescape === true) {
            value = advance();
          } else {
            value += advance();
          }
          if (state.brackets === 0) {
            push2({ type: "text", value });
            continue;
          }
        }
        if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
          if (opts.posix !== false && value === ":") {
            const inner = prev.value.slice(1);
            if (inner.includes("[")) {
              prev.posix = true;
              if (inner.includes(":")) {
                const idx = prev.value.lastIndexOf("[");
                const pre = prev.value.slice(0, idx);
                const rest2 = prev.value.slice(idx + 2);
                const posix = POSIX_REGEX_SOURCE[rest2];
                if (posix) {
                  prev.value = pre + posix;
                  state.backtrack = true;
                  advance();
                  if (!bos.output && tokens.indexOf(prev) === 1) {
                    bos.output = ONE_CHAR;
                  }
                  continue;
                }
              }
            }
          }
          if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
            value = `\\${value}`;
          }
          if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
            value = `\\${value}`;
          }
          if (opts.posix === true && value === "!" && prev.value === "[") {
            value = "^";
          }
          prev.value += value;
          append({ value });
          continue;
        }
        if (state.quotes === 1 && value !== '"') {
          value = utils12.escapeRegex(value);
          prev.value += value;
          append({ value });
          continue;
        }
        if (value === '"') {
          state.quotes = state.quotes === 1 ? 0 : 1;
          if (opts.keepQuotes === true) {
            push2({ type: "text", value });
          }
          continue;
        }
        if (value === "(") {
          increment("parens");
          push2({ type: "paren", value });
          continue;
        }
        if (value === ")") {
          if (state.parens === 0 && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "("));
          }
          const extglob = extglobs[extglobs.length - 1];
          if (extglob && state.parens === extglob.parens + 1) {
            extglobClose(extglobs.pop());
            continue;
          }
          push2({ type: "paren", value, output: state.parens ? ")" : "\\)" });
          decrement("parens");
          continue;
        }
        if (value === "[") {
          if (opts.nobracket === true || !remaining().includes("]")) {
            if (opts.nobracket !== true && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("closing", "]"));
            }
            value = `\\${value}`;
          } else {
            increment("brackets");
          }
          push2({ type: "bracket", value });
          continue;
        }
        if (value === "]") {
          if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
            push2({ type: "text", value, output: `\\${value}` });
            continue;
          }
          if (state.brackets === 0) {
            if (opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "["));
            }
            push2({ type: "text", value, output: `\\${value}` });
            continue;
          }
          decrement("brackets");
          const prevValue = prev.value.slice(1);
          if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
            value = `/${value}`;
          }
          prev.value += value;
          append({ value });
          if (opts.literalBrackets === false || utils12.hasRegexChars(prevValue)) {
            continue;
          }
          const escaped = utils12.escapeRegex(prev.value);
          state.output = state.output.slice(0, -prev.value.length);
          if (opts.literalBrackets === true) {
            state.output += escaped;
            prev.value = escaped;
            continue;
          }
          prev.value = `(${capture}${escaped}|${prev.value})`;
          state.output += prev.value;
          continue;
        }
        if (value === "{" && opts.nobrace !== true) {
          increment("braces");
          const open = {
            type: "brace",
            value,
            output: "(",
            outputIndex: state.output.length,
            tokensIndex: state.tokens.length
          };
          braces.push(open);
          push2(open);
          continue;
        }
        if (value === "}") {
          const brace = braces[braces.length - 1];
          if (opts.nobrace === true || !brace) {
            push2({ type: "text", value, output: value });
            continue;
          }
          let output = ")";
          if (brace.dots === true) {
            const arr = tokens.slice();
            const range = [];
            for (let i = arr.length - 1; i >= 0; i--) {
              tokens.pop();
              if (arr[i].type === "brace") {
                break;
              }
              if (arr[i].type !== "dots") {
                range.unshift(arr[i].value);
              }
            }
            output = expandRange(range, opts);
            state.backtrack = true;
          }
          if (brace.comma !== true && brace.dots !== true) {
            const out = state.output.slice(0, brace.outputIndex);
            const toks = state.tokens.slice(brace.tokensIndex);
            brace.value = brace.output = "\\{";
            value = output = "\\}";
            state.output = out;
            for (const t of toks) {
              state.output += t.output || t.value;
            }
          }
          push2({ type: "brace", value, output });
          decrement("braces");
          braces.pop();
          continue;
        }
        if (value === "|") {
          if (extglobs.length > 0) {
            extglobs[extglobs.length - 1].conditions++;
          }
          push2({ type: "text", value });
          continue;
        }
        if (value === ",") {
          let output = value;
          const brace = braces[braces.length - 1];
          if (brace && stack[stack.length - 1] === "braces") {
            brace.comma = true;
            output = "|";
          }
          push2({ type: "comma", value, output });
          continue;
        }
        if (value === "/") {
          if (prev.type === "dot" && state.index === state.start + 1) {
            state.start = state.index + 1;
            state.consumed = "";
            state.output = "";
            tokens.pop();
            prev = bos;
            continue;
          }
          push2({ type: "slash", value, output: SLASH_LITERAL });
          continue;
        }
        if (value === ".") {
          if (state.braces > 0 && prev.type === "dot") {
            if (prev.value === ".")
              prev.output = DOT_LITERAL;
            const brace = braces[braces.length - 1];
            prev.type = "dots";
            prev.output += value;
            prev.value += value;
            brace.dots = true;
            continue;
          }
          if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
            push2({ type: "text", value, output: DOT_LITERAL });
            continue;
          }
          push2({ type: "dot", value, output: DOT_LITERAL });
          continue;
        }
        if (value === "?") {
          const isGroup = prev && prev.value === "(";
          if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("qmark", value);
            continue;
          }
          if (prev && prev.type === "paren") {
            const next = peek();
            let output = value;
            if (next === "<" && !utils12.supportsLookbehinds()) {
              throw new Error("Node.js v10 or higher is required for regex lookbehinds");
            }
            if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
              output = `\\${value}`;
            }
            push2({ type: "text", value, output });
            continue;
          }
          if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
            push2({ type: "qmark", value, output: QMARK_NO_DOT });
            continue;
          }
          push2({ type: "qmark", value, output: QMARK });
          continue;
        }
        if (value === "!") {
          if (opts.noextglob !== true && peek() === "(") {
            if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
              extglobOpen("negate", value);
              continue;
            }
          }
          if (opts.nonegate !== true && state.index === 0) {
            negate();
            continue;
          }
        }
        if (value === "+") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("plus", value);
            continue;
          }
          if (prev && prev.value === "(" || opts.regex === false) {
            push2({ type: "plus", value, output: PLUS_LITERAL });
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
            push2({ type: "plus", value });
            continue;
          }
          push2({ type: "plus", value: PLUS_LITERAL });
          continue;
        }
        if (value === "@") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            push2({ type: "at", extglob: true, value, output: "" });
            continue;
          }
          push2({ type: "text", value });
          continue;
        }
        if (value !== "*") {
          if (value === "$" || value === "^") {
            value = `\\${value}`;
          }
          const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
          if (match) {
            value += match[0];
            state.index += match[0].length;
          }
          push2({ type: "text", value });
          continue;
        }
        if (prev && (prev.type === "globstar" || prev.star === true)) {
          prev.type = "star";
          prev.star = true;
          prev.value += value;
          prev.output = star;
          state.backtrack = true;
          state.globstar = true;
          consume(value);
          continue;
        }
        let rest = remaining();
        if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
          extglobOpen("star", value);
          continue;
        }
        if (prev.type === "star") {
          if (opts.noglobstar === true) {
            consume(value);
            continue;
          }
          const prior = prev.prev;
          const before = prior.prev;
          const isStart = prior.type === "slash" || prior.type === "bos";
          const afterStar = before && (before.type === "star" || before.type === "globstar");
          if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
            push2({ type: "star", value, output: "" });
            continue;
          }
          const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
          const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
          if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
            push2({ type: "star", value, output: "" });
            continue;
          }
          while (rest.slice(0, 3) === "/**") {
            const after = input[state.index + 4];
            if (after && after !== "/") {
              break;
            }
            rest = rest.slice(3);
            consume("/**", 3);
          }
          if (prior.type === "bos" && eos()) {
            prev.type = "globstar";
            prev.value += value;
            prev.output = globstar(opts);
            state.output = prev.output;
            state.globstar = true;
            consume(value);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
            prev.value += value;
            state.globstar = true;
            state.output += prior.output + prev.output;
            consume(value);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
            const end = rest[1] !== void 0 ? "|$" : "";
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
            prev.value += value;
            state.output += prior.output + prev.output;
            state.globstar = true;
            consume(value + advance());
            push2({ type: "slash", value: "/", output: "" });
            continue;
          }
          if (prior.type === "bos" && rest[0] === "/") {
            prev.type = "globstar";
            prev.value += value;
            prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
            state.output = prev.output;
            state.globstar = true;
            consume(value + advance());
            push2({ type: "slash", value: "/", output: "" });
            continue;
          }
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "globstar";
          prev.output = globstar(opts);
          prev.value += value;
          state.output += prev.output;
          state.globstar = true;
          consume(value);
          continue;
        }
        const token = { type: "star", value, output: star };
        if (opts.bash === true) {
          token.output = ".*?";
          if (prev.type === "bos" || prev.type === "slash") {
            token.output = nodot + token.output;
          }
          push2(token);
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
          token.output = value;
          push2(token);
          continue;
        }
        if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
          if (prev.type === "dot") {
            state.output += NO_DOT_SLASH;
            prev.output += NO_DOT_SLASH;
          } else if (opts.dot === true) {
            state.output += NO_DOTS_SLASH;
            prev.output += NO_DOTS_SLASH;
          } else {
            state.output += nodot;
            prev.output += nodot;
          }
          if (peek() !== "*") {
            state.output += ONE_CHAR;
            prev.output += ONE_CHAR;
          }
        }
        push2(token);
      }
      while (state.brackets > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", "]"));
        state.output = utils12.escapeLast(state.output, "[");
        decrement("brackets");
      }
      while (state.parens > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", ")"));
        state.output = utils12.escapeLast(state.output, "(");
        decrement("parens");
      }
      while (state.braces > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", "}"));
        state.output = utils12.escapeLast(state.output, "{");
        decrement("braces");
      }
      if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
        push2({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
      }
      if (state.backtrack === true) {
        state.output = "";
        for (const token of state.tokens) {
          state.output += token.output != null ? token.output : token.value;
          if (token.suffix) {
            state.output += token.suffix;
          }
        }
      }
      return state;
    };
    parse.fastpaths = (input, options) => {
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      const len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      input = REPLACEMENTS[input] || input;
      const win32 = utils12.isWindows(options);
      const {
        DOT_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOTS_SLASH,
        STAR,
        START_ANCHOR
      } = constants.globChars(win32);
      const nodot = opts.dot ? NO_DOTS : NO_DOT;
      const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
      const capture = opts.capture ? "" : "?:";
      const state = { negated: false, prefix: "" };
      let star = opts.bash === true ? ".*?" : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      const globstar = (opts2) => {
        if (opts2.noglobstar === true)
          return star;
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const create = (str) => {
        switch (str) {
          case "*":
            return `${nodot}${ONE_CHAR}${star}`;
          case ".*":
            return `${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*.*":
            return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*/*":
            return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
          case "**":
            return nodot + globstar(opts);
          case "**/*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
          case "**/*.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "**/.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
          default: {
            const match = /^(.*?)\.(\w+)$/.exec(str);
            if (!match)
              return;
            const source2 = create(match[1]);
            if (!source2)
              return;
            return source2 + DOT_LITERAL + match[2];
          }
        }
      };
      const output = utils12.removePrefix(input, state);
      let source = create(output);
      if (source && opts.strictSlashes !== true) {
        source += `${SLASH_LITERAL}?`;
      }
      return source;
    };
    module2.exports = parse;
  }
});

// ../core/node_modules/picomatch/lib/picomatch.js
var require_picomatch = __commonJS({
  "../core/node_modules/picomatch/lib/picomatch.js"(exports, module2) {
    "use strict";
    var path11 = require("path");
    var scan = require_scan();
    var parse = require_parse2();
    var utils12 = require_utils3();
    var constants = require_constants2();
    var isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
    var picomatch = (glob, options, returnState = false) => {
      if (Array.isArray(glob)) {
        const fns = glob.map((input) => picomatch(input, options, returnState));
        const arrayMatcher = (str) => {
          for (const isMatch of fns) {
            const state2 = isMatch(str);
            if (state2)
              return state2;
          }
          return false;
        };
        return arrayMatcher;
      }
      const isState = isObject(glob) && glob.tokens && glob.input;
      if (glob === "" || typeof glob !== "string" && !isState) {
        throw new TypeError("Expected pattern to be a non-empty string");
      }
      const opts = options || {};
      const posix = utils12.isWindows(options);
      const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
      const state = regex.state;
      delete regex.state;
      let isIgnored = () => false;
      if (opts.ignore) {
        const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
        isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
      }
      const matcher = (input, returnObject = false) => {
        const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
        const result = { glob, state, regex, posix, input, output, match, isMatch };
        if (typeof opts.onResult === "function") {
          opts.onResult(result);
        }
        if (isMatch === false) {
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (isIgnored(input)) {
          if (typeof opts.onIgnore === "function") {
            opts.onIgnore(result);
          }
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (typeof opts.onMatch === "function") {
          opts.onMatch(result);
        }
        return returnObject ? result : true;
      };
      if (returnState) {
        matcher.state = state;
      }
      return matcher;
    };
    picomatch.test = (input, regex, options, { glob, posix } = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected input to be a string");
      }
      if (input === "") {
        return { isMatch: false, output: "" };
      }
      const opts = options || {};
      const format2 = opts.format || (posix ? utils12.toPosixSlashes : null);
      let match = input === glob;
      let output = match && format2 ? format2(input) : input;
      if (match === false) {
        output = format2 ? format2(input) : input;
        match = output === glob;
      }
      if (match === false || opts.capture === true) {
        if (opts.matchBase === true || opts.basename === true) {
          match = picomatch.matchBase(input, regex, options, posix);
        } else {
          match = regex.exec(output);
        }
      }
      return { isMatch: Boolean(match), match, output };
    };
    picomatch.matchBase = (input, glob, options, posix = utils12.isWindows(options)) => {
      const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
      return regex.test(path11.basename(input));
    };
    picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    picomatch.parse = (pattern, options) => {
      if (Array.isArray(pattern))
        return pattern.map((p2) => picomatch.parse(p2, options));
      return parse(pattern, { ...options, fastpaths: false });
    };
    picomatch.scan = (input, options) => scan(input, options);
    picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
      if (returnOutput === true) {
        return state.output;
      }
      const opts = options || {};
      const prepend = opts.contains ? "" : "^";
      const append = opts.contains ? "" : "$";
      let source = `${prepend}(?:${state.output})${append}`;
      if (state && state.negated === true) {
        source = `^(?!${source}).*$`;
      }
      const regex = picomatch.toRegex(source, options);
      if (returnState === true) {
        regex.state = state;
      }
      return regex;
    };
    picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
      if (!input || typeof input !== "string") {
        throw new TypeError("Expected a non-empty string");
      }
      let parsed = { negated: false, fastpaths: true };
      if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
        parsed.output = parse.fastpaths(input, options);
      }
      if (!parsed.output) {
        parsed = parse(input, options);
      }
      return picomatch.compileRe(parsed, options, returnOutput, returnState);
    };
    picomatch.toRegex = (source, options) => {
      try {
        const opts = options || {};
        return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
      } catch (err) {
        if (options && options.debug === true)
          throw err;
        return /$^/;
      }
    };
    picomatch.constants = constants;
    module2.exports = picomatch;
  }
});

// ../core/node_modules/picomatch/index.js
var require_picomatch2 = __commonJS({
  "../core/node_modules/picomatch/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_picomatch();
  }
});

// ../core/node_modules/micromatch/index.js
var require_micromatch = __commonJS({
  "../core/node_modules/micromatch/index.js"(exports, module2) {
    "use strict";
    var util2 = require("util");
    var braces = require_braces();
    var picomatch = require_picomatch2();
    var utils12 = require_utils3();
    var isEmptyString = (val) => val === "" || val === "./";
    var micromatch = (list, patterns, options) => {
      patterns = [].concat(patterns);
      list = [].concat(list);
      let omit = /* @__PURE__ */ new Set();
      let keep = /* @__PURE__ */ new Set();
      let items = /* @__PURE__ */ new Set();
      let negatives = 0;
      let onResult = (state) => {
        items.add(state.output);
        if (options && options.onResult) {
          options.onResult(state);
        }
      };
      for (let i = 0; i < patterns.length; i++) {
        let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
        let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
        if (negated)
          negatives++;
        for (let item of list) {
          let matched = isMatch(item, true);
          let match = negated ? !matched.isMatch : matched.isMatch;
          if (!match)
            continue;
          if (negated) {
            omit.add(matched.output);
          } else {
            omit.delete(matched.output);
            keep.add(matched.output);
          }
        }
      }
      let result = negatives === patterns.length ? [...items] : [...keep];
      let matches = result.filter((item) => !omit.has(item));
      if (options && matches.length === 0) {
        if (options.failglob === true) {
          throw new Error(`No matches found for "${patterns.join(", ")}"`);
        }
        if (options.nonull === true || options.nullglob === true) {
          return options.unescape ? patterns.map((p2) => p2.replace(/\\/g, "")) : patterns;
        }
      }
      return matches;
    };
    micromatch.match = micromatch;
    micromatch.matcher = (pattern, options) => picomatch(pattern, options);
    micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    micromatch.any = micromatch.isMatch;
    micromatch.not = (list, patterns, options = {}) => {
      patterns = [].concat(patterns).map(String);
      let result = /* @__PURE__ */ new Set();
      let items = [];
      let onResult = (state) => {
        if (options.onResult)
          options.onResult(state);
        items.push(state.output);
      };
      let matches = new Set(micromatch(list, patterns, { ...options, onResult }));
      for (let item of items) {
        if (!matches.has(item)) {
          result.add(item);
        }
      }
      return [...result];
    };
    micromatch.contains = (str, pattern, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util2.inspect(str)}"`);
      }
      if (Array.isArray(pattern)) {
        return pattern.some((p2) => micromatch.contains(str, p2, options));
      }
      if (typeof pattern === "string") {
        if (isEmptyString(str) || isEmptyString(pattern)) {
          return false;
        }
        if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
          return true;
        }
      }
      return micromatch.isMatch(str, pattern, { ...options, contains: true });
    };
    micromatch.matchKeys = (obj, patterns, options) => {
      if (!utils12.isObject(obj)) {
        throw new TypeError("Expected the first argument to be an object");
      }
      let keys = micromatch(Object.keys(obj), patterns, options);
      let res = {};
      for (let key of keys)
        res[key] = obj[key];
      return res;
    };
    micromatch.some = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (items.some((item) => isMatch(item))) {
          return true;
        }
      }
      return false;
    };
    micromatch.every = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (!items.every((item) => isMatch(item))) {
          return false;
        }
      }
      return true;
    };
    micromatch.all = (str, patterns, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util2.inspect(str)}"`);
      }
      return [].concat(patterns).every((p2) => picomatch(p2, options)(str));
    };
    micromatch.capture = (glob, input, options) => {
      let posix = utils12.isWindows(options);
      let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
      let match = regex.exec(posix ? utils12.toPosixSlashes(input) : input);
      if (match) {
        return match.slice(1).map((v2) => v2 === void 0 ? "" : v2);
      }
    };
    micromatch.makeRe = (...args) => picomatch.makeRe(...args);
    micromatch.scan = (...args) => picomatch.scan(...args);
    micromatch.parse = (patterns, options) => {
      let res = [];
      for (let pattern of [].concat(patterns || [])) {
        for (let str of braces(String(pattern), options)) {
          res.push(picomatch.parse(str, options));
        }
      }
      return res;
    };
    micromatch.braces = (pattern, options) => {
      if (typeof pattern !== "string")
        throw new TypeError("Expected a string");
      if (options && options.nobrace === true || !/\{.*\}/.test(pattern)) {
        return [pattern];
      }
      return braces(pattern, options);
    };
    micromatch.braceExpand = (pattern, options) => {
      if (typeof pattern !== "string")
        throw new TypeError("Expected a string");
      return micromatch.braces(pattern, { ...options, expand: true });
    };
    module2.exports = micromatch;
  }
});

// ../core/node_modules/fast-glob/out/utils/pattern.js
var require_pattern = __commonJS({
  "../core/node_modules/fast-glob/out/utils/pattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0;
    var path11 = require("path");
    var globParent = require_glob_parent();
    var micromatch = require_micromatch();
    var GLOBSTAR = "**";
    var ESCAPE_SYMBOL = "\\";
    var COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
    var REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
    var REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
    var GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
    var BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
    function isStaticPattern(pattern, options = {}) {
      return !isDynamicPattern2(pattern, options);
    }
    exports.isStaticPattern = isStaticPattern;
    function isDynamicPattern2(pattern, options = {}) {
      if (pattern === "") {
        return false;
      }
      if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
        return true;
      }
      if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
        return true;
      }
      if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
        return true;
      }
      if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
        return true;
      }
      return false;
    }
    exports.isDynamicPattern = isDynamicPattern2;
    function hasBraceExpansion(pattern) {
      const openingBraceIndex = pattern.indexOf("{");
      if (openingBraceIndex === -1) {
        return false;
      }
      const closingBraceIndex = pattern.indexOf("}", openingBraceIndex + 1);
      if (closingBraceIndex === -1) {
        return false;
      }
      const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
      return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
    }
    function convertToPositivePattern(pattern) {
      return isNegativePattern2(pattern) ? pattern.slice(1) : pattern;
    }
    exports.convertToPositivePattern = convertToPositivePattern;
    function convertToNegativePattern(pattern) {
      return "!" + pattern;
    }
    exports.convertToNegativePattern = convertToNegativePattern;
    function isNegativePattern2(pattern) {
      return pattern.startsWith("!") && pattern[1] !== "(";
    }
    exports.isNegativePattern = isNegativePattern2;
    function isPositivePattern(pattern) {
      return !isNegativePattern2(pattern);
    }
    exports.isPositivePattern = isPositivePattern;
    function getNegativePatterns(patterns) {
      return patterns.filter(isNegativePattern2);
    }
    exports.getNegativePatterns = getNegativePatterns;
    function getPositivePatterns(patterns) {
      return patterns.filter(isPositivePattern);
    }
    exports.getPositivePatterns = getPositivePatterns;
    function getPatternsInsideCurrentDirectory(patterns) {
      return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
    }
    exports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
    function getPatternsOutsideCurrentDirectory(patterns) {
      return patterns.filter(isPatternRelatedToParentDirectory);
    }
    exports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
    function isPatternRelatedToParentDirectory(pattern) {
      return pattern.startsWith("..") || pattern.startsWith("./..");
    }
    exports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
    function getBaseDirectory(pattern) {
      return globParent(pattern, { flipBackslashes: false });
    }
    exports.getBaseDirectory = getBaseDirectory;
    function hasGlobStar(pattern) {
      return pattern.includes(GLOBSTAR);
    }
    exports.hasGlobStar = hasGlobStar;
    function endsWithSlashGlobStar(pattern) {
      return pattern.endsWith("/" + GLOBSTAR);
    }
    exports.endsWithSlashGlobStar = endsWithSlashGlobStar;
    function isAffectDepthOfReadingPattern(pattern) {
      const basename = path11.basename(pattern);
      return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
    }
    exports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
    function expandPatternsWithBraceExpansion(patterns) {
      return patterns.reduce((collection, pattern) => {
        return collection.concat(expandBraceExpansion(pattern));
      }, []);
    }
    exports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
    function expandBraceExpansion(pattern) {
      return micromatch.braces(pattern, {
        expand: true,
        nodupes: true
      });
    }
    exports.expandBraceExpansion = expandBraceExpansion;
    function getPatternParts(pattern, options) {
      let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));
      if (parts.length === 0) {
        parts = [pattern];
      }
      if (parts[0].startsWith("/")) {
        parts[0] = parts[0].slice(1);
        parts.unshift("");
      }
      return parts;
    }
    exports.getPatternParts = getPatternParts;
    function makeRe(pattern, options) {
      return micromatch.makeRe(pattern, options);
    }
    exports.makeRe = makeRe;
    function convertPatternsToRe(patterns, options) {
      return patterns.map((pattern) => makeRe(pattern, options));
    }
    exports.convertPatternsToRe = convertPatternsToRe;
    function matchAny(entry, patternsRe) {
      return patternsRe.some((patternRe) => patternRe.test(entry));
    }
    exports.matchAny = matchAny;
  }
});

// ../core/node_modules/fast-glob/out/utils/stream.js
var require_stream = __commonJS({
  "../core/node_modules/fast-glob/out/utils/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.merge = void 0;
    var merge22 = require_merge2();
    function merge(streams) {
      const mergedStream = merge22(streams);
      streams.forEach((stream) => {
        stream.once("error", (error) => mergedStream.emit("error", error));
      });
      mergedStream.once("close", () => propagateCloseEventToSources(streams));
      mergedStream.once("end", () => propagateCloseEventToSources(streams));
      return mergedStream;
    }
    exports.merge = merge;
    function propagateCloseEventToSources(streams) {
      streams.forEach((stream) => stream.emit("close"));
    }
  }
});

// ../core/node_modules/fast-glob/out/utils/string.js
var require_string = __commonJS({
  "../core/node_modules/fast-glob/out/utils/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmpty = exports.isString = void 0;
    function isString(input) {
      return typeof input === "string";
    }
    exports.isString = isString;
    function isEmpty(input) {
      return input === "";
    }
    exports.isEmpty = isEmpty;
  }
});

// ../core/node_modules/fast-glob/out/utils/index.js
var require_utils4 = __commonJS({
  "../core/node_modules/fast-glob/out/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0;
    var array = require_array();
    exports.array = array;
    var errno = require_errno();
    exports.errno = errno;
    var fs5 = require_fs();
    exports.fs = fs5;
    var path11 = require_path();
    exports.path = path11;
    var pattern = require_pattern();
    exports.pattern = pattern;
    var stream = require_stream();
    exports.stream = stream;
    var string = require_string();
    exports.string = string;
  }
});

// ../core/node_modules/fast-glob/out/managers/tasks.js
var require_tasks = __commonJS({
  "../core/node_modules/fast-glob/out/managers/tasks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;
    var utils12 = require_utils4();
    function generate(patterns, settings) {
      const positivePatterns = getPositivePatterns(patterns);
      const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);
      const staticPatterns = positivePatterns.filter((pattern) => utils12.pattern.isStaticPattern(pattern, settings));
      const dynamicPatterns = positivePatterns.filter((pattern) => utils12.pattern.isDynamicPattern(pattern, settings));
      const staticTasks = convertPatternsToTasks(
        staticPatterns,
        negativePatterns,
        /* dynamic */
        false
      );
      const dynamicTasks = convertPatternsToTasks(
        dynamicPatterns,
        negativePatterns,
        /* dynamic */
        true
      );
      return staticTasks.concat(dynamicTasks);
    }
    exports.generate = generate;
    function convertPatternsToTasks(positive, negative, dynamic) {
      const tasks = [];
      const patternsOutsideCurrentDirectory = utils12.pattern.getPatternsOutsideCurrentDirectory(positive);
      const patternsInsideCurrentDirectory = utils12.pattern.getPatternsInsideCurrentDirectory(positive);
      const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
      const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
      tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
      if ("." in insideCurrentDirectoryGroup) {
        tasks.push(convertPatternGroupToTask(".", patternsInsideCurrentDirectory, negative, dynamic));
      } else {
        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
      }
      return tasks;
    }
    exports.convertPatternsToTasks = convertPatternsToTasks;
    function getPositivePatterns(patterns) {
      return utils12.pattern.getPositivePatterns(patterns);
    }
    exports.getPositivePatterns = getPositivePatterns;
    function getNegativePatternsAsPositive(patterns, ignore) {
      const negative = utils12.pattern.getNegativePatterns(patterns).concat(ignore);
      const positive = negative.map(utils12.pattern.convertToPositivePattern);
      return positive;
    }
    exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
    function groupPatternsByBaseDirectory(patterns) {
      const group = {};
      return patterns.reduce((collection, pattern) => {
        const base = utils12.pattern.getBaseDirectory(pattern);
        if (base in collection) {
          collection[base].push(pattern);
        } else {
          collection[base] = [pattern];
        }
        return collection;
      }, group);
    }
    exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
    function convertPatternGroupsToTasks(positive, negative, dynamic) {
      return Object.keys(positive).map((base) => {
        return convertPatternGroupToTask(base, positive[base], negative, dynamic);
      });
    }
    exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
    function convertPatternGroupToTask(base, positive, negative, dynamic) {
      return {
        dynamic,
        positive,
        negative,
        base,
        patterns: [].concat(positive, negative.map(utils12.pattern.convertToNegativePattern))
      };
    }
    exports.convertPatternGroupToTask = convertPatternGroupToTask;
  }
});

// ../core/node_modules/fast-glob/out/managers/patterns.js
var require_patterns = __commonJS({
  "../core/node_modules/fast-glob/out/managers/patterns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeDuplicateSlashes = exports.transform = void 0;
    var DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
    function transform(patterns) {
      return patterns.map((pattern) => removeDuplicateSlashes(pattern));
    }
    exports.transform = transform;
    function removeDuplicateSlashes(pattern) {
      return pattern.replace(DOUBLE_SLASH_RE, "/");
    }
    exports.removeDuplicateSlashes = removeDuplicateSlashes;
  }
});

// ../core/node_modules/@nodelib/fs.stat/out/providers/async.js
var require_async = __commonJS({
  "../core/node_modules/@nodelib/fs.stat/out/providers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.read = void 0;
    function read(path11, settings, callback) {
      settings.fs.lstat(path11, (lstatError, lstat) => {
        if (lstatError !== null) {
          callFailureCallback(callback, lstatError);
          return;
        }
        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
          callSuccessCallback(callback, lstat);
          return;
        }
        settings.fs.stat(path11, (statError, stat) => {
          if (statError !== null) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              callFailureCallback(callback, statError);
              return;
            }
            callSuccessCallback(callback, lstat);
            return;
          }
          if (settings.markSymbolicLink) {
            stat.isSymbolicLink = () => true;
          }
          callSuccessCallback(callback, stat);
        });
      });
    }
    exports.read = read;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, result) {
      callback(null, result);
    }
  }
});

// ../core/node_modules/@nodelib/fs.stat/out/providers/sync.js
var require_sync = __commonJS({
  "../core/node_modules/@nodelib/fs.stat/out/providers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.read = void 0;
    function read(path11, settings) {
      const lstat = settings.fs.lstatSync(path11);
      if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
        return lstat;
      }
      try {
        const stat = settings.fs.statSync(path11);
        if (settings.markSymbolicLink) {
          stat.isSymbolicLink = () => true;
        }
        return stat;
      } catch (error) {
        if (!settings.throwErrorOnBrokenSymbolicLink) {
          return lstat;
        }
        throw error;
      }
    }
    exports.read = read;
  }
});

// ../core/node_modules/@nodelib/fs.stat/out/adapters/fs.js
var require_fs2 = __commonJS({
  "../core/node_modules/@nodelib/fs.stat/out/adapters/fs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
    var fs5 = require("fs");
    exports.FILE_SYSTEM_ADAPTER = {
      lstat: fs5.lstat,
      stat: fs5.stat,
      lstatSync: fs5.lstatSync,
      statSync: fs5.statSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports.createFileSystemAdapter = createFileSystemAdapter;
  }
});

// ../core/node_modules/@nodelib/fs.stat/out/settings.js
var require_settings = __commonJS({
  "../core/node_modules/@nodelib/fs.stat/out/settings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var fs5 = require_fs2();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
        this.fs = fs5.createFileSystemAdapter(this._options.fs);
        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
      }
      _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
      }
    };
    exports.default = Settings;
  }
});

// ../core/node_modules/@nodelib/fs.stat/out/index.js
var require_out = __commonJS({
  "../core/node_modules/@nodelib/fs.stat/out/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.statSync = exports.stat = exports.Settings = void 0;
    var async = require_async();
    var sync = require_sync();
    var settings_1 = require_settings();
    exports.Settings = settings_1.default;
    function stat(path11, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        async.read(path11, getSettings(), optionsOrSettingsOrCallback);
        return;
      }
      async.read(path11, getSettings(optionsOrSettingsOrCallback), callback);
    }
    exports.stat = stat;
    function statSync3(path11, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      return sync.read(path11, settings);
    }
    exports.statSync = statSync3;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// ../core/node_modules/queue-microtask/index.js
var require_queue_microtask = __commonJS({
  "../core/node_modules/queue-microtask/index.js"(exports, module2) {
    var promise;
    module2.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
      throw err;
    }, 0));
  }
});

// ../core/node_modules/run-parallel/index.js
var require_run_parallel = __commonJS({
  "../core/node_modules/run-parallel/index.js"(exports, module2) {
    module2.exports = runParallel;
    var queueMicrotask2 = require_queue_microtask();
    function runParallel(tasks, cb) {
      let results, pending, keys;
      let isSync = true;
      if (Array.isArray(tasks)) {
        results = [];
        pending = tasks.length;
      } else {
        keys = Object.keys(tasks);
        results = {};
        pending = keys.length;
      }
      function done(err) {
        function end() {
          if (cb)
            cb(err, results);
          cb = null;
        }
        if (isSync)
          queueMicrotask2(end);
        else
          end();
      }
      function each(i, err, result) {
        results[i] = result;
        if (--pending === 0 || err) {
          done(err);
        }
      }
      if (!pending) {
        done(null);
      } else if (keys) {
        keys.forEach(function(key) {
          tasks[key](function(err, result) {
            each(key, err, result);
          });
        });
      } else {
        tasks.forEach(function(task, i) {
          task(function(err, result) {
            each(i, err, result);
          });
        });
      }
      isSync = false;
    }
  }
});

// ../core/node_modules/@nodelib/fs.scandir/out/constants.js
var require_constants3 = __commonJS({
  "../core/node_modules/@nodelib/fs.scandir/out/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
    var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
    if (NODE_PROCESS_VERSION_PARTS[0] === void 0 || NODE_PROCESS_VERSION_PARTS[1] === void 0) {
      throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
    }
    var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
    var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
    var SUPPORTED_MAJOR_VERSION = 10;
    var SUPPORTED_MINOR_VERSION = 10;
    var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
    var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
    exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
  }
});

// ../core/node_modules/@nodelib/fs.scandir/out/utils/fs.js
var require_fs3 = __commonJS({
  "../core/node_modules/@nodelib/fs.scandir/out/utils/fs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDirentFromStats = void 0;
    var DirentFromStats = class {
      constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
      }
    };
    function createDirentFromStats(name, stats) {
      return new DirentFromStats(name, stats);
    }
    exports.createDirentFromStats = createDirentFromStats;
  }
});

// ../core/node_modules/@nodelib/fs.scandir/out/utils/index.js
var require_utils5 = __commonJS({
  "../core/node_modules/@nodelib/fs.scandir/out/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fs = void 0;
    var fs5 = require_fs3();
    exports.fs = fs5;
  }
});

// ../core/node_modules/@nodelib/fs.scandir/out/providers/common.js
var require_common = __commonJS({
  "../core/node_modules/@nodelib/fs.scandir/out/providers/common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joinPathSegments = void 0;
    function joinPathSegments(a, b, separator) {
      if (a.endsWith(separator)) {
        return a + b;
      }
      return a + separator + b;
    }
    exports.joinPathSegments = joinPathSegments;
  }
});

// ../core/node_modules/@nodelib/fs.scandir/out/providers/async.js
var require_async2 = __commonJS({
  "../core/node_modules/@nodelib/fs.scandir/out/providers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
    var fsStat = require_out();
    var rpl = require_run_parallel();
    var constants_1 = require_constants3();
    var utils12 = require_utils5();
    var common = require_common();
    function read(directory, settings, callback) {
      if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        readdirWithFileTypes(directory, settings, callback);
        return;
      }
      readdir(directory, settings, callback);
    }
    exports.read = read;
    function readdirWithFileTypes(directory, settings, callback) {
      settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
        if (readdirError !== null) {
          callFailureCallback(callback, readdirError);
          return;
        }
        const entries = dirents.map((dirent) => ({
          dirent,
          name: dirent.name,
          path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        }));
        if (!settings.followSymbolicLinks) {
          callSuccessCallback(callback, entries);
          return;
        }
        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
        rpl(tasks, (rplError, rplEntries) => {
          if (rplError !== null) {
            callFailureCallback(callback, rplError);
            return;
          }
          callSuccessCallback(callback, rplEntries);
        });
      });
    }
    exports.readdirWithFileTypes = readdirWithFileTypes;
    function makeRplTaskEntry(entry, settings) {
      return (done) => {
        if (!entry.dirent.isSymbolicLink()) {
          done(null, entry);
          return;
        }
        settings.fs.stat(entry.path, (statError, stats) => {
          if (statError !== null) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              done(statError);
              return;
            }
            done(null, entry);
            return;
          }
          entry.dirent = utils12.fs.createDirentFromStats(entry.name, stats);
          done(null, entry);
        });
      };
    }
    function readdir(directory, settings, callback) {
      settings.fs.readdir(directory, (readdirError, names) => {
        if (readdirError !== null) {
          callFailureCallback(callback, readdirError);
          return;
        }
        const tasks = names.map((name) => {
          const path11 = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
          return (done) => {
            fsStat.stat(path11, settings.fsStatSettings, (error, stats) => {
              if (error !== null) {
                done(error);
                return;
              }
              const entry = {
                name,
                path: path11,
                dirent: utils12.fs.createDirentFromStats(name, stats)
              };
              if (settings.stats) {
                entry.stats = stats;
              }
              done(null, entry);
            });
          };
        });
        rpl(tasks, (rplError, entries) => {
          if (rplError !== null) {
            callFailureCallback(callback, rplError);
            return;
          }
          callSuccessCallback(callback, entries);
        });
      });
    }
    exports.readdir = readdir;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, result) {
      callback(null, result);
    }
  }
});

// ../core/node_modules/@nodelib/fs.scandir/out/providers/sync.js
var require_sync2 = __commonJS({
  "../core/node_modules/@nodelib/fs.scandir/out/providers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
    var fsStat = require_out();
    var constants_1 = require_constants3();
    var utils12 = require_utils5();
    var common = require_common();
    function read(directory, settings) {
      if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        return readdirWithFileTypes(directory, settings);
      }
      return readdir(directory, settings);
    }
    exports.read = read;
    function readdirWithFileTypes(directory, settings) {
      const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
      return dirents.map((dirent) => {
        const entry = {
          dirent,
          name: dirent.name,
          path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        };
        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
          try {
            const stats = settings.fs.statSync(entry.path);
            entry.dirent = utils12.fs.createDirentFromStats(entry.name, stats);
          } catch (error) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              throw error;
            }
          }
        }
        return entry;
      });
    }
    exports.readdirWithFileTypes = readdirWithFileTypes;
    function readdir(directory, settings) {
      const names = settings.fs.readdirSync(directory);
      return names.map((name) => {
        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
        const entry = {
          name,
          path: entryPath,
          dirent: utils12.fs.createDirentFromStats(name, stats)
        };
        if (settings.stats) {
          entry.stats = stats;
        }
        return entry;
      });
    }
    exports.readdir = readdir;
  }
});

// ../core/node_modules/@nodelib/fs.scandir/out/adapters/fs.js
var require_fs4 = __commonJS({
  "../core/node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
    var fs5 = require("fs");
    exports.FILE_SYSTEM_ADAPTER = {
      lstat: fs5.lstat,
      stat: fs5.stat,
      lstatSync: fs5.lstatSync,
      statSync: fs5.statSync,
      readdir: fs5.readdir,
      readdirSync: fs5.readdirSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports.createFileSystemAdapter = createFileSystemAdapter;
  }
});

// ../core/node_modules/@nodelib/fs.scandir/out/settings.js
var require_settings2 = __commonJS({
  "../core/node_modules/@nodelib/fs.scandir/out/settings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var path11 = require("path");
    var fsStat = require_out();
    var fs5 = require_fs4();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
        this.fs = fs5.createFileSystemAdapter(this._options.fs);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path11.sep);
        this.stats = this._getValue(this._options.stats, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        this.fsStatSettings = new fsStat.Settings({
          followSymbolicLink: this.followSymbolicLinks,
          fs: this.fs,
          throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
        });
      }
      _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
      }
    };
    exports.default = Settings;
  }
});

// ../core/node_modules/@nodelib/fs.scandir/out/index.js
var require_out2 = __commonJS({
  "../core/node_modules/@nodelib/fs.scandir/out/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Settings = exports.scandirSync = exports.scandir = void 0;
    var async = require_async2();
    var sync = require_sync2();
    var settings_1 = require_settings2();
    exports.Settings = settings_1.default;
    function scandir(path11, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        async.read(path11, getSettings(), optionsOrSettingsOrCallback);
        return;
      }
      async.read(path11, getSettings(optionsOrSettingsOrCallback), callback);
    }
    exports.scandir = scandir;
    function scandirSync(path11, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      return sync.read(path11, settings);
    }
    exports.scandirSync = scandirSync;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// ../core/node_modules/reusify/reusify.js
var require_reusify = __commonJS({
  "../core/node_modules/reusify/reusify.js"(exports, module2) {
    "use strict";
    function reusify(Constructor) {
      var head = new Constructor();
      var tail = head;
      function get() {
        var current = head;
        if (current.next) {
          head = current.next;
        } else {
          head = new Constructor();
          tail = head;
        }
        current.next = null;
        return current;
      }
      function release(obj) {
        tail.next = obj;
        tail = obj;
      }
      return {
        get,
        release
      };
    }
    module2.exports = reusify;
  }
});

// ../core/node_modules/fastq/queue.js
var require_queue = __commonJS({
  "../core/node_modules/fastq/queue.js"(exports, module2) {
    "use strict";
    var reusify = require_reusify();
    function fastqueue(context, worker, concurrency) {
      if (typeof context === "function") {
        concurrency = worker;
        worker = context;
        context = null;
      }
      if (concurrency < 1) {
        throw new Error("fastqueue concurrency must be greater than 1");
      }
      var cache = reusify(Task2);
      var queueHead = null;
      var queueTail = null;
      var _running = 0;
      var errorHandler = null;
      var self2 = {
        push: push2,
        drain: noop,
        saturated: noop,
        pause,
        paused: false,
        concurrency,
        running,
        resume,
        idle,
        length,
        getQueue,
        unshift,
        empty: noop,
        kill,
        killAndDrain,
        error
      };
      return self2;
      function running() {
        return _running;
      }
      function pause() {
        self2.paused = true;
      }
      function length() {
        var current = queueHead;
        var counter = 0;
        while (current) {
          current = current.next;
          counter++;
        }
        return counter;
      }
      function getQueue() {
        var current = queueHead;
        var tasks = [];
        while (current) {
          tasks.push(current.value);
          current = current.next;
        }
        return tasks;
      }
      function resume() {
        if (!self2.paused)
          return;
        self2.paused = false;
        for (var i = 0; i < self2.concurrency; i++) {
          _running++;
          release();
        }
      }
      function idle() {
        return _running === 0 && self2.length() === 0;
      }
      function push2(value, done) {
        var current = cache.get();
        current.context = context;
        current.release = release;
        current.value = value;
        current.callback = done || noop;
        current.errorHandler = errorHandler;
        if (_running === self2.concurrency || self2.paused) {
          if (queueTail) {
            queueTail.next = current;
            queueTail = current;
          } else {
            queueHead = current;
            queueTail = current;
            self2.saturated();
          }
        } else {
          _running++;
          worker.call(context, current.value, current.worked);
        }
      }
      function unshift(value, done) {
        var current = cache.get();
        current.context = context;
        current.release = release;
        current.value = value;
        current.callback = done || noop;
        if (_running === self2.concurrency || self2.paused) {
          if (queueHead) {
            current.next = queueHead;
            queueHead = current;
          } else {
            queueHead = current;
            queueTail = current;
            self2.saturated();
          }
        } else {
          _running++;
          worker.call(context, current.value, current.worked);
        }
      }
      function release(holder) {
        if (holder) {
          cache.release(holder);
        }
        var next = queueHead;
        if (next) {
          if (!self2.paused) {
            if (queueTail === queueHead) {
              queueTail = null;
            }
            queueHead = next.next;
            next.next = null;
            worker.call(context, next.value, next.worked);
            if (queueTail === null) {
              self2.empty();
            }
          } else {
            _running--;
          }
        } else if (--_running === 0) {
          self2.drain();
        }
      }
      function kill() {
        queueHead = null;
        queueTail = null;
        self2.drain = noop;
      }
      function killAndDrain() {
        queueHead = null;
        queueTail = null;
        self2.drain();
        self2.drain = noop;
      }
      function error(handler) {
        errorHandler = handler;
      }
    }
    function noop() {
    }
    function Task2() {
      this.value = null;
      this.callback = noop;
      this.next = null;
      this.release = noop;
      this.context = null;
      this.errorHandler = null;
      var self2 = this;
      this.worked = function worked(err, result) {
        var callback = self2.callback;
        var errorHandler = self2.errorHandler;
        var val = self2.value;
        self2.value = null;
        self2.callback = noop;
        if (self2.errorHandler) {
          errorHandler(err, val);
        }
        callback.call(self2.context, err, result);
        self2.release(self2);
      };
    }
    function queueAsPromised(context, worker, concurrency) {
      if (typeof context === "function") {
        concurrency = worker;
        worker = context;
        context = null;
      }
      function asyncWrapper(arg, cb) {
        worker.call(this, arg).then(function(res) {
          cb(null, res);
        }, cb);
      }
      var queue = fastqueue(context, asyncWrapper, concurrency);
      var pushCb = queue.push;
      var unshiftCb = queue.unshift;
      queue.push = push2;
      queue.unshift = unshift;
      queue.drained = drained;
      return queue;
      function push2(value) {
        var p2 = new Promise(function(resolve4, reject) {
          pushCb(value, function(err, result) {
            if (err) {
              reject(err);
              return;
            }
            resolve4(result);
          });
        });
        p2.catch(noop);
        return p2;
      }
      function unshift(value) {
        var p2 = new Promise(function(resolve4, reject) {
          unshiftCb(value, function(err, result) {
            if (err) {
              reject(err);
              return;
            }
            resolve4(result);
          });
        });
        p2.catch(noop);
        return p2;
      }
      function drained() {
        if (queue.idle()) {
          return new Promise(function(resolve4) {
            resolve4();
          });
        }
        var previousDrain = queue.drain;
        var p2 = new Promise(function(resolve4) {
          queue.drain = function() {
            previousDrain();
            resolve4();
          };
        });
        return p2;
      }
    }
    module2.exports = fastqueue;
    module2.exports.promise = queueAsPromised;
  }
});

// ../core/node_modules/@nodelib/fs.walk/out/readers/common.js
var require_common2 = __commonJS({
  "../core/node_modules/@nodelib/fs.walk/out/readers/common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;
    function isFatalError(settings, error) {
      if (settings.errorFilter === null) {
        return true;
      }
      return !settings.errorFilter(error);
    }
    exports.isFatalError = isFatalError;
    function isAppliedFilter(filter, value) {
      return filter === null || filter(value);
    }
    exports.isAppliedFilter = isAppliedFilter;
    function replacePathSegmentSeparator(filepath, separator) {
      return filepath.split(/[/\\]/).join(separator);
    }
    exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
    function joinPathSegments(a, b, separator) {
      if (a === "") {
        return b;
      }
      if (a.endsWith(separator)) {
        return a + b;
      }
      return a + separator + b;
    }
    exports.joinPathSegments = joinPathSegments;
  }
});

// ../core/node_modules/@nodelib/fs.walk/out/readers/reader.js
var require_reader = __commonJS({
  "../core/node_modules/@nodelib/fs.walk/out/readers/reader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var common = require_common2();
    var Reader = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
      }
    };
    exports.default = Reader;
  }
});

// ../core/node_modules/@nodelib/fs.walk/out/readers/async.js
var require_async3 = __commonJS({
  "../core/node_modules/@nodelib/fs.walk/out/readers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var events_1 = require("events");
    var fsScandir = require_out2();
    var fastq = require_queue();
    var common = require_common2();
    var reader_1 = require_reader();
    var AsyncReader = class extends reader_1.default {
      constructor(_root, _settings) {
        super(_root, _settings);
        this._settings = _settings;
        this._scandir = fsScandir.scandir;
        this._emitter = new events_1.EventEmitter();
        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
        this._isFatalError = false;
        this._isDestroyed = false;
        this._queue.drain = () => {
          if (!this._isFatalError) {
            this._emitter.emit("end");
          }
        };
      }
      read() {
        this._isFatalError = false;
        this._isDestroyed = false;
        setImmediate(() => {
          this._pushToQueue(this._root, this._settings.basePath);
        });
        return this._emitter;
      }
      get isDestroyed() {
        return this._isDestroyed;
      }
      destroy() {
        if (this._isDestroyed) {
          throw new Error("The reader is already destroyed");
        }
        this._isDestroyed = true;
        this._queue.killAndDrain();
      }
      onEntry(callback) {
        this._emitter.on("entry", callback);
      }
      onError(callback) {
        this._emitter.once("error", callback);
      }
      onEnd(callback) {
        this._emitter.once("end", callback);
      }
      _pushToQueue(directory, base) {
        const queueItem = { directory, base };
        this._queue.push(queueItem, (error) => {
          if (error !== null) {
            this._handleError(error);
          }
        });
      }
      _worker(item, done) {
        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
          if (error !== null) {
            done(error, void 0);
            return;
          }
          for (const entry of entries) {
            this._handleEntry(entry, item.base);
          }
          done(null, void 0);
        });
      }
      _handleError(error) {
        if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
          return;
        }
        this._isFatalError = true;
        this._isDestroyed = true;
        this._emitter.emit("error", error);
      }
      _handleEntry(entry, base) {
        if (this._isDestroyed || this._isFatalError) {
          return;
        }
        const fullpath = entry.path;
        if (base !== void 0) {
          entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
          this._emitEntry(entry);
        }
        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
          this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
        }
      }
      _emitEntry(entry) {
        this._emitter.emit("entry", entry);
      }
    };
    exports.default = AsyncReader;
  }
});

// ../core/node_modules/@nodelib/fs.walk/out/providers/async.js
var require_async4 = __commonJS({
  "../core/node_modules/@nodelib/fs.walk/out/providers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var async_1 = require_async3();
    var AsyncProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._storage = [];
      }
      read(callback) {
        this._reader.onError((error) => {
          callFailureCallback(callback, error);
        });
        this._reader.onEntry((entry) => {
          this._storage.push(entry);
        });
        this._reader.onEnd(() => {
          callSuccessCallback(callback, this._storage);
        });
        this._reader.read();
      }
    };
    exports.default = AsyncProvider;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, entries) {
      callback(null, entries);
    }
  }
});

// ../core/node_modules/@nodelib/fs.walk/out/providers/stream.js
var require_stream2 = __commonJS({
  "../core/node_modules/@nodelib/fs.walk/out/providers/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stream_1 = require("stream");
    var async_1 = require_async3();
    var StreamProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._stream = new stream_1.Readable({
          objectMode: true,
          read: () => {
          },
          destroy: () => {
            if (!this._reader.isDestroyed) {
              this._reader.destroy();
            }
          }
        });
      }
      read() {
        this._reader.onError((error) => {
          this._stream.emit("error", error);
        });
        this._reader.onEntry((entry) => {
          this._stream.push(entry);
        });
        this._reader.onEnd(() => {
          this._stream.push(null);
        });
        this._reader.read();
        return this._stream;
      }
    };
    exports.default = StreamProvider;
  }
});

// ../core/node_modules/@nodelib/fs.walk/out/readers/sync.js
var require_sync3 = __commonJS({
  "../core/node_modules/@nodelib/fs.walk/out/readers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var fsScandir = require_out2();
    var common = require_common2();
    var reader_1 = require_reader();
    var SyncReader = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._scandir = fsScandir.scandirSync;
        this._storage = [];
        this._queue = /* @__PURE__ */ new Set();
      }
      read() {
        this._pushToQueue(this._root, this._settings.basePath);
        this._handleQueue();
        return this._storage;
      }
      _pushToQueue(directory, base) {
        this._queue.add({ directory, base });
      }
      _handleQueue() {
        for (const item of this._queue.values()) {
          this._handleDirectory(item.directory, item.base);
        }
      }
      _handleDirectory(directory, base) {
        try {
          const entries = this._scandir(directory, this._settings.fsScandirSettings);
          for (const entry of entries) {
            this._handleEntry(entry, base);
          }
        } catch (error) {
          this._handleError(error);
        }
      }
      _handleError(error) {
        if (!common.isFatalError(this._settings, error)) {
          return;
        }
        throw error;
      }
      _handleEntry(entry, base) {
        const fullpath = entry.path;
        if (base !== void 0) {
          entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
          this._pushToStorage(entry);
        }
        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
          this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
        }
      }
      _pushToStorage(entry) {
        this._storage.push(entry);
      }
    };
    exports.default = SyncReader;
  }
});

// ../core/node_modules/@nodelib/fs.walk/out/providers/sync.js
var require_sync4 = __commonJS({
  "../core/node_modules/@nodelib/fs.walk/out/providers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sync_1 = require_sync3();
    var SyncProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new sync_1.default(this._root, this._settings);
      }
      read() {
        return this._reader.read();
      }
    };
    exports.default = SyncProvider;
  }
});

// ../core/node_modules/@nodelib/fs.walk/out/settings.js
var require_settings3 = __commonJS({
  "../core/node_modules/@nodelib/fs.walk/out/settings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var path11 = require("path");
    var fsScandir = require_out2();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.basePath = this._getValue(this._options.basePath, void 0);
        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
        this.deepFilter = this._getValue(this._options.deepFilter, null);
        this.entryFilter = this._getValue(this._options.entryFilter, null);
        this.errorFilter = this._getValue(this._options.errorFilter, null);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path11.sep);
        this.fsScandirSettings = new fsScandir.Settings({
          followSymbolicLinks: this._options.followSymbolicLinks,
          fs: this._options.fs,
          pathSegmentSeparator: this._options.pathSegmentSeparator,
          stats: this._options.stats,
          throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
        });
      }
      _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
      }
    };
    exports.default = Settings;
  }
});

// ../core/node_modules/@nodelib/fs.walk/out/index.js
var require_out3 = __commonJS({
  "../core/node_modules/@nodelib/fs.walk/out/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;
    var async_1 = require_async4();
    var stream_1 = require_stream2();
    var sync_1 = require_sync4();
    var settings_1 = require_settings3();
    exports.Settings = settings_1.default;
    function walk(directory, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
        return;
      }
      new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
    }
    exports.walk = walk;
    function walkSync(directory, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      const provider = new sync_1.default(directory, settings);
      return provider.read();
    }
    exports.walkSync = walkSync;
    function walkStream(directory, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      const provider = new stream_1.default(directory, settings);
      return provider.read();
    }
    exports.walkStream = walkStream;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// ../core/node_modules/fast-glob/out/readers/reader.js
var require_reader2 = __commonJS({
  "../core/node_modules/fast-glob/out/readers/reader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var path11 = require("path");
    var fsStat = require_out();
    var utils12 = require_utils4();
    var Reader = class {
      constructor(_settings) {
        this._settings = _settings;
        this._fsStatSettings = new fsStat.Settings({
          followSymbolicLink: this._settings.followSymbolicLinks,
          fs: this._settings.fs,
          throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
        });
      }
      _getFullEntryPath(filepath) {
        return path11.resolve(this._settings.cwd, filepath);
      }
      _makeEntry(stats, pattern) {
        const entry = {
          name: pattern,
          path: pattern,
          dirent: utils12.fs.createDirentFromStats(pattern, stats)
        };
        if (this._settings.stats) {
          entry.stats = stats;
        }
        return entry;
      }
      _isFatalError(error) {
        return !utils12.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
      }
    };
    exports.default = Reader;
  }
});

// ../core/node_modules/fast-glob/out/readers/stream.js
var require_stream3 = __commonJS({
  "../core/node_modules/fast-glob/out/readers/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stream_1 = require("stream");
    var fsStat = require_out();
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var ReaderStream = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkStream = fsWalk.walkStream;
        this._stat = fsStat.stat;
      }
      dynamic(root, options) {
        return this._walkStream(root, options);
      }
      static(patterns, options) {
        const filepaths = patterns.map(this._getFullEntryPath, this);
        const stream = new stream_1.PassThrough({ objectMode: true });
        stream._write = (index, _enc, done) => {
          return this._getEntry(filepaths[index], patterns[index], options).then((entry) => {
            if (entry !== null && options.entryFilter(entry)) {
              stream.push(entry);
            }
            if (index === filepaths.length - 1) {
              stream.end();
            }
            done();
          }).catch(done);
        };
        for (let i = 0; i < filepaths.length; i++) {
          stream.write(i);
        }
        return stream;
      }
      _getEntry(filepath, pattern, options) {
        return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern)).catch((error) => {
          if (options.errorFilter(error)) {
            return null;
          }
          throw error;
        });
      }
      _getStat(filepath) {
        return new Promise((resolve4, reject) => {
          this._stat(filepath, this._fsStatSettings, (error, stats) => {
            return error === null ? resolve4(stats) : reject(error);
          });
        });
      }
    };
    exports.default = ReaderStream;
  }
});

// ../core/node_modules/fast-glob/out/readers/async.js
var require_async5 = __commonJS({
  "../core/node_modules/fast-glob/out/readers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var stream_1 = require_stream3();
    var ReaderAsync = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkAsync = fsWalk.walk;
        this._readerStream = new stream_1.default(this._settings);
      }
      dynamic(root, options) {
        return new Promise((resolve4, reject) => {
          this._walkAsync(root, options, (error, entries) => {
            if (error === null) {
              resolve4(entries);
            } else {
              reject(error);
            }
          });
        });
      }
      async static(patterns, options) {
        const entries = [];
        const stream = this._readerStream.static(patterns, options);
        return new Promise((resolve4, reject) => {
          stream.once("error", reject);
          stream.on("data", (entry) => entries.push(entry));
          stream.once("end", () => resolve4(entries));
        });
      }
    };
    exports.default = ReaderAsync;
  }
});

// ../core/node_modules/fast-glob/out/providers/matchers/matcher.js
var require_matcher = __commonJS({
  "../core/node_modules/fast-glob/out/providers/matchers/matcher.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils12 = require_utils4();
    var Matcher = class {
      constructor(_patterns, _settings, _micromatchOptions) {
        this._patterns = _patterns;
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this._storage = [];
        this._fillStorage();
      }
      _fillStorage() {
        const patterns = utils12.pattern.expandPatternsWithBraceExpansion(this._patterns);
        for (const pattern of patterns) {
          const segments = this._getPatternSegments(pattern);
          const sections = this._splitSegmentsIntoSections(segments);
          this._storage.push({
            complete: sections.length <= 1,
            pattern,
            segments,
            sections
          });
        }
      }
      _getPatternSegments(pattern) {
        const parts = utils12.pattern.getPatternParts(pattern, this._micromatchOptions);
        return parts.map((part) => {
          const dynamic = utils12.pattern.isDynamicPattern(part, this._settings);
          if (!dynamic) {
            return {
              dynamic: false,
              pattern: part
            };
          }
          return {
            dynamic: true,
            pattern: part,
            patternRe: utils12.pattern.makeRe(part, this._micromatchOptions)
          };
        });
      }
      _splitSegmentsIntoSections(segments) {
        return utils12.array.splitWhen(segments, (segment) => segment.dynamic && utils12.pattern.hasGlobStar(segment.pattern));
      }
    };
    exports.default = Matcher;
  }
});

// ../core/node_modules/fast-glob/out/providers/matchers/partial.js
var require_partial = __commonJS({
  "../core/node_modules/fast-glob/out/providers/matchers/partial.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var matcher_1 = require_matcher();
    var PartialMatcher = class extends matcher_1.default {
      match(filepath) {
        const parts = filepath.split("/");
        const levels = parts.length;
        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
        for (const pattern of patterns) {
          const section = pattern.sections[0];
          if (!pattern.complete && levels > section.length) {
            return true;
          }
          const match = parts.every((part, index) => {
            const segment = pattern.segments[index];
            if (segment.dynamic && segment.patternRe.test(part)) {
              return true;
            }
            if (!segment.dynamic && segment.pattern === part) {
              return true;
            }
            return false;
          });
          if (match) {
            return true;
          }
        }
        return false;
      }
    };
    exports.default = PartialMatcher;
  }
});

// ../core/node_modules/fast-glob/out/providers/filters/deep.js
var require_deep = __commonJS({
  "../core/node_modules/fast-glob/out/providers/filters/deep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils12 = require_utils4();
    var partial_1 = require_partial();
    var DeepFilter = class {
      constructor(_settings, _micromatchOptions) {
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
      }
      getFilter(basePath, positive, negative) {
        const matcher = this._getMatcher(positive);
        const negativeRe = this._getNegativePatternsRe(negative);
        return (entry) => this._filter(basePath, entry, matcher, negativeRe);
      }
      _getMatcher(patterns) {
        return new partial_1.default(patterns, this._settings, this._micromatchOptions);
      }
      _getNegativePatternsRe(patterns) {
        const affectDepthOfReadingPatterns = patterns.filter(utils12.pattern.isAffectDepthOfReadingPattern);
        return utils12.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
      }
      _filter(basePath, entry, matcher, negativeRe) {
        if (this._isSkippedByDeep(basePath, entry.path)) {
          return false;
        }
        if (this._isSkippedSymbolicLink(entry)) {
          return false;
        }
        const filepath = utils12.path.removeLeadingDotSegment(entry.path);
        if (this._isSkippedByPositivePatterns(filepath, matcher)) {
          return false;
        }
        return this._isSkippedByNegativePatterns(filepath, negativeRe);
      }
      _isSkippedByDeep(basePath, entryPath) {
        if (this._settings.deep === Infinity) {
          return false;
        }
        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
      }
      _getEntryLevel(basePath, entryPath) {
        const entryPathDepth = entryPath.split("/").length;
        if (basePath === "") {
          return entryPathDepth;
        }
        const basePathDepth = basePath.split("/").length;
        return entryPathDepth - basePathDepth;
      }
      _isSkippedSymbolicLink(entry) {
        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
      }
      _isSkippedByPositivePatterns(entryPath, matcher) {
        return !this._settings.baseNameMatch && !matcher.match(entryPath);
      }
      _isSkippedByNegativePatterns(entryPath, patternsRe) {
        return !utils12.pattern.matchAny(entryPath, patternsRe);
      }
    };
    exports.default = DeepFilter;
  }
});

// ../core/node_modules/fast-glob/out/providers/filters/entry.js
var require_entry = __commonJS({
  "../core/node_modules/fast-glob/out/providers/filters/entry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils12 = require_utils4();
    var EntryFilter = class {
      constructor(_settings, _micromatchOptions) {
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this.index = /* @__PURE__ */ new Map();
      }
      getFilter(positive, negative) {
        const positiveRe = utils12.pattern.convertPatternsToRe(positive, this._micromatchOptions);
        const negativeRe = utils12.pattern.convertPatternsToRe(negative, this._micromatchOptions);
        return (entry) => this._filter(entry, positiveRe, negativeRe);
      }
      _filter(entry, positiveRe, negativeRe) {
        if (this._settings.unique && this._isDuplicateEntry(entry)) {
          return false;
        }
        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
          return false;
        }
        if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {
          return false;
        }
        const filepath = this._settings.baseNameMatch ? entry.name : entry.path;
        const isDirectory = entry.dirent.isDirectory();
        const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory) && !this._isMatchToPatterns(entry.path, negativeRe, isDirectory);
        if (this._settings.unique && isMatched) {
          this._createIndexRecord(entry);
        }
        return isMatched;
      }
      _isDuplicateEntry(entry) {
        return this.index.has(entry.path);
      }
      _createIndexRecord(entry) {
        this.index.set(entry.path, void 0);
      }
      _onlyFileFilter(entry) {
        return this._settings.onlyFiles && !entry.dirent.isFile();
      }
      _onlyDirectoryFilter(entry) {
        return this._settings.onlyDirectories && !entry.dirent.isDirectory();
      }
      _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
        if (!this._settings.absolute) {
          return false;
        }
        const fullpath = utils12.path.makeAbsolute(this._settings.cwd, entryPath);
        return utils12.pattern.matchAny(fullpath, patternsRe);
      }
      _isMatchToPatterns(entryPath, patternsRe, isDirectory) {
        const filepath = utils12.path.removeLeadingDotSegment(entryPath);
        const isMatched = utils12.pattern.matchAny(filepath, patternsRe);
        if (!isMatched && isDirectory) {
          return utils12.pattern.matchAny(filepath + "/", patternsRe);
        }
        return isMatched;
      }
    };
    exports.default = EntryFilter;
  }
});

// ../core/node_modules/fast-glob/out/providers/filters/error.js
var require_error2 = __commonJS({
  "../core/node_modules/fast-glob/out/providers/filters/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils12 = require_utils4();
    var ErrorFilter = class {
      constructor(_settings) {
        this._settings = _settings;
      }
      getFilter() {
        return (error) => this._isNonFatalError(error);
      }
      _isNonFatalError(error) {
        return utils12.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
      }
    };
    exports.default = ErrorFilter;
  }
});

// ../core/node_modules/fast-glob/out/providers/transformers/entry.js
var require_entry2 = __commonJS({
  "../core/node_modules/fast-glob/out/providers/transformers/entry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils12 = require_utils4();
    var EntryTransformer = class {
      constructor(_settings) {
        this._settings = _settings;
      }
      getTransformer() {
        return (entry) => this._transform(entry);
      }
      _transform(entry) {
        let filepath = entry.path;
        if (this._settings.absolute) {
          filepath = utils12.path.makeAbsolute(this._settings.cwd, filepath);
          filepath = utils12.path.unixify(filepath);
        }
        if (this._settings.markDirectories && entry.dirent.isDirectory()) {
          filepath += "/";
        }
        if (!this._settings.objectMode) {
          return filepath;
        }
        return Object.assign(Object.assign({}, entry), { path: filepath });
      }
    };
    exports.default = EntryTransformer;
  }
});

// ../core/node_modules/fast-glob/out/providers/provider.js
var require_provider = __commonJS({
  "../core/node_modules/fast-glob/out/providers/provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var path11 = require("path");
    var deep_1 = require_deep();
    var entry_1 = require_entry();
    var error_1 = require_error2();
    var entry_2 = require_entry2();
    var Provider = class {
      constructor(_settings) {
        this._settings = _settings;
        this.errorFilter = new error_1.default(this._settings);
        this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
        this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
        this.entryTransformer = new entry_2.default(this._settings);
      }
      _getRootDirectory(task) {
        return path11.resolve(this._settings.cwd, task.base);
      }
      _getReaderOptions(task) {
        const basePath = task.base === "." ? "" : task.base;
        return {
          basePath,
          pathSegmentSeparator: "/",
          concurrency: this._settings.concurrency,
          deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
          entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
          errorFilter: this.errorFilter.getFilter(),
          followSymbolicLinks: this._settings.followSymbolicLinks,
          fs: this._settings.fs,
          stats: this._settings.stats,
          throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
          transform: this.entryTransformer.getTransformer()
        };
      }
      _getMicromatchOptions() {
        return {
          dot: this._settings.dot,
          matchBase: this._settings.baseNameMatch,
          nobrace: !this._settings.braceExpansion,
          nocase: !this._settings.caseSensitiveMatch,
          noext: !this._settings.extglob,
          noglobstar: !this._settings.globstar,
          posix: true,
          strictSlashes: false
        };
      }
    };
    exports.default = Provider;
  }
});

// ../core/node_modules/fast-glob/out/providers/async.js
var require_async6 = __commonJS({
  "../core/node_modules/fast-glob/out/providers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var async_1 = require_async5();
    var provider_1 = require_provider();
    var ProviderAsync = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new async_1.default(this._settings);
      }
      async read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const entries = await this.api(root, task, options);
        return entries.map((entry) => options.transform(entry));
      }
      api(root, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports.default = ProviderAsync;
  }
});

// ../core/node_modules/fast-glob/out/providers/stream.js
var require_stream4 = __commonJS({
  "../core/node_modules/fast-glob/out/providers/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stream_1 = require("stream");
    var stream_2 = require_stream3();
    var provider_1 = require_provider();
    var ProviderStream = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new stream_2.default(this._settings);
      }
      read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const source = this.api(root, task, options);
        const destination = new stream_1.Readable({ objectMode: true, read: () => {
        } });
        source.once("error", (error) => destination.emit("error", error)).on("data", (entry) => destination.emit("data", options.transform(entry))).once("end", () => destination.emit("end"));
        destination.once("close", () => source.destroy());
        return destination;
      }
      api(root, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports.default = ProviderStream;
  }
});

// ../core/node_modules/fast-glob/out/readers/sync.js
var require_sync5 = __commonJS({
  "../core/node_modules/fast-glob/out/readers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var fsStat = require_out();
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var ReaderSync = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkSync = fsWalk.walkSync;
        this._statSync = fsStat.statSync;
      }
      dynamic(root, options) {
        return this._walkSync(root, options);
      }
      static(patterns, options) {
        const entries = [];
        for (const pattern of patterns) {
          const filepath = this._getFullEntryPath(pattern);
          const entry = this._getEntry(filepath, pattern, options);
          if (entry === null || !options.entryFilter(entry)) {
            continue;
          }
          entries.push(entry);
        }
        return entries;
      }
      _getEntry(filepath, pattern, options) {
        try {
          const stats = this._getStat(filepath);
          return this._makeEntry(stats, pattern);
        } catch (error) {
          if (options.errorFilter(error)) {
            return null;
          }
          throw error;
        }
      }
      _getStat(filepath) {
        return this._statSync(filepath, this._fsStatSettings);
      }
    };
    exports.default = ReaderSync;
  }
});

// ../core/node_modules/fast-glob/out/providers/sync.js
var require_sync6 = __commonJS({
  "../core/node_modules/fast-glob/out/providers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sync_1 = require_sync5();
    var provider_1 = require_provider();
    var ProviderSync = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new sync_1.default(this._settings);
      }
      read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const entries = this.api(root, task, options);
        return entries.map(options.transform);
      }
      api(root, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports.default = ProviderSync;
  }
});

// ../core/node_modules/fast-glob/out/settings.js
var require_settings4 = __commonJS({
  "../core/node_modules/fast-glob/out/settings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
    var fs5 = require("fs");
    var os = require("os");
    var CPU_COUNT = Math.max(os.cpus().length, 1);
    exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
      lstat: fs5.lstat,
      lstatSync: fs5.lstatSync,
      stat: fs5.stat,
      statSync: fs5.statSync,
      readdir: fs5.readdir,
      readdirSync: fs5.readdirSync
    };
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.absolute = this._getValue(this._options.absolute, false);
        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
        this.braceExpansion = this._getValue(this._options.braceExpansion, true);
        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
        this.cwd = this._getValue(this._options.cwd, process.cwd());
        this.deep = this._getValue(this._options.deep, Infinity);
        this.dot = this._getValue(this._options.dot, false);
        this.extglob = this._getValue(this._options.extglob, true);
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
        this.fs = this._getFileSystemMethods(this._options.fs);
        this.globstar = this._getValue(this._options.globstar, true);
        this.ignore = this._getValue(this._options.ignore, []);
        this.markDirectories = this._getValue(this._options.markDirectories, false);
        this.objectMode = this._getValue(this._options.objectMode, false);
        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
        this.onlyFiles = this._getValue(this._options.onlyFiles, true);
        this.stats = this._getValue(this._options.stats, false);
        this.suppressErrors = this._getValue(this._options.suppressErrors, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
        this.unique = this._getValue(this._options.unique, true);
        if (this.onlyDirectories) {
          this.onlyFiles = false;
        }
        if (this.stats) {
          this.objectMode = true;
        }
      }
      _getValue(option, value) {
        return option === void 0 ? value : option;
      }
      _getFileSystemMethods(methods = {}) {
        return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
      }
    };
    exports.default = Settings;
  }
});

// ../core/node_modules/fast-glob/out/index.js
var require_out4 = __commonJS({
  "../core/node_modules/fast-glob/out/index.js"(exports, module2) {
    "use strict";
    var taskManager = require_tasks();
    var patternManager = require_patterns();
    var async_1 = require_async6();
    var stream_1 = require_stream4();
    var sync_1 = require_sync6();
    var settings_1 = require_settings4();
    var utils12 = require_utils4();
    async function FastGlob(source, options) {
      assertPatternsInput2(source);
      const works = getWorks(source, async_1.default, options);
      const result = await Promise.all(works);
      return utils12.array.flatten(result);
    }
    (function(FastGlob2) {
      function sync(source, options) {
        assertPatternsInput2(source);
        const works = getWorks(source, sync_1.default, options);
        return utils12.array.flatten(works);
      }
      FastGlob2.sync = sync;
      function stream(source, options) {
        assertPatternsInput2(source);
        const works = getWorks(source, stream_1.default, options);
        return utils12.stream.merge(works);
      }
      FastGlob2.stream = stream;
      function generateTasks2(source, options) {
        assertPatternsInput2(source);
        const patterns = patternManager.transform([].concat(source));
        const settings = new settings_1.default(options);
        return taskManager.generate(patterns, settings);
      }
      FastGlob2.generateTasks = generateTasks2;
      function isDynamicPattern2(source, options) {
        assertPatternsInput2(source);
        const settings = new settings_1.default(options);
        return utils12.pattern.isDynamicPattern(source, settings);
      }
      FastGlob2.isDynamicPattern = isDynamicPattern2;
      function escapePath(source) {
        assertPatternsInput2(source);
        return utils12.path.escape(source);
      }
      FastGlob2.escapePath = escapePath;
    })(FastGlob || (FastGlob = {}));
    function getWorks(source, _Provider, options) {
      const patterns = patternManager.transform([].concat(source));
      const settings = new settings_1.default(options);
      const tasks = taskManager.generate(patterns, settings);
      const provider = new _Provider(settings);
      return tasks.map(provider.read, provider);
    }
    function assertPatternsInput2(input) {
      const source = [].concat(input);
      const isValidSource = source.every((item) => utils12.string.isString(item) && !utils12.string.isEmpty(item));
      if (!isValidSource) {
        throw new TypeError("Patterns must be a string (non empty) or an array of strings");
      }
    }
    module2.exports = FastGlob;
  }
});

// ../core/node_modules/path-type/index.js
var require_path_type = __commonJS({
  "../core/node_modules/path-type/index.js"(exports) {
    "use strict";
    var { promisify } = require("util");
    var fs5 = require("fs");
    async function isType(fsStatType, statsMethodName, filePath) {
      if (typeof filePath !== "string") {
        throw new TypeError(`Expected a string, got ${typeof filePath}`);
      }
      try {
        const stats = await promisify(fs5[fsStatType])(filePath);
        return stats[statsMethodName]();
      } catch (error) {
        if (error.code === "ENOENT") {
          return false;
        }
        throw error;
      }
    }
    function isTypeSync(fsStatType, statsMethodName, filePath) {
      if (typeof filePath !== "string") {
        throw new TypeError(`Expected a string, got ${typeof filePath}`);
      }
      try {
        return fs5[fsStatType](filePath)[statsMethodName]();
      } catch (error) {
        if (error.code === "ENOENT") {
          return false;
        }
        throw error;
      }
    }
    exports.isFile = isType.bind(null, "stat", "isFile");
    exports.isDirectory = isType.bind(null, "stat", "isDirectory");
    exports.isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
    exports.isFileSync = isTypeSync.bind(null, "statSync", "isFile");
    exports.isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
    exports.isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");
  }
});

// ../core/node_modules/dir-glob/index.js
var require_dir_glob = __commonJS({
  "../core/node_modules/dir-glob/index.js"(exports, module2) {
    "use strict";
    var path11 = require("path");
    var pathType = require_path_type();
    var getExtensions = (extensions) => extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0];
    var getPath = (filepath, cwd) => {
      const pth = filepath[0] === "!" ? filepath.slice(1) : filepath;
      return path11.isAbsolute(pth) ? pth : path11.join(cwd, pth);
    };
    var addExtensions = (file, extensions) => {
      if (path11.extname(file)) {
        return `**/${file}`;
      }
      return `**/${file}.${getExtensions(extensions)}`;
    };
    var getGlob = (directory, options) => {
      if (options.files && !Array.isArray(options.files)) {
        throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof options.files}\``);
      }
      if (options.extensions && !Array.isArray(options.extensions)) {
        throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof options.extensions}\``);
      }
      if (options.files && options.extensions) {
        return options.files.map((x2) => path11.posix.join(directory, addExtensions(x2, options.extensions)));
      }
      if (options.files) {
        return options.files.map((x2) => path11.posix.join(directory, `**/${x2}`));
      }
      if (options.extensions) {
        return [path11.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];
      }
      return [path11.posix.join(directory, "**")];
    };
    module2.exports = async (input, options) => {
      options = {
        cwd: process.cwd(),
        ...options
      };
      if (typeof options.cwd !== "string") {
        throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
      }
      const globs = await Promise.all([].concat(input).map(async (x2) => {
        const isDirectory = await pathType.isDirectory(getPath(x2, options.cwd));
        return isDirectory ? getGlob(x2, options) : x2;
      }));
      return [].concat.apply([], globs);
    };
    module2.exports.sync = (input, options) => {
      options = {
        cwd: process.cwd(),
        ...options
      };
      if (typeof options.cwd !== "string") {
        throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
      }
      const globs = [].concat(input).map((x2) => pathType.isDirectorySync(getPath(x2, options.cwd)) ? getGlob(x2, options) : x2);
      return [].concat.apply([], globs);
    };
  }
});

// ../core/node_modules/ignore/index.js
var require_ignore = __commonJS({
  "../core/node_modules/ignore/index.js"(exports, module2) {
    function makeArray(subject) {
      return Array.isArray(subject) ? subject : [subject];
    }
    var EMPTY = "";
    var SPACE = " ";
    var ESCAPE = "\\";
    var REGEX_TEST_BLANK_LINE = /^\s+$/;
    var REGEX_INVALID_TRAILING_BACKSLASH = /(?:[^\\]|^)\\$/;
    var REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
    var REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
    var REGEX_SPLITALL_CRLF = /\r?\n/g;
    var REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
    var SLASH = "/";
    var TMP_KEY_IGNORE = "node-ignore";
    if (typeof Symbol !== "undefined") {
      TMP_KEY_IGNORE = Symbol.for("node-ignore");
    }
    var KEY_IGNORE = TMP_KEY_IGNORE;
    var define2 = (object, key, value) => Object.defineProperty(object, key, { value });
    var REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
    var RETURN_FALSE = () => false;
    var sanitizeRange = (range) => range.replace(
      REGEX_REGEXP_RANGE,
      (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY
    );
    var cleanRangeBackSlash = (slashes) => {
      const { length } = slashes;
      return slashes.slice(0, length - length % 2);
    };
    var REPLACERS = [
      // > Trailing spaces are ignored unless they are quoted with backslash ("\")
      [
        // (a\ ) -> (a )
        // (a  ) -> (a)
        // (a \ ) -> (a  )
        /\\?\s+$/,
        (match) => match.indexOf("\\") === 0 ? SPACE : EMPTY
      ],
      // replace (\ ) with ' '
      [
        /\\\s/g,
        () => SPACE
      ],
      // Escape metacharacters
      // which is written down by users but means special for regular expressions.
      // > There are 12 characters with special meanings:
      // > - the backslash \,
      // > - the caret ^,
      // > - the dollar sign $,
      // > - the period or dot .,
      // > - the vertical bar or pipe symbol |,
      // > - the question mark ?,
      // > - the asterisk or star *,
      // > - the plus sign +,
      // > - the opening parenthesis (,
      // > - the closing parenthesis ),
      // > - and the opening square bracket [,
      // > - the opening curly brace {,
      // > These special characters are often called "metacharacters".
      [
        /[\\$.|*+(){^]/g,
        (match) => `\\${match}`
      ],
      [
        // > a question mark (?) matches a single character
        /(?!\\)\?/g,
        () => "[^/]"
      ],
      // leading slash
      [
        // > A leading slash matches the beginning of the pathname.
        // > For example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
        // A leading slash matches the beginning of the pathname
        /^\//,
        () => "^"
      ],
      // replace special metacharacter slash after the leading slash
      [
        /\//g,
        () => "\\/"
      ],
      [
        // > A leading "**" followed by a slash means match in all directories.
        // > For example, "**/foo" matches file or directory "foo" anywhere,
        // > the same as pattern "foo".
        // > "**/foo/bar" matches file or directory "bar" anywhere that is directly
        // >   under directory "foo".
        // Notice that the '*'s have been replaced as '\\*'
        /^\^*\\\*\\\*\\\//,
        // '**/foo' <-> 'foo'
        () => "^(?:.*\\/)?"
      ],
      // starting
      [
        // there will be no leading '/'
        //   (which has been replaced by section "leading slash")
        // If starts with '**', adding a '^' to the regular expression also works
        /^(?=[^^])/,
        function startingReplacer() {
          return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
        }
      ],
      // two globstars
      [
        // Use lookahead assertions so that we could match more than one `'/**'`
        /\\\/\\\*\\\*(?=\\\/|$)/g,
        // Zero, one or several directories
        // should not use '*', or it will be replaced by the next replacer
        // Check if it is not the last `'/**'`
        (_2, index, str) => index + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
      ],
      // normal intermediate wildcards
      [
        // Never replace escaped '*'
        // ignore rule '\*' will match the path '*'
        // 'abc.*/' -> go
        // 'abc.*'  -> skip this rule,
        //    coz trailing single wildcard will be handed by [trailing wildcard]
        /(^|[^\\]+)(\\\*)+(?=.+)/g,
        // '*.js' matches '.js'
        // '*.js' doesn't match 'abc'
        (_2, p1, p2) => {
          const unescaped = p2.replace(/\\\*/g, "[^\\/]*");
          return p1 + unescaped;
        }
      ],
      [
        // unescape, revert step 3 except for back slash
        // For example, if a user escape a '\\*',
        // after step 3, the result will be '\\\\\\*'
        /\\\\\\(?=[$.|*+(){^])/g,
        () => ESCAPE
      ],
      [
        // '\\\\' -> '\\'
        /\\\\/g,
        () => ESCAPE
      ],
      [
        // > The range notation, e.g. [a-zA-Z],
        // > can be used to match one of the characters in a range.
        // `\` is escaped by step 3
        /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
        (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : "[]" : "[]"
      ],
      // ending
      [
        // 'js' will not match 'js.'
        // 'ab' will not match 'abc'
        /(?:[^*])$/,
        // WTF!
        // https://git-scm.com/docs/gitignore
        // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)
        // which re-fixes #24, #38
        // > If there is a separator at the end of the pattern then the pattern
        // > will only match directories, otherwise the pattern can match both
        // > files and directories.
        // 'js*' will not match 'a.js'
        // 'js/' will not match 'a.js'
        // 'js' will match 'a.js' and 'a.js/'
        (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`
      ],
      // trailing wildcard
      [
        /(\^|\\\/)?\\\*$/,
        (_2, p1) => {
          const prefix = p1 ? `${p1}[^/]+` : "[^/]*";
          return `${prefix}(?=$|\\/$)`;
        }
      ]
    ];
    var regexCache = /* @__PURE__ */ Object.create(null);
    var makeRegex = (pattern, ignoreCase) => {
      let source = regexCache[pattern];
      if (!source) {
        source = REPLACERS.reduce(
          (prev, current) => prev.replace(current[0], current[1].bind(pattern)),
          pattern
        );
        regexCache[pattern] = source;
      }
      return ignoreCase ? new RegExp(source, "i") : new RegExp(source);
    };
    var isString = (subject) => typeof subject === "string";
    var checkPattern = (pattern) => pattern && isString(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) && !REGEX_INVALID_TRAILING_BACKSLASH.test(pattern) && pattern.indexOf("#") !== 0;
    var splitPattern = (pattern) => pattern.split(REGEX_SPLITALL_CRLF);
    var IgnoreRule = class {
      constructor(origin, pattern, negative, regex) {
        this.origin = origin;
        this.pattern = pattern;
        this.negative = negative;
        this.regex = regex;
      }
    };
    var createRule = (pattern, ignoreCase) => {
      const origin = pattern;
      let negative = false;
      if (pattern.indexOf("!") === 0) {
        negative = true;
        pattern = pattern.substr(1);
      }
      pattern = pattern.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
      const regex = makeRegex(pattern, ignoreCase);
      return new IgnoreRule(
        origin,
        pattern,
        negative,
        regex
      );
    };
    var throwError = (message, Ctor) => {
      throw new Ctor(message);
    };
    var checkPath = (path11, originalPath, doThrow) => {
      if (!isString(path11)) {
        return doThrow(
          `path must be a string, but got \`${originalPath}\``,
          TypeError
        );
      }
      if (!path11) {
        return doThrow(`path must not be empty`, TypeError);
      }
      if (checkPath.isNotRelative(path11)) {
        const r = "`path.relative()`d";
        return doThrow(
          `path should be a ${r} string, but got "${originalPath}"`,
          RangeError
        );
      }
      return true;
    };
    var isNotRelative = (path11) => REGEX_TEST_INVALID_PATH.test(path11);
    checkPath.isNotRelative = isNotRelative;
    checkPath.convert = (p2) => p2;
    var Ignore = class {
      constructor({
        ignorecase = true,
        ignoreCase = ignorecase,
        allowRelativePaths = false
      } = {}) {
        define2(this, KEY_IGNORE, true);
        this._rules = [];
        this._ignoreCase = ignoreCase;
        this._allowRelativePaths = allowRelativePaths;
        this._initCache();
      }
      _initCache() {
        this._ignoreCache = /* @__PURE__ */ Object.create(null);
        this._testCache = /* @__PURE__ */ Object.create(null);
      }
      _addPattern(pattern) {
        if (pattern && pattern[KEY_IGNORE]) {
          this._rules = this._rules.concat(pattern._rules);
          this._added = true;
          return;
        }
        if (checkPattern(pattern)) {
          const rule = createRule(pattern, this._ignoreCase);
          this._added = true;
          this._rules.push(rule);
        }
      }
      // @param {Array<string> | string | Ignore} pattern
      add(pattern) {
        this._added = false;
        makeArray(
          isString(pattern) ? splitPattern(pattern) : pattern
        ).forEach(this._addPattern, this);
        if (this._added) {
          this._initCache();
        }
        return this;
      }
      // legacy
      addPattern(pattern) {
        return this.add(pattern);
      }
      //          |           ignored : unignored
      // negative |   0:0   |   0:1   |   1:0   |   1:1
      // -------- | ------- | ------- | ------- | --------
      //     0    |  TEST   |  TEST   |  SKIP   |    X
      //     1    |  TESTIF |  SKIP   |  TEST   |    X
      // - SKIP: always skip
      // - TEST: always test
      // - TESTIF: only test if checkUnignored
      // - X: that never happen
      // @param {boolean} whether should check if the path is unignored,
      //   setting `checkUnignored` to `false` could reduce additional
      //   path matching.
      // @returns {TestResult} true if a file is ignored
      _testOne(path11, checkUnignored) {
        let ignored = false;
        let unignored = false;
        this._rules.forEach((rule) => {
          const { negative } = rule;
          if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
            return;
          }
          const matched = rule.regex.test(path11);
          if (matched) {
            ignored = !negative;
            unignored = negative;
          }
        });
        return {
          ignored,
          unignored
        };
      }
      // @returns {TestResult}
      _test(originalPath, cache, checkUnignored, slices) {
        const path11 = originalPath && checkPath.convert(originalPath);
        checkPath(
          path11,
          originalPath,
          this._allowRelativePaths ? RETURN_FALSE : throwError
        );
        return this._t(path11, cache, checkUnignored, slices);
      }
      _t(path11, cache, checkUnignored, slices) {
        if (path11 in cache) {
          return cache[path11];
        }
        if (!slices) {
          slices = path11.split(SLASH);
        }
        slices.pop();
        if (!slices.length) {
          return cache[path11] = this._testOne(path11, checkUnignored);
        }
        const parent = this._t(
          slices.join(SLASH) + SLASH,
          cache,
          checkUnignored,
          slices
        );
        return cache[path11] = parent.ignored ? parent : this._testOne(path11, checkUnignored);
      }
      ignores(path11) {
        return this._test(path11, this._ignoreCache, false).ignored;
      }
      createFilter() {
        return (path11) => !this.ignores(path11);
      }
      filter(paths) {
        return makeArray(paths).filter(this.createFilter());
      }
      // @returns {TestResult}
      test(path11) {
        return this._test(path11, this._testCache, true);
      }
    };
    var factory = (options) => new Ignore(options);
    var isPathValid = (path11) => checkPath(path11 && checkPath.convert(path11), path11, RETURN_FALSE);
    factory.isPathValid = isPathValid;
    factory.default = factory;
    module2.exports = factory;
    if (
      // Detect `process` so that it can run in browsers.
      typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")
    ) {
      const makePosix = (str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/");
      checkPath.convert = makePosix;
      const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
      checkPath.isNotRelative = (path11) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path11) || isNotRelative(path11);
    }
  }
});

// ../core/node_modules/xml2js/lib/defaults.js
var require_defaults = __commonJS({
  "../core/node_modules/xml2js/lib/defaults.js"(exports) {
    (function() {
      exports.defaults = {
        "0.1": {
          explicitCharkey: false,
          trim: true,
          normalize: true,
          normalizeTags: false,
          attrkey: "@",
          charkey: "#",
          explicitArray: false,
          ignoreAttrs: false,
          mergeAttrs: false,
          explicitRoot: false,
          validator: null,
          xmlns: false,
          explicitChildren: false,
          childkey: "@@",
          charsAsChildren: false,
          includeWhiteChars: false,
          async: false,
          strict: true,
          attrNameProcessors: null,
          attrValueProcessors: null,
          tagNameProcessors: null,
          valueProcessors: null,
          emptyTag: ""
        },
        "0.2": {
          explicitCharkey: false,
          trim: false,
          normalize: false,
          normalizeTags: false,
          attrkey: "$",
          charkey: "_",
          explicitArray: true,
          ignoreAttrs: false,
          mergeAttrs: false,
          explicitRoot: true,
          validator: null,
          xmlns: false,
          explicitChildren: false,
          preserveChildrenOrder: false,
          childkey: "$$",
          charsAsChildren: false,
          includeWhiteChars: false,
          async: false,
          strict: true,
          attrNameProcessors: null,
          attrValueProcessors: null,
          tagNameProcessors: null,
          valueProcessors: null,
          rootName: "root",
          xmldec: {
            "version": "1.0",
            "encoding": "UTF-8",
            "standalone": true
          },
          doctype: null,
          renderOpts: {
            "pretty": true,
            "indent": "  ",
            "newline": "\n"
          },
          headless: false,
          chunkSize: 1e4,
          emptyTag: "",
          cdata: false
        }
      };
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/Utility.js
var require_Utility = __commonJS({
  "../core/node_modules/xmlbuilder/lib/Utility.js"(exports, module2) {
    (function() {
      var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject, slice = [].slice, hasProp = {}.hasOwnProperty;
      assign = function() {
        var i, key, len, source, sources, target;
        target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (isFunction(Object.assign)) {
          Object.assign.apply(null, arguments);
        } else {
          for (i = 0, len = sources.length; i < len; i++) {
            source = sources[i];
            if (source != null) {
              for (key in source) {
                if (!hasProp.call(source, key))
                  continue;
                target[key] = source[key];
              }
            }
          }
        }
        return target;
      };
      isFunction = function(val) {
        return !!val && Object.prototype.toString.call(val) === "[object Function]";
      };
      isObject = function(val) {
        var ref;
        return !!val && ((ref = typeof val) === "function" || ref === "object");
      };
      isArray = function(val) {
        if (isFunction(Array.isArray)) {
          return Array.isArray(val);
        } else {
          return Object.prototype.toString.call(val) === "[object Array]";
        }
      };
      isEmpty = function(val) {
        var key;
        if (isArray(val)) {
          return !val.length;
        } else {
          for (key in val) {
            if (!hasProp.call(val, key))
              continue;
            return false;
          }
          return true;
        }
      };
      isPlainObject = function(val) {
        var ctor, proto;
        return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === "function" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
      };
      getValue = function(obj) {
        if (isFunction(obj.valueOf)) {
          return obj.valueOf();
        } else {
          return obj;
        }
      };
      module2.exports.assign = assign;
      module2.exports.isFunction = isFunction;
      module2.exports.isObject = isObject;
      module2.exports.isArray = isArray;
      module2.exports.isEmpty = isEmpty;
      module2.exports.isPlainObject = isPlainObject;
      module2.exports.getValue = getValue;
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDOMImplementation.js
var require_XMLDOMImplementation = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDOMImplementation.js"(exports, module2) {
    (function() {
      var XMLDOMImplementation;
      module2.exports = XMLDOMImplementation = function() {
        function XMLDOMImplementation2() {
        }
        XMLDOMImplementation2.prototype.hasFeature = function(feature, version) {
          return true;
        };
        XMLDOMImplementation2.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation2.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation2.prototype.createHTMLDocument = function(title) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation2.prototype.getFeature = function(feature, version) {
          throw new Error("This DOM method is not implemented.");
        };
        return XMLDOMImplementation2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js
var require_XMLDOMErrorHandler = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js"(exports, module2) {
    (function() {
      var XMLDOMErrorHandler;
      module2.exports = XMLDOMErrorHandler = function() {
        function XMLDOMErrorHandler2() {
        }
        XMLDOMErrorHandler2.prototype.handleError = function(error) {
          throw new Error(error);
        };
        return XMLDOMErrorHandler2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDOMStringList.js
var require_XMLDOMStringList = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDOMStringList.js"(exports, module2) {
    (function() {
      var XMLDOMStringList;
      module2.exports = XMLDOMStringList = function() {
        function XMLDOMStringList2(arr) {
          this.arr = arr || [];
        }
        Object.defineProperty(XMLDOMStringList2.prototype, "length", {
          get: function() {
            return this.arr.length;
          }
        });
        XMLDOMStringList2.prototype.item = function(index) {
          return this.arr[index] || null;
        };
        XMLDOMStringList2.prototype.contains = function(str) {
          return this.arr.indexOf(str) !== -1;
        };
        return XMLDOMStringList2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDOMConfiguration.js
var require_XMLDOMConfiguration = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDOMConfiguration.js"(exports, module2) {
    (function() {
      var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;
      XMLDOMErrorHandler = require_XMLDOMErrorHandler();
      XMLDOMStringList = require_XMLDOMStringList();
      module2.exports = XMLDOMConfiguration = function() {
        function XMLDOMConfiguration2() {
          var clonedSelf;
          this.defaultParams = {
            "canonical-form": false,
            "cdata-sections": false,
            "comments": false,
            "datatype-normalization": false,
            "element-content-whitespace": true,
            "entities": true,
            "error-handler": new XMLDOMErrorHandler(),
            "infoset": true,
            "validate-if-schema": false,
            "namespaces": true,
            "namespace-declarations": true,
            "normalize-characters": false,
            "schema-location": "",
            "schema-type": "",
            "split-cdata-sections": true,
            "validate": false,
            "well-formed": true
          };
          this.params = clonedSelf = Object.create(this.defaultParams);
        }
        Object.defineProperty(XMLDOMConfiguration2.prototype, "parameterNames", {
          get: function() {
            return new XMLDOMStringList(Object.keys(this.defaultParams));
          }
        });
        XMLDOMConfiguration2.prototype.getParameter = function(name) {
          if (this.params.hasOwnProperty(name)) {
            return this.params[name];
          } else {
            return null;
          }
        };
        XMLDOMConfiguration2.prototype.canSetParameter = function(name, value) {
          return true;
        };
        XMLDOMConfiguration2.prototype.setParameter = function(name, value) {
          if (value != null) {
            return this.params[name] = value;
          } else {
            return delete this.params[name];
          }
        };
        return XMLDOMConfiguration2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/NodeType.js
var require_NodeType = __commonJS({
  "../core/node_modules/xmlbuilder/lib/NodeType.js"(exports, module2) {
    (function() {
      module2.exports = {
        Element: 1,
        Attribute: 2,
        Text: 3,
        CData: 4,
        EntityReference: 5,
        EntityDeclaration: 6,
        ProcessingInstruction: 7,
        Comment: 8,
        Document: 9,
        DocType: 10,
        DocumentFragment: 11,
        NotationDeclaration: 12,
        Declaration: 201,
        Raw: 202,
        AttributeDeclaration: 203,
        ElementDeclaration: 204,
        Dummy: 205
      };
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLAttribute.js
var require_XMLAttribute = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLAttribute.js"(exports, module2) {
    (function() {
      var NodeType, XMLAttribute, XMLNode;
      NodeType = require_NodeType();
      XMLNode = require_XMLNode();
      module2.exports = XMLAttribute = function() {
        function XMLAttribute2(parent, name, value) {
          this.parent = parent;
          if (this.parent) {
            this.options = this.parent.options;
            this.stringify = this.parent.stringify;
          }
          if (name == null) {
            throw new Error("Missing attribute name. " + this.debugInfo(name));
          }
          this.name = this.stringify.name(name);
          this.value = this.stringify.attValue(value);
          this.type = NodeType.Attribute;
          this.isId = false;
          this.schemaTypeInfo = null;
        }
        Object.defineProperty(XMLAttribute2.prototype, "nodeType", {
          get: function() {
            return this.type;
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "ownerElement", {
          get: function() {
            return this.parent;
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "textContent", {
          get: function() {
            return this.value;
          },
          set: function(value) {
            return this.value = value || "";
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "namespaceURI", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "prefix", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "localName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "specified", {
          get: function() {
            return true;
          }
        });
        XMLAttribute2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLAttribute2.prototype.toString = function(options) {
          return this.options.writer.attribute(this, this.options.writer.filterOptions(options));
        };
        XMLAttribute2.prototype.debugInfo = function(name) {
          name = name || this.name;
          if (name == null) {
            return "parent: <" + this.parent.name + ">";
          } else {
            return "attribute: {" + name + "}, parent: <" + this.parent.name + ">";
          }
        };
        XMLAttribute2.prototype.isEqualNode = function(node) {
          if (node.namespaceURI !== this.namespaceURI) {
            return false;
          }
          if (node.prefix !== this.prefix) {
            return false;
          }
          if (node.localName !== this.localName) {
            return false;
          }
          if (node.value !== this.value) {
            return false;
          }
          return true;
        };
        return XMLAttribute2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLNamedNodeMap.js
var require_XMLNamedNodeMap = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLNamedNodeMap.js"(exports, module2) {
    (function() {
      var XMLNamedNodeMap;
      module2.exports = XMLNamedNodeMap = function() {
        function XMLNamedNodeMap2(nodes) {
          this.nodes = nodes;
        }
        Object.defineProperty(XMLNamedNodeMap2.prototype, "length", {
          get: function() {
            return Object.keys(this.nodes).length || 0;
          }
        });
        XMLNamedNodeMap2.prototype.clone = function() {
          return this.nodes = null;
        };
        XMLNamedNodeMap2.prototype.getNamedItem = function(name) {
          return this.nodes[name];
        };
        XMLNamedNodeMap2.prototype.setNamedItem = function(node) {
          var oldNode;
          oldNode = this.nodes[node.nodeName];
          this.nodes[node.nodeName] = node;
          return oldNode || null;
        };
        XMLNamedNodeMap2.prototype.removeNamedItem = function(name) {
          var oldNode;
          oldNode = this.nodes[name];
          delete this.nodes[name];
          return oldNode || null;
        };
        XMLNamedNodeMap2.prototype.item = function(index) {
          return this.nodes[Object.keys(this.nodes)[index]] || null;
        };
        XMLNamedNodeMap2.prototype.getNamedItemNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLNamedNodeMap2.prototype.setNamedItemNS = function(node) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLNamedNodeMap2.prototype.removeNamedItemNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented.");
        };
        return XMLNamedNodeMap2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLElement.js
var require_XMLElement = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLElement.js"(exports, module2) {
    (function() {
      var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      XMLAttribute = require_XMLAttribute();
      XMLNamedNodeMap = require_XMLNamedNodeMap();
      module2.exports = XMLElement = function(superClass) {
        extend(XMLElement2, superClass);
        function XMLElement2(parent, name, attributes) {
          var child, j2, len, ref1;
          XMLElement2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing element name. " + this.debugInfo());
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.Element;
          this.attribs = {};
          this.schemaTypeInfo = null;
          if (attributes != null) {
            this.attribute(attributes);
          }
          if (parent.type === NodeType.Document) {
            this.isRoot = true;
            this.documentObject = parent;
            parent.rootObject = this;
            if (parent.children) {
              ref1 = parent.children;
              for (j2 = 0, len = ref1.length; j2 < len; j2++) {
                child = ref1[j2];
                if (child.type === NodeType.DocType) {
                  child.name = this.name;
                  break;
                }
              }
            }
          }
        }
        Object.defineProperty(XMLElement2.prototype, "tagName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLElement2.prototype, "namespaceURI", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLElement2.prototype, "prefix", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLElement2.prototype, "localName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLElement2.prototype, "id", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement2.prototype, "className", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement2.prototype, "classList", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement2.prototype, "attributes", {
          get: function() {
            if (!this.attributeMap || !this.attributeMap.nodes) {
              this.attributeMap = new XMLNamedNodeMap(this.attribs);
            }
            return this.attributeMap;
          }
        });
        XMLElement2.prototype.clone = function() {
          var att, attName, clonedSelf, ref1;
          clonedSelf = Object.create(this);
          if (clonedSelf.isRoot) {
            clonedSelf.documentObject = null;
          }
          clonedSelf.attribs = {};
          ref1 = this.attribs;
          for (attName in ref1) {
            if (!hasProp.call(ref1, attName))
              continue;
            att = ref1[attName];
            clonedSelf.attribs[attName] = att.clone();
          }
          clonedSelf.children = [];
          this.children.forEach(function(child) {
            var clonedChild;
            clonedChild = child.clone();
            clonedChild.parent = clonedSelf;
            return clonedSelf.children.push(clonedChild);
          });
          return clonedSelf;
        };
        XMLElement2.prototype.attribute = function(name, value) {
          var attName, attValue;
          if (name != null) {
            name = getValue(name);
          }
          if (isObject(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName))
                continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            if (this.options.keepNullAttributes && value == null) {
              this.attribs[name] = new XMLAttribute(this, name, "");
            } else if (value != null) {
              this.attribs[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLElement2.prototype.removeAttribute = function(name) {
          var attName, j2, len;
          if (name == null) {
            throw new Error("Missing attribute name. " + this.debugInfo());
          }
          name = getValue(name);
          if (Array.isArray(name)) {
            for (j2 = 0, len = name.length; j2 < len; j2++) {
              attName = name[j2];
              delete this.attribs[attName];
            }
          } else {
            delete this.attribs[name];
          }
          return this;
        };
        XMLElement2.prototype.toString = function(options) {
          return this.options.writer.element(this, this.options.writer.filterOptions(options));
        };
        XMLElement2.prototype.att = function(name, value) {
          return this.attribute(name, value);
        };
        XMLElement2.prototype.a = function(name, value) {
          return this.attribute(name, value);
        };
        XMLElement2.prototype.getAttribute = function(name) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name].value;
          } else {
            return null;
          }
        };
        XMLElement2.prototype.setAttribute = function(name, value) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getAttributeNode = function(name) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name];
          } else {
            return null;
          }
        };
        XMLElement2.prototype.setAttributeNode = function(newAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.removeAttributeNode = function(oldAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagName = function(name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getAttributeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.removeAttributeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getAttributeNodeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setAttributeNodeNS = function(newAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.hasAttribute = function(name) {
          return this.attribs.hasOwnProperty(name);
        };
        XMLElement2.prototype.hasAttributeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setIdAttribute = function(name, isId) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name].isId;
          } else {
            return isId;
          }
        };
        XMLElement2.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setIdAttributeNode = function(idAttr, isId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagName = function(tagname) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByClassName = function(classNames) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.isEqualNode = function(node) {
          var i, j2, ref1;
          if (!XMLElement2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.namespaceURI !== this.namespaceURI) {
            return false;
          }
          if (node.prefix !== this.prefix) {
            return false;
          }
          if (node.localName !== this.localName) {
            return false;
          }
          if (node.attribs.length !== this.attribs.length) {
            return false;
          }
          for (i = j2 = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j2 <= ref1 : j2 >= ref1; i = 0 <= ref1 ? ++j2 : --j2) {
            if (!this.attribs[i].isEqualNode(node.attribs[i])) {
              return false;
            }
          }
          return true;
        };
        return XMLElement2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLCharacterData.js
var require_XMLCharacterData = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLCharacterData.js"(exports, module2) {
    (function() {
      var XMLCharacterData, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module2.exports = XMLCharacterData = function(superClass) {
        extend(XMLCharacterData2, superClass);
        function XMLCharacterData2(parent) {
          XMLCharacterData2.__super__.constructor.call(this, parent);
          this.value = "";
        }
        Object.defineProperty(XMLCharacterData2.prototype, "data", {
          get: function() {
            return this.value;
          },
          set: function(value) {
            return this.value = value || "";
          }
        });
        Object.defineProperty(XMLCharacterData2.prototype, "length", {
          get: function() {
            return this.value.length;
          }
        });
        Object.defineProperty(XMLCharacterData2.prototype, "textContent", {
          get: function() {
            return this.value;
          },
          set: function(value) {
            return this.value = value || "";
          }
        });
        XMLCharacterData2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLCharacterData2.prototype.substringData = function(offset, count) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.appendData = function(arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.insertData = function(offset, arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.deleteData = function(offset, count) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.replaceData = function(offset, count, arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.isEqualNode = function(node) {
          if (!XMLCharacterData2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.data !== this.data) {
            return false;
          }
          return true;
        };
        return XMLCharacterData2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLCData.js
var require_XMLCData = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLCData.js"(exports, module2) {
    (function() {
      var NodeType, XMLCData, XMLCharacterData, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module2.exports = XMLCData = function(superClass) {
        extend(XMLCData2, superClass);
        function XMLCData2(parent, text) {
          XMLCData2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing CDATA text. " + this.debugInfo());
          }
          this.name = "#cdata-section";
          this.type = NodeType.CData;
          this.value = this.stringify.cdata(text);
        }
        XMLCData2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLCData2.prototype.toString = function(options) {
          return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
        };
        return XMLCData2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLComment.js
var require_XMLComment = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLComment.js"(exports, module2) {
    (function() {
      var NodeType, XMLCharacterData, XMLComment, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module2.exports = XMLComment = function(superClass) {
        extend(XMLComment2, superClass);
        function XMLComment2(parent, text) {
          XMLComment2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing comment text. " + this.debugInfo());
          }
          this.name = "#comment";
          this.type = NodeType.Comment;
          this.value = this.stringify.comment(text);
        }
        XMLComment2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLComment2.prototype.toString = function(options) {
          return this.options.writer.comment(this, this.options.writer.filterOptions(options));
        };
        return XMLComment2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDeclaration.js
var require_XMLDeclaration = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDeclaration.js"(exports, module2) {
    (function() {
      var NodeType, XMLDeclaration, XMLNode, isObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDeclaration = function(superClass) {
        extend(XMLDeclaration2, superClass);
        function XMLDeclaration2(parent, version, encoding, standalone) {
          var ref;
          XMLDeclaration2.__super__.constructor.call(this, parent);
          if (isObject(version)) {
            ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
          }
          if (!version) {
            version = "1.0";
          }
          this.type = NodeType.Declaration;
          this.version = this.stringify.xmlVersion(version);
          if (encoding != null) {
            this.encoding = this.stringify.xmlEncoding(encoding);
          }
          if (standalone != null) {
            this.standalone = this.stringify.xmlStandalone(standalone);
          }
        }
        XMLDeclaration2.prototype.toString = function(options) {
          return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
        };
        return XMLDeclaration2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDTDAttList.js
var require_XMLDTDAttList = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDTDAttList.js"(exports, module2) {
    (function() {
      var NodeType, XMLDTDAttList, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDTDAttList = function(superClass) {
        extend(XMLDTDAttList2, superClass);
        function XMLDTDAttList2(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          XMLDTDAttList2.__super__.constructor.call(this, parent);
          if (elementName == null) {
            throw new Error("Missing DTD element name. " + this.debugInfo());
          }
          if (attributeName == null) {
            throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
          }
          if (!attributeType) {
            throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
          }
          if (!defaultValueType) {
            throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
          }
          if (defaultValueType.indexOf("#") !== 0) {
            defaultValueType = "#" + defaultValueType;
          }
          if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
            throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
          }
          if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
            throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
          }
          this.elementName = this.stringify.name(elementName);
          this.type = NodeType.AttributeDeclaration;
          this.attributeName = this.stringify.name(attributeName);
          this.attributeType = this.stringify.dtdAttType(attributeType);
          if (defaultValue) {
            this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
          }
          this.defaultValueType = defaultValueType;
        }
        XMLDTDAttList2.prototype.toString = function(options) {
          return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDAttList2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDTDEntity.js
var require_XMLDTDEntity = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDTDEntity.js"(exports, module2) {
    (function() {
      var NodeType, XMLDTDEntity, XMLNode, isObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDTDEntity = function(superClass) {
        extend(XMLDTDEntity2, superClass);
        function XMLDTDEntity2(parent, pe, name, value) {
          XMLDTDEntity2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD entity name. " + this.debugInfo(name));
          }
          if (value == null) {
            throw new Error("Missing DTD entity value. " + this.debugInfo(name));
          }
          this.pe = !!pe;
          this.name = this.stringify.name(name);
          this.type = NodeType.EntityDeclaration;
          if (!isObject(value)) {
            this.value = this.stringify.dtdEntityValue(value);
            this.internal = true;
          } else {
            if (!value.pubID && !value.sysID) {
              throw new Error("Public and/or system identifiers are required for an external entity. " + this.debugInfo(name));
            }
            if (value.pubID && !value.sysID) {
              throw new Error("System identifier is required for a public external entity. " + this.debugInfo(name));
            }
            this.internal = false;
            if (value.pubID != null) {
              this.pubID = this.stringify.dtdPubID(value.pubID);
            }
            if (value.sysID != null) {
              this.sysID = this.stringify.dtdSysID(value.sysID);
            }
            if (value.nData != null) {
              this.nData = this.stringify.dtdNData(value.nData);
            }
            if (this.pe && this.nData) {
              throw new Error("Notation declaration is not allowed in a parameter entity. " + this.debugInfo(name));
            }
          }
        }
        Object.defineProperty(XMLDTDEntity2.prototype, "publicId", {
          get: function() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "systemId", {
          get: function() {
            return this.sysID;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "notationName", {
          get: function() {
            return this.nData || null;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "inputEncoding", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "xmlEncoding", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "xmlVersion", {
          get: function() {
            return null;
          }
        });
        XMLDTDEntity2.prototype.toString = function(options) {
          return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDEntity2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDTDElement.js
var require_XMLDTDElement = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDTDElement.js"(exports, module2) {
    (function() {
      var NodeType, XMLDTDElement, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDTDElement = function(superClass) {
        extend(XMLDTDElement2, superClass);
        function XMLDTDElement2(parent, name, value) {
          XMLDTDElement2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD element name. " + this.debugInfo());
          }
          if (!value) {
            value = "(#PCDATA)";
          }
          if (Array.isArray(value)) {
            value = "(" + value.join(",") + ")";
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.ElementDeclaration;
          this.value = this.stringify.dtdElementValue(value);
        }
        XMLDTDElement2.prototype.toString = function(options) {
          return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDElement2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDTDNotation.js
var require_XMLDTDNotation = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDTDNotation.js"(exports, module2) {
    (function() {
      var NodeType, XMLDTDNotation, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDTDNotation = function(superClass) {
        extend(XMLDTDNotation2, superClass);
        function XMLDTDNotation2(parent, name, value) {
          XMLDTDNotation2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD notation name. " + this.debugInfo(name));
          }
          if (!value.pubID && !value.sysID) {
            throw new Error("Public or system identifiers are required for an external entity. " + this.debugInfo(name));
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.NotationDeclaration;
          if (value.pubID != null) {
            this.pubID = this.stringify.dtdPubID(value.pubID);
          }
          if (value.sysID != null) {
            this.sysID = this.stringify.dtdSysID(value.sysID);
          }
        }
        Object.defineProperty(XMLDTDNotation2.prototype, "publicId", {
          get: function() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDTDNotation2.prototype, "systemId", {
          get: function() {
            return this.sysID;
          }
        });
        XMLDTDNotation2.prototype.toString = function(options) {
          return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDNotation2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDocType.js
var require_XMLDocType = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDocType.js"(exports, module2) {
    (function() {
      var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLNamedNodeMap = require_XMLNamedNodeMap();
      module2.exports = XMLDocType = function(superClass) {
        extend(XMLDocType2, superClass);
        function XMLDocType2(parent, pubID, sysID) {
          var child, i, len, ref, ref1, ref2;
          XMLDocType2.__super__.constructor.call(this, parent);
          this.type = NodeType.DocType;
          if (parent.children) {
            ref = parent.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.Element) {
                this.name = child.name;
                break;
              }
            }
          }
          this.documentObject = parent;
          if (isObject(pubID)) {
            ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;
          }
          if (sysID == null) {
            ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];
          }
          if (pubID != null) {
            this.pubID = this.stringify.dtdPubID(pubID);
          }
          if (sysID != null) {
            this.sysID = this.stringify.dtdSysID(sysID);
          }
        }
        Object.defineProperty(XMLDocType2.prototype, "entities", {
          get: function() {
            var child, i, len, nodes, ref;
            nodes = {};
            ref = this.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.EntityDeclaration && !child.pe) {
                nodes[child.name] = child;
              }
            }
            return new XMLNamedNodeMap(nodes);
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "notations", {
          get: function() {
            var child, i, len, nodes, ref;
            nodes = {};
            ref = this.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.NotationDeclaration) {
                nodes[child.name] = child;
              }
            }
            return new XMLNamedNodeMap(nodes);
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "publicId", {
          get: function() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "systemId", {
          get: function() {
            return this.sysID;
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "internalSubset", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        XMLDocType2.prototype.element = function(name, value) {
          var child;
          child = new XMLDTDElement(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var child;
          child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.entity = function(name, value) {
          var child;
          child = new XMLDTDEntity(this, false, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.pEntity = function(name, value) {
          var child;
          child = new XMLDTDEntity(this, true, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.notation = function(name, value) {
          var child;
          child = new XMLDTDNotation(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.toString = function(options) {
          return this.options.writer.docType(this, this.options.writer.filterOptions(options));
        };
        XMLDocType2.prototype.ele = function(name, value) {
          return this.element(name, value);
        };
        XMLDocType2.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
        };
        XMLDocType2.prototype.ent = function(name, value) {
          return this.entity(name, value);
        };
        XMLDocType2.prototype.pent = function(name, value) {
          return this.pEntity(name, value);
        };
        XMLDocType2.prototype.not = function(name, value) {
          return this.notation(name, value);
        };
        XMLDocType2.prototype.up = function() {
          return this.root() || this.documentObject;
        };
        XMLDocType2.prototype.isEqualNode = function(node) {
          if (!XMLDocType2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.name !== this.name) {
            return false;
          }
          if (node.publicId !== this.publicId) {
            return false;
          }
          if (node.systemId !== this.systemId) {
            return false;
          }
          return true;
        };
        return XMLDocType2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLRaw.js
var require_XMLRaw = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLRaw.js"(exports, module2) {
    (function() {
      var NodeType, XMLNode, XMLRaw, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLNode = require_XMLNode();
      module2.exports = XMLRaw = function(superClass) {
        extend(XMLRaw2, superClass);
        function XMLRaw2(parent, text) {
          XMLRaw2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing raw text. " + this.debugInfo());
          }
          this.type = NodeType.Raw;
          this.value = this.stringify.raw(text);
        }
        XMLRaw2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLRaw2.prototype.toString = function(options) {
          return this.options.writer.raw(this, this.options.writer.filterOptions(options));
        };
        return XMLRaw2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLText.js
var require_XMLText = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLText.js"(exports, module2) {
    (function() {
      var NodeType, XMLCharacterData, XMLText, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module2.exports = XMLText = function(superClass) {
        extend(XMLText2, superClass);
        function XMLText2(parent, text) {
          XMLText2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing element text. " + this.debugInfo());
          }
          this.name = "#text";
          this.type = NodeType.Text;
          this.value = this.stringify.text(text);
        }
        Object.defineProperty(XMLText2.prototype, "isElementContentWhitespace", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLText2.prototype, "wholeText", {
          get: function() {
            var next, prev, str;
            str = "";
            prev = this.previousSibling;
            while (prev) {
              str = prev.data + str;
              prev = prev.previousSibling;
            }
            str += this.data;
            next = this.nextSibling;
            while (next) {
              str = str + next.data;
              next = next.nextSibling;
            }
            return str;
          }
        });
        XMLText2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLText2.prototype.toString = function(options) {
          return this.options.writer.text(this, this.options.writer.filterOptions(options));
        };
        XMLText2.prototype.splitText = function(offset) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLText2.prototype.replaceWholeText = function(content) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        return XMLText2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js
var require_XMLProcessingInstruction = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js"(exports, module2) {
    (function() {
      var NodeType, XMLCharacterData, XMLProcessingInstruction, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module2.exports = XMLProcessingInstruction = function(superClass) {
        extend(XMLProcessingInstruction2, superClass);
        function XMLProcessingInstruction2(parent, target, value) {
          XMLProcessingInstruction2.__super__.constructor.call(this, parent);
          if (target == null) {
            throw new Error("Missing instruction target. " + this.debugInfo());
          }
          this.type = NodeType.ProcessingInstruction;
          this.target = this.stringify.insTarget(target);
          this.name = this.target;
          if (value) {
            this.value = this.stringify.insValue(value);
          }
        }
        XMLProcessingInstruction2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLProcessingInstruction2.prototype.toString = function(options) {
          return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));
        };
        XMLProcessingInstruction2.prototype.isEqualNode = function(node) {
          if (!XMLProcessingInstruction2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.target !== this.target) {
            return false;
          }
          return true;
        };
        return XMLProcessingInstruction2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDummy.js
var require_XMLDummy = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDummy.js"(exports, module2) {
    (function() {
      var NodeType, XMLDummy, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module2.exports = XMLDummy = function(superClass) {
        extend(XMLDummy2, superClass);
        function XMLDummy2(parent) {
          XMLDummy2.__super__.constructor.call(this, parent);
          this.type = NodeType.Dummy;
        }
        XMLDummy2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLDummy2.prototype.toString = function(options) {
          return "";
        };
        return XMLDummy2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLNodeList.js
var require_XMLNodeList = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLNodeList.js"(exports, module2) {
    (function() {
      var XMLNodeList;
      module2.exports = XMLNodeList = function() {
        function XMLNodeList2(nodes) {
          this.nodes = nodes;
        }
        Object.defineProperty(XMLNodeList2.prototype, "length", {
          get: function() {
            return this.nodes.length || 0;
          }
        });
        XMLNodeList2.prototype.clone = function() {
          return this.nodes = null;
        };
        XMLNodeList2.prototype.item = function(index) {
          return this.nodes[index] || null;
        };
        return XMLNodeList2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/DocumentPosition.js
var require_DocumentPosition = __commonJS({
  "../core/node_modules/xmlbuilder/lib/DocumentPosition.js"(exports, module2) {
    (function() {
      module2.exports = {
        Disconnected: 1,
        Preceding: 2,
        Following: 4,
        Contains: 8,
        ContainedBy: 16,
        ImplementationSpecific: 32
      };
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLNode.js
var require_XMLNode = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLNode.js"(exports, module2) {
    (function() {
      var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1, hasProp = {}.hasOwnProperty;
      ref1 = require_Utility(), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;
      XMLElement = null;
      XMLCData = null;
      XMLComment = null;
      XMLDeclaration = null;
      XMLDocType = null;
      XMLRaw = null;
      XMLText = null;
      XMLProcessingInstruction = null;
      XMLDummy = null;
      NodeType = null;
      XMLNodeList = null;
      XMLNamedNodeMap = null;
      DocumentPosition = null;
      module2.exports = XMLNode = function() {
        function XMLNode2(parent1) {
          this.parent = parent1;
          if (this.parent) {
            this.options = this.parent.options;
            this.stringify = this.parent.stringify;
          }
          this.value = null;
          this.children = [];
          this.baseURI = null;
          if (!XMLElement) {
            XMLElement = require_XMLElement();
            XMLCData = require_XMLCData();
            XMLComment = require_XMLComment();
            XMLDeclaration = require_XMLDeclaration();
            XMLDocType = require_XMLDocType();
            XMLRaw = require_XMLRaw();
            XMLText = require_XMLText();
            XMLProcessingInstruction = require_XMLProcessingInstruction();
            XMLDummy = require_XMLDummy();
            NodeType = require_NodeType();
            XMLNodeList = require_XMLNodeList();
            XMLNamedNodeMap = require_XMLNamedNodeMap();
            DocumentPosition = require_DocumentPosition();
          }
        }
        Object.defineProperty(XMLNode2.prototype, "nodeName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "nodeType", {
          get: function() {
            return this.type;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "nodeValue", {
          get: function() {
            return this.value;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "parentNode", {
          get: function() {
            return this.parent;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "childNodes", {
          get: function() {
            if (!this.childNodeList || !this.childNodeList.nodes) {
              this.childNodeList = new XMLNodeList(this.children);
            }
            return this.childNodeList;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "firstChild", {
          get: function() {
            return this.children[0] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "lastChild", {
          get: function() {
            return this.children[this.children.length - 1] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "previousSibling", {
          get: function() {
            var i;
            i = this.parent.children.indexOf(this);
            return this.parent.children[i - 1] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "nextSibling", {
          get: function() {
            var i;
            i = this.parent.children.indexOf(this);
            return this.parent.children[i + 1] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "ownerDocument", {
          get: function() {
            return this.document() || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "textContent", {
          get: function() {
            var child, j2, len, ref2, str;
            if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {
              str = "";
              ref2 = this.children;
              for (j2 = 0, len = ref2.length; j2 < len; j2++) {
                child = ref2[j2];
                if (child.textContent) {
                  str += child.textContent;
                }
              }
              return str;
            } else {
              return null;
            }
          },
          set: function(value) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        XMLNode2.prototype.setParent = function(parent) {
          var child, j2, len, ref2, results;
          this.parent = parent;
          if (parent) {
            this.options = parent.options;
            this.stringify = parent.stringify;
          }
          ref2 = this.children;
          results = [];
          for (j2 = 0, len = ref2.length; j2 < len; j2++) {
            child = ref2[j2];
            results.push(child.setParent(this));
          }
          return results;
        };
        XMLNode2.prototype.element = function(name, attributes, text) {
          var childNode, item, j2, k2, key, lastChild, len, len1, ref2, ref3, val;
          lastChild = null;
          if (attributes === null && text == null) {
            ref2 = [{}, null], attributes = ref2[0], text = ref2[1];
          }
          if (attributes == null) {
            attributes = {};
          }
          attributes = getValue(attributes);
          if (!isObject(attributes)) {
            ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];
          }
          if (name != null) {
            name = getValue(name);
          }
          if (Array.isArray(name)) {
            for (j2 = 0, len = name.length; j2 < len; j2++) {
              item = name[j2];
              lastChild = this.element(item);
            }
          } else if (isFunction(name)) {
            lastChild = this.element(name.apply());
          } else if (isObject(name)) {
            for (key in name) {
              if (!hasProp.call(name, key))
                continue;
              val = name[key];
              if (isFunction(val)) {
                val = val.apply();
              }
              if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
                lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
              } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {
                lastChild = this.dummy();
              } else if (isObject(val) && isEmpty(val)) {
                lastChild = this.element(key);
              } else if (!this.options.keepNullNodes && val == null) {
                lastChild = this.dummy();
              } else if (!this.options.separateArrayItems && Array.isArray(val)) {
                for (k2 = 0, len1 = val.length; k2 < len1; k2++) {
                  item = val[k2];
                  childNode = {};
                  childNode[key] = item;
                  lastChild = this.element(childNode);
                }
              } else if (isObject(val)) {
                if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {
                  lastChild = this.element(val);
                } else {
                  lastChild = this.element(key);
                  lastChild.element(val);
                }
              } else {
                lastChild = this.element(key, val);
              }
            }
          } else if (!this.options.keepNullNodes && text === null) {
            lastChild = this.dummy();
          } else {
            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
              lastChild = this.text(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
              lastChild = this.cdata(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
              lastChild = this.comment(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
              lastChild = this.raw(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
              lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
            } else {
              lastChild = this.node(name, attributes, text);
            }
          }
          if (lastChild == null) {
            throw new Error("Could not create any elements with: " + name + ". " + this.debugInfo());
          }
          return lastChild;
        };
        XMLNode2.prototype.insertBefore = function(name, attributes, text) {
          var child, i, newChild, refChild, removed;
          if (name != null ? name.type : void 0) {
            newChild = name;
            refChild = attributes;
            newChild.setParent(this);
            if (refChild) {
              i = children.indexOf(refChild);
              removed = children.splice(i);
              children.push(newChild);
              Array.prototype.push.apply(children, removed);
            } else {
              children.push(newChild);
            }
            return newChild;
          } else {
            if (this.isRoot) {
              throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
            }
            i = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i);
            child = this.parent.element(name, attributes, text);
            Array.prototype.push.apply(this.parent.children, removed);
            return child;
          }
        };
        XMLNode2.prototype.insertAfter = function(name, attributes, text) {
          var child, i, removed;
          if (this.isRoot) {
            throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
          }
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.element(name, attributes, text);
          Array.prototype.push.apply(this.parent.children, removed);
          return child;
        };
        XMLNode2.prototype.remove = function() {
          var i, ref2;
          if (this.isRoot) {
            throw new Error("Cannot remove the root element. " + this.debugInfo());
          }
          i = this.parent.children.indexOf(this);
          [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref2 = [])), ref2;
          return this.parent;
        };
        XMLNode2.prototype.node = function(name, attributes, text) {
          var child, ref2;
          if (name != null) {
            name = getValue(name);
          }
          attributes || (attributes = {});
          attributes = getValue(attributes);
          if (!isObject(attributes)) {
            ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];
          }
          child = new XMLElement(this, name, attributes);
          if (text != null) {
            child.text(text);
          }
          this.children.push(child);
          return child;
        };
        XMLNode2.prototype.text = function(value) {
          var child;
          if (isObject(value)) {
            this.element(value);
          }
          child = new XMLText(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.cdata = function(value) {
          var child;
          child = new XMLCData(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.comment = function(value) {
          var child;
          child = new XMLComment(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.commentBefore = function(value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.commentAfter = function(value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.raw = function(value) {
          var child;
          child = new XMLRaw(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.dummy = function() {
          var child;
          child = new XMLDummy(this);
          return child;
        };
        XMLNode2.prototype.instruction = function(target, value) {
          var insTarget, insValue, instruction, j2, len;
          if (target != null) {
            target = getValue(target);
          }
          if (value != null) {
            value = getValue(value);
          }
          if (Array.isArray(target)) {
            for (j2 = 0, len = target.length; j2 < len; j2++) {
              insTarget = target[j2];
              this.instruction(insTarget);
            }
          } else if (isObject(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget))
                continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            instruction = new XMLProcessingInstruction(this, target, value);
            this.children.push(instruction);
          }
          return this;
        };
        XMLNode2.prototype.instructionBefore = function(target, value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.instructionAfter = function(target, value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.declaration = function(version, encoding, standalone) {
          var doc, xmldec;
          doc = this.document();
          xmldec = new XMLDeclaration(doc, version, encoding, standalone);
          if (doc.children.length === 0) {
            doc.children.unshift(xmldec);
          } else if (doc.children[0].type === NodeType.Declaration) {
            doc.children[0] = xmldec;
          } else {
            doc.children.unshift(xmldec);
          }
          return doc.root() || doc;
        };
        XMLNode2.prototype.dtd = function(pubID, sysID) {
          var child, doc, doctype, i, j2, k2, len, len1, ref2, ref3;
          doc = this.document();
          doctype = new XMLDocType(doc, pubID, sysID);
          ref2 = doc.children;
          for (i = j2 = 0, len = ref2.length; j2 < len; i = ++j2) {
            child = ref2[i];
            if (child.type === NodeType.DocType) {
              doc.children[i] = doctype;
              return doctype;
            }
          }
          ref3 = doc.children;
          for (i = k2 = 0, len1 = ref3.length; k2 < len1; i = ++k2) {
            child = ref3[i];
            if (child.isRoot) {
              doc.children.splice(i, 0, doctype);
              return doctype;
            }
          }
          doc.children.push(doctype);
          return doctype;
        };
        XMLNode2.prototype.up = function() {
          if (this.isRoot) {
            throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
          }
          return this.parent;
        };
        XMLNode2.prototype.root = function() {
          var node;
          node = this;
          while (node) {
            if (node.type === NodeType.Document) {
              return node.rootObject;
            } else if (node.isRoot) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode2.prototype.document = function() {
          var node;
          node = this;
          while (node) {
            if (node.type === NodeType.Document) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode2.prototype.end = function(options) {
          return this.document().end(options);
        };
        XMLNode2.prototype.prev = function() {
          var i;
          i = this.parent.children.indexOf(this);
          if (i < 1) {
            throw new Error("Already at the first node. " + this.debugInfo());
          }
          return this.parent.children[i - 1];
        };
        XMLNode2.prototype.next = function() {
          var i;
          i = this.parent.children.indexOf(this);
          if (i === -1 || i === this.parent.children.length - 1) {
            throw new Error("Already at the last node. " + this.debugInfo());
          }
          return this.parent.children[i + 1];
        };
        XMLNode2.prototype.importDocument = function(doc) {
          var clonedRoot;
          clonedRoot = doc.root().clone();
          clonedRoot.parent = this;
          clonedRoot.isRoot = false;
          this.children.push(clonedRoot);
          return this;
        };
        XMLNode2.prototype.debugInfo = function(name) {
          var ref2, ref3;
          name = name || this.name;
          if (name == null && !((ref2 = this.parent) != null ? ref2.name : void 0)) {
            return "";
          } else if (name == null) {
            return "parent: <" + this.parent.name + ">";
          } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {
            return "node: <" + name + ">";
          } else {
            return "node: <" + name + ">, parent: <" + this.parent.name + ">";
          }
        };
        XMLNode2.prototype.ele = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode2.prototype.nod = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode2.prototype.txt = function(value) {
          return this.text(value);
        };
        XMLNode2.prototype.dat = function(value) {
          return this.cdata(value);
        };
        XMLNode2.prototype.com = function(value) {
          return this.comment(value);
        };
        XMLNode2.prototype.ins = function(target, value) {
          return this.instruction(target, value);
        };
        XMLNode2.prototype.doc = function() {
          return this.document();
        };
        XMLNode2.prototype.dec = function(version, encoding, standalone) {
          return this.declaration(version, encoding, standalone);
        };
        XMLNode2.prototype.e = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode2.prototype.n = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode2.prototype.t = function(value) {
          return this.text(value);
        };
        XMLNode2.prototype.d = function(value) {
          return this.cdata(value);
        };
        XMLNode2.prototype.c = function(value) {
          return this.comment(value);
        };
        XMLNode2.prototype.r = function(value) {
          return this.raw(value);
        };
        XMLNode2.prototype.i = function(target, value) {
          return this.instruction(target, value);
        };
        XMLNode2.prototype.u = function() {
          return this.up();
        };
        XMLNode2.prototype.importXMLBuilder = function(doc) {
          return this.importDocument(doc);
        };
        XMLNode2.prototype.replaceChild = function(newChild, oldChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.removeChild = function(oldChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.appendChild = function(newChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.hasChildNodes = function() {
          return this.children.length !== 0;
        };
        XMLNode2.prototype.cloneNode = function(deep) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.normalize = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.isSupported = function(feature, version) {
          return true;
        };
        XMLNode2.prototype.hasAttributes = function() {
          return this.attribs.length !== 0;
        };
        XMLNode2.prototype.compareDocumentPosition = function(other) {
          var ref, res;
          ref = this;
          if (ref === other) {
            return 0;
          } else if (this.document() !== other.document()) {
            res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;
            if (Math.random() < 0.5) {
              res |= DocumentPosition.Preceding;
            } else {
              res |= DocumentPosition.Following;
            }
            return res;
          } else if (ref.isAncestor(other)) {
            return DocumentPosition.Contains | DocumentPosition.Preceding;
          } else if (ref.isDescendant(other)) {
            return DocumentPosition.Contains | DocumentPosition.Following;
          } else if (ref.isPreceding(other)) {
            return DocumentPosition.Preceding;
          } else {
            return DocumentPosition.Following;
          }
        };
        XMLNode2.prototype.isSameNode = function(other) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.lookupPrefix = function(namespaceURI) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.isDefaultNamespace = function(namespaceURI) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.lookupNamespaceURI = function(prefix) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.isEqualNode = function(node) {
          var i, j2, ref2;
          if (node.nodeType !== this.nodeType) {
            return false;
          }
          if (node.children.length !== this.children.length) {
            return false;
          }
          for (i = j2 = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j2 <= ref2 : j2 >= ref2; i = 0 <= ref2 ? ++j2 : --j2) {
            if (!this.children[i].isEqualNode(node.children[i])) {
              return false;
            }
          }
          return true;
        };
        XMLNode2.prototype.getFeature = function(feature, version) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.setUserData = function(key, data, handler) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.getUserData = function(key) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.contains = function(other) {
          if (!other) {
            return false;
          }
          return other === this || this.isDescendant(other);
        };
        XMLNode2.prototype.isDescendant = function(node) {
          var child, isDescendantChild, j2, len, ref2;
          ref2 = this.children;
          for (j2 = 0, len = ref2.length; j2 < len; j2++) {
            child = ref2[j2];
            if (node === child) {
              return true;
            }
            isDescendantChild = child.isDescendant(node);
            if (isDescendantChild) {
              return true;
            }
          }
          return false;
        };
        XMLNode2.prototype.isAncestor = function(node) {
          return node.isDescendant(this);
        };
        XMLNode2.prototype.isPreceding = function(node) {
          var nodePos, thisPos;
          nodePos = this.treePosition(node);
          thisPos = this.treePosition(this);
          if (nodePos === -1 || thisPos === -1) {
            return false;
          } else {
            return nodePos < thisPos;
          }
        };
        XMLNode2.prototype.isFollowing = function(node) {
          var nodePos, thisPos;
          nodePos = this.treePosition(node);
          thisPos = this.treePosition(this);
          if (nodePos === -1 || thisPos === -1) {
            return false;
          } else {
            return nodePos > thisPos;
          }
        };
        XMLNode2.prototype.treePosition = function(node) {
          var found, pos;
          pos = 0;
          found = false;
          this.foreachTreeNode(this.document(), function(childNode) {
            pos++;
            if (!found && childNode === node) {
              return found = true;
            }
          });
          if (found) {
            return pos;
          } else {
            return -1;
          }
        };
        XMLNode2.prototype.foreachTreeNode = function(node, func) {
          var child, j2, len, ref2, res;
          node || (node = this.document());
          ref2 = node.children;
          for (j2 = 0, len = ref2.length; j2 < len; j2++) {
            child = ref2[j2];
            if (res = func(child)) {
              return res;
            } else {
              res = this.foreachTreeNode(child, func);
              if (res) {
                return res;
              }
            }
          }
        };
        return XMLNode2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLStringifier.js
var require_XMLStringifier = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLStringifier.js"(exports, module2) {
    (function() {
      var XMLStringifier, bind = function(fn, me) {
        return function() {
          return fn.apply(me, arguments);
        };
      }, hasProp = {}.hasOwnProperty;
      module2.exports = XMLStringifier = function() {
        function XMLStringifier2(options) {
          this.assertLegalName = bind(this.assertLegalName, this);
          this.assertLegalChar = bind(this.assertLegalChar, this);
          var key, ref, value;
          options || (options = {});
          this.options = options;
          if (!this.options.version) {
            this.options.version = "1.0";
          }
          ref = options.stringify || {};
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this[key] = value;
          }
        }
        XMLStringifier2.prototype.name = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalName("" + val || "");
        };
        XMLStringifier2.prototype.text = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar(this.textEscape("" + val || ""));
        };
        XMLStringifier2.prototype.cdata = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          val = val.replace("]]>", "]]]]><![CDATA[>");
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.comment = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (val.match(/--/)) {
            throw new Error("Comment text cannot contain double-hypen: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.raw = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return "" + val || "";
        };
        XMLStringifier2.prototype.attValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar(this.attEscape(val = "" + val || ""));
        };
        XMLStringifier2.prototype.insTarget = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.insValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (val.match(/\?>/)) {
            throw new Error("Invalid processing instruction value: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.xmlVersion = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (!val.match(/1\.[0-9]+/)) {
            throw new Error("Invalid version number: " + val);
          }
          return val;
        };
        XMLStringifier2.prototype.xmlEncoding = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
            throw new Error("Invalid encoding: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.xmlStandalone = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          if (val) {
            return "yes";
          } else {
            return "no";
          }
        };
        XMLStringifier2.prototype.dtdPubID = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdSysID = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdElementValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdAttType = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdAttDefault = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdEntityValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdNData = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.convertAttKey = "@";
        XMLStringifier2.prototype.convertPIKey = "?";
        XMLStringifier2.prototype.convertTextKey = "#text";
        XMLStringifier2.prototype.convertCDataKey = "#cdata";
        XMLStringifier2.prototype.convertCommentKey = "#comment";
        XMLStringifier2.prototype.convertRawKey = "#raw";
        XMLStringifier2.prototype.assertLegalChar = function(str) {
          var regex, res;
          if (this.options.noValidation) {
            return str;
          }
          regex = "";
          if (this.options.version === "1.0") {
            regex = /[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
            if (res = str.match(regex)) {
              throw new Error("Invalid character in string: " + str + " at index " + res.index);
            }
          } else if (this.options.version === "1.1") {
            regex = /[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
            if (res = str.match(regex)) {
              throw new Error("Invalid character in string: " + str + " at index " + res.index);
            }
          }
          return str;
        };
        XMLStringifier2.prototype.assertLegalName = function(str) {
          var regex;
          if (this.options.noValidation) {
            return str;
          }
          this.assertLegalChar(str);
          regex = /^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/;
          if (!str.match(regex)) {
            throw new Error("Invalid character in name");
          }
          return str;
        };
        XMLStringifier2.prototype.textEscape = function(str) {
          var ampregex;
          if (this.options.noValidation) {
            return str;
          }
          ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#xD;");
        };
        XMLStringifier2.prototype.attEscape = function(str) {
          var ampregex;
          if (this.options.noValidation) {
            return str;
          }
          ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
        };
        return XMLStringifier2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/WriterState.js
var require_WriterState = __commonJS({
  "../core/node_modules/xmlbuilder/lib/WriterState.js"(exports, module2) {
    (function() {
      module2.exports = {
        None: 0,
        OpenTag: 1,
        InsideTag: 2,
        CloseTag: 3
      };
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLWriterBase.js
var require_XMLWriterBase = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLWriterBase.js"(exports, module2) {
    (function() {
      var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign, hasProp = {}.hasOwnProperty;
      assign = require_Utility().assign;
      NodeType = require_NodeType();
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLElement = require_XMLElement();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDummy = require_XMLDummy();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDNotation = require_XMLDTDNotation();
      WriterState = require_WriterState();
      module2.exports = XMLWriterBase = function() {
        function XMLWriterBase2(options) {
          var key, ref, value;
          options || (options = {});
          this.options = options;
          ref = options.writer || {};
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this["_" + key] = this[key];
            this[key] = value;
          }
        }
        XMLWriterBase2.prototype.filterOptions = function(options) {
          var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;
          options || (options = {});
          options = assign({}, this.options, options);
          filteredOptions = {
            writer: this
          };
          filteredOptions.pretty = options.pretty || false;
          filteredOptions.allowEmpty = options.allowEmpty || false;
          filteredOptions.indent = (ref = options.indent) != null ? ref : "  ";
          filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : "\n";
          filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;
          filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;
          filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : "";
          if (filteredOptions.spaceBeforeSlash === true) {
            filteredOptions.spaceBeforeSlash = " ";
          }
          filteredOptions.suppressPrettyCount = 0;
          filteredOptions.user = {};
          filteredOptions.state = WriterState.None;
          return filteredOptions;
        };
        XMLWriterBase2.prototype.indent = function(node, options, level) {
          var indentLevel;
          if (!options.pretty || options.suppressPrettyCount) {
            return "";
          } else if (options.pretty) {
            indentLevel = (level || 0) + options.offset + 1;
            if (indentLevel > 0) {
              return new Array(indentLevel).join(options.indent);
            }
          }
          return "";
        };
        XMLWriterBase2.prototype.endline = function(node, options, level) {
          if (!options.pretty || options.suppressPrettyCount) {
            return "";
          } else {
            return options.newline;
          }
        };
        XMLWriterBase2.prototype.attribute = function(att, options, level) {
          var r;
          this.openAttribute(att, options, level);
          r = " " + att.name + '="' + att.value + '"';
          this.closeAttribute(att, options, level);
          return r;
        };
        XMLWriterBase2.prototype.cdata = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<![CDATA[";
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += "]]>" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.comment = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<!-- ";
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += " -->" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.declaration = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<?xml";
          options.state = WriterState.InsideTag;
          r += ' version="' + node.version + '"';
          if (node.encoding != null) {
            r += ' encoding="' + node.encoding + '"';
          }
          if (node.standalone != null) {
            r += ' standalone="' + node.standalone + '"';
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + "?>";
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.docType = function(node, options, level) {
          var child, i, len, r, ref;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level);
          r += "<!DOCTYPE " + node.root().name;
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          if (node.children.length > 0) {
            r += " [";
            r += this.endline(node, options, level);
            options.state = WriterState.InsideTag;
            ref = node.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              r += this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            r += "]";
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + ">";
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.element = function(node, options, level) {
          var att, child, childNodeCount, firstChildNode, i, j2, len, len1, name, prettySuppressed, r, ref, ref1, ref2;
          level || (level = 0);
          prettySuppressed = false;
          r = "";
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r += this.indent(node, options, level) + "<" + node.name;
          ref = node.attribs;
          for (name in ref) {
            if (!hasProp.call(ref, name))
              continue;
            att = ref[name];
            r += this.attribute(att, options, level);
          }
          childNodeCount = node.children.length;
          firstChildNode = childNodeCount === 0 ? null : node.children[0];
          if (childNodeCount === 0 || node.children.every(function(e) {
            return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === "";
          })) {
            if (options.allowEmpty) {
              r += ">";
              options.state = WriterState.CloseTag;
              r += "</" + node.name + ">" + this.endline(node, options, level);
            } else {
              options.state = WriterState.CloseTag;
              r += options.spaceBeforeSlash + "/>" + this.endline(node, options, level);
            }
          } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
            r += ">";
            options.state = WriterState.InsideTag;
            options.suppressPrettyCount++;
            prettySuppressed = true;
            r += this.writeChildNode(firstChildNode, options, level + 1);
            options.suppressPrettyCount--;
            prettySuppressed = false;
            options.state = WriterState.CloseTag;
            r += "</" + node.name + ">" + this.endline(node, options, level);
          } else {
            if (options.dontPrettyTextNodes) {
              ref1 = node.children;
              for (i = 0, len = ref1.length; i < len; i++) {
                child = ref1[i];
                if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {
                  options.suppressPrettyCount++;
                  prettySuppressed = true;
                  break;
                }
              }
            }
            r += ">" + this.endline(node, options, level);
            options.state = WriterState.InsideTag;
            ref2 = node.children;
            for (j2 = 0, len1 = ref2.length; j2 < len1; j2++) {
              child = ref2[j2];
              r += this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            r += this.indent(node, options, level) + "</" + node.name + ">";
            if (prettySuppressed) {
              options.suppressPrettyCount--;
            }
            r += this.endline(node, options, level);
            options.state = WriterState.None;
          }
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.writeChildNode = function(node, options, level) {
          switch (node.type) {
            case NodeType.CData:
              return this.cdata(node, options, level);
            case NodeType.Comment:
              return this.comment(node, options, level);
            case NodeType.Element:
              return this.element(node, options, level);
            case NodeType.Raw:
              return this.raw(node, options, level);
            case NodeType.Text:
              return this.text(node, options, level);
            case NodeType.ProcessingInstruction:
              return this.processingInstruction(node, options, level);
            case NodeType.Dummy:
              return "";
            case NodeType.Declaration:
              return this.declaration(node, options, level);
            case NodeType.DocType:
              return this.docType(node, options, level);
            case NodeType.AttributeDeclaration:
              return this.dtdAttList(node, options, level);
            case NodeType.ElementDeclaration:
              return this.dtdElement(node, options, level);
            case NodeType.EntityDeclaration:
              return this.dtdEntity(node, options, level);
            case NodeType.NotationDeclaration:
              return this.dtdNotation(node, options, level);
            default:
              throw new Error("Unknown XML node type: " + node.constructor.name);
          }
        };
        XMLWriterBase2.prototype.processingInstruction = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<?";
          options.state = WriterState.InsideTag;
          r += node.target;
          if (node.value) {
            r += " " + node.value;
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + "?>";
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.raw = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level);
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.text = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level);
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.dtdAttList = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<!ATTLIST";
          options.state = WriterState.InsideTag;
          r += " " + node.elementName + " " + node.attributeName + " " + node.attributeType;
          if (node.defaultValueType !== "#DEFAULT") {
            r += " " + node.defaultValueType;
          }
          if (node.defaultValue) {
            r += ' "' + node.defaultValue + '"';
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.dtdElement = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<!ELEMENT";
          options.state = WriterState.InsideTag;
          r += " " + node.name + " " + node.value;
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.dtdEntity = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<!ENTITY";
          options.state = WriterState.InsideTag;
          if (node.pe) {
            r += " %";
          }
          r += " " + node.name;
          if (node.value) {
            r += ' "' + node.value + '"';
          } else {
            if (node.pubID && node.sysID) {
              r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.sysID) {
              r += ' SYSTEM "' + node.sysID + '"';
            }
            if (node.nData) {
              r += " NDATA " + node.nData;
            }
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.dtdNotation = function(node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + "<!NOTATION";
          options.state = WriterState.InsideTag;
          r += " " + node.name;
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.pubID) {
            r += ' PUBLIC "' + node.pubID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase2.prototype.openNode = function(node, options, level) {
        };
        XMLWriterBase2.prototype.closeNode = function(node, options, level) {
        };
        XMLWriterBase2.prototype.openAttribute = function(att, options, level) {
        };
        XMLWriterBase2.prototype.closeAttribute = function(att, options, level) {
        };
        return XMLWriterBase2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLStringWriter.js
var require_XMLStringWriter = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLStringWriter.js"(exports, module2) {
    (function() {
      var XMLStringWriter, XMLWriterBase, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLWriterBase = require_XMLWriterBase();
      module2.exports = XMLStringWriter = function(superClass) {
        extend(XMLStringWriter2, superClass);
        function XMLStringWriter2(options) {
          XMLStringWriter2.__super__.constructor.call(this, options);
        }
        XMLStringWriter2.prototype.document = function(doc, options) {
          var child, i, len, r, ref;
          options = this.filterOptions(options);
          r = "";
          ref = doc.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            r += this.writeChildNode(child, options, 0);
          }
          if (options.pretty && r.slice(-options.newline.length) === options.newline) {
            r = r.slice(0, -options.newline.length);
          }
          return r;
        };
        return XMLStringWriter2;
      }(XMLWriterBase);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDocument.js
var require_XMLDocument = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDocument.js"(exports, module2) {
    (function() {
      var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isPlainObject = require_Utility().isPlainObject;
      XMLDOMImplementation = require_XMLDOMImplementation();
      XMLDOMConfiguration = require_XMLDOMConfiguration();
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      XMLStringifier = require_XMLStringifier();
      XMLStringWriter = require_XMLStringWriter();
      module2.exports = XMLDocument = function(superClass) {
        extend(XMLDocument2, superClass);
        function XMLDocument2(options) {
          XMLDocument2.__super__.constructor.call(this, null);
          this.name = "#document";
          this.type = NodeType.Document;
          this.documentURI = null;
          this.domConfig = new XMLDOMConfiguration();
          options || (options = {});
          if (!options.writer) {
            options.writer = new XMLStringWriter();
          }
          this.options = options;
          this.stringify = new XMLStringifier(options);
        }
        Object.defineProperty(XMLDocument2.prototype, "implementation", {
          value: new XMLDOMImplementation()
        });
        Object.defineProperty(XMLDocument2.prototype, "doctype", {
          get: function() {
            var child, i, len, ref;
            ref = this.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.DocType) {
                return child;
              }
            }
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "documentElement", {
          get: function() {
            return this.rootObject || null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "inputEncoding", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "strictErrorChecking", {
          get: function() {
            return false;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "xmlEncoding", {
          get: function() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].encoding;
            } else {
              return null;
            }
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "xmlStandalone", {
          get: function() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].standalone === "yes";
            } else {
              return false;
            }
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "xmlVersion", {
          get: function() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].version;
            } else {
              return "1.0";
            }
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "URL", {
          get: function() {
            return this.documentURI;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "origin", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "compatMode", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "characterSet", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "contentType", {
          get: function() {
            return null;
          }
        });
        XMLDocument2.prototype.end = function(writer) {
          var writerOptions;
          writerOptions = {};
          if (!writer) {
            writer = this.options.writer;
          } else if (isPlainObject(writer)) {
            writerOptions = writer;
            writer = this.options.writer;
          }
          return writer.document(this, writer.filterOptions(writerOptions));
        };
        XMLDocument2.prototype.toString = function(options) {
          return this.options.writer.document(this, this.options.writer.filterOptions(options));
        };
        XMLDocument2.prototype.createElement = function(tagName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createDocumentFragment = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createTextNode = function(data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createComment = function(data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createCDATASection = function(data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createProcessingInstruction = function(target, data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createAttribute = function(name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createEntityReference = function(name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementsByTagName = function(tagname) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.importNode = function(importedNode, deep) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createElementNS = function(namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementById = function(elementId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.adoptNode = function(source) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.normalizeDocument = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.renameNode = function(node, namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementsByClassName = function(classNames) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createEvent = function(eventInterface) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createRange = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createNodeIterator = function(root, whatToShow, filter) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createTreeWalker = function(root, whatToShow, filter) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        return XMLDocument2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLDocumentCB.js
var require_XMLDocumentCB = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLDocumentCB.js"(exports, module2) {
    (function() {
      var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;
      NodeType = require_NodeType();
      XMLDocument = require_XMLDocument();
      XMLElement = require_XMLElement();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLAttribute = require_XMLAttribute();
      XMLStringifier = require_XMLStringifier();
      XMLStringWriter = require_XMLStringWriter();
      WriterState = require_WriterState();
      module2.exports = XMLDocumentCB = function() {
        function XMLDocumentCB2(options, onData, onEnd) {
          var writerOptions;
          this.name = "?xml";
          this.type = NodeType.Document;
          options || (options = {});
          writerOptions = {};
          if (!options.writer) {
            options.writer = new XMLStringWriter();
          } else if (isPlainObject(options.writer)) {
            writerOptions = options.writer;
            options.writer = new XMLStringWriter();
          }
          this.options = options;
          this.writer = options.writer;
          this.writerOptions = this.writer.filterOptions(writerOptions);
          this.stringify = new XMLStringifier(options);
          this.onDataCallback = onData || function() {
          };
          this.onEndCallback = onEnd || function() {
          };
          this.currentNode = null;
          this.currentLevel = -1;
          this.openTags = {};
          this.documentStarted = false;
          this.documentCompleted = false;
          this.root = null;
        }
        XMLDocumentCB2.prototype.createChildNode = function(node) {
          var att, attName, attributes, child, i, len, ref1, ref2;
          switch (node.type) {
            case NodeType.CData:
              this.cdata(node.value);
              break;
            case NodeType.Comment:
              this.comment(node.value);
              break;
            case NodeType.Element:
              attributes = {};
              ref1 = node.attribs;
              for (attName in ref1) {
                if (!hasProp.call(ref1, attName))
                  continue;
                att = ref1[attName];
                attributes[attName] = att.value;
              }
              this.node(node.name, attributes);
              break;
            case NodeType.Dummy:
              this.dummy();
              break;
            case NodeType.Raw:
              this.raw(node.value);
              break;
            case NodeType.Text:
              this.text(node.value);
              break;
            case NodeType.ProcessingInstruction:
              this.instruction(node.target, node.value);
              break;
            default:
              throw new Error("This XML node type is not supported in a JS object: " + node.constructor.name);
          }
          ref2 = node.children;
          for (i = 0, len = ref2.length; i < len; i++) {
            child = ref2[i];
            this.createChildNode(child);
            if (child.type === NodeType.Element) {
              this.up();
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.dummy = function() {
          return this;
        };
        XMLDocumentCB2.prototype.node = function(name, attributes, text) {
          var ref1;
          if (name == null) {
            throw new Error("Missing node name.");
          }
          if (this.root && this.currentLevel === -1) {
            throw new Error("Document can only have one root node. " + this.debugInfo(name));
          }
          this.openCurrent();
          name = getValue(name);
          if (attributes == null) {
            attributes = {};
          }
          attributes = getValue(attributes);
          if (!isObject(attributes)) {
            ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
          }
          this.currentNode = new XMLElement(this, name, attributes);
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          if (text != null) {
            this.text(text);
          }
          return this;
        };
        XMLDocumentCB2.prototype.element = function(name, attributes, text) {
          var child, i, len, oldValidationFlag, ref1, root;
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            this.dtdElement.apply(this, arguments);
          } else {
            if (Array.isArray(name) || isObject(name) || isFunction(name)) {
              oldValidationFlag = this.options.noValidation;
              this.options.noValidation = true;
              root = new XMLDocument(this.options).element("TEMP_ROOT");
              root.element(name);
              this.options.noValidation = oldValidationFlag;
              ref1 = root.children;
              for (i = 0, len = ref1.length; i < len; i++) {
                child = ref1[i];
                this.createChildNode(child);
                if (child.type === NodeType.Element) {
                  this.up();
                }
              }
            } else {
              this.node(name, attributes, text);
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.attribute = function(name, value) {
          var attName, attValue;
          if (!this.currentNode || this.currentNode.children) {
            throw new Error("att() can only be used immediately after an ele() call in callback mode. " + this.debugInfo(name));
          }
          if (name != null) {
            name = getValue(name);
          }
          if (isObject(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName))
                continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            if (this.options.keepNullAttributes && value == null) {
              this.currentNode.attribs[name] = new XMLAttribute(this, name, "");
            } else if (value != null) {
              this.currentNode.attribs[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.text = function(value) {
          var node;
          this.openCurrent();
          node = new XMLText(this, value);
          this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.cdata = function(value) {
          var node;
          this.openCurrent();
          node = new XMLCData(this, value);
          this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.comment = function(value) {
          var node;
          this.openCurrent();
          node = new XMLComment(this, value);
          this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.raw = function(value) {
          var node;
          this.openCurrent();
          node = new XMLRaw(this, value);
          this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.instruction = function(target, value) {
          var i, insTarget, insValue, len, node;
          this.openCurrent();
          if (target != null) {
            target = getValue(target);
          }
          if (value != null) {
            value = getValue(value);
          }
          if (Array.isArray(target)) {
            for (i = 0, len = target.length; i < len; i++) {
              insTarget = target[i];
              this.instruction(insTarget);
            }
          } else if (isObject(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget))
                continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            node = new XMLProcessingInstruction(this, target, value);
            this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          }
          return this;
        };
        XMLDocumentCB2.prototype.declaration = function(version, encoding, standalone) {
          var node;
          this.openCurrent();
          if (this.documentStarted) {
            throw new Error("declaration() must be the first node.");
          }
          node = new XMLDeclaration(this, version, encoding, standalone);
          this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.doctype = function(root, pubID, sysID) {
          this.openCurrent();
          if (root == null) {
            throw new Error("Missing root node name.");
          }
          if (this.root) {
            throw new Error("dtd() must come before the root node.");
          }
          this.currentNode = new XMLDocType(this, pubID, sysID);
          this.currentNode.rootNodeName = root;
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          return this;
        };
        XMLDocumentCB2.prototype.dtdElement = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDElement(this, name, value);
          this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var node;
          this.openCurrent();
          node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.entity = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, false, name, value);
          this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.pEntity = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, true, name, value);
          this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.notation = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDNotation(this, name, value);
          this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.up = function() {
          if (this.currentLevel < 0) {
            throw new Error("The document node has no parent.");
          }
          if (this.currentNode) {
            if (this.currentNode.children) {
              this.closeNode(this.currentNode);
            } else {
              this.openNode(this.currentNode);
            }
            this.currentNode = null;
          } else {
            this.closeNode(this.openTags[this.currentLevel]);
          }
          delete this.openTags[this.currentLevel];
          this.currentLevel--;
          return this;
        };
        XMLDocumentCB2.prototype.end = function() {
          while (this.currentLevel >= 0) {
            this.up();
          }
          return this.onEnd();
        };
        XMLDocumentCB2.prototype.openCurrent = function() {
          if (this.currentNode) {
            this.currentNode.children = true;
            return this.openNode(this.currentNode);
          }
        };
        XMLDocumentCB2.prototype.openNode = function(node) {
          var att, chunk, name, ref1;
          if (!node.isOpen) {
            if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {
              this.root = node;
            }
            chunk = "";
            if (node.type === NodeType.Element) {
              this.writerOptions.state = WriterState.OpenTag;
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "<" + node.name;
              ref1 = node.attribs;
              for (name in ref1) {
                if (!hasProp.call(ref1, name))
                  continue;
                att = ref1[name];
                chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);
              }
              chunk += (node.children ? ">" : "/>") + this.writer.endline(node, this.writerOptions, this.currentLevel);
              this.writerOptions.state = WriterState.InsideTag;
            } else {
              this.writerOptions.state = WriterState.OpenTag;
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "<!DOCTYPE " + node.rootNodeName;
              if (node.pubID && node.sysID) {
                chunk += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
              } else if (node.sysID) {
                chunk += ' SYSTEM "' + node.sysID + '"';
              }
              if (node.children) {
                chunk += " [";
                this.writerOptions.state = WriterState.InsideTag;
              } else {
                this.writerOptions.state = WriterState.CloseTag;
                chunk += ">";
              }
              chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);
            }
            this.onData(chunk, this.currentLevel);
            return node.isOpen = true;
          }
        };
        XMLDocumentCB2.prototype.closeNode = function(node) {
          var chunk;
          if (!node.isClosed) {
            chunk = "";
            this.writerOptions.state = WriterState.CloseTag;
            if (node.type === NodeType.Element) {
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "</" + node.name + ">" + this.writer.endline(node, this.writerOptions, this.currentLevel);
            } else {
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "]>" + this.writer.endline(node, this.writerOptions, this.currentLevel);
            }
            this.writerOptions.state = WriterState.None;
            this.onData(chunk, this.currentLevel);
            return node.isClosed = true;
          }
        };
        XMLDocumentCB2.prototype.onData = function(chunk, level) {
          this.documentStarted = true;
          return this.onDataCallback(chunk, level + 1);
        };
        XMLDocumentCB2.prototype.onEnd = function() {
          this.documentCompleted = true;
          return this.onEndCallback();
        };
        XMLDocumentCB2.prototype.debugInfo = function(name) {
          if (name == null) {
            return "";
          } else {
            return "node: <" + name + ">";
          }
        };
        XMLDocumentCB2.prototype.ele = function() {
          return this.element.apply(this, arguments);
        };
        XMLDocumentCB2.prototype.nod = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB2.prototype.txt = function(value) {
          return this.text(value);
        };
        XMLDocumentCB2.prototype.dat = function(value) {
          return this.cdata(value);
        };
        XMLDocumentCB2.prototype.com = function(value) {
          return this.comment(value);
        };
        XMLDocumentCB2.prototype.ins = function(target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB2.prototype.dec = function(version, encoding, standalone) {
          return this.declaration(version, encoding, standalone);
        };
        XMLDocumentCB2.prototype.dtd = function(root, pubID, sysID) {
          return this.doctype(root, pubID, sysID);
        };
        XMLDocumentCB2.prototype.e = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLDocumentCB2.prototype.n = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB2.prototype.t = function(value) {
          return this.text(value);
        };
        XMLDocumentCB2.prototype.d = function(value) {
          return this.cdata(value);
        };
        XMLDocumentCB2.prototype.c = function(value) {
          return this.comment(value);
        };
        XMLDocumentCB2.prototype.r = function(value) {
          return this.raw(value);
        };
        XMLDocumentCB2.prototype.i = function(target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB2.prototype.att = function() {
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB2.prototype.a = function() {
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB2.prototype.ent = function(name, value) {
          return this.entity(name, value);
        };
        XMLDocumentCB2.prototype.pent = function(name, value) {
          return this.pEntity(name, value);
        };
        XMLDocumentCB2.prototype.not = function(name, value) {
          return this.notation(name, value);
        };
        return XMLDocumentCB2;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/XMLStreamWriter.js
var require_XMLStreamWriter = __commonJS({
  "../core/node_modules/xmlbuilder/lib/XMLStreamWriter.js"(exports, module2) {
    (function() {
      var NodeType, WriterState, XMLStreamWriter, XMLWriterBase, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLWriterBase = require_XMLWriterBase();
      WriterState = require_WriterState();
      module2.exports = XMLStreamWriter = function(superClass) {
        extend(XMLStreamWriter2, superClass);
        function XMLStreamWriter2(stream, options) {
          this.stream = stream;
          XMLStreamWriter2.__super__.constructor.call(this, options);
        }
        XMLStreamWriter2.prototype.endline = function(node, options, level) {
          if (node.isLastRootNode && options.state === WriterState.CloseTag) {
            return "";
          } else {
            return XMLStreamWriter2.__super__.endline.call(this, node, options, level);
          }
        };
        XMLStreamWriter2.prototype.document = function(doc, options) {
          var child, i, j2, k2, len, len1, ref, ref1, results;
          ref = doc.children;
          for (i = j2 = 0, len = ref.length; j2 < len; i = ++j2) {
            child = ref[i];
            child.isLastRootNode = i === doc.children.length - 1;
          }
          options = this.filterOptions(options);
          ref1 = doc.children;
          results = [];
          for (k2 = 0, len1 = ref1.length; k2 < len1; k2++) {
            child = ref1[k2];
            results.push(this.writeChildNode(child, options, 0));
          }
          return results;
        };
        XMLStreamWriter2.prototype.attribute = function(att, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.attribute.call(this, att, options, level));
        };
        XMLStreamWriter2.prototype.cdata = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.cdata.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.comment = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.comment.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.declaration = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.declaration.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.docType = function(node, options, level) {
          var child, j2, len, ref;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          this.stream.write(this.indent(node, options, level));
          this.stream.write("<!DOCTYPE " + node.root().name);
          if (node.pubID && node.sysID) {
            this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
          } else if (node.sysID) {
            this.stream.write(' SYSTEM "' + node.sysID + '"');
          }
          if (node.children.length > 0) {
            this.stream.write(" [");
            this.stream.write(this.endline(node, options, level));
            options.state = WriterState.InsideTag;
            ref = node.children;
            for (j2 = 0, len = ref.length; j2 < len; j2++) {
              child = ref[j2];
              this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            this.stream.write("]");
          }
          options.state = WriterState.CloseTag;
          this.stream.write(options.spaceBeforeSlash + ">");
          this.stream.write(this.endline(node, options, level));
          options.state = WriterState.None;
          return this.closeNode(node, options, level);
        };
        XMLStreamWriter2.prototype.element = function(node, options, level) {
          var att, child, childNodeCount, firstChildNode, j2, len, name, prettySuppressed, ref, ref1;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          this.stream.write(this.indent(node, options, level) + "<" + node.name);
          ref = node.attribs;
          for (name in ref) {
            if (!hasProp.call(ref, name))
              continue;
            att = ref[name];
            this.attribute(att, options, level);
          }
          childNodeCount = node.children.length;
          firstChildNode = childNodeCount === 0 ? null : node.children[0];
          if (childNodeCount === 0 || node.children.every(function(e) {
            return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === "";
          })) {
            if (options.allowEmpty) {
              this.stream.write(">");
              options.state = WriterState.CloseTag;
              this.stream.write("</" + node.name + ">");
            } else {
              options.state = WriterState.CloseTag;
              this.stream.write(options.spaceBeforeSlash + "/>");
            }
          } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
            this.stream.write(">");
            options.state = WriterState.InsideTag;
            options.suppressPrettyCount++;
            prettySuppressed = true;
            this.writeChildNode(firstChildNode, options, level + 1);
            options.suppressPrettyCount--;
            prettySuppressed = false;
            options.state = WriterState.CloseTag;
            this.stream.write("</" + node.name + ">");
          } else {
            this.stream.write(">" + this.endline(node, options, level));
            options.state = WriterState.InsideTag;
            ref1 = node.children;
            for (j2 = 0, len = ref1.length; j2 < len; j2++) {
              child = ref1[j2];
              this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            this.stream.write(this.indent(node, options, level) + "</" + node.name + ">");
          }
          this.stream.write(this.endline(node, options, level));
          options.state = WriterState.None;
          return this.closeNode(node, options, level);
        };
        XMLStreamWriter2.prototype.processingInstruction = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.processingInstruction.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.raw = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.raw.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.text = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.text.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdAttList = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdAttList.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdElement = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdElement.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdEntity = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdEntity.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdNotation = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdNotation.call(this, node, options, level));
        };
        return XMLStreamWriter2;
      }(XMLWriterBase);
    }).call(exports);
  }
});

// ../core/node_modules/xmlbuilder/lib/index.js
var require_lib = __commonJS({
  "../core/node_modules/xmlbuilder/lib/index.js"(exports, module2) {
    (function() {
      var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;
      ref = require_Utility(), assign = ref.assign, isFunction = ref.isFunction;
      XMLDOMImplementation = require_XMLDOMImplementation();
      XMLDocument = require_XMLDocument();
      XMLDocumentCB = require_XMLDocumentCB();
      XMLStringWriter = require_XMLStringWriter();
      XMLStreamWriter = require_XMLStreamWriter();
      NodeType = require_NodeType();
      WriterState = require_WriterState();
      module2.exports.create = function(name, xmldec, doctype, options) {
        var doc, root;
        if (name == null) {
          throw new Error("Root element needs a name.");
        }
        options = assign({}, xmldec, doctype, options);
        doc = new XMLDocument(options);
        root = doc.element(name);
        if (!options.headless) {
          doc.declaration(options);
          if (options.pubID != null || options.sysID != null) {
            doc.dtd(options);
          }
        }
        return root;
      };
      module2.exports.begin = function(options, onData, onEnd) {
        var ref1;
        if (isFunction(options)) {
          ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
          options = {};
        }
        if (onData) {
          return new XMLDocumentCB(options, onData, onEnd);
        } else {
          return new XMLDocument(options);
        }
      };
      module2.exports.stringWriter = function(options) {
        return new XMLStringWriter(options);
      };
      module2.exports.streamWriter = function(stream, options) {
        return new XMLStreamWriter(stream, options);
      };
      module2.exports.implementation = new XMLDOMImplementation();
      module2.exports.nodeType = NodeType;
      module2.exports.writerState = WriterState;
    }).call(exports);
  }
});

// ../core/node_modules/xml2js/lib/builder.js
var require_builder = __commonJS({
  "../core/node_modules/xml2js/lib/builder.js"(exports) {
    (function() {
      "use strict";
      var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA, hasProp = {}.hasOwnProperty;
      builder = require_lib();
      defaults = require_defaults().defaults;
      requiresCDATA = function(entry) {
        return typeof entry === "string" && (entry.indexOf("&") >= 0 || entry.indexOf(">") >= 0 || entry.indexOf("<") >= 0);
      };
      wrapCDATA = function(entry) {
        return "<![CDATA[" + escapeCDATA(entry) + "]]>";
      };
      escapeCDATA = function(entry) {
        return entry.replace("]]>", "]]]]><![CDATA[>");
      };
      exports.Builder = function() {
        function Builder(opts) {
          var key, ref, value;
          this.options = {};
          ref = defaults["0.2"];
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this.options[key] = value;
          }
          for (key in opts) {
            if (!hasProp.call(opts, key))
              continue;
            value = opts[key];
            this.options[key] = value;
          }
        }
        Builder.prototype.buildObject = function(rootObj) {
          var attrkey, charkey, render, rootElement, rootName;
          attrkey = this.options.attrkey;
          charkey = this.options.charkey;
          if (Object.keys(rootObj).length === 1 && this.options.rootName === defaults["0.2"].rootName) {
            rootName = Object.keys(rootObj)[0];
            rootObj = rootObj[rootName];
          } else {
            rootName = this.options.rootName;
          }
          render = function(_this) {
            return function(element, obj) {
              var attr, child, entry, index, key, value;
              if (typeof obj !== "object") {
                if (_this.options.cdata && requiresCDATA(obj)) {
                  element.raw(wrapCDATA(obj));
                } else {
                  element.txt(obj);
                }
              } else if (Array.isArray(obj)) {
                for (index in obj) {
                  if (!hasProp.call(obj, index))
                    continue;
                  child = obj[index];
                  for (key in child) {
                    entry = child[key];
                    element = render(element.ele(key), entry).up();
                  }
                }
              } else {
                for (key in obj) {
                  if (!hasProp.call(obj, key))
                    continue;
                  child = obj[key];
                  if (key === attrkey) {
                    if (typeof child === "object") {
                      for (attr in child) {
                        value = child[attr];
                        element = element.att(attr, value);
                      }
                    }
                  } else if (key === charkey) {
                    if (_this.options.cdata && requiresCDATA(child)) {
                      element = element.raw(wrapCDATA(child));
                    } else {
                      element = element.txt(child);
                    }
                  } else if (Array.isArray(child)) {
                    for (index in child) {
                      if (!hasProp.call(child, index))
                        continue;
                      entry = child[index];
                      if (typeof entry === "string") {
                        if (_this.options.cdata && requiresCDATA(entry)) {
                          element = element.ele(key).raw(wrapCDATA(entry)).up();
                        } else {
                          element = element.ele(key, entry).up();
                        }
                      } else {
                        element = render(element.ele(key), entry).up();
                      }
                    }
                  } else if (typeof child === "object") {
                    element = render(element.ele(key), child).up();
                  } else {
                    if (typeof child === "string" && _this.options.cdata && requiresCDATA(child)) {
                      element = element.ele(key).raw(wrapCDATA(child)).up();
                    } else {
                      if (child == null) {
                        child = "";
                      }
                      element = element.ele(key, child.toString()).up();
                    }
                  }
                }
              }
              return element;
            };
          }(this);
          rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
            headless: this.options.headless,
            allowSurrogateChars: this.options.allowSurrogateChars
          });
          return render(rootElement, rootObj).end(this.options.renderOpts);
        };
        return Builder;
      }();
    }).call(exports);
  }
});

// ../core/node_modules/sax/lib/sax.js
var require_sax = __commonJS({
  "../core/node_modules/sax/lib/sax.js"(exports) {
    (function(sax) {
      sax.parser = function(strict, opt) {
        return new SAXParser(strict, opt);
      };
      sax.SAXParser = SAXParser;
      sax.SAXStream = SAXStream;
      sax.createStream = createStream;
      sax.MAX_BUFFER_LENGTH = 64 * 1024;
      var buffers = [
        "comment",
        "sgmlDecl",
        "textNode",
        "tagName",
        "doctype",
        "procInstName",
        "procInstBody",
        "entity",
        "attribName",
        "attribValue",
        "cdata",
        "script"
      ];
      sax.EVENTS = [
        "text",
        "processinginstruction",
        "sgmldeclaration",
        "doctype",
        "comment",
        "opentagstart",
        "attribute",
        "opentag",
        "closetag",
        "opencdata",
        "cdata",
        "closecdata",
        "error",
        "end",
        "ready",
        "script",
        "opennamespace",
        "closenamespace"
      ];
      function SAXParser(strict, opt) {
        if (!(this instanceof SAXParser)) {
          return new SAXParser(strict, opt);
        }
        var parser2 = this;
        clearBuffers(parser2);
        parser2.q = parser2.c = "";
        parser2.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
        parser2.opt = opt || {};
        parser2.opt.lowercase = parser2.opt.lowercase || parser2.opt.lowercasetags;
        parser2.looseCase = parser2.opt.lowercase ? "toLowerCase" : "toUpperCase";
        parser2.tags = [];
        parser2.closed = parser2.closedRoot = parser2.sawRoot = false;
        parser2.tag = parser2.error = null;
        parser2.strict = !!strict;
        parser2.noscript = !!(strict || parser2.opt.noscript);
        parser2.state = S2.BEGIN;
        parser2.strictEntities = parser2.opt.strictEntities;
        parser2.ENTITIES = parser2.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
        parser2.attribList = [];
        if (parser2.opt.xmlns) {
          parser2.ns = Object.create(rootNS);
        }
        parser2.trackPosition = parser2.opt.position !== false;
        if (parser2.trackPosition) {
          parser2.position = parser2.line = parser2.column = 0;
        }
        emit(parser2, "onready");
      }
      if (!Object.create) {
        Object.create = function(o) {
          function F2() {
          }
          F2.prototype = o;
          var newf = new F2();
          return newf;
        };
      }
      if (!Object.keys) {
        Object.keys = function(o) {
          var a = [];
          for (var i in o)
            if (o.hasOwnProperty(i))
              a.push(i);
          return a;
        };
      }
      function checkBufferLength(parser2) {
        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
        var maxActual = 0;
        for (var i = 0, l = buffers.length; i < l; i++) {
          var len = parser2[buffers[i]].length;
          if (len > maxAllowed) {
            switch (buffers[i]) {
              case "textNode":
                closeText(parser2);
                break;
              case "cdata":
                emitNode(parser2, "oncdata", parser2.cdata);
                parser2.cdata = "";
                break;
              case "script":
                emitNode(parser2, "onscript", parser2.script);
                parser2.script = "";
                break;
              default:
                error(parser2, "Max buffer length exceeded: " + buffers[i]);
            }
          }
          maxActual = Math.max(maxActual, len);
        }
        var m2 = sax.MAX_BUFFER_LENGTH - maxActual;
        parser2.bufferCheckPosition = m2 + parser2.position;
      }
      function clearBuffers(parser2) {
        for (var i = 0, l = buffers.length; i < l; i++) {
          parser2[buffers[i]] = "";
        }
      }
      function flushBuffers(parser2) {
        closeText(parser2);
        if (parser2.cdata !== "") {
          emitNode(parser2, "oncdata", parser2.cdata);
          parser2.cdata = "";
        }
        if (parser2.script !== "") {
          emitNode(parser2, "onscript", parser2.script);
          parser2.script = "";
        }
      }
      SAXParser.prototype = {
        end: function() {
          end(this);
        },
        write,
        resume: function() {
          this.error = null;
          return this;
        },
        close: function() {
          return this.write(null);
        },
        flush: function() {
          flushBuffers(this);
        }
      };
      var Stream;
      try {
        Stream = require("stream").Stream;
      } catch (ex) {
        Stream = function() {
        };
      }
      var streamWraps = sax.EVENTS.filter(function(ev) {
        return ev !== "error" && ev !== "end";
      });
      function createStream(strict, opt) {
        return new SAXStream(strict, opt);
      }
      function SAXStream(strict, opt) {
        if (!(this instanceof SAXStream)) {
          return new SAXStream(strict, opt);
        }
        Stream.apply(this);
        this._parser = new SAXParser(strict, opt);
        this.writable = true;
        this.readable = true;
        var me = this;
        this._parser.onend = function() {
          me.emit("end");
        };
        this._parser.onerror = function(er) {
          me.emit("error", er);
          me._parser.error = null;
        };
        this._decoder = null;
        streamWraps.forEach(function(ev) {
          Object.defineProperty(me, "on" + ev, {
            get: function() {
              return me._parser["on" + ev];
            },
            set: function(h2) {
              if (!h2) {
                me.removeAllListeners(ev);
                me._parser["on" + ev] = h2;
                return h2;
              }
              me.on(ev, h2);
            },
            enumerable: true,
            configurable: false
          });
        });
      }
      SAXStream.prototype = Object.create(Stream.prototype, {
        constructor: {
          value: SAXStream
        }
      });
      SAXStream.prototype.write = function(data) {
        if (typeof Buffer === "function" && typeof Buffer.isBuffer === "function" && Buffer.isBuffer(data)) {
          if (!this._decoder) {
            var SD = require("string_decoder").StringDecoder;
            this._decoder = new SD("utf8");
          }
          data = this._decoder.write(data);
        }
        this._parser.write(data.toString());
        this.emit("data", data);
        return true;
      };
      SAXStream.prototype.end = function(chunk) {
        if (chunk && chunk.length) {
          this.write(chunk);
        }
        this._parser.end();
        return true;
      };
      SAXStream.prototype.on = function(ev, handler) {
        var me = this;
        if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
          me._parser["on" + ev] = function() {
            var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
            args.splice(0, 0, ev);
            me.emit.apply(me, args);
          };
        }
        return Stream.prototype.on.call(me, ev, handler);
      };
      var CDATA = "[CDATA[";
      var DOCTYPE = "DOCTYPE";
      var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
      var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
      var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
      var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      function isWhitespace(c2) {
        return c2 === " " || c2 === "\n" || c2 === "\r" || c2 === "	";
      }
      function isQuote(c2) {
        return c2 === '"' || c2 === "'";
      }
      function isAttribEnd(c2) {
        return c2 === ">" || isWhitespace(c2);
      }
      function isMatch(regex, c2) {
        return regex.test(c2);
      }
      function notMatch(regex, c2) {
        return !isMatch(regex, c2);
      }
      var S2 = 0;
      sax.STATE = {
        BEGIN: S2++,
        // leading byte order mark or whitespace
        BEGIN_WHITESPACE: S2++,
        // leading whitespace
        TEXT: S2++,
        // general stuff
        TEXT_ENTITY: S2++,
        // &amp and such.
        OPEN_WAKA: S2++,
        // <
        SGML_DECL: S2++,
        // <!BLARG
        SGML_DECL_QUOTED: S2++,
        // <!BLARG foo "bar
        DOCTYPE: S2++,
        // <!DOCTYPE
        DOCTYPE_QUOTED: S2++,
        // <!DOCTYPE "//blah
        DOCTYPE_DTD: S2++,
        // <!DOCTYPE "//blah" [ ...
        DOCTYPE_DTD_QUOTED: S2++,
        // <!DOCTYPE "//blah" [ "foo
        COMMENT_STARTING: S2++,
        // <!-
        COMMENT: S2++,
        // <!--
        COMMENT_ENDING: S2++,
        // <!-- blah -
        COMMENT_ENDED: S2++,
        // <!-- blah --
        CDATA: S2++,
        // <![CDATA[ something
        CDATA_ENDING: S2++,
        // ]
        CDATA_ENDING_2: S2++,
        // ]]
        PROC_INST: S2++,
        // <?hi
        PROC_INST_BODY: S2++,
        // <?hi there
        PROC_INST_ENDING: S2++,
        // <?hi "there" ?
        OPEN_TAG: S2++,
        // <strong
        OPEN_TAG_SLASH: S2++,
        // <strong /
        ATTRIB: S2++,
        // <a
        ATTRIB_NAME: S2++,
        // <a foo
        ATTRIB_NAME_SAW_WHITE: S2++,
        // <a foo _
        ATTRIB_VALUE: S2++,
        // <a foo=
        ATTRIB_VALUE_QUOTED: S2++,
        // <a foo="bar
        ATTRIB_VALUE_CLOSED: S2++,
        // <a foo="bar"
        ATTRIB_VALUE_UNQUOTED: S2++,
        // <a foo=bar
        ATTRIB_VALUE_ENTITY_Q: S2++,
        // <foo bar="&quot;"
        ATTRIB_VALUE_ENTITY_U: S2++,
        // <foo bar=&quot
        CLOSE_TAG: S2++,
        // </a
        CLOSE_TAG_SAW_WHITE: S2++,
        // </a   >
        SCRIPT: S2++,
        // <script> ...
        SCRIPT_ENDING: S2++
        // <script> ... <
      };
      sax.XML_ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'"
      };
      sax.ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'",
        "AElig": 198,
        "Aacute": 193,
        "Acirc": 194,
        "Agrave": 192,
        "Aring": 197,
        "Atilde": 195,
        "Auml": 196,
        "Ccedil": 199,
        "ETH": 208,
        "Eacute": 201,
        "Ecirc": 202,
        "Egrave": 200,
        "Euml": 203,
        "Iacute": 205,
        "Icirc": 206,
        "Igrave": 204,
        "Iuml": 207,
        "Ntilde": 209,
        "Oacute": 211,
        "Ocirc": 212,
        "Ograve": 210,
        "Oslash": 216,
        "Otilde": 213,
        "Ouml": 214,
        "THORN": 222,
        "Uacute": 218,
        "Ucirc": 219,
        "Ugrave": 217,
        "Uuml": 220,
        "Yacute": 221,
        "aacute": 225,
        "acirc": 226,
        "aelig": 230,
        "agrave": 224,
        "aring": 229,
        "atilde": 227,
        "auml": 228,
        "ccedil": 231,
        "eacute": 233,
        "ecirc": 234,
        "egrave": 232,
        "eth": 240,
        "euml": 235,
        "iacute": 237,
        "icirc": 238,
        "igrave": 236,
        "iuml": 239,
        "ntilde": 241,
        "oacute": 243,
        "ocirc": 244,
        "ograve": 242,
        "oslash": 248,
        "otilde": 245,
        "ouml": 246,
        "szlig": 223,
        "thorn": 254,
        "uacute": 250,
        "ucirc": 251,
        "ugrave": 249,
        "uuml": 252,
        "yacute": 253,
        "yuml": 255,
        "copy": 169,
        "reg": 174,
        "nbsp": 160,
        "iexcl": 161,
        "cent": 162,
        "pound": 163,
        "curren": 164,
        "yen": 165,
        "brvbar": 166,
        "sect": 167,
        "uml": 168,
        "ordf": 170,
        "laquo": 171,
        "not": 172,
        "shy": 173,
        "macr": 175,
        "deg": 176,
        "plusmn": 177,
        "sup1": 185,
        "sup2": 178,
        "sup3": 179,
        "acute": 180,
        "micro": 181,
        "para": 182,
        "middot": 183,
        "cedil": 184,
        "ordm": 186,
        "raquo": 187,
        "frac14": 188,
        "frac12": 189,
        "frac34": 190,
        "iquest": 191,
        "times": 215,
        "divide": 247,
        "OElig": 338,
        "oelig": 339,
        "Scaron": 352,
        "scaron": 353,
        "Yuml": 376,
        "fnof": 402,
        "circ": 710,
        "tilde": 732,
        "Alpha": 913,
        "Beta": 914,
        "Gamma": 915,
        "Delta": 916,
        "Epsilon": 917,
        "Zeta": 918,
        "Eta": 919,
        "Theta": 920,
        "Iota": 921,
        "Kappa": 922,
        "Lambda": 923,
        "Mu": 924,
        "Nu": 925,
        "Xi": 926,
        "Omicron": 927,
        "Pi": 928,
        "Rho": 929,
        "Sigma": 931,
        "Tau": 932,
        "Upsilon": 933,
        "Phi": 934,
        "Chi": 935,
        "Psi": 936,
        "Omega": 937,
        "alpha": 945,
        "beta": 946,
        "gamma": 947,
        "delta": 948,
        "epsilon": 949,
        "zeta": 950,
        "eta": 951,
        "theta": 952,
        "iota": 953,
        "kappa": 954,
        "lambda": 955,
        "mu": 956,
        "nu": 957,
        "xi": 958,
        "omicron": 959,
        "pi": 960,
        "rho": 961,
        "sigmaf": 962,
        "sigma": 963,
        "tau": 964,
        "upsilon": 965,
        "phi": 966,
        "chi": 967,
        "psi": 968,
        "omega": 969,
        "thetasym": 977,
        "upsih": 978,
        "piv": 982,
        "ensp": 8194,
        "emsp": 8195,
        "thinsp": 8201,
        "zwnj": 8204,
        "zwj": 8205,
        "lrm": 8206,
        "rlm": 8207,
        "ndash": 8211,
        "mdash": 8212,
        "lsquo": 8216,
        "rsquo": 8217,
        "sbquo": 8218,
        "ldquo": 8220,
        "rdquo": 8221,
        "bdquo": 8222,
        "dagger": 8224,
        "Dagger": 8225,
        "bull": 8226,
        "hellip": 8230,
        "permil": 8240,
        "prime": 8242,
        "Prime": 8243,
        "lsaquo": 8249,
        "rsaquo": 8250,
        "oline": 8254,
        "frasl": 8260,
        "euro": 8364,
        "image": 8465,
        "weierp": 8472,
        "real": 8476,
        "trade": 8482,
        "alefsym": 8501,
        "larr": 8592,
        "uarr": 8593,
        "rarr": 8594,
        "darr": 8595,
        "harr": 8596,
        "crarr": 8629,
        "lArr": 8656,
        "uArr": 8657,
        "rArr": 8658,
        "dArr": 8659,
        "hArr": 8660,
        "forall": 8704,
        "part": 8706,
        "exist": 8707,
        "empty": 8709,
        "nabla": 8711,
        "isin": 8712,
        "notin": 8713,
        "ni": 8715,
        "prod": 8719,
        "sum": 8721,
        "minus": 8722,
        "lowast": 8727,
        "radic": 8730,
        "prop": 8733,
        "infin": 8734,
        "ang": 8736,
        "and": 8743,
        "or": 8744,
        "cap": 8745,
        "cup": 8746,
        "int": 8747,
        "there4": 8756,
        "sim": 8764,
        "cong": 8773,
        "asymp": 8776,
        "ne": 8800,
        "equiv": 8801,
        "le": 8804,
        "ge": 8805,
        "sub": 8834,
        "sup": 8835,
        "nsub": 8836,
        "sube": 8838,
        "supe": 8839,
        "oplus": 8853,
        "otimes": 8855,
        "perp": 8869,
        "sdot": 8901,
        "lceil": 8968,
        "rceil": 8969,
        "lfloor": 8970,
        "rfloor": 8971,
        "lang": 9001,
        "rang": 9002,
        "loz": 9674,
        "spades": 9824,
        "clubs": 9827,
        "hearts": 9829,
        "diams": 9830
      };
      Object.keys(sax.ENTITIES).forEach(function(key) {
        var e = sax.ENTITIES[key];
        var s2 = typeof e === "number" ? String.fromCharCode(e) : e;
        sax.ENTITIES[key] = s2;
      });
      for (var s in sax.STATE) {
        sax.STATE[sax.STATE[s]] = s;
      }
      S2 = sax.STATE;
      function emit(parser2, event, data) {
        parser2[event] && parser2[event](data);
      }
      function emitNode(parser2, nodeType, data) {
        if (parser2.textNode)
          closeText(parser2);
        emit(parser2, nodeType, data);
      }
      function closeText(parser2) {
        parser2.textNode = textopts(parser2.opt, parser2.textNode);
        if (parser2.textNode)
          emit(parser2, "ontext", parser2.textNode);
        parser2.textNode = "";
      }
      function textopts(opt, text) {
        if (opt.trim)
          text = text.trim();
        if (opt.normalize)
          text = text.replace(/\s+/g, " ");
        return text;
      }
      function error(parser2, er) {
        closeText(parser2);
        if (parser2.trackPosition) {
          er += "\nLine: " + parser2.line + "\nColumn: " + parser2.column + "\nChar: " + parser2.c;
        }
        er = new Error(er);
        parser2.error = er;
        emit(parser2, "onerror", er);
        return parser2;
      }
      function end(parser2) {
        if (parser2.sawRoot && !parser2.closedRoot)
          strictFail(parser2, "Unclosed root tag");
        if (parser2.state !== S2.BEGIN && parser2.state !== S2.BEGIN_WHITESPACE && parser2.state !== S2.TEXT) {
          error(parser2, "Unexpected end");
        }
        closeText(parser2);
        parser2.c = "";
        parser2.closed = true;
        emit(parser2, "onend");
        SAXParser.call(parser2, parser2.strict, parser2.opt);
        return parser2;
      }
      function strictFail(parser2, message) {
        if (typeof parser2 !== "object" || !(parser2 instanceof SAXParser)) {
          throw new Error("bad call to strictFail");
        }
        if (parser2.strict) {
          error(parser2, message);
        }
      }
      function newTag(parser2) {
        if (!parser2.strict)
          parser2.tagName = parser2.tagName[parser2.looseCase]();
        var parent = parser2.tags[parser2.tags.length - 1] || parser2;
        var tag = parser2.tag = { name: parser2.tagName, attributes: {} };
        if (parser2.opt.xmlns) {
          tag.ns = parent.ns;
        }
        parser2.attribList.length = 0;
        emitNode(parser2, "onopentagstart", tag);
      }
      function qname(name, attribute) {
        var i = name.indexOf(":");
        var qualName = i < 0 ? ["", name] : name.split(":");
        var prefix = qualName[0];
        var local = qualName[1];
        if (attribute && name === "xmlns") {
          prefix = "xmlns";
          local = "";
        }
        return { prefix, local };
      }
      function attrib(parser2) {
        if (!parser2.strict) {
          parser2.attribName = parser2.attribName[parser2.looseCase]();
        }
        if (parser2.attribList.indexOf(parser2.attribName) !== -1 || parser2.tag.attributes.hasOwnProperty(parser2.attribName)) {
          parser2.attribName = parser2.attribValue = "";
          return;
        }
        if (parser2.opt.xmlns) {
          var qn = qname(parser2.attribName, true);
          var prefix = qn.prefix;
          var local = qn.local;
          if (prefix === "xmlns") {
            if (local === "xml" && parser2.attribValue !== XML_NAMESPACE) {
              strictFail(
                parser2,
                "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser2.attribValue
              );
            } else if (local === "xmlns" && parser2.attribValue !== XMLNS_NAMESPACE) {
              strictFail(
                parser2,
                "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser2.attribValue
              );
            } else {
              var tag = parser2.tag;
              var parent = parser2.tags[parser2.tags.length - 1] || parser2;
              if (tag.ns === parent.ns) {
                tag.ns = Object.create(parent.ns);
              }
              tag.ns[local] = parser2.attribValue;
            }
          }
          parser2.attribList.push([parser2.attribName, parser2.attribValue]);
        } else {
          parser2.tag.attributes[parser2.attribName] = parser2.attribValue;
          emitNode(parser2, "onattribute", {
            name: parser2.attribName,
            value: parser2.attribValue
          });
        }
        parser2.attribName = parser2.attribValue = "";
      }
      function openTag(parser2, selfClosing) {
        if (parser2.opt.xmlns) {
          var tag = parser2.tag;
          var qn = qname(parser2.tagName);
          tag.prefix = qn.prefix;
          tag.local = qn.local;
          tag.uri = tag.ns[qn.prefix] || "";
          if (tag.prefix && !tag.uri) {
            strictFail(parser2, "Unbound namespace prefix: " + JSON.stringify(parser2.tagName));
            tag.uri = qn.prefix;
          }
          var parent = parser2.tags[parser2.tags.length - 1] || parser2;
          if (tag.ns && parent.ns !== tag.ns) {
            Object.keys(tag.ns).forEach(function(p2) {
              emitNode(parser2, "onopennamespace", {
                prefix: p2,
                uri: tag.ns[p2]
              });
            });
          }
          for (var i = 0, l = parser2.attribList.length; i < l; i++) {
            var nv = parser2.attribList[i];
            var name = nv[0];
            var value = nv[1];
            var qualName = qname(name, true);
            var prefix = qualName.prefix;
            var local = qualName.local;
            var uri = prefix === "" ? "" : tag.ns[prefix] || "";
            var a = {
              name,
              value,
              prefix,
              local,
              uri
            };
            if (prefix && prefix !== "xmlns" && !uri) {
              strictFail(parser2, "Unbound namespace prefix: " + JSON.stringify(prefix));
              a.uri = prefix;
            }
            parser2.tag.attributes[name] = a;
            emitNode(parser2, "onattribute", a);
          }
          parser2.attribList.length = 0;
        }
        parser2.tag.isSelfClosing = !!selfClosing;
        parser2.sawRoot = true;
        parser2.tags.push(parser2.tag);
        emitNode(parser2, "onopentag", parser2.tag);
        if (!selfClosing) {
          if (!parser2.noscript && parser2.tagName.toLowerCase() === "script") {
            parser2.state = S2.SCRIPT;
          } else {
            parser2.state = S2.TEXT;
          }
          parser2.tag = null;
          parser2.tagName = "";
        }
        parser2.attribName = parser2.attribValue = "";
        parser2.attribList.length = 0;
      }
      function closeTag(parser2) {
        if (!parser2.tagName) {
          strictFail(parser2, "Weird empty close tag.");
          parser2.textNode += "</>";
          parser2.state = S2.TEXT;
          return;
        }
        if (parser2.script) {
          if (parser2.tagName !== "script") {
            parser2.script += "</" + parser2.tagName + ">";
            parser2.tagName = "";
            parser2.state = S2.SCRIPT;
            return;
          }
          emitNode(parser2, "onscript", parser2.script);
          parser2.script = "";
        }
        var t = parser2.tags.length;
        var tagName = parser2.tagName;
        if (!parser2.strict) {
          tagName = tagName[parser2.looseCase]();
        }
        var closeTo = tagName;
        while (t--) {
          var close = parser2.tags[t];
          if (close.name !== closeTo) {
            strictFail(parser2, "Unexpected close tag");
          } else {
            break;
          }
        }
        if (t < 0) {
          strictFail(parser2, "Unmatched closing tag: " + parser2.tagName);
          parser2.textNode += "</" + parser2.tagName + ">";
          parser2.state = S2.TEXT;
          return;
        }
        parser2.tagName = tagName;
        var s2 = parser2.tags.length;
        while (s2-- > t) {
          var tag = parser2.tag = parser2.tags.pop();
          parser2.tagName = parser2.tag.name;
          emitNode(parser2, "onclosetag", parser2.tagName);
          var x2 = {};
          for (var i in tag.ns) {
            x2[i] = tag.ns[i];
          }
          var parent = parser2.tags[parser2.tags.length - 1] || parser2;
          if (parser2.opt.xmlns && tag.ns !== parent.ns) {
            Object.keys(tag.ns).forEach(function(p2) {
              var n = tag.ns[p2];
              emitNode(parser2, "onclosenamespace", { prefix: p2, uri: n });
            });
          }
        }
        if (t === 0)
          parser2.closedRoot = true;
        parser2.tagName = parser2.attribValue = parser2.attribName = "";
        parser2.attribList.length = 0;
        parser2.state = S2.TEXT;
      }
      function parseEntity(parser2) {
        var entity = parser2.entity;
        var entityLC = entity.toLowerCase();
        var num;
        var numStr = "";
        if (parser2.ENTITIES[entity]) {
          return parser2.ENTITIES[entity];
        }
        if (parser2.ENTITIES[entityLC]) {
          return parser2.ENTITIES[entityLC];
        }
        entity = entityLC;
        if (entity.charAt(0) === "#") {
          if (entity.charAt(1) === "x") {
            entity = entity.slice(2);
            num = parseInt(entity, 16);
            numStr = num.toString(16);
          } else {
            entity = entity.slice(1);
            num = parseInt(entity, 10);
            numStr = num.toString(10);
          }
        }
        entity = entity.replace(/^0+/, "");
        if (isNaN(num) || numStr.toLowerCase() !== entity) {
          strictFail(parser2, "Invalid character entity");
          return "&" + parser2.entity + ";";
        }
        return String.fromCodePoint(num);
      }
      function beginWhiteSpace(parser2, c2) {
        if (c2 === "<") {
          parser2.state = S2.OPEN_WAKA;
          parser2.startTagPosition = parser2.position;
        } else if (!isWhitespace(c2)) {
          strictFail(parser2, "Non-whitespace before first tag.");
          parser2.textNode = c2;
          parser2.state = S2.TEXT;
        }
      }
      function charAt(chunk, i) {
        var result = "";
        if (i < chunk.length) {
          result = chunk.charAt(i);
        }
        return result;
      }
      function write(chunk) {
        var parser2 = this;
        if (this.error) {
          throw this.error;
        }
        if (parser2.closed) {
          return error(
            parser2,
            "Cannot write after close. Assign an onready handler."
          );
        }
        if (chunk === null) {
          return end(parser2);
        }
        if (typeof chunk === "object") {
          chunk = chunk.toString();
        }
        var i = 0;
        var c2 = "";
        while (true) {
          c2 = charAt(chunk, i++);
          parser2.c = c2;
          if (!c2) {
            break;
          }
          if (parser2.trackPosition) {
            parser2.position++;
            if (c2 === "\n") {
              parser2.line++;
              parser2.column = 0;
            } else {
              parser2.column++;
            }
          }
          switch (parser2.state) {
            case S2.BEGIN:
              parser2.state = S2.BEGIN_WHITESPACE;
              if (c2 === "\uFEFF") {
                continue;
              }
              beginWhiteSpace(parser2, c2);
              continue;
            case S2.BEGIN_WHITESPACE:
              beginWhiteSpace(parser2, c2);
              continue;
            case S2.TEXT:
              if (parser2.sawRoot && !parser2.closedRoot) {
                var starti = i - 1;
                while (c2 && c2 !== "<" && c2 !== "&") {
                  c2 = charAt(chunk, i++);
                  if (c2 && parser2.trackPosition) {
                    parser2.position++;
                    if (c2 === "\n") {
                      parser2.line++;
                      parser2.column = 0;
                    } else {
                      parser2.column++;
                    }
                  }
                }
                parser2.textNode += chunk.substring(starti, i - 1);
              }
              if (c2 === "<" && !(parser2.sawRoot && parser2.closedRoot && !parser2.strict)) {
                parser2.state = S2.OPEN_WAKA;
                parser2.startTagPosition = parser2.position;
              } else {
                if (!isWhitespace(c2) && (!parser2.sawRoot || parser2.closedRoot)) {
                  strictFail(parser2, "Text data outside of root node.");
                }
                if (c2 === "&") {
                  parser2.state = S2.TEXT_ENTITY;
                } else {
                  parser2.textNode += c2;
                }
              }
              continue;
            case S2.SCRIPT:
              if (c2 === "<") {
                parser2.state = S2.SCRIPT_ENDING;
              } else {
                parser2.script += c2;
              }
              continue;
            case S2.SCRIPT_ENDING:
              if (c2 === "/") {
                parser2.state = S2.CLOSE_TAG;
              } else {
                parser2.script += "<" + c2;
                parser2.state = S2.SCRIPT;
              }
              continue;
            case S2.OPEN_WAKA:
              if (c2 === "!") {
                parser2.state = S2.SGML_DECL;
                parser2.sgmlDecl = "";
              } else if (isWhitespace(c2)) {
              } else if (isMatch(nameStart, c2)) {
                parser2.state = S2.OPEN_TAG;
                parser2.tagName = c2;
              } else if (c2 === "/") {
                parser2.state = S2.CLOSE_TAG;
                parser2.tagName = "";
              } else if (c2 === "?") {
                parser2.state = S2.PROC_INST;
                parser2.procInstName = parser2.procInstBody = "";
              } else {
                strictFail(parser2, "Unencoded <");
                if (parser2.startTagPosition + 1 < parser2.position) {
                  var pad = parser2.position - parser2.startTagPosition;
                  c2 = new Array(pad).join(" ") + c2;
                }
                parser2.textNode += "<" + c2;
                parser2.state = S2.TEXT;
              }
              continue;
            case S2.SGML_DECL:
              if ((parser2.sgmlDecl + c2).toUpperCase() === CDATA) {
                emitNode(parser2, "onopencdata");
                parser2.state = S2.CDATA;
                parser2.sgmlDecl = "";
                parser2.cdata = "";
              } else if (parser2.sgmlDecl + c2 === "--") {
                parser2.state = S2.COMMENT;
                parser2.comment = "";
                parser2.sgmlDecl = "";
              } else if ((parser2.sgmlDecl + c2).toUpperCase() === DOCTYPE) {
                parser2.state = S2.DOCTYPE;
                if (parser2.doctype || parser2.sawRoot) {
                  strictFail(
                    parser2,
                    "Inappropriately located doctype declaration"
                  );
                }
                parser2.doctype = "";
                parser2.sgmlDecl = "";
              } else if (c2 === ">") {
                emitNode(parser2, "onsgmldeclaration", parser2.sgmlDecl);
                parser2.sgmlDecl = "";
                parser2.state = S2.TEXT;
              } else if (isQuote(c2)) {
                parser2.state = S2.SGML_DECL_QUOTED;
                parser2.sgmlDecl += c2;
              } else {
                parser2.sgmlDecl += c2;
              }
              continue;
            case S2.SGML_DECL_QUOTED:
              if (c2 === parser2.q) {
                parser2.state = S2.SGML_DECL;
                parser2.q = "";
              }
              parser2.sgmlDecl += c2;
              continue;
            case S2.DOCTYPE:
              if (c2 === ">") {
                parser2.state = S2.TEXT;
                emitNode(parser2, "ondoctype", parser2.doctype);
                parser2.doctype = true;
              } else {
                parser2.doctype += c2;
                if (c2 === "[") {
                  parser2.state = S2.DOCTYPE_DTD;
                } else if (isQuote(c2)) {
                  parser2.state = S2.DOCTYPE_QUOTED;
                  parser2.q = c2;
                }
              }
              continue;
            case S2.DOCTYPE_QUOTED:
              parser2.doctype += c2;
              if (c2 === parser2.q) {
                parser2.q = "";
                parser2.state = S2.DOCTYPE;
              }
              continue;
            case S2.DOCTYPE_DTD:
              parser2.doctype += c2;
              if (c2 === "]") {
                parser2.state = S2.DOCTYPE;
              } else if (isQuote(c2)) {
                parser2.state = S2.DOCTYPE_DTD_QUOTED;
                parser2.q = c2;
              }
              continue;
            case S2.DOCTYPE_DTD_QUOTED:
              parser2.doctype += c2;
              if (c2 === parser2.q) {
                parser2.state = S2.DOCTYPE_DTD;
                parser2.q = "";
              }
              continue;
            case S2.COMMENT:
              if (c2 === "-") {
                parser2.state = S2.COMMENT_ENDING;
              } else {
                parser2.comment += c2;
              }
              continue;
            case S2.COMMENT_ENDING:
              if (c2 === "-") {
                parser2.state = S2.COMMENT_ENDED;
                parser2.comment = textopts(parser2.opt, parser2.comment);
                if (parser2.comment) {
                  emitNode(parser2, "oncomment", parser2.comment);
                }
                parser2.comment = "";
              } else {
                parser2.comment += "-" + c2;
                parser2.state = S2.COMMENT;
              }
              continue;
            case S2.COMMENT_ENDED:
              if (c2 !== ">") {
                strictFail(parser2, "Malformed comment");
                parser2.comment += "--" + c2;
                parser2.state = S2.COMMENT;
              } else {
                parser2.state = S2.TEXT;
              }
              continue;
            case S2.CDATA:
              if (c2 === "]") {
                parser2.state = S2.CDATA_ENDING;
              } else {
                parser2.cdata += c2;
              }
              continue;
            case S2.CDATA_ENDING:
              if (c2 === "]") {
                parser2.state = S2.CDATA_ENDING_2;
              } else {
                parser2.cdata += "]" + c2;
                parser2.state = S2.CDATA;
              }
              continue;
            case S2.CDATA_ENDING_2:
              if (c2 === ">") {
                if (parser2.cdata) {
                  emitNode(parser2, "oncdata", parser2.cdata);
                }
                emitNode(parser2, "onclosecdata");
                parser2.cdata = "";
                parser2.state = S2.TEXT;
              } else if (c2 === "]") {
                parser2.cdata += "]";
              } else {
                parser2.cdata += "]]" + c2;
                parser2.state = S2.CDATA;
              }
              continue;
            case S2.PROC_INST:
              if (c2 === "?") {
                parser2.state = S2.PROC_INST_ENDING;
              } else if (isWhitespace(c2)) {
                parser2.state = S2.PROC_INST_BODY;
              } else {
                parser2.procInstName += c2;
              }
              continue;
            case S2.PROC_INST_BODY:
              if (!parser2.procInstBody && isWhitespace(c2)) {
                continue;
              } else if (c2 === "?") {
                parser2.state = S2.PROC_INST_ENDING;
              } else {
                parser2.procInstBody += c2;
              }
              continue;
            case S2.PROC_INST_ENDING:
              if (c2 === ">") {
                emitNode(parser2, "onprocessinginstruction", {
                  name: parser2.procInstName,
                  body: parser2.procInstBody
                });
                parser2.procInstName = parser2.procInstBody = "";
                parser2.state = S2.TEXT;
              } else {
                parser2.procInstBody += "?" + c2;
                parser2.state = S2.PROC_INST_BODY;
              }
              continue;
            case S2.OPEN_TAG:
              if (isMatch(nameBody, c2)) {
                parser2.tagName += c2;
              } else {
                newTag(parser2);
                if (c2 === ">") {
                  openTag(parser2);
                } else if (c2 === "/") {
                  parser2.state = S2.OPEN_TAG_SLASH;
                } else {
                  if (!isWhitespace(c2)) {
                    strictFail(parser2, "Invalid character in tag name");
                  }
                  parser2.state = S2.ATTRIB;
                }
              }
              continue;
            case S2.OPEN_TAG_SLASH:
              if (c2 === ">") {
                openTag(parser2, true);
                closeTag(parser2);
              } else {
                strictFail(parser2, "Forward-slash in opening tag not followed by >");
                parser2.state = S2.ATTRIB;
              }
              continue;
            case S2.ATTRIB:
              if (isWhitespace(c2)) {
                continue;
              } else if (c2 === ">") {
                openTag(parser2);
              } else if (c2 === "/") {
                parser2.state = S2.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c2)) {
                parser2.attribName = c2;
                parser2.attribValue = "";
                parser2.state = S2.ATTRIB_NAME;
              } else {
                strictFail(parser2, "Invalid attribute name");
              }
              continue;
            case S2.ATTRIB_NAME:
              if (c2 === "=") {
                parser2.state = S2.ATTRIB_VALUE;
              } else if (c2 === ">") {
                strictFail(parser2, "Attribute without value");
                parser2.attribValue = parser2.attribName;
                attrib(parser2);
                openTag(parser2);
              } else if (isWhitespace(c2)) {
                parser2.state = S2.ATTRIB_NAME_SAW_WHITE;
              } else if (isMatch(nameBody, c2)) {
                parser2.attribName += c2;
              } else {
                strictFail(parser2, "Invalid attribute name");
              }
              continue;
            case S2.ATTRIB_NAME_SAW_WHITE:
              if (c2 === "=") {
                parser2.state = S2.ATTRIB_VALUE;
              } else if (isWhitespace(c2)) {
                continue;
              } else {
                strictFail(parser2, "Attribute without value");
                parser2.tag.attributes[parser2.attribName] = "";
                parser2.attribValue = "";
                emitNode(parser2, "onattribute", {
                  name: parser2.attribName,
                  value: ""
                });
                parser2.attribName = "";
                if (c2 === ">") {
                  openTag(parser2);
                } else if (isMatch(nameStart, c2)) {
                  parser2.attribName = c2;
                  parser2.state = S2.ATTRIB_NAME;
                } else {
                  strictFail(parser2, "Invalid attribute name");
                  parser2.state = S2.ATTRIB;
                }
              }
              continue;
            case S2.ATTRIB_VALUE:
              if (isWhitespace(c2)) {
                continue;
              } else if (isQuote(c2)) {
                parser2.q = c2;
                parser2.state = S2.ATTRIB_VALUE_QUOTED;
              } else {
                strictFail(parser2, "Unquoted attribute value");
                parser2.state = S2.ATTRIB_VALUE_UNQUOTED;
                parser2.attribValue = c2;
              }
              continue;
            case S2.ATTRIB_VALUE_QUOTED:
              if (c2 !== parser2.q) {
                if (c2 === "&") {
                  parser2.state = S2.ATTRIB_VALUE_ENTITY_Q;
                } else {
                  parser2.attribValue += c2;
                }
                continue;
              }
              attrib(parser2);
              parser2.q = "";
              parser2.state = S2.ATTRIB_VALUE_CLOSED;
              continue;
            case S2.ATTRIB_VALUE_CLOSED:
              if (isWhitespace(c2)) {
                parser2.state = S2.ATTRIB;
              } else if (c2 === ">") {
                openTag(parser2);
              } else if (c2 === "/") {
                parser2.state = S2.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c2)) {
                strictFail(parser2, "No whitespace between attributes");
                parser2.attribName = c2;
                parser2.attribValue = "";
                parser2.state = S2.ATTRIB_NAME;
              } else {
                strictFail(parser2, "Invalid attribute name");
              }
              continue;
            case S2.ATTRIB_VALUE_UNQUOTED:
              if (!isAttribEnd(c2)) {
                if (c2 === "&") {
                  parser2.state = S2.ATTRIB_VALUE_ENTITY_U;
                } else {
                  parser2.attribValue += c2;
                }
                continue;
              }
              attrib(parser2);
              if (c2 === ">") {
                openTag(parser2);
              } else {
                parser2.state = S2.ATTRIB;
              }
              continue;
            case S2.CLOSE_TAG:
              if (!parser2.tagName) {
                if (isWhitespace(c2)) {
                  continue;
                } else if (notMatch(nameStart, c2)) {
                  if (parser2.script) {
                    parser2.script += "</" + c2;
                    parser2.state = S2.SCRIPT;
                  } else {
                    strictFail(parser2, "Invalid tagname in closing tag.");
                  }
                } else {
                  parser2.tagName = c2;
                }
              } else if (c2 === ">") {
                closeTag(parser2);
              } else if (isMatch(nameBody, c2)) {
                parser2.tagName += c2;
              } else if (parser2.script) {
                parser2.script += "</" + parser2.tagName;
                parser2.tagName = "";
                parser2.state = S2.SCRIPT;
              } else {
                if (!isWhitespace(c2)) {
                  strictFail(parser2, "Invalid tagname in closing tag");
                }
                parser2.state = S2.CLOSE_TAG_SAW_WHITE;
              }
              continue;
            case S2.CLOSE_TAG_SAW_WHITE:
              if (isWhitespace(c2)) {
                continue;
              }
              if (c2 === ">") {
                closeTag(parser2);
              } else {
                strictFail(parser2, "Invalid characters in closing tag");
              }
              continue;
            case S2.TEXT_ENTITY:
            case S2.ATTRIB_VALUE_ENTITY_Q:
            case S2.ATTRIB_VALUE_ENTITY_U:
              var returnState;
              var buffer;
              switch (parser2.state) {
                case S2.TEXT_ENTITY:
                  returnState = S2.TEXT;
                  buffer = "textNode";
                  break;
                case S2.ATTRIB_VALUE_ENTITY_Q:
                  returnState = S2.ATTRIB_VALUE_QUOTED;
                  buffer = "attribValue";
                  break;
                case S2.ATTRIB_VALUE_ENTITY_U:
                  returnState = S2.ATTRIB_VALUE_UNQUOTED;
                  buffer = "attribValue";
                  break;
              }
              if (c2 === ";") {
                parser2[buffer] += parseEntity(parser2);
                parser2.entity = "";
                parser2.state = returnState;
              } else if (isMatch(parser2.entity.length ? entityBody : entityStart, c2)) {
                parser2.entity += c2;
              } else {
                strictFail(parser2, "Invalid character in entity name");
                parser2[buffer] += "&" + parser2.entity + c2;
                parser2.entity = "";
                parser2.state = returnState;
              }
              continue;
            default:
              throw new Error(parser2, "Unknown state: " + parser2.state);
          }
        }
        if (parser2.position >= parser2.bufferCheckPosition) {
          checkBufferLength(parser2);
        }
        return parser2;
      }
      if (!String.fromCodePoint) {
        (function() {
          var stringFromCharCode = String.fromCharCode;
          var floor = Math.floor;
          var fromCodePoint = function() {
            var MAX_SIZE = 16384;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) {
              return "";
            }
            var result = "";
            while (++index < length) {
              var codePoint = Number(arguments[index]);
              if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
              codePoint < 0 || // not a valid Unicode code point
              codePoint > 1114111 || // not a valid Unicode code point
              floor(codePoint) !== codePoint) {
                throw RangeError("Invalid code point: " + codePoint);
              }
              if (codePoint <= 65535) {
                codeUnits.push(codePoint);
              } else {
                codePoint -= 65536;
                highSurrogate = (codePoint >> 10) + 55296;
                lowSurrogate = codePoint % 1024 + 56320;
                codeUnits.push(highSurrogate, lowSurrogate);
              }
              if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                result += stringFromCharCode.apply(null, codeUnits);
                codeUnits.length = 0;
              }
            }
            return result;
          };
          if (Object.defineProperty) {
            Object.defineProperty(String, "fromCodePoint", {
              value: fromCodePoint,
              configurable: true,
              writable: true
            });
          } else {
            String.fromCodePoint = fromCodePoint;
          }
        })();
      }
    })(typeof exports === "undefined" ? exports.sax = {} : exports);
  }
});

// ../core/node_modules/xml2js/lib/bom.js
var require_bom = __commonJS({
  "../core/node_modules/xml2js/lib/bom.js"(exports) {
    (function() {
      "use strict";
      exports.stripBOM = function(str) {
        if (str[0] === "\uFEFF") {
          return str.substring(1);
        } else {
          return str;
        }
      };
    }).call(exports);
  }
});

// ../core/node_modules/xml2js/lib/processors.js
var require_processors = __commonJS({
  "../core/node_modules/xml2js/lib/processors.js"(exports) {
    (function() {
      "use strict";
      var prefixMatch;
      prefixMatch = new RegExp(/(?!xmlns)^.*:/);
      exports.normalize = function(str) {
        return str.toLowerCase();
      };
      exports.firstCharLowerCase = function(str) {
        return str.charAt(0).toLowerCase() + str.slice(1);
      };
      exports.stripPrefix = function(str) {
        return str.replace(prefixMatch, "");
      };
      exports.parseNumbers = function(str) {
        if (!isNaN(str)) {
          str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
        }
        return str;
      };
      exports.parseBooleans = function(str) {
        if (/^(?:true|false)$/i.test(str)) {
          str = str.toLowerCase() === "true";
        }
        return str;
      };
    }).call(exports);
  }
});

// ../core/node_modules/xml2js/lib/parser.js
var require_parser = __commonJS({
  "../core/node_modules/xml2js/lib/parser.js"(exports) {
    (function() {
      "use strict";
      var bom, defaults, events, isEmpty, processItem, processors, sax, setImmediate2, bind = function(fn, me) {
        return function() {
          return fn.apply(me, arguments);
        };
      }, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      sax = require_sax();
      events = require("events");
      bom = require_bom();
      processors = require_processors();
      setImmediate2 = require("timers").setImmediate;
      defaults = require_defaults().defaults;
      isEmpty = function(thing) {
        return typeof thing === "object" && thing != null && Object.keys(thing).length === 0;
      };
      processItem = function(processors2, item, key) {
        var i, len, process3;
        for (i = 0, len = processors2.length; i < len; i++) {
          process3 = processors2[i];
          item = process3(item, key);
        }
        return item;
      };
      exports.Parser = function(superClass) {
        extend(Parser, superClass);
        function Parser(opts) {
          this.parseStringPromise = bind(this.parseStringPromise, this);
          this.parseString = bind(this.parseString, this);
          this.reset = bind(this.reset, this);
          this.assignOrPush = bind(this.assignOrPush, this);
          this.processAsync = bind(this.processAsync, this);
          var key, ref, value;
          if (!(this instanceof exports.Parser)) {
            return new exports.Parser(opts);
          }
          this.options = {};
          ref = defaults["0.2"];
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this.options[key] = value;
          }
          for (key in opts) {
            if (!hasProp.call(opts, key))
              continue;
            value = opts[key];
            this.options[key] = value;
          }
          if (this.options.xmlns) {
            this.options.xmlnskey = this.options.attrkey + "ns";
          }
          if (this.options.normalizeTags) {
            if (!this.options.tagNameProcessors) {
              this.options.tagNameProcessors = [];
            }
            this.options.tagNameProcessors.unshift(processors.normalize);
          }
          this.reset();
        }
        Parser.prototype.processAsync = function() {
          var chunk, err;
          try {
            if (this.remaining.length <= this.options.chunkSize) {
              chunk = this.remaining;
              this.remaining = "";
              this.saxParser = this.saxParser.write(chunk);
              return this.saxParser.close();
            } else {
              chunk = this.remaining.substr(0, this.options.chunkSize);
              this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
              this.saxParser = this.saxParser.write(chunk);
              return setImmediate2(this.processAsync);
            }
          } catch (error1) {
            err = error1;
            if (!this.saxParser.errThrown) {
              this.saxParser.errThrown = true;
              return this.emit(err);
            }
          }
        };
        Parser.prototype.assignOrPush = function(obj, key, newValue) {
          if (!(key in obj)) {
            if (!this.options.explicitArray) {
              return obj[key] = newValue;
            } else {
              return obj[key] = [newValue];
            }
          } else {
            if (!(obj[key] instanceof Array)) {
              obj[key] = [obj[key]];
            }
            return obj[key].push(newValue);
          }
        };
        Parser.prototype.reset = function() {
          var attrkey, charkey, ontext, stack;
          this.removeAllListeners();
          this.saxParser = sax.parser(this.options.strict, {
            trim: false,
            normalize: false,
            xmlns: this.options.xmlns
          });
          this.saxParser.errThrown = false;
          this.saxParser.onerror = function(_this) {
            return function(error) {
              _this.saxParser.resume();
              if (!_this.saxParser.errThrown) {
                _this.saxParser.errThrown = true;
                return _this.emit("error", error);
              }
            };
          }(this);
          this.saxParser.onend = function(_this) {
            return function() {
              if (!_this.saxParser.ended) {
                _this.saxParser.ended = true;
                return _this.emit("end", _this.resultObject);
              }
            };
          }(this);
          this.saxParser.ended = false;
          this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
          this.resultObject = null;
          stack = [];
          attrkey = this.options.attrkey;
          charkey = this.options.charkey;
          this.saxParser.onopentag = function(_this) {
            return function(node) {
              var key, newValue, obj, processedKey, ref;
              obj = {};
              obj[charkey] = "";
              if (!_this.options.ignoreAttrs) {
                ref = node.attributes;
                for (key in ref) {
                  if (!hasProp.call(ref, key))
                    continue;
                  if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                    obj[attrkey] = {};
                  }
                  newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
                  processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
                  if (_this.options.mergeAttrs) {
                    _this.assignOrPush(obj, processedKey, newValue);
                  } else {
                    obj[attrkey][processedKey] = newValue;
                  }
                }
              }
              obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
              if (_this.options.xmlns) {
                obj[_this.options.xmlnskey] = {
                  uri: node.uri,
                  local: node.local
                };
              }
              return stack.push(obj);
            };
          }(this);
          this.saxParser.onclosetag = function(_this) {
            return function() {
              var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;
              obj = stack.pop();
              nodeName = obj["#name"];
              if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
                delete obj["#name"];
              }
              if (obj.cdata === true) {
                cdata = obj.cdata;
                delete obj.cdata;
              }
              s = stack[stack.length - 1];
              if (obj[charkey].match(/^\s*$/) && !cdata) {
                emptyStr = obj[charkey];
                delete obj[charkey];
              } else {
                if (_this.options.trim) {
                  obj[charkey] = obj[charkey].trim();
                }
                if (_this.options.normalize) {
                  obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
                }
                obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
                if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                  obj = obj[charkey];
                }
              }
              if (isEmpty(obj)) {
                obj = _this.options.emptyTag !== "" ? _this.options.emptyTag : emptyStr;
              }
              if (_this.options.validator != null) {
                xpath = "/" + function() {
                  var i, len, results;
                  results = [];
                  for (i = 0, len = stack.length; i < len; i++) {
                    node = stack[i];
                    results.push(node["#name"]);
                  }
                  return results;
                }().concat(nodeName).join("/");
                (function() {
                  var err;
                  try {
                    return obj = _this.options.validator(xpath, s && s[nodeName], obj);
                  } catch (error1) {
                    err = error1;
                    return _this.emit("error", err);
                  }
                })();
              }
              if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === "object") {
                if (!_this.options.preserveChildrenOrder) {
                  node = {};
                  if (_this.options.attrkey in obj) {
                    node[_this.options.attrkey] = obj[_this.options.attrkey];
                    delete obj[_this.options.attrkey];
                  }
                  if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                    node[_this.options.charkey] = obj[_this.options.charkey];
                    delete obj[_this.options.charkey];
                  }
                  if (Object.getOwnPropertyNames(obj).length > 0) {
                    node[_this.options.childkey] = obj;
                  }
                  obj = node;
                } else if (s) {
                  s[_this.options.childkey] = s[_this.options.childkey] || [];
                  objClone = {};
                  for (key in obj) {
                    if (!hasProp.call(obj, key))
                      continue;
                    objClone[key] = obj[key];
                  }
                  s[_this.options.childkey].push(objClone);
                  delete obj["#name"];
                  if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                    obj = obj[charkey];
                  }
                }
              }
              if (stack.length > 0) {
                return _this.assignOrPush(s, nodeName, obj);
              } else {
                if (_this.options.explicitRoot) {
                  old = obj;
                  obj = {};
                  obj[nodeName] = old;
                }
                _this.resultObject = obj;
                _this.saxParser.ended = true;
                return _this.emit("end", _this.resultObject);
              }
            };
          }(this);
          ontext = function(_this) {
            return function(text) {
              var charChild, s;
              s = stack[stack.length - 1];
              if (s) {
                s[charkey] += text;
                if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, "").trim() !== "")) {
                  s[_this.options.childkey] = s[_this.options.childkey] || [];
                  charChild = {
                    "#name": "__text__"
                  };
                  charChild[charkey] = text;
                  if (_this.options.normalize) {
                    charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
                  }
                  s[_this.options.childkey].push(charChild);
                }
                return s;
              }
            };
          }(this);
          this.saxParser.ontext = ontext;
          return this.saxParser.oncdata = function(_this) {
            return function(text) {
              var s;
              s = ontext(text);
              if (s) {
                return s.cdata = true;
              }
            };
          }(this);
        };
        Parser.prototype.parseString = function(str, cb) {
          var err;
          if (cb != null && typeof cb === "function") {
            this.on("end", function(result) {
              this.reset();
              return cb(null, result);
            });
            this.on("error", function(err2) {
              this.reset();
              return cb(err2);
            });
          }
          try {
            str = str.toString();
            if (str.trim() === "") {
              this.emit("end", null);
              return true;
            }
            str = bom.stripBOM(str);
            if (this.options.async) {
              this.remaining = str;
              setImmediate2(this.processAsync);
              return this.saxParser;
            }
            return this.saxParser.write(str).close();
          } catch (error1) {
            err = error1;
            if (!(this.saxParser.errThrown || this.saxParser.ended)) {
              this.emit("error", err);
              return this.saxParser.errThrown = true;
            } else if (this.saxParser.ended) {
              throw err;
            }
          }
        };
        Parser.prototype.parseStringPromise = function(str) {
          return new Promise(function(_this) {
            return function(resolve4, reject) {
              return _this.parseString(str, function(err, value) {
                if (err) {
                  return reject(err);
                } else {
                  return resolve4(value);
                }
              });
            };
          }(this));
        };
        return Parser;
      }(events);
      exports.parseString = function(str, a, b) {
        var cb, options, parser2;
        if (b != null) {
          if (typeof b === "function") {
            cb = b;
          }
          if (typeof a === "object") {
            options = a;
          }
        } else {
          if (typeof a === "function") {
            cb = a;
          }
          options = {};
        }
        parser2 = new exports.Parser(options);
        return parser2.parseString(str, cb);
      };
      exports.parseStringPromise = function(str, a) {
        var options, parser2;
        if (typeof a === "object") {
          options = a;
        }
        parser2 = new exports.Parser(options);
        return parser2.parseStringPromise(str);
      };
    }).call(exports);
  }
});

// ../core/node_modules/xml2js/lib/xml2js.js
var require_xml2js = __commonJS({
  "../core/node_modules/xml2js/lib/xml2js.js"(exports) {
    (function() {
      "use strict";
      var builder, defaults, parser2, processors, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      defaults = require_defaults();
      builder = require_builder();
      parser2 = require_parser();
      processors = require_processors();
      exports.defaults = defaults.defaults;
      exports.processors = processors;
      exports.ValidationError = function(superClass) {
        extend(ValidationError, superClass);
        function ValidationError(message) {
          this.message = message;
        }
        return ValidationError;
      }(Error);
      exports.Builder = builder.Builder;
      exports.Parser = parser2.Parser;
      exports.parseString = parser2.parseString;
      exports.parseStringPromise = parser2.parseStringPromise;
    }).call(exports);
  }
});

// node_modules/logform/format.js
var require_format = __commonJS({
  "node_modules/logform/format.js"(exports, module2) {
    "use strict";
    var InvalidFormatError = class extends Error {
      constructor(formatFn) {
        super(`Format functions must be synchronous taking a two arguments: (info, opts)
Found: ${formatFn.toString().split("\n")[0]}
`);
        Error.captureStackTrace(this, InvalidFormatError);
      }
    };
    module2.exports = (formatFn) => {
      if (formatFn.length > 2) {
        throw new InvalidFormatError(formatFn);
      }
      function Format(options = {}) {
        this.options = options;
      }
      Format.prototype.transform = formatFn;
      function createFormatWrap(opts) {
        return new Format(opts);
      }
      createFormatWrap.Format = Format;
      return createFormatWrap;
    };
  }
});

// node_modules/@colors/colors/lib/styles.js
var require_styles = __commonJS({
  "node_modules/@colors/colors/lib/styles.js"(exports, module2) {
    var styles = {};
    module2["exports"] = styles;
    var codes = {
      reset: [0, 0],
      bold: [1, 22],
      dim: [2, 22],
      italic: [3, 23],
      underline: [4, 24],
      inverse: [7, 27],
      hidden: [8, 28],
      strikethrough: [9, 29],
      black: [30, 39],
      red: [31, 39],
      green: [32, 39],
      yellow: [33, 39],
      blue: [34, 39],
      magenta: [35, 39],
      cyan: [36, 39],
      white: [37, 39],
      gray: [90, 39],
      grey: [90, 39],
      brightRed: [91, 39],
      brightGreen: [92, 39],
      brightYellow: [93, 39],
      brightBlue: [94, 39],
      brightMagenta: [95, 39],
      brightCyan: [96, 39],
      brightWhite: [97, 39],
      bgBlack: [40, 49],
      bgRed: [41, 49],
      bgGreen: [42, 49],
      bgYellow: [43, 49],
      bgBlue: [44, 49],
      bgMagenta: [45, 49],
      bgCyan: [46, 49],
      bgWhite: [47, 49],
      bgGray: [100, 49],
      bgGrey: [100, 49],
      bgBrightRed: [101, 49],
      bgBrightGreen: [102, 49],
      bgBrightYellow: [103, 49],
      bgBrightBlue: [104, 49],
      bgBrightMagenta: [105, 49],
      bgBrightCyan: [106, 49],
      bgBrightWhite: [107, 49],
      // legacy styles for colors pre v1.0.0
      blackBG: [40, 49],
      redBG: [41, 49],
      greenBG: [42, 49],
      yellowBG: [43, 49],
      blueBG: [44, 49],
      magentaBG: [45, 49],
      cyanBG: [46, 49],
      whiteBG: [47, 49]
    };
    Object.keys(codes).forEach(function(key) {
      var val = codes[key];
      var style = styles[key] = [];
      style.open = "\x1B[" + val[0] + "m";
      style.close = "\x1B[" + val[1] + "m";
    });
  }
});

// node_modules/@colors/colors/lib/system/has-flag.js
var require_has_flag = __commonJS({
  "node_modules/@colors/colors/lib/system/has-flag.js"(exports, module2) {
    "use strict";
    module2.exports = function(flag, argv) {
      argv = argv || process.argv;
      var terminatorPos = argv.indexOf("--");
      var prefix = /^-{1,2}/.test(flag) ? "" : "--";
      var pos = argv.indexOf(prefix + flag);
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };
  }
});

// node_modules/@colors/colors/lib/system/supports-colors.js
var require_supports_colors = __commonJS({
  "node_modules/@colors/colors/lib/system/supports-colors.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var hasFlag = require_has_flag();
    var env = process.env;
    var forceColor = void 0;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
      forceColor = false;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = true;
    }
    if ("FORCE_COLOR" in env) {
      forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(stream) {
      if (forceColor === false) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
      }
      var min = forceColor ? 1 : 0;
      if (process.platform === "win32") {
        var osRelease = os.release().split(".");
        if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function(sign) {
          return sign in env;
        }) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if ("TERM_PROGRAM" in env) {
        var version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Hyper":
            return 3;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      if (env.TERM === "dumb") {
        return min;
      }
      return min;
    }
    function getSupportLevel(stream) {
      var level = supportsColor(stream);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };
  }
});

// node_modules/@colors/colors/lib/custom/trap.js
var require_trap = __commonJS({
  "node_modules/@colors/colors/lib/custom/trap.js"(exports, module2) {
    module2["exports"] = function runTheTrap(text, options) {
      var result = "";
      text = text || "Run the trap, drop the bass";
      text = text.split("");
      var trap = {
        a: ["@", "\u0104", "\u023A", "\u0245", "\u0394", "\u039B", "\u0414"],
        b: ["\xDF", "\u0181", "\u0243", "\u026E", "\u03B2", "\u0E3F"],
        c: ["\xA9", "\u023B", "\u03FE"],
        d: ["\xD0", "\u018A", "\u0500", "\u0501", "\u0502", "\u0503"],
        e: [
          "\xCB",
          "\u0115",
          "\u018E",
          "\u0258",
          "\u03A3",
          "\u03BE",
          "\u04BC",
          "\u0A6C"
        ],
        f: ["\u04FA"],
        g: ["\u0262"],
        h: ["\u0126", "\u0195", "\u04A2", "\u04BA", "\u04C7", "\u050A"],
        i: ["\u0F0F"],
        j: ["\u0134"],
        k: ["\u0138", "\u04A0", "\u04C3", "\u051E"],
        l: ["\u0139"],
        m: ["\u028D", "\u04CD", "\u04CE", "\u0520", "\u0521", "\u0D69"],
        n: ["\xD1", "\u014B", "\u019D", "\u0376", "\u03A0", "\u048A"],
        o: [
          "\xD8",
          "\xF5",
          "\xF8",
          "\u01FE",
          "\u0298",
          "\u047A",
          "\u05DD",
          "\u06DD",
          "\u0E4F"
        ],
        p: ["\u01F7", "\u048E"],
        q: ["\u09CD"],
        r: ["\xAE", "\u01A6", "\u0210", "\u024C", "\u0280", "\u042F"],
        s: ["\xA7", "\u03DE", "\u03DF", "\u03E8"],
        t: ["\u0141", "\u0166", "\u0373"],
        u: ["\u01B1", "\u054D"],
        v: ["\u05D8"],
        w: ["\u0428", "\u0460", "\u047C", "\u0D70"],
        x: ["\u04B2", "\u04FE", "\u04FC", "\u04FD"],
        y: ["\xA5", "\u04B0", "\u04CB"],
        z: ["\u01B5", "\u0240"]
      };
      text.forEach(function(c2) {
        c2 = c2.toLowerCase();
        var chars = trap[c2] || [" "];
        var rand = Math.floor(Math.random() * chars.length);
        if (typeof trap[c2] !== "undefined") {
          result += trap[c2][rand];
        } else {
          result += c2;
        }
      });
      return result;
    };
  }
});

// node_modules/@colors/colors/lib/custom/zalgo.js
var require_zalgo = __commonJS({
  "node_modules/@colors/colors/lib/custom/zalgo.js"(exports, module2) {
    module2["exports"] = function zalgo(text, options) {
      text = text || "   he is here   ";
      var soul = {
        "up": [
          "\u030D",
          "\u030E",
          "\u0304",
          "\u0305",
          "\u033F",
          "\u0311",
          "\u0306",
          "\u0310",
          "\u0352",
          "\u0357",
          "\u0351",
          "\u0307",
          "\u0308",
          "\u030A",
          "\u0342",
          "\u0313",
          "\u0308",
          "\u034A",
          "\u034B",
          "\u034C",
          "\u0303",
          "\u0302",
          "\u030C",
          "\u0350",
          "\u0300",
          "\u0301",
          "\u030B",
          "\u030F",
          "\u0312",
          "\u0313",
          "\u0314",
          "\u033D",
          "\u0309",
          "\u0363",
          "\u0364",
          "\u0365",
          "\u0366",
          "\u0367",
          "\u0368",
          "\u0369",
          "\u036A",
          "\u036B",
          "\u036C",
          "\u036D",
          "\u036E",
          "\u036F",
          "\u033E",
          "\u035B",
          "\u0346",
          "\u031A"
        ],
        "down": [
          "\u0316",
          "\u0317",
          "\u0318",
          "\u0319",
          "\u031C",
          "\u031D",
          "\u031E",
          "\u031F",
          "\u0320",
          "\u0324",
          "\u0325",
          "\u0326",
          "\u0329",
          "\u032A",
          "\u032B",
          "\u032C",
          "\u032D",
          "\u032E",
          "\u032F",
          "\u0330",
          "\u0331",
          "\u0332",
          "\u0333",
          "\u0339",
          "\u033A",
          "\u033B",
          "\u033C",
          "\u0345",
          "\u0347",
          "\u0348",
          "\u0349",
          "\u034D",
          "\u034E",
          "\u0353",
          "\u0354",
          "\u0355",
          "\u0356",
          "\u0359",
          "\u035A",
          "\u0323"
        ],
        "mid": [
          "\u0315",
          "\u031B",
          "\u0300",
          "\u0301",
          "\u0358",
          "\u0321",
          "\u0322",
          "\u0327",
          "\u0328",
          "\u0334",
          "\u0335",
          "\u0336",
          "\u035C",
          "\u035D",
          "\u035E",
          "\u035F",
          "\u0360",
          "\u0362",
          "\u0338",
          "\u0337",
          "\u0361",
          " \u0489"
        ]
      };
      var all = [].concat(soul.up, soul.down, soul.mid);
      function randomNumber(range) {
        var r = Math.floor(Math.random() * range);
        return r;
      }
      function isChar(character) {
        var bool = false;
        all.filter(function(i) {
          bool = i === character;
        });
        return bool;
      }
      function heComes(text2, options2) {
        var result = "";
        var counts;
        var l;
        options2 = options2 || {};
        options2["up"] = typeof options2["up"] !== "undefined" ? options2["up"] : true;
        options2["mid"] = typeof options2["mid"] !== "undefined" ? options2["mid"] : true;
        options2["down"] = typeof options2["down"] !== "undefined" ? options2["down"] : true;
        options2["size"] = typeof options2["size"] !== "undefined" ? options2["size"] : "maxi";
        text2 = text2.split("");
        for (l in text2) {
          if (isChar(l)) {
            continue;
          }
          result = result + text2[l];
          counts = { "up": 0, "down": 0, "mid": 0 };
          switch (options2.size) {
            case "mini":
              counts.up = randomNumber(8);
              counts.mid = randomNumber(2);
              counts.down = randomNumber(8);
              break;
            case "maxi":
              counts.up = randomNumber(16) + 3;
              counts.mid = randomNumber(4) + 1;
              counts.down = randomNumber(64) + 3;
              break;
            default:
              counts.up = randomNumber(8) + 1;
              counts.mid = randomNumber(6) / 2;
              counts.down = randomNumber(8) + 1;
              break;
          }
          var arr = ["up", "mid", "down"];
          for (var d in arr) {
            var index = arr[d];
            for (var i = 0; i <= counts[index]; i++) {
              if (options2[index]) {
                result = result + soul[index][randomNumber(soul[index].length)];
              }
            }
          }
        }
        return result;
      }
      return heComes(text, options);
    };
  }
});

// node_modules/@colors/colors/lib/maps/america.js
var require_america = __commonJS({
  "node_modules/@colors/colors/lib/maps/america.js"(exports, module2) {
    module2["exports"] = function(colors) {
      return function(letter, i, exploded) {
        if (letter === " ")
          return letter;
        switch (i % 3) {
          case 0:
            return colors.red(letter);
          case 1:
            return colors.white(letter);
          case 2:
            return colors.blue(letter);
        }
      };
    };
  }
});

// node_modules/@colors/colors/lib/maps/zebra.js
var require_zebra = __commonJS({
  "node_modules/@colors/colors/lib/maps/zebra.js"(exports, module2) {
    module2["exports"] = function(colors) {
      return function(letter, i, exploded) {
        return i % 2 === 0 ? letter : colors.inverse(letter);
      };
    };
  }
});

// node_modules/@colors/colors/lib/maps/rainbow.js
var require_rainbow = __commonJS({
  "node_modules/@colors/colors/lib/maps/rainbow.js"(exports, module2) {
    module2["exports"] = function(colors) {
      var rainbowColors = ["red", "yellow", "green", "blue", "magenta"];
      return function(letter, i, exploded) {
        if (letter === " ") {
          return letter;
        } else {
          return colors[rainbowColors[i++ % rainbowColors.length]](letter);
        }
      };
    };
  }
});

// node_modules/@colors/colors/lib/maps/random.js
var require_random = __commonJS({
  "node_modules/@colors/colors/lib/maps/random.js"(exports, module2) {
    module2["exports"] = function(colors) {
      var available = [
        "underline",
        "inverse",
        "grey",
        "yellow",
        "red",
        "green",
        "blue",
        "white",
        "cyan",
        "magenta",
        "brightYellow",
        "brightRed",
        "brightGreen",
        "brightBlue",
        "brightWhite",
        "brightCyan",
        "brightMagenta"
      ];
      return function(letter, i, exploded) {
        return letter === " " ? letter : colors[available[Math.round(Math.random() * (available.length - 2))]](letter);
      };
    };
  }
});

// node_modules/@colors/colors/lib/colors.js
var require_colors = __commonJS({
  "node_modules/@colors/colors/lib/colors.js"(exports, module2) {
    var colors = {};
    module2["exports"] = colors;
    colors.themes = {};
    var util2 = require("util");
    var ansiStyles = colors.styles = require_styles();
    var defineProps = Object.defineProperties;
    var newLineRegex = new RegExp(/[\r\n]+/g);
    colors.supportsColor = require_supports_colors().supportsColor;
    if (typeof colors.enabled === "undefined") {
      colors.enabled = colors.supportsColor() !== false;
    }
    colors.enable = function() {
      colors.enabled = true;
    };
    colors.disable = function() {
      colors.enabled = false;
    };
    colors.stripColors = colors.strip = function(str) {
      return ("" + str).replace(/\x1B\[\d+m/g, "");
    };
    var stylize = colors.stylize = function stylize2(str, style) {
      if (!colors.enabled) {
        return str + "";
      }
      var styleMap = ansiStyles[style];
      if (!styleMap && style in colors) {
        return colors[style](str);
      }
      return styleMap.open + str + styleMap.close;
    };
    var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
    var escapeStringRegexp = function(str) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }
      return str.replace(matchOperatorsRe, "\\$&");
    };
    function build(_styles) {
      var builder = function builder2() {
        return applyStyle.apply(builder2, arguments);
      };
      builder._styles = _styles;
      builder.__proto__ = proto;
      return builder;
    }
    var styles = function() {
      var ret = {};
      ansiStyles.grey = ansiStyles.gray;
      Object.keys(ansiStyles).forEach(function(key) {
        ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
        ret[key] = {
          get: function() {
            return build(this._styles.concat(key));
          }
        };
      });
      return ret;
    }();
    var proto = defineProps(function colors2() {
    }, styles);
    function applyStyle() {
      var args = Array.prototype.slice.call(arguments);
      var str = args.map(function(arg) {
        if (arg != null && arg.constructor === String) {
          return arg;
        } else {
          return util2.inspect(arg);
        }
      }).join(" ");
      if (!colors.enabled || !str) {
        return str;
      }
      var newLinesPresent = str.indexOf("\n") != -1;
      var nestedStyles = this._styles;
      var i = nestedStyles.length;
      while (i--) {
        var code = ansiStyles[nestedStyles[i]];
        str = code.open + str.replace(code.closeRe, code.open) + code.close;
        if (newLinesPresent) {
          str = str.replace(newLineRegex, function(match) {
            return code.close + match + code.open;
          });
        }
      }
      return str;
    }
    colors.setTheme = function(theme) {
      if (typeof theme === "string") {
        console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));");
        return;
      }
      for (var style in theme) {
        (function(style2) {
          colors[style2] = function(str) {
            if (typeof theme[style2] === "object") {
              var out = str;
              for (var i in theme[style2]) {
                out = colors[theme[style2][i]](out);
              }
              return out;
            }
            return colors[theme[style2]](str);
          };
        })(style);
      }
    };
    function init() {
      var ret = {};
      Object.keys(styles).forEach(function(name) {
        ret[name] = {
          get: function() {
            return build([name]);
          }
        };
      });
      return ret;
    }
    var sequencer = function sequencer2(map2, str) {
      var exploded = str.split("");
      exploded = exploded.map(map2);
      return exploded.join("");
    };
    colors.trap = require_trap();
    colors.zalgo = require_zalgo();
    colors.maps = {};
    colors.maps.america = require_america()(colors);
    colors.maps.zebra = require_zebra()(colors);
    colors.maps.rainbow = require_rainbow()(colors);
    colors.maps.random = require_random()(colors);
    for (map in colors.maps) {
      (function(map2) {
        colors[map2] = function(str) {
          return sequencer(colors.maps[map2], str);
        };
      })(map);
    }
    var map;
    defineProps(colors, init());
  }
});

// node_modules/@colors/colors/safe.js
var require_safe = __commonJS({
  "node_modules/@colors/colors/safe.js"(exports, module2) {
    var colors = require_colors();
    module2["exports"] = colors;
  }
});

// node_modules/triple-beam/config/cli.js
var require_cli = __commonJS({
  "node_modules/triple-beam/config/cli.js"(exports) {
    "use strict";
    exports.levels = {
      error: 0,
      warn: 1,
      help: 2,
      data: 3,
      info: 4,
      debug: 5,
      prompt: 6,
      verbose: 7,
      input: 8,
      silly: 9
    };
    exports.colors = {
      error: "red",
      warn: "yellow",
      help: "cyan",
      data: "grey",
      info: "green",
      debug: "blue",
      prompt: "grey",
      verbose: "cyan",
      input: "grey",
      silly: "magenta"
    };
  }
});

// node_modules/triple-beam/config/npm.js
var require_npm = __commonJS({
  "node_modules/triple-beam/config/npm.js"(exports) {
    "use strict";
    exports.levels = {
      error: 0,
      warn: 1,
      info: 2,
      http: 3,
      verbose: 4,
      debug: 5,
      silly: 6
    };
    exports.colors = {
      error: "red",
      warn: "yellow",
      info: "green",
      http: "green",
      verbose: "cyan",
      debug: "blue",
      silly: "magenta"
    };
  }
});

// node_modules/triple-beam/config/syslog.js
var require_syslog = __commonJS({
  "node_modules/triple-beam/config/syslog.js"(exports) {
    "use strict";
    exports.levels = {
      emerg: 0,
      alert: 1,
      crit: 2,
      error: 3,
      warning: 4,
      notice: 5,
      info: 6,
      debug: 7
    };
    exports.colors = {
      emerg: "red",
      alert: "yellow",
      crit: "red",
      error: "red",
      warning: "red",
      notice: "yellow",
      info: "green",
      debug: "blue"
    };
  }
});

// node_modules/triple-beam/config/index.js
var require_config = __commonJS({
  "node_modules/triple-beam/config/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "cli", {
      value: require_cli()
    });
    Object.defineProperty(exports, "npm", {
      value: require_npm()
    });
    Object.defineProperty(exports, "syslog", {
      value: require_syslog()
    });
  }
});

// node_modules/triple-beam/index.js
var require_triple_beam = __commonJS({
  "node_modules/triple-beam/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "LEVEL", {
      value: Symbol.for("level")
    });
    Object.defineProperty(exports, "MESSAGE", {
      value: Symbol.for("message")
    });
    Object.defineProperty(exports, "SPLAT", {
      value: Symbol.for("splat")
    });
    Object.defineProperty(exports, "configs", {
      value: require_config()
    });
  }
});

// node_modules/logform/colorize.js
var require_colorize = __commonJS({
  "node_modules/logform/colorize.js"(exports, module2) {
    "use strict";
    var colors = require_safe();
    var { LEVEL, MESSAGE } = require_triple_beam();
    colors.enabled = true;
    var hasSpace = /\s+/;
    var Colorizer = class {
      constructor(opts = {}) {
        if (opts.colors) {
          this.addColors(opts.colors);
        }
        this.options = opts;
      }
      /*
       * Adds the colors Object to the set of allColors
       * known by the Colorizer
       *
       * @param {Object} colors Set of color mappings to add.
       */
      static addColors(clrs) {
        const nextColors = Object.keys(clrs).reduce((acc, level) => {
          acc[level] = hasSpace.test(clrs[level]) ? clrs[level].split(hasSpace) : clrs[level];
          return acc;
        }, {});
        Colorizer.allColors = Object.assign({}, Colorizer.allColors || {}, nextColors);
        return Colorizer.allColors;
      }
      /*
       * Adds the colors Object to the set of allColors
       * known by the Colorizer
       *
       * @param {Object} colors Set of color mappings to add.
       */
      addColors(clrs) {
        return Colorizer.addColors(clrs);
      }
      /*
       * function colorize (lookup, level, message)
       * Performs multi-step colorization using @colors/colors/safe
       */
      colorize(lookup, level, message) {
        if (typeof message === "undefined") {
          message = level;
        }
        if (!Array.isArray(Colorizer.allColors[lookup])) {
          return colors[Colorizer.allColors[lookup]](message);
        }
        for (let i = 0, len = Colorizer.allColors[lookup].length; i < len; i++) {
          message = colors[Colorizer.allColors[lookup][i]](message);
        }
        return message;
      }
      /*
       * function transform (info, opts)
       * Attempts to colorize the { level, message } of the given
       * `logform` info object.
       */
      transform(info, opts) {
        if (opts.all && typeof info[MESSAGE] === "string") {
          info[MESSAGE] = this.colorize(info[LEVEL], info.level, info[MESSAGE]);
        }
        if (opts.level || opts.all || !opts.message) {
          info.level = this.colorize(info[LEVEL], info.level);
        }
        if (opts.all || opts.message) {
          info.message = this.colorize(info[LEVEL], info.level, info.message);
        }
        return info;
      }
    };
    module2.exports = (opts) => new Colorizer(opts);
    module2.exports.Colorizer = module2.exports.Format = Colorizer;
  }
});

// node_modules/logform/levels.js
var require_levels = __commonJS({
  "node_modules/logform/levels.js"(exports, module2) {
    "use strict";
    var { Colorizer } = require_colorize();
    module2.exports = (config) => {
      Colorizer.addColors(config.colors || config);
      return config;
    };
  }
});

// node_modules/logform/align.js
var require_align = __commonJS({
  "node_modules/logform/align.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    module2.exports = format2((info) => {
      info.message = `	${info.message}`;
      return info;
    });
  }
});

// node_modules/logform/errors.js
var require_errors = __commonJS({
  "node_modules/logform/errors.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    var { LEVEL, MESSAGE } = require_triple_beam();
    module2.exports = format2((einfo, { stack, cause }) => {
      if (einfo instanceof Error) {
        const info = Object.assign({}, einfo, {
          level: einfo.level,
          [LEVEL]: einfo[LEVEL] || einfo.level,
          message: einfo.message,
          [MESSAGE]: einfo[MESSAGE] || einfo.message
        });
        if (stack)
          info.stack = einfo.stack;
        if (cause)
          info.cause = einfo.cause;
        return info;
      }
      if (!(einfo.message instanceof Error))
        return einfo;
      const err = einfo.message;
      Object.assign(einfo, err);
      einfo.message = err.message;
      einfo[MESSAGE] = err.message;
      if (stack)
        einfo.stack = err.stack;
      if (cause)
        einfo.cause = err.cause;
      return einfo;
    });
  }
});

// node_modules/logform/pad-levels.js
var require_pad_levels = __commonJS({
  "node_modules/logform/pad-levels.js"(exports, module2) {
    "use strict";
    var { configs, LEVEL, MESSAGE } = require_triple_beam();
    var Padder = class {
      constructor(opts = { levels: configs.npm.levels }) {
        this.paddings = Padder.paddingForLevels(opts.levels, opts.filler);
        this.options = opts;
      }
      /**
       * Returns the maximum length of keys in the specified `levels` Object.
       * @param  {Object} levels Set of all levels to calculate longest level against.
       * @returns {Number} Maximum length of the longest level string.
       */
      static getLongestLevel(levels) {
        const lvls = Object.keys(levels).map((level) => level.length);
        return Math.max(...lvls);
      }
      /**
       * Returns the padding for the specified `level` assuming that the
       * maximum length of all levels it's associated with is `maxLength`.
       * @param  {String} level Level to calculate padding for.
       * @param  {String} filler Repeatable text to use for padding.
       * @param  {Number} maxLength Length of the longest level
       * @returns {String} Padding string for the `level`
       */
      static paddingForLevel(level, filler, maxLength) {
        const targetLen = maxLength + 1 - level.length;
        const rep = Math.floor(targetLen / filler.length);
        const padding = `${filler}${filler.repeat(rep)}`;
        return padding.slice(0, targetLen);
      }
      /**
       * Returns an object with the string paddings for the given `levels`
       * using the specified `filler`.
       * @param  {Object} levels Set of all levels to calculate padding for.
       * @param  {String} filler Repeatable text to use for padding.
       * @returns {Object} Mapping of level to desired padding.
       */
      static paddingForLevels(levels, filler = " ") {
        const maxLength = Padder.getLongestLevel(levels);
        return Object.keys(levels).reduce((acc, level) => {
          acc[level] = Padder.paddingForLevel(level, filler, maxLength);
          return acc;
        }, {});
      }
      /**
       * Prepends the padding onto the `message` based on the `LEVEL` of
       * the `info`. This is based on the behavior of `winston@2` which also
       * prepended the level onto the message.
       *
       * See: https://github.com/winstonjs/winston/blob/2.x/lib/winston/logger.js#L198-L201
       *
       * @param  {Info} info Logform info object
       * @param  {Object} opts Options passed along to this instance.
       * @returns {Info} Modified logform info object.
       */
      transform(info, opts) {
        info.message = `${this.paddings[info[LEVEL]]}${info.message}`;
        if (info[MESSAGE]) {
          info[MESSAGE] = `${this.paddings[info[LEVEL]]}${info[MESSAGE]}`;
        }
        return info;
      }
    };
    module2.exports = (opts) => new Padder(opts);
    module2.exports.Padder = module2.exports.Format = Padder;
  }
});

// node_modules/logform/cli.js
var require_cli2 = __commonJS({
  "node_modules/logform/cli.js"(exports, module2) {
    "use strict";
    var { Colorizer } = require_colorize();
    var { Padder } = require_pad_levels();
    var { configs, MESSAGE } = require_triple_beam();
    var CliFormat = class {
      constructor(opts = {}) {
        if (!opts.levels) {
          opts.levels = configs.cli.levels;
        }
        this.colorizer = new Colorizer(opts);
        this.padder = new Padder(opts);
        this.options = opts;
      }
      /*
       * function transform (info, opts)
       * Attempts to both:
       * 1. Pad the { level }
       * 2. Colorize the { level, message }
       * of the given `logform` info object depending on the `opts`.
       */
      transform(info, opts) {
        this.colorizer.transform(
          this.padder.transform(info, opts),
          opts
        );
        info[MESSAGE] = `${info.level}:${info.message}`;
        return info;
      }
    };
    module2.exports = (opts) => new CliFormat(opts);
    module2.exports.Format = CliFormat;
  }
});

// node_modules/logform/combine.js
var require_combine = __commonJS({
  "node_modules/logform/combine.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    function cascade(formats) {
      if (!formats.every(isValidFormat)) {
        return;
      }
      return (info) => {
        let obj = info;
        for (let i = 0; i < formats.length; i++) {
          obj = formats[i].transform(obj, formats[i].options);
          if (!obj) {
            return false;
          }
        }
        return obj;
      };
    }
    function isValidFormat(fmt) {
      if (typeof fmt.transform !== "function") {
        throw new Error([
          "No transform function found on format. Did you create a format instance?",
          "const myFormat = format(formatFn);",
          "const instance = myFormat();"
        ].join("\n"));
      }
      return true;
    }
    module2.exports = (...formats) => {
      const combinedFormat = format2(cascade(formats));
      const instance = combinedFormat();
      instance.Format = combinedFormat.Format;
      return instance;
    };
    module2.exports.cascade = cascade;
  }
});

// node_modules/safe-stable-stringify/index.js
var require_safe_stable_stringify = __commonJS({
  "node_modules/safe-stable-stringify/index.js"(exports, module2) {
    "use strict";
    var { hasOwnProperty } = Object.prototype;
    var stringify = configure();
    stringify.configure = configure;
    stringify.stringify = stringify;
    stringify.default = stringify;
    exports.stringify = stringify;
    exports.configure = configure;
    module2.exports = stringify;
    var strEscapeSequencesRegExp = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
    function strEscape(str) {
      if (str.length < 5e3 && !strEscapeSequencesRegExp.test(str)) {
        return `"${str}"`;
      }
      return JSON.stringify(str);
    }
    function insertSort(array) {
      if (array.length > 200) {
        return array.sort();
      }
      for (let i = 1; i < array.length; i++) {
        const currentValue = array[i];
        let position = i;
        while (position !== 0 && array[position - 1] > currentValue) {
          array[position] = array[position - 1];
          position--;
        }
        array[position] = currentValue;
      }
      return array;
    }
    var typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(
      Object.getPrototypeOf(
        Object.getPrototypeOf(
          new Int8Array()
        )
      ),
      Symbol.toStringTag
    ).get;
    function isTypedArrayWithEntries(value) {
      return typedArrayPrototypeGetSymbolToStringTag.call(value) !== void 0 && value.length !== 0;
    }
    function stringifyTypedArray(array, separator, maximumBreadth) {
      if (array.length < maximumBreadth) {
        maximumBreadth = array.length;
      }
      const whitespace = separator === "," ? "" : " ";
      let res = `"0":${whitespace}${array[0]}`;
      for (let i = 1; i < maximumBreadth; i++) {
        res += `${separator}"${i}":${whitespace}${array[i]}`;
      }
      return res;
    }
    function getCircularValueOption(options) {
      if (hasOwnProperty.call(options, "circularValue")) {
        const circularValue = options.circularValue;
        if (typeof circularValue === "string") {
          return `"${circularValue}"`;
        }
        if (circularValue == null) {
          return circularValue;
        }
        if (circularValue === Error || circularValue === TypeError) {
          return {
            toString() {
              throw new TypeError("Converting circular structure to JSON");
            }
          };
        }
        throw new TypeError('The "circularValue" argument must be of type string or the value null or undefined');
      }
      return '"[Circular]"';
    }
    function getBooleanOption(options, key) {
      let value;
      if (hasOwnProperty.call(options, key)) {
        value = options[key];
        if (typeof value !== "boolean") {
          throw new TypeError(`The "${key}" argument must be of type boolean`);
        }
      }
      return value === void 0 ? true : value;
    }
    function getPositiveIntegerOption(options, key) {
      let value;
      if (hasOwnProperty.call(options, key)) {
        value = options[key];
        if (typeof value !== "number") {
          throw new TypeError(`The "${key}" argument must be of type number`);
        }
        if (!Number.isInteger(value)) {
          throw new TypeError(`The "${key}" argument must be an integer`);
        }
        if (value < 1) {
          throw new RangeError(`The "${key}" argument must be >= 1`);
        }
      }
      return value === void 0 ? Infinity : value;
    }
    function getItemCount(number) {
      if (number === 1) {
        return "1 item";
      }
      return `${number} items`;
    }
    function getUniqueReplacerSet(replacerArray) {
      const replacerSet = /* @__PURE__ */ new Set();
      for (const value of replacerArray) {
        if (typeof value === "string" || typeof value === "number") {
          replacerSet.add(String(value));
        }
      }
      return replacerSet;
    }
    function getStrictOption(options) {
      if (hasOwnProperty.call(options, "strict")) {
        const value = options.strict;
        if (typeof value !== "boolean") {
          throw new TypeError('The "strict" argument must be of type boolean');
        }
        if (value) {
          return (value2) => {
            let message = `Object can not safely be stringified. Received type ${typeof value2}`;
            if (typeof value2 !== "function")
              message += ` (${value2.toString()})`;
            throw new Error(message);
          };
        }
      }
    }
    function configure(options) {
      options = { ...options };
      const fail = getStrictOption(options);
      if (fail) {
        if (options.bigint === void 0) {
          options.bigint = false;
        }
        if (!("circularValue" in options)) {
          options.circularValue = Error;
        }
      }
      const circularValue = getCircularValueOption(options);
      const bigint = getBooleanOption(options, "bigint");
      const deterministic = getBooleanOption(options, "deterministic");
      const maximumDepth = getPositiveIntegerOption(options, "maximumDepth");
      const maximumBreadth = getPositiveIntegerOption(options, "maximumBreadth");
      function stringifyFnReplacer(key, parent, stack, replacer, spacer, indentation) {
        let value = parent[key];
        if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
        value = replacer.call(parent, key, value);
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            let res = "";
            let join10 = ",";
            const originalIndentation = indentation;
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              if (spacer !== "") {
                indentation += spacer;
                res += `
${indentation}`;
                join10 = `,
${indentation}`;
              }
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += join10;
              }
              const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `${join10}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              if (spacer !== "") {
                res += `
${originalIndentation}`;
              }
              stack.pop();
              return `[${res}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            let whitespace = "";
            let separator = "";
            if (spacer !== "") {
              indentation += spacer;
              join10 = `,
${indentation}`;
              whitespace = " ";
            }
            const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (deterministic && !isTypedArrayWithEntries(value)) {
              keys = insertSort(keys);
            }
            stack.push(value);
            for (let i = 0; i < maximumPropertiesToStringify; i++) {
              const key2 = keys[i];
              const tmp = stringifyFnReplacer(key2, value, stack, replacer, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
                separator = join10;
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...":${whitespace}"${getItemCount(removedKeys)} not stringified"`;
              separator = join10;
            }
            if (spacer !== "" && separator.length > 1) {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringifyArrayReplacer(key, value, stack, replacer, spacer, indentation) {
        if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            const originalIndentation = indentation;
            let res = "";
            let join10 = ",";
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              if (spacer !== "") {
                indentation += spacer;
                res += `
${indentation}`;
                join10 = `,
${indentation}`;
              }
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += join10;
              }
              const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `${join10}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              if (spacer !== "") {
                res += `
${originalIndentation}`;
              }
              stack.pop();
              return `[${res}]`;
            }
            stack.push(value);
            let whitespace = "";
            if (spacer !== "") {
              indentation += spacer;
              join10 = `,
${indentation}`;
              whitespace = " ";
            }
            let separator = "";
            for (const key2 of replacer) {
              const tmp = stringifyArrayReplacer(key2, value[key2], stack, replacer, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
                separator = join10;
              }
            }
            if (spacer !== "" && separator.length > 1) {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringifyIndent(key, value, stack, spacer, indentation) {
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (typeof value.toJSON === "function") {
              value = value.toJSON(key);
              if (typeof value !== "object") {
                return stringifyIndent(key, value, stack, spacer, indentation);
              }
              if (value === null) {
                return "null";
              }
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            const originalIndentation = indentation;
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              indentation += spacer;
              let res2 = `
${indentation}`;
              const join11 = `,
${indentation}`;
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifyIndent(String(i), value[i], stack, spacer, indentation);
                res2 += tmp2 !== void 0 ? tmp2 : "null";
                res2 += join11;
              }
              const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation);
              res2 += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res2 += `${join11}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              res2 += `
${originalIndentation}`;
              stack.pop();
              return `[${res2}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            indentation += spacer;
            const join10 = `,
${indentation}`;
            let res = "";
            let separator = "";
            let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (isTypedArrayWithEntries(value)) {
              res += stringifyTypedArray(value, join10, maximumBreadth);
              keys = keys.slice(value.length);
              maximumPropertiesToStringify -= value.length;
              separator = join10;
            }
            if (deterministic) {
              keys = insertSort(keys);
            }
            stack.push(value);
            for (let i = 0; i < maximumPropertiesToStringify; i++) {
              const key2 = keys[i];
              const tmp = stringifyIndent(key2, value[key2], stack, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}: ${tmp}`;
                separator = join10;
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...": "${getItemCount(removedKeys)} not stringified"`;
              separator = join10;
            }
            if (separator !== "") {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringifySimple(key, value, stack) {
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (typeof value.toJSON === "function") {
              value = value.toJSON(key);
              if (typeof value !== "object") {
                return stringifySimple(key, value, stack);
              }
              if (value === null) {
                return "null";
              }
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            let res = "";
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifySimple(String(i), value[i], stack);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += ",";
              }
              const tmp = stringifySimple(String(i), value[i], stack);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `,"... ${getItemCount(removedKeys)} not stringified"`;
              }
              stack.pop();
              return `[${res}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            let separator = "";
            let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (isTypedArrayWithEntries(value)) {
              res += stringifyTypedArray(value, ",", maximumBreadth);
              keys = keys.slice(value.length);
              maximumPropertiesToStringify -= value.length;
              separator = ",";
            }
            if (deterministic) {
              keys = insertSort(keys);
            }
            stack.push(value);
            for (let i = 0; i < maximumPropertiesToStringify; i++) {
              const key2 = keys[i];
              const tmp = stringifySimple(key2, value[key2], stack);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}:${tmp}`;
                separator = ",";
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...":"${getItemCount(removedKeys)} not stringified"`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringify2(value, replacer, space) {
        if (arguments.length > 1) {
          let spacer = "";
          if (typeof space === "number") {
            spacer = " ".repeat(Math.min(space, 10));
          } else if (typeof space === "string") {
            spacer = space.slice(0, 10);
          }
          if (replacer != null) {
            if (typeof replacer === "function") {
              return stringifyFnReplacer("", { "": value }, [], replacer, spacer, "");
            }
            if (Array.isArray(replacer)) {
              return stringifyArrayReplacer("", value, [], getUniqueReplacerSet(replacer), spacer, "");
            }
          }
          if (spacer.length !== 0) {
            return stringifyIndent("", value, [], spacer, "");
          }
        }
        return stringifySimple("", value, []);
      }
      return stringify2;
    }
  }
});

// node_modules/logform/json.js
var require_json = __commonJS({
  "node_modules/logform/json.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    var { MESSAGE } = require_triple_beam();
    var stringify = require_safe_stable_stringify();
    function replacer(key, value) {
      if (typeof value === "bigint")
        return value.toString();
      return value;
    }
    module2.exports = format2((info, opts) => {
      const jsonStringify = stringify.configure(opts);
      info[MESSAGE] = jsonStringify(info, opts.replacer || replacer, opts.space);
      return info;
    });
  }
});

// node_modules/logform/label.js
var require_label = __commonJS({
  "node_modules/logform/label.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    module2.exports = format2((info, opts) => {
      if (opts.message) {
        info.message = `[${opts.label}] ${info.message}`;
        return info;
      }
      info.label = opts.label;
      return info;
    });
  }
});

// node_modules/logform/logstash.js
var require_logstash = __commonJS({
  "node_modules/logform/logstash.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    var { MESSAGE } = require_triple_beam();
    var jsonStringify = require_safe_stable_stringify();
    module2.exports = format2((info) => {
      const logstash = {};
      if (info.message) {
        logstash["@message"] = info.message;
        delete info.message;
      }
      if (info.timestamp) {
        logstash["@timestamp"] = info.timestamp;
        delete info.timestamp;
      }
      logstash["@fields"] = info;
      info[MESSAGE] = jsonStringify(logstash);
      return info;
    });
  }
});

// node_modules/logform/metadata.js
var require_metadata = __commonJS({
  "node_modules/logform/metadata.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    function fillExcept(info, fillExceptKeys, metadataKey) {
      const savedKeys = fillExceptKeys.reduce((acc, key) => {
        acc[key] = info[key];
        delete info[key];
        return acc;
      }, {});
      const metadata = Object.keys(info).reduce((acc, key) => {
        acc[key] = info[key];
        delete info[key];
        return acc;
      }, {});
      Object.assign(info, savedKeys, {
        [metadataKey]: metadata
      });
      return info;
    }
    function fillWith(info, fillWithKeys, metadataKey) {
      info[metadataKey] = fillWithKeys.reduce((acc, key) => {
        acc[key] = info[key];
        delete info[key];
        return acc;
      }, {});
      return info;
    }
    module2.exports = format2((info, opts = {}) => {
      let metadataKey = "metadata";
      if (opts.key) {
        metadataKey = opts.key;
      }
      let fillExceptKeys = [];
      if (!opts.fillExcept && !opts.fillWith) {
        fillExceptKeys.push("level");
        fillExceptKeys.push("message");
      }
      if (opts.fillExcept) {
        fillExceptKeys = opts.fillExcept;
      }
      if (fillExceptKeys.length > 0) {
        return fillExcept(info, fillExceptKeys, metadataKey);
      }
      if (opts.fillWith) {
        return fillWith(info, opts.fillWith, metadataKey);
      }
      return info;
    });
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module2) {
    var s = 1e3;
    var m2 = s * 60;
    var h2 = m2 * 60;
    var d = h2 * 24;
    var w2 = d * 7;
    var y2 = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y2;
        case "weeks":
        case "week":
        case "w":
          return n * w2;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h2;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m2;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h2) {
        return Math.round(ms / h2) + "h";
      }
      if (msAbs >= m2) {
        return Math.round(ms / m2) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h2) {
        return plural(ms, msAbs, h2, "hour");
      }
      if (msAbs >= m2) {
        return plural(ms, msAbs, m2, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/logform/ms.js
var require_ms2 = __commonJS({
  "node_modules/logform/ms.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    var ms = require_ms();
    module2.exports = format2((info) => {
      const curr = +/* @__PURE__ */ new Date();
      exports.diff = curr - (exports.prevTime || curr);
      exports.prevTime = curr;
      info.ms = `+${ms(exports.diff)}`;
      return info;
    });
  }
});

// node_modules/logform/pretty-print.js
var require_pretty_print = __commonJS({
  "node_modules/logform/pretty-print.js"(exports, module2) {
    "use strict";
    var inspect2 = require("util").inspect;
    var format2 = require_format();
    var { LEVEL, MESSAGE, SPLAT } = require_triple_beam();
    module2.exports = format2((info, opts = {}) => {
      const stripped = Object.assign({}, info);
      delete stripped[LEVEL];
      delete stripped[MESSAGE];
      delete stripped[SPLAT];
      info[MESSAGE] = inspect2(stripped, false, opts.depth || null, opts.colorize);
      return info;
    });
  }
});

// node_modules/logform/printf.js
var require_printf = __commonJS({
  "node_modules/logform/printf.js"(exports, module2) {
    "use strict";
    var { MESSAGE } = require_triple_beam();
    var Printf = class {
      constructor(templateFn) {
        this.template = templateFn;
      }
      transform(info) {
        info[MESSAGE] = this.template(info);
        return info;
      }
    };
    module2.exports = (opts) => new Printf(opts);
    module2.exports.Printf = module2.exports.Format = Printf;
  }
});

// node_modules/logform/simple.js
var require_simple = __commonJS({
  "node_modules/logform/simple.js"(exports, module2) {
    "use strict";
    var format2 = require_format();
    var { MESSAGE } = require_triple_beam();
    var jsonStringify = require_safe_stable_stringify();
    module2.exports = format2((info) => {
      const stringifiedRest = jsonStringify(Object.assign({}, info, {
        level: void 0,
        message: void 0,
        splat: void 0
      }));
      const padding = info.padding && info.padding[info.level] || "";
      if (stringifiedRest !== "{}") {
        info[MESSAGE] = `${info.level}:${padding} ${info.message} ${stringifiedRest}`;
      } else {
        info[MESSAGE] = `${info.level}:${padding} ${info.message}`;
      }
      return info;
    });
  }
});

// node_modules/logform/splat.js
var require_splat = __commonJS({
  "node_modules/logform/splat.js"(exports, module2) {
    "use strict";
    var util2 = require("util");
    var { SPLAT } = require_triple_beam();
    var formatRegExp = /%[scdjifoO%]/g;
    var escapedPercent = /%%/g;
    var Splatter = class {
      constructor(opts) {
        this.options = opts;
      }
      /**
         * Check to see if tokens <= splat.length, assign { splat, meta } into the
         * `info` accordingly, and write to this instance.
         *
         * @param  {Info} info Logform info message.
         * @param  {String[]} tokens Set of string interpolation tokens.
         * @returns {Info} Modified info message
         * @private
         */
      _splat(info, tokens) {
        const msg = info.message;
        const splat = info[SPLAT] || info.splat || [];
        const percents = msg.match(escapedPercent);
        const escapes = percents && percents.length || 0;
        const expectedSplat = tokens.length - escapes;
        const extraSplat = expectedSplat - splat.length;
        const metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : [];
        const metalen = metas.length;
        if (metalen) {
          for (let i = 0; i < metalen; i++) {
            Object.assign(info, metas[i]);
          }
        }
        info.message = util2.format(msg, ...splat);
        return info;
      }
      /**
        * Transforms the `info` message by using `util.format` to complete
        * any `info.message` provided it has string interpolation tokens.
        * If no tokens exist then `info` is immutable.
        *
        * @param  {Info} info Logform info message.
        * @param  {Object} opts Options for this instance.
        * @returns {Info} Modified info message
        */
      transform(info) {
        const msg = info.message;
        const splat = info[SPLAT] || info.splat;
        if (!splat || !splat.length) {
          return info;
        }
        const tokens = msg && msg.match && msg.match(formatRegExp);
        if (!tokens && (splat || splat.length)) {
          const metas = splat.length > 1 ? splat.splice(0) : splat;
          const metalen = metas.length;
          if (metalen) {
            for (let i = 0; i < metalen; i++) {
              Object.assign(info, metas[i]);
            }
          }
          return info;
        }
        if (tokens) {
          return this._splat(info, tokens);
        }
        return info;
      }
    };
    module2.exports = (opts) => new Splatter(opts);
  }
});

// node_modules/fecha/lib/fecha.umd.js
var require_fecha_umd = __commonJS({
  "node_modules/fecha/lib/fecha.umd.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.fecha = {});
    })(exports, function(exports2) {
      "use strict";
      var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
      var twoDigitsOptional = "\\d\\d?";
      var twoDigits = "\\d\\d";
      var threeDigits = "\\d{3}";
      var fourDigits = "\\d{4}";
      var word = "[^\\s]+";
      var literal = /\[([^]*?)\]/gm;
      function shorten(arr, sLen) {
        var newArr = [];
        for (var i = 0, len = arr.length; i < len; i++) {
          newArr.push(arr[i].substr(0, sLen));
        }
        return newArr;
      }
      var monthUpdate = function(arrName) {
        return function(v2, i18n) {
          var lowerCaseArr = i18n[arrName].map(function(v3) {
            return v3.toLowerCase();
          });
          var index = lowerCaseArr.indexOf(v2.toLowerCase());
          if (index > -1) {
            return index;
          }
          return null;
        };
      };
      function assign(origObj) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
          var obj = args_1[_a];
          for (var key in obj) {
            origObj[key] = obj[key];
          }
        }
        return origObj;
      }
      var dayNames = [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ];
      var monthNames = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
      ];
      var monthNamesShort = shorten(monthNames, 3);
      var dayNamesShort = shorten(dayNames, 3);
      var defaultI18n = {
        dayNamesShort,
        dayNames,
        monthNamesShort,
        monthNames,
        amPm: ["am", "pm"],
        DoFn: function(dayOfMonth) {
          return dayOfMonth + ["th", "st", "nd", "rd"][dayOfMonth % 10 > 3 ? 0 : (dayOfMonth - dayOfMonth % 10 !== 10 ? 1 : 0) * dayOfMonth % 10];
        }
      };
      var globalI18n = assign({}, defaultI18n);
      var setGlobalDateI18n = function(i18n) {
        return globalI18n = assign(globalI18n, i18n);
      };
      var regexEscape = function(str) {
        return str.replace(/[|\\{()[^$+*?.-]/g, "\\$&");
      };
      var pad = function(val, len) {
        if (len === void 0) {
          len = 2;
        }
        val = String(val);
        while (val.length < len) {
          val = "0" + val;
        }
        return val;
      };
      var formatFlags = {
        D: function(dateObj) {
          return String(dateObj.getDate());
        },
        DD: function(dateObj) {
          return pad(dateObj.getDate());
        },
        Do: function(dateObj, i18n) {
          return i18n.DoFn(dateObj.getDate());
        },
        d: function(dateObj) {
          return String(dateObj.getDay());
        },
        dd: function(dateObj) {
          return pad(dateObj.getDay());
        },
        ddd: function(dateObj, i18n) {
          return i18n.dayNamesShort[dateObj.getDay()];
        },
        dddd: function(dateObj, i18n) {
          return i18n.dayNames[dateObj.getDay()];
        },
        M: function(dateObj) {
          return String(dateObj.getMonth() + 1);
        },
        MM: function(dateObj) {
          return pad(dateObj.getMonth() + 1);
        },
        MMM: function(dateObj, i18n) {
          return i18n.monthNamesShort[dateObj.getMonth()];
        },
        MMMM: function(dateObj, i18n) {
          return i18n.monthNames[dateObj.getMonth()];
        },
        YY: function(dateObj) {
          return pad(String(dateObj.getFullYear()), 4).substr(2);
        },
        YYYY: function(dateObj) {
          return pad(dateObj.getFullYear(), 4);
        },
        h: function(dateObj) {
          return String(dateObj.getHours() % 12 || 12);
        },
        hh: function(dateObj) {
          return pad(dateObj.getHours() % 12 || 12);
        },
        H: function(dateObj) {
          return String(dateObj.getHours());
        },
        HH: function(dateObj) {
          return pad(dateObj.getHours());
        },
        m: function(dateObj) {
          return String(dateObj.getMinutes());
        },
        mm: function(dateObj) {
          return pad(dateObj.getMinutes());
        },
        s: function(dateObj) {
          return String(dateObj.getSeconds());
        },
        ss: function(dateObj) {
          return pad(dateObj.getSeconds());
        },
        S: function(dateObj) {
          return String(Math.round(dateObj.getMilliseconds() / 100));
        },
        SS: function(dateObj) {
          return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
        },
        SSS: function(dateObj) {
          return pad(dateObj.getMilliseconds(), 3);
        },
        a: function(dateObj, i18n) {
          return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
        },
        A: function(dateObj, i18n) {
          return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
        },
        ZZ: function(dateObj) {
          var offset = dateObj.getTimezoneOffset();
          return (offset > 0 ? "-" : "+") + pad(Math.floor(Math.abs(offset) / 60) * 100 + Math.abs(offset) % 60, 4);
        },
        Z: function(dateObj) {
          var offset = dateObj.getTimezoneOffset();
          return (offset > 0 ? "-" : "+") + pad(Math.floor(Math.abs(offset) / 60), 2) + ":" + pad(Math.abs(offset) % 60, 2);
        }
      };
      var monthParse = function(v2) {
        return +v2 - 1;
      };
      var emptyDigits = [null, twoDigitsOptional];
      var emptyWord = [null, word];
      var amPm = [
        "isPm",
        word,
        function(v2, i18n) {
          var val = v2.toLowerCase();
          if (val === i18n.amPm[0]) {
            return 0;
          } else if (val === i18n.amPm[1]) {
            return 1;
          }
          return null;
        }
      ];
      var timezoneOffset = [
        "timezoneOffset",
        "[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z?",
        function(v2) {
          var parts = (v2 + "").match(/([+-]|\d\d)/gi);
          if (parts) {
            var minutes = +parts[1] * 60 + parseInt(parts[2], 10);
            return parts[0] === "+" ? minutes : -minutes;
          }
          return 0;
        }
      ];
      var parseFlags = {
        D: ["day", twoDigitsOptional],
        DD: ["day", twoDigits],
        Do: ["day", twoDigitsOptional + word, function(v2) {
          return parseInt(v2, 10);
        }],
        M: ["month", twoDigitsOptional, monthParse],
        MM: ["month", twoDigits, monthParse],
        YY: [
          "year",
          twoDigits,
          function(v2) {
            var now = /* @__PURE__ */ new Date();
            var cent = +("" + now.getFullYear()).substr(0, 2);
            return +("" + (+v2 > 68 ? cent - 1 : cent) + v2);
          }
        ],
        h: ["hour", twoDigitsOptional, void 0, "isPm"],
        hh: ["hour", twoDigits, void 0, "isPm"],
        H: ["hour", twoDigitsOptional],
        HH: ["hour", twoDigits],
        m: ["minute", twoDigitsOptional],
        mm: ["minute", twoDigits],
        s: ["second", twoDigitsOptional],
        ss: ["second", twoDigits],
        YYYY: ["year", fourDigits],
        S: ["millisecond", "\\d", function(v2) {
          return +v2 * 100;
        }],
        SS: ["millisecond", twoDigits, function(v2) {
          return +v2 * 10;
        }],
        SSS: ["millisecond", threeDigits],
        d: emptyDigits,
        dd: emptyDigits,
        ddd: emptyWord,
        dddd: emptyWord,
        MMM: ["month", word, monthUpdate("monthNamesShort")],
        MMMM: ["month", word, monthUpdate("monthNames")],
        a: amPm,
        A: amPm,
        ZZ: timezoneOffset,
        Z: timezoneOffset
      };
      var globalMasks = {
        default: "ddd MMM DD YYYY HH:mm:ss",
        shortDate: "M/D/YY",
        mediumDate: "MMM D, YYYY",
        longDate: "MMMM D, YYYY",
        fullDate: "dddd, MMMM D, YYYY",
        isoDate: "YYYY-MM-DD",
        isoDateTime: "YYYY-MM-DDTHH:mm:ssZ",
        shortTime: "HH:mm",
        mediumTime: "HH:mm:ss",
        longTime: "HH:mm:ss.SSS"
      };
      var setGlobalDateMasks = function(masks) {
        return assign(globalMasks, masks);
      };
      var format2 = function(dateObj, mask, i18n) {
        if (mask === void 0) {
          mask = globalMasks["default"];
        }
        if (i18n === void 0) {
          i18n = {};
        }
        if (typeof dateObj === "number") {
          dateObj = new Date(dateObj);
        }
        if (Object.prototype.toString.call(dateObj) !== "[object Date]" || isNaN(dateObj.getTime())) {
          throw new Error("Invalid Date pass to format");
        }
        mask = globalMasks[mask] || mask;
        var literals = [];
        mask = mask.replace(literal, function($0, $1) {
          literals.push($1);
          return "@@@";
        });
        var combinedI18nSettings = assign(assign({}, globalI18n), i18n);
        mask = mask.replace(token, function($0) {
          return formatFlags[$0](dateObj, combinedI18nSettings);
        });
        return mask.replace(/@@@/g, function() {
          return literals.shift();
        });
      };
      function parse(dateStr, format3, i18n) {
        if (i18n === void 0) {
          i18n = {};
        }
        if (typeof format3 !== "string") {
          throw new Error("Invalid format in fecha parse");
        }
        format3 = globalMasks[format3] || format3;
        if (dateStr.length > 1e3) {
          return null;
        }
        var today = /* @__PURE__ */ new Date();
        var dateInfo = {
          year: today.getFullYear(),
          month: 0,
          day: 1,
          hour: 0,
          minute: 0,
          second: 0,
          millisecond: 0,
          isPm: null,
          timezoneOffset: null
        };
        var parseInfo = [];
        var literals = [];
        var newFormat = format3.replace(literal, function($0, $1) {
          literals.push(regexEscape($1));
          return "@@@";
        });
        var specifiedFields = {};
        var requiredFields = {};
        newFormat = regexEscape(newFormat).replace(token, function($0) {
          var info = parseFlags[$0];
          var field2 = info[0], regex = info[1], requiredField = info[3];
          if (specifiedFields[field2]) {
            throw new Error("Invalid format. " + field2 + " specified twice in format");
          }
          specifiedFields[field2] = true;
          if (requiredField) {
            requiredFields[requiredField] = true;
          }
          parseInfo.push(info);
          return "(" + regex + ")";
        });
        Object.keys(requiredFields).forEach(function(field2) {
          if (!specifiedFields[field2]) {
            throw new Error("Invalid format. " + field2 + " is required in specified format");
          }
        });
        newFormat = newFormat.replace(/@@@/g, function() {
          return literals.shift();
        });
        var matches = dateStr.match(new RegExp(newFormat, "i"));
        if (!matches) {
          return null;
        }
        var combinedI18nSettings = assign(assign({}, globalI18n), i18n);
        for (var i = 1; i < matches.length; i++) {
          var _a = parseInfo[i - 1], field = _a[0], parser2 = _a[2];
          var value = parser2 ? parser2(matches[i], combinedI18nSettings) : +matches[i];
          if (value == null) {
            return null;
          }
          dateInfo[field] = value;
        }
        if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {
          dateInfo.hour = +dateInfo.hour + 12;
        } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {
          dateInfo.hour = 0;
        }
        var dateTZ;
        if (dateInfo.timezoneOffset == null) {
          dateTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);
          var validateFields = [
            ["month", "getMonth"],
            ["day", "getDate"],
            ["hour", "getHours"],
            ["minute", "getMinutes"],
            ["second", "getSeconds"]
          ];
          for (var i = 0, len = validateFields.length; i < len; i++) {
            if (specifiedFields[validateFields[i][0]] && dateInfo[validateFields[i][0]] !== dateTZ[validateFields[i][1]]()) {
              return null;
            }
          }
        } else {
          dateTZ = new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));
          if (dateInfo.month > 11 || dateInfo.month < 0 || dateInfo.day > 31 || dateInfo.day < 1 || dateInfo.hour > 23 || dateInfo.hour < 0 || dateInfo.minute > 59 || dateInfo.minute < 0 || dateInfo.second > 59 || dateInfo.second < 0) {
            return null;
          }
        }
        return dateTZ;
      }
      var fecha = {
        format: format2,
        parse,
        defaultI18n,
        setGlobalDateI18n,
        setGlobalDateMasks
      };
      exports2.assign = assign;
      exports2.default = fecha;
      exports2.format = format2;
      exports2.parse = parse;
      exports2.defaultI18n = defaultI18n;
      exports2.setGlobalDateI18n = setGlobalDateI18n;
      exports2.setGlobalDateMasks = setGlobalDateMasks;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/logform/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/logform/timestamp.js"(exports, module2) {
    "use strict";
    var fecha = require_fecha_umd();
    var format2 = require_format();
    module2.exports = format2((info, opts = {}) => {
      if (opts.format) {
        info.timestamp = typeof opts.format === "function" ? opts.format() : fecha.format(/* @__PURE__ */ new Date(), opts.format);
      }
      if (!info.timestamp) {
        info.timestamp = (/* @__PURE__ */ new Date()).toISOString();
      }
      if (opts.alias) {
        info[opts.alias] = info.timestamp;
      }
      return info;
    });
  }
});

// node_modules/logform/uncolorize.js
var require_uncolorize = __commonJS({
  "node_modules/logform/uncolorize.js"(exports, module2) {
    "use strict";
    var colors = require_safe();
    var format2 = require_format();
    var { MESSAGE } = require_triple_beam();
    module2.exports = format2((info, opts) => {
      if (opts.level !== false) {
        info.level = colors.strip(info.level);
      }
      if (opts.message !== false) {
        info.message = colors.strip(String(info.message));
      }
      if (opts.raw !== false && info[MESSAGE]) {
        info[MESSAGE] = colors.strip(String(info[MESSAGE]));
      }
      return info;
    });
  }
});

// node_modules/logform/index.js
var require_logform = __commonJS({
  "node_modules/logform/index.js"(exports) {
    "use strict";
    var format2 = exports.format = require_format();
    exports.levels = require_levels();
    function exposeFormat(name, requireFormat) {
      Object.defineProperty(format2, name, {
        get() {
          return requireFormat();
        },
        configurable: true
      });
    }
    exposeFormat("align", function() {
      return require_align();
    });
    exposeFormat("errors", function() {
      return require_errors();
    });
    exposeFormat("cli", function() {
      return require_cli2();
    });
    exposeFormat("combine", function() {
      return require_combine();
    });
    exposeFormat("colorize", function() {
      return require_colorize();
    });
    exposeFormat("json", function() {
      return require_json();
    });
    exposeFormat("label", function() {
      return require_label();
    });
    exposeFormat("logstash", function() {
      return require_logstash();
    });
    exposeFormat("metadata", function() {
      return require_metadata();
    });
    exposeFormat("ms", function() {
      return require_ms2();
    });
    exposeFormat("padLevels", function() {
      return require_pad_levels();
    });
    exposeFormat("prettyPrint", function() {
      return require_pretty_print();
    });
    exposeFormat("printf", function() {
      return require_printf();
    });
    exposeFormat("simple", function() {
      return require_simple();
    });
    exposeFormat("splat", function() {
      return require_splat();
    });
    exposeFormat("timestamp", function() {
      return require_timestamp();
    });
    exposeFormat("uncolorize", function() {
      return require_uncolorize();
    });
  }
});

// node_modules/winston/lib/winston/common.js
var require_common3 = __commonJS({
  "node_modules/winston/lib/winston/common.js"(exports) {
    "use strict";
    var { format: format2 } = require("util");
    exports.warn = {
      deprecated(prop) {
        return () => {
          throw new Error(format2("{ %s } was removed in winston@3.0.0.", prop));
        };
      },
      useFormat(prop) {
        return () => {
          throw new Error([
            format2("{ %s } was removed in winston@3.0.0.", prop),
            "Use a custom winston.format = winston.format(function) instead."
          ].join("\n"));
        };
      },
      forFunctions(obj, type, props) {
        props.forEach((prop) => {
          obj[prop] = exports.warn[type](prop);
        });
      },
      moved(obj, movedTo, prop) {
        function movedNotice() {
          return () => {
            throw new Error([
              format2("winston.%s was moved in winston@3.0.0.", prop),
              format2("Use a winston.%s instead.", movedTo)
            ].join("\n"));
          };
        }
        Object.defineProperty(obj, prop, {
          get: movedNotice,
          set: movedNotice
        });
      },
      forProperties(obj, type, props) {
        props.forEach((prop) => {
          const notice = exports.warn[type](prop);
          Object.defineProperty(obj, prop, {
            get: notice,
            set: notice
          });
        });
      }
    };
  }
});

// node_modules/winston/package.json
var require_package = __commonJS({
  "node_modules/winston/package.json"(exports, module2) {
    module2.exports = {
      name: "winston",
      description: "A logger for just about everything.",
      version: "3.9.0",
      author: "Charlie Robbins <charlie.robbins@gmail.com>",
      maintainers: [
        "David Hyde <dabh@alumni.stanford.edu>"
      ],
      repository: {
        type: "git",
        url: "https://github.com/winstonjs/winston.git"
      },
      keywords: [
        "winston",
        "logger",
        "logging",
        "logs",
        "sysadmin",
        "bunyan",
        "pino",
        "loglevel",
        "tools",
        "json",
        "stream"
      ],
      dependencies: {
        "@dabh/diagnostics": "^2.0.2",
        "@colors/colors": "1.5.0",
        async: "^3.2.3",
        "is-stream": "^2.0.0",
        logform: "^2.4.0",
        "one-time": "^1.0.0",
        "readable-stream": "^3.4.0",
        "safe-stable-stringify": "^2.3.1",
        "stack-trace": "0.0.x",
        "triple-beam": "^1.3.0",
        "winston-transport": "^4.5.0"
      },
      devDependencies: {
        "@babel/cli": "^7.17.0",
        "@babel/core": "^7.17.2",
        "@babel/preset-env": "^7.16.7",
        "@dabh/eslint-config-populist": "^5.0.0",
        "@types/node": "^18.0.0",
        "abstract-winston-transport": "^0.5.1",
        assume: "^2.2.0",
        "cross-spawn-async": "^2.2.5",
        eslint: "^8.9.0",
        hock: "^1.4.1",
        mocha: "8.1.3",
        nyc: "^15.1.0",
        rimraf: "^3.0.2",
        split2: "^4.1.0",
        "std-mocks": "^1.0.1",
        through2: "^4.0.2",
        "winston-compat": "^0.1.5"
      },
      main: "./lib/winston.js",
      browser: "./dist/winston",
      types: "./index.d.ts",
      scripts: {
        lint: "eslint lib/*.js lib/winston/*.js lib/winston/**/*.js --resolve-plugins-relative-to ./node_modules/@dabh/eslint-config-populist",
        test: "mocha",
        "test:coverage": "nyc npm run test:unit",
        "test:unit": "mocha test/unit",
        "test:integration": "mocha test/integration",
        build: "rimraf dist && babel lib -d dist",
        prepublishOnly: "npm run build"
      },
      engines: {
        node: ">= 12.0.0"
      },
      license: "MIT"
    };
  }
});

// node_modules/util-deprecate/node.js
var require_node = __commonJS({
  "node_modules/util-deprecate/node.js"(exports, module2) {
    module2.exports = require("util").deprecate;
  }
});

// node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/stream.js
var require_stream5 = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/stream.js"(exports, module2) {
    module2.exports = require("stream");
  }
});

// node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module2) {
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/winston-transport/node_modules/readable-stream/errors.js
var require_errors2 = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/errors.js"(exports, module2) {
    "use strict";
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      class NodeError extends Base {
        constructor(arg1, arg2, arg3) {
          super(getMessage(arg1, arg2, arg3));
        }
      }
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        const len = expected.length;
        expected = expected.map((i) => String(i));
        if (len > 2) {
          return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
        } else if (len === 2) {
          return `one of ${thing} ${expected[0]} or ${expected[1]}`;
        } else {
          return `of ${thing} ${expected[0]}`;
        }
      } else {
        return `of ${thing} ${String(expected)}`;
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      let determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      let msg;
      if (endsWith(name, " argument")) {
        msg = `The ${name} ${determiner} ${oneOf(expected, "type")}`;
      } else {
        const type = includes(name, ".") ? "property" : "argument";
        msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, "type")}`;
      }
      msg += `. Received type ${typeof actual}`;
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module2) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors2().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  "node_modules/inherits/inherits.js"(exports, module2) {
    try {
      util2 = require("util");
      if (typeof util2.inherits !== "function")
        throw "";
      module2.exports = util2.inherits;
    } catch (e) {
      module2.exports = require_inherits_browser();
    }
    var util2;
  }
});

// node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module2) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var _require = require("buffer");
    var Buffer2 = _require.Buffer;
    var _require2 = require("util");
    var inspect2 = _require2.inspect;
    var custom = inspect2 && inspect2.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module2.exports = /* @__PURE__ */ function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push2(v2) {
          var entry = {
            data: v2,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v2) {
          var entry = {
            data: v2,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join10(s) {
          if (this.length === 0)
            return "";
          var p2 = this.head;
          var ret = "" + p2.data;
          while (p2 = p2.next)
            ret += s + p2.data;
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p2 = this.head;
          var i = 0;
          while (p2) {
            copyBuffer(p2.data, ret, i);
            i += p2.data.length;
            p2 = p2.next;
          }
          return ret;
        }
        // Consumes a specified amount of bytes or characters from the buffered data.
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
        // Consumes a specified amount of characters from the buffered data.
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p2 = this.head;
          var c2 = 1;
          var ret = p2.data;
          n -= ret.length;
          while (p2 = p2.next) {
            var str = p2.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c2;
                if (p2.next)
                  this.head = p2.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p2;
                p2.data = str.slice(nb);
              }
              break;
            }
            ++c2;
          }
          this.length -= c2;
          return ret;
        }
        // Consumes a specified amount of bytes from the buffered data.
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p2 = this.head;
          var c2 = 1;
          p2.data.copy(ret);
          n -= p2.data.length;
          while (p2 = p2.next) {
            var buf = p2.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c2;
                if (p2.next)
                  this.head = p2.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p2;
                p2.data = buf.slice(nb);
              }
              break;
            }
            ++c2;
          }
          this.length -= c2;
          return ret;
        }
        // Make sure the linked list only shows the minimal necessary information.
      }, {
        key: custom,
        value: function value(_2, options) {
          return inspect2(this, _objectSpread(_objectSpread({}, options), {}, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports, module2) {
    var buffer = require("buffer");
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/string_decoder/lib/string_decoder.js"(exports) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0)
          return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length)
        return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j2 = buf.length - 1;
      if (j2 < i)
        return 0;
      var nb = utf8CheckByte(buf[j2]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j2 < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j2]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j2 < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j2]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p2) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "\uFFFD";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "\uFFFD";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p2 = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p2);
      if (r !== void 0)
        return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p2, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p2, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed)
        return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + "\uFFFD";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c2 = r.charCodeAt(r.length - 1);
          if (c2 >= 55296 && c2 <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0)
        return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module2) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors2().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module2) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve4 = iter[kLastResolve];
      if (resolve4 !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve4(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve4, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve4(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve4, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve4, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve4(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve4, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve4(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve4, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve4(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve4;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve4 = iterator[kLastResolve];
        if (resolve4 !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve4(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/from.js
var require_from = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/from.js"(exports, module2) {
    "use strict";
    function asyncGeneratorStep(gen, resolve4, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve4(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve4, reject) {
          var gen = fn.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve4, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve4, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ERR_INVALID_ARG_TYPE = require_errors2().codes.ERR_INVALID_ARG_TYPE;
    function from(Readable, iterable, opts) {
      var iterator;
      if (iterable && typeof iterable.next === "function") {
        iterator = iterable;
      } else if (iterable && iterable[Symbol.asyncIterator])
        iterator = iterable[Symbol.asyncIterator]();
      else if (iterable && iterable[Symbol.iterator])
        iterator = iterable[Symbol.iterator]();
      else
        throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
      var readable = new Readable(_objectSpread({
        objectMode: true
      }, opts));
      var reading = false;
      readable._read = function() {
        if (!reading) {
          reading = true;
          next();
        }
      };
      function next() {
        return _next2.apply(this, arguments);
      }
      function _next2() {
        _next2 = _asyncToGenerator(function* () {
          try {
            var _yield$iterator$next = yield iterator.next(), value = _yield$iterator$next.value, done = _yield$iterator$next.done;
            if (done) {
              readable.push(null);
            } else if (readable.push(yield value)) {
              next();
            } else {
              reading = false;
            }
          } catch (err) {
            readable.destroy(err);
          }
        });
        return _next2.apply(this, arguments);
      }
      return readable;
    }
    module2.exports = from;
  }
});

// node_modules/winston-transport/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/lib/_stream_readable.js"(exports, module2) {
    "use strict";
    module2.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require("events").EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream5();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require("util");
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors2().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p2 = this._readableState.buffer.head;
      var content = "";
      while (p2 !== null) {
        content += decoder.write(p2.data);
        p2 = p2.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++)
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null)
        ;
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x2) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x2)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/winston-transport/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module2) {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj)
        keys2.push(key);
      return keys2;
    };
    module2.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v2 = 0; v2 < keys.length; v2++) {
        method = keys[v2];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v2;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js"(exports, module2) {
    "use strict";
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_node()
    };
    var Stream = require_stream5();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors2().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_2) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/winston-transport/legacy.js
var require_legacy = __commonJS({
  "node_modules/winston-transport/legacy.js"(exports, module2) {
    "use strict";
    var util2 = require("util");
    var { LEVEL } = require_triple_beam();
    var TransportStream = require_winston_transport();
    var LegacyTransportStream = module2.exports = function LegacyTransportStream2(options = {}) {
      TransportStream.call(this, options);
      if (!options.transport || typeof options.transport.log !== "function") {
        throw new Error("Invalid transport, must be an object with a log method.");
      }
      this.transport = options.transport;
      this.level = this.level || options.transport.level;
      this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;
      this._deprecated();
      function transportError(err) {
        this.emit("error", err, this.transport);
      }
      if (!this.transport.__winstonError) {
        this.transport.__winstonError = transportError.bind(this);
        this.transport.on("error", this.transport.__winstonError);
      }
    };
    util2.inherits(LegacyTransportStream, TransportStream);
    LegacyTransportStream.prototype._write = function _write(info, enc, callback) {
      if (this.silent || info.exception === true && !this.handleExceptions) {
        return callback(null);
      }
      if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {
        this.transport.log(info[LEVEL], info.message, info, this._nop);
      }
      callback(null);
    };
    LegacyTransportStream.prototype._writev = function _writev(chunks, callback) {
      for (let i = 0; i < chunks.length; i++) {
        if (this._accept(chunks[i])) {
          this.transport.log(
            chunks[i].chunk[LEVEL],
            chunks[i].chunk.message,
            chunks[i].chunk,
            this._nop
          );
          chunks[i].callback();
        }
      }
      return callback(null);
    };
    LegacyTransportStream.prototype._deprecated = function _deprecated() {
      console.error([
        `${this.transport.name} is a legacy winston transport. Consider upgrading: `,
        "- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md"
      ].join("\n"));
    };
    LegacyTransportStream.prototype.close = function close() {
      if (this.transport.close) {
        this.transport.close();
      }
      if (this.transport.__winstonError) {
        this.transport.removeListener("error", this.transport.__winstonError);
        this.transport.__winstonError = null;
      }
    };
  }
});

// node_modules/winston-transport/index.js
var require_winston_transport = __commonJS({
  "node_modules/winston-transport/index.js"(exports, module2) {
    "use strict";
    var util2 = require("util");
    var Writable = require_stream_writable();
    var { LEVEL } = require_triple_beam();
    var TransportStream = module2.exports = function TransportStream2(options = {}) {
      Writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });
      this.format = options.format;
      this.level = options.level;
      this.handleExceptions = options.handleExceptions;
      this.handleRejections = options.handleRejections;
      this.silent = options.silent;
      if (options.log)
        this.log = options.log;
      if (options.logv)
        this.logv = options.logv;
      if (options.close)
        this.close = options.close;
      this.once("pipe", (logger) => {
        this.levels = logger.levels;
        this.parent = logger;
      });
      this.once("unpipe", (src) => {
        if (src === this.parent) {
          this.parent = null;
          if (this.close) {
            this.close();
          }
        }
      });
    };
    util2.inherits(TransportStream, Writable);
    TransportStream.prototype._write = function _write(info, enc, callback) {
      if (this.silent || info.exception === true && !this.handleExceptions) {
        return callback(null);
      }
      const level = this.level || this.parent && this.parent.level;
      if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {
        if (info && !this.format) {
          return this.log(info, callback);
        }
        let errState;
        let transformed;
        try {
          transformed = this.format.transform(Object.assign({}, info), this.format.options);
        } catch (err) {
          errState = err;
        }
        if (errState || !transformed) {
          callback();
          if (errState)
            throw errState;
          return;
        }
        return this.log(transformed, callback);
      }
      this._writableState.sync = false;
      return callback(null);
    };
    TransportStream.prototype._writev = function _writev(chunks, callback) {
      if (this.logv) {
        const infos = chunks.filter(this._accept, this);
        if (!infos.length) {
          return callback(null);
        }
        return this.logv(infos, callback);
      }
      for (let i = 0; i < chunks.length; i++) {
        if (!this._accept(chunks[i]))
          continue;
        if (chunks[i].chunk && !this.format) {
          this.log(chunks[i].chunk, chunks[i].callback);
          continue;
        }
        let errState;
        let transformed;
        try {
          transformed = this.format.transform(
            Object.assign({}, chunks[i].chunk),
            this.format.options
          );
        } catch (err) {
          errState = err;
        }
        if (errState || !transformed) {
          chunks[i].callback();
          if (errState) {
            callback(null);
            throw errState;
          }
        } else {
          this.log(transformed, chunks[i].callback);
        }
      }
      return callback(null);
    };
    TransportStream.prototype._accept = function _accept(write) {
      const info = write.chunk;
      if (this.silent) {
        return false;
      }
      const level = this.level || this.parent && this.parent.level;
      if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {
        if (this.handleExceptions || info.exception !== true) {
          return true;
        }
      }
      return false;
    };
    TransportStream.prototype._nop = function _nop() {
      return void 0;
    };
    module2.exports.LegacyTransportStream = require_legacy();
  }
});

// node_modules/winston/lib/winston/transports/console.js
var require_console = __commonJS({
  "node_modules/winston/lib/winston/transports/console.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var { LEVEL, MESSAGE } = require_triple_beam();
    var TransportStream = require_winston_transport();
    module2.exports = class Console extends TransportStream {
      /**
       * Constructor function for the Console transport object responsible for
       * persisting log messages and metadata to a terminal or TTY.
       * @param {!Object} [options={}] - Options for this instance.
       */
      constructor(options = {}) {
        super(options);
        this.name = options.name || "console";
        this.stderrLevels = this._stringArrayToSet(options.stderrLevels);
        this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);
        this.eol = typeof options.eol === "string" ? options.eol : os.EOL;
        this.setMaxListeners(30);
      }
      /**
       * Core logging method exposed to Winston.
       * @param {Object} info - TODO: add param description.
       * @param {Function} callback - TODO: add param description.
       * @returns {undefined}
       */
      log(info, callback) {
        setImmediate(() => this.emit("logged", info));
        if (this.stderrLevels[info[LEVEL]]) {
          if (console._stderr) {
            console._stderr.write(`${info[MESSAGE]}${this.eol}`);
          } else {
            console.error(info[MESSAGE]);
          }
          if (callback) {
            callback();
          }
          return;
        } else if (this.consoleWarnLevels[info[LEVEL]]) {
          if (console._stderr) {
            console._stderr.write(`${info[MESSAGE]}${this.eol}`);
          } else {
            console.warn(info[MESSAGE]);
          }
          if (callback) {
            callback();
          }
          return;
        }
        if (console._stdout) {
          console._stdout.write(`${info[MESSAGE]}${this.eol}`);
        } else {
          console.log(info[MESSAGE]);
        }
        if (callback) {
          callback();
        }
      }
      /**
       * Returns a Set-like object with strArray's elements as keys (each with the
       * value true).
       * @param {Array} strArray - Array of Set-elements as strings.
       * @param {?string} [errMsg] - Custom error message thrown on invalid input.
       * @returns {Object} - TODO: add return description.
       * @private
       */
      _stringArrayToSet(strArray, errMsg) {
        if (!strArray)
          return {};
        errMsg = errMsg || "Cannot make set from type other than Array of string elements";
        if (!Array.isArray(strArray)) {
          throw new Error(errMsg);
        }
        return strArray.reduce((set, el) => {
          if (typeof el !== "string") {
            throw new Error(errMsg);
          }
          set[el] = true;
          return set;
        }, {});
      }
    };
  }
});

// node_modules/async/internal/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/async/internal/isArrayLike.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isArrayLike;
    function isArrayLike(value) {
      return value && typeof value.length === "number" && value.length >= 0 && value.length % 1 === 0;
    }
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/initialParams.js
var require_initialParams = __commonJS({
  "node_modules/async/internal/initialParams.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(fn) {
      return function(...args) {
        var callback = args.pop();
        return fn.call(this, args, callback);
      };
    };
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/setImmediate.js
var require_setImmediate = __commonJS({
  "node_modules/async/internal/setImmediate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.fallback = fallback;
    exports.wrap = wrap;
    var hasQueueMicrotask = exports.hasQueueMicrotask = typeof queueMicrotask === "function" && queueMicrotask;
    var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === "function" && setImmediate;
    var hasNextTick = exports.hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
    function fallback(fn) {
      setTimeout(fn, 0);
    }
    function wrap(defer) {
      return (fn, ...args) => defer(() => fn(...args));
    }
    var _defer;
    if (hasQueueMicrotask) {
      _defer = queueMicrotask;
    } else if (hasSetImmediate) {
      _defer = setImmediate;
    } else if (hasNextTick) {
      _defer = process.nextTick;
    } else {
      _defer = fallback;
    }
    exports.default = wrap(_defer);
  }
});

// node_modules/async/asyncify.js
var require_asyncify = __commonJS({
  "node_modules/async/asyncify.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = asyncify;
    var _initialParams = require_initialParams();
    var _initialParams2 = _interopRequireDefault(_initialParams);
    var _setImmediate = require_setImmediate();
    var _setImmediate2 = _interopRequireDefault(_setImmediate);
    var _wrapAsync = require_wrapAsync();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function asyncify(func) {
      if ((0, _wrapAsync.isAsync)(func)) {
        return function(...args) {
          const callback = args.pop();
          const promise = func.apply(this, args);
          return handlePromise(promise, callback);
        };
      }
      return (0, _initialParams2.default)(function(args, callback) {
        var result;
        try {
          result = func.apply(this, args);
        } catch (e) {
          return callback(e);
        }
        if (result && typeof result.then === "function") {
          return handlePromise(result, callback);
        } else {
          callback(null, result);
        }
      });
    }
    function handlePromise(promise, callback) {
      return promise.then((value) => {
        invokeCallback(callback, null, value);
      }, (err) => {
        invokeCallback(callback, err && err.message ? err : new Error(err));
      });
    }
    function invokeCallback(callback, error, value) {
      try {
        callback(error, value);
      } catch (err) {
        (0, _setImmediate2.default)((e) => {
          throw e;
        }, err);
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/wrapAsync.js
var require_wrapAsync = __commonJS({
  "node_modules/async/internal/wrapAsync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isAsyncIterable = exports.isAsyncGenerator = exports.isAsync = void 0;
    var _asyncify = require_asyncify();
    var _asyncify2 = _interopRequireDefault(_asyncify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isAsync(fn) {
      return fn[Symbol.toStringTag] === "AsyncFunction";
    }
    function isAsyncGenerator(fn) {
      return fn[Symbol.toStringTag] === "AsyncGenerator";
    }
    function isAsyncIterable(obj) {
      return typeof obj[Symbol.asyncIterator] === "function";
    }
    function wrapAsync(asyncFn) {
      if (typeof asyncFn !== "function")
        throw new Error("expected a function");
      return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
    }
    exports.default = wrapAsync;
    exports.isAsync = isAsync;
    exports.isAsyncGenerator = isAsyncGenerator;
    exports.isAsyncIterable = isAsyncIterable;
  }
});

// node_modules/async/internal/awaitify.js
var require_awaitify = __commonJS({
  "node_modules/async/internal/awaitify.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = awaitify;
    function awaitify(asyncFn, arity = asyncFn.length) {
      if (!arity)
        throw new Error("arity is undefined");
      function awaitable(...args) {
        if (typeof args[arity - 1] === "function") {
          return asyncFn.apply(this, args);
        }
        return new Promise((resolve4, reject) => {
          args[arity - 1] = (err, ...cbArgs) => {
            if (err)
              return reject(err);
            resolve4(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
          };
          asyncFn.apply(this, args);
        });
      }
      return awaitable;
    }
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/parallel.js
var require_parallel = __commonJS({
  "node_modules/async/internal/parallel.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = (0, _awaitify2.default)((eachfn, tasks, callback) => {
      var results = (0, _isArrayLike2.default)(tasks) ? [] : {};
      eachfn(tasks, (task, key, taskCb) => {
        (0, _wrapAsync2.default)(task)((err, ...result) => {
          if (result.length < 2) {
            [result] = result;
          }
          results[key] = result;
          taskCb(err);
        });
      }, (err) => callback(err, results));
    }, 3);
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/once.js
var require_once = __commonJS({
  "node_modules/async/internal/once.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = once;
    function once(fn) {
      function wrapper(...args) {
        if (fn === null)
          return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
      }
      Object.assign(wrapper, fn);
      return wrapper;
    }
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/getIterator.js
var require_getIterator = __commonJS({
  "node_modules/async/internal/getIterator.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(coll) {
      return coll[Symbol.iterator] && coll[Symbol.iterator]();
    };
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/iterator.js
var require_iterator = __commonJS({
  "node_modules/async/internal/iterator.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createIterator;
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _getIterator = require_getIterator();
    var _getIterator2 = _interopRequireDefault(_getIterator);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function createArrayIterator(coll) {
      var i = -1;
      var len = coll.length;
      return function next() {
        return ++i < len ? { value: coll[i], key: i } : null;
      };
    }
    function createES2015Iterator(iterator) {
      var i = -1;
      return function next() {
        var item = iterator.next();
        if (item.done)
          return null;
        i++;
        return { value: item.value, key: i };
      };
    }
    function createObjectIterator(obj) {
      var okeys = obj ? Object.keys(obj) : [];
      var i = -1;
      var len = okeys.length;
      return function next() {
        var key = okeys[++i];
        if (key === "__proto__") {
          return next();
        }
        return i < len ? { value: obj[key], key } : null;
      };
    }
    function createIterator(coll) {
      if ((0, _isArrayLike2.default)(coll)) {
        return createArrayIterator(coll);
      }
      var iterator = (0, _getIterator2.default)(coll);
      return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
    }
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/onlyOnce.js
var require_onlyOnce = __commonJS({
  "node_modules/async/internal/onlyOnce.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = onlyOnce;
    function onlyOnce(fn) {
      return function(...args) {
        if (fn === null)
          throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
      };
    }
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/breakLoop.js
var require_breakLoop = __commonJS({
  "node_modules/async/internal/breakLoop.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var breakLoop = {};
    exports.default = breakLoop;
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/asyncEachOfLimit.js
var require_asyncEachOfLimit = __commonJS({
  "node_modules/async/internal/asyncEachOfLimit.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = asyncEachOfLimit;
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function asyncEachOfLimit(generator, limit, iteratee, callback) {
      let done = false;
      let canceled = false;
      let awaiting = false;
      let running = 0;
      let idx = 0;
      function replenish() {
        if (running >= limit || awaiting || done)
          return;
        awaiting = true;
        generator.next().then(({ value, done: iterDone }) => {
          if (canceled || done)
            return;
          awaiting = false;
          if (iterDone) {
            done = true;
            if (running <= 0) {
              callback(null);
            }
            return;
          }
          running++;
          iteratee(value, idx, iterateeCallback);
          idx++;
          replenish();
        }).catch(handleError);
      }
      function iterateeCallback(err, result) {
        running -= 1;
        if (canceled)
          return;
        if (err)
          return handleError(err);
        if (err === false) {
          done = true;
          canceled = true;
          return;
        }
        if (result === _breakLoop2.default || done && running <= 0) {
          done = true;
          return callback(null);
        }
        replenish();
      }
      function handleError(err) {
        if (canceled)
          return;
        awaiting = false;
        done = true;
        callback(err);
      }
      replenish();
    }
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/eachOfLimit.js
var require_eachOfLimit = __commonJS({
  "node_modules/async/internal/eachOfLimit.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _once = require_once();
    var _once2 = _interopRequireDefault(_once);
    var _iterator = require_iterator();
    var _iterator2 = _interopRequireDefault(_iterator);
    var _onlyOnce = require_onlyOnce();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync();
    var _asyncEachOfLimit = require_asyncEachOfLimit();
    var _asyncEachOfLimit2 = _interopRequireDefault(_asyncEachOfLimit);
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = (limit) => {
      return (obj, iteratee, callback) => {
        callback = (0, _once2.default)(callback);
        if (limit <= 0) {
          throw new RangeError("concurrency limit cannot be less than 1");
        }
        if (!obj) {
          return callback(null);
        }
        if ((0, _wrapAsync.isAsyncGenerator)(obj)) {
          return (0, _asyncEachOfLimit2.default)(obj, limit, iteratee, callback);
        }
        if ((0, _wrapAsync.isAsyncIterable)(obj)) {
          return (0, _asyncEachOfLimit2.default)(obj[Symbol.asyncIterator](), limit, iteratee, callback);
        }
        var nextElem = (0, _iterator2.default)(obj);
        var done = false;
        var canceled = false;
        var running = 0;
        var looping = false;
        function iterateeCallback(err, value) {
          if (canceled)
            return;
          running -= 1;
          if (err) {
            done = true;
            callback(err);
          } else if (err === false) {
            done = true;
            canceled = true;
          } else if (value === _breakLoop2.default || done && running <= 0) {
            done = true;
            return callback(null);
          } else if (!looping) {
            replenish();
          }
        }
        function replenish() {
          looping = true;
          while (running < limit && !done) {
            var elem = nextElem();
            if (elem === null) {
              done = true;
              if (running <= 0) {
                callback(null);
              }
              return;
            }
            running += 1;
            iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
          }
          looping = false;
        }
        replenish();
      };
    };
    module2.exports = exports["default"];
  }
});

// node_modules/async/eachOfLimit.js
var require_eachOfLimit2 = __commonJS({
  "node_modules/async/eachOfLimit.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _eachOfLimit2 = require_eachOfLimit();
    var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfLimit(coll, limit, iteratee, callback) {
      return (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
    }
    exports.default = (0, _awaitify2.default)(eachOfLimit, 4);
    module2.exports = exports["default"];
  }
});

// node_modules/async/eachOfSeries.js
var require_eachOfSeries = __commonJS({
  "node_modules/async/eachOfSeries.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _eachOfLimit = require_eachOfLimit2();
    var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfSeries(coll, iteratee, callback) {
      return (0, _eachOfLimit2.default)(coll, 1, iteratee, callback);
    }
    exports.default = (0, _awaitify2.default)(eachOfSeries, 3);
    module2.exports = exports["default"];
  }
});

// node_modules/async/series.js
var require_series = __commonJS({
  "node_modules/async/series.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = series;
    var _parallel2 = require_parallel();
    var _parallel3 = _interopRequireDefault(_parallel2);
    var _eachOfSeries = require_eachOfSeries();
    var _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function series(tasks, callback) {
      return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);
    }
    module2.exports = exports["default"];
  }
});

// node_modules/winston/node_modules/readable-stream/lib/internal/streams/stream.js
var require_stream6 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/internal/streams/stream.js"(exports, module2) {
    module2.exports = require("stream");
  }
});

// node_modules/winston/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list2 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module2) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var _require = require("buffer");
    var Buffer2 = _require.Buffer;
    var _require2 = require("util");
    var inspect2 = _require2.inspect;
    var custom = inspect2 && inspect2.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module2.exports = /* @__PURE__ */ function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push2(v2) {
          var entry = {
            data: v2,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v2) {
          var entry = {
            data: v2,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join10(s) {
          if (this.length === 0)
            return "";
          var p2 = this.head;
          var ret = "" + p2.data;
          while (p2 = p2.next)
            ret += s + p2.data;
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p2 = this.head;
          var i = 0;
          while (p2) {
            copyBuffer(p2.data, ret, i);
            i += p2.data.length;
            p2 = p2.next;
          }
          return ret;
        }
        // Consumes a specified amount of bytes or characters from the buffered data.
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
        // Consumes a specified amount of characters from the buffered data.
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p2 = this.head;
          var c2 = 1;
          var ret = p2.data;
          n -= ret.length;
          while (p2 = p2.next) {
            var str = p2.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c2;
                if (p2.next)
                  this.head = p2.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p2;
                p2.data = str.slice(nb);
              }
              break;
            }
            ++c2;
          }
          this.length -= c2;
          return ret;
        }
        // Consumes a specified amount of bytes from the buffered data.
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p2 = this.head;
          var c2 = 1;
          p2.data.copy(ret);
          n -= p2.data.length;
          while (p2 = p2.next) {
            var buf = p2.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c2;
                if (p2.next)
                  this.head = p2.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p2;
                p2.data = buf.slice(nb);
              }
              break;
            }
            ++c2;
          }
          this.length -= c2;
          return ret;
        }
        // Make sure the linked list only shows the minimal necessary information.
      }, {
        key: custom,
        value: function value(_2, options) {
          return inspect2(this, _objectSpread(_objectSpread({}, options), {}, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/winston/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy2 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module2) {
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/winston/node_modules/readable-stream/errors.js
var require_errors3 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/errors.js"(exports, module2) {
    "use strict";
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      class NodeError extends Base {
        constructor(arg1, arg2, arg3) {
          super(getMessage(arg1, arg2, arg3));
        }
      }
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        const len = expected.length;
        expected = expected.map((i) => String(i));
        if (len > 2) {
          return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
        } else if (len === 2) {
          return `one of ${thing} ${expected[0]} or ${expected[1]}`;
        } else {
          return `of ${thing} ${expected[0]}`;
        }
      } else {
        return `of ${thing} ${String(expected)}`;
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      let determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      let msg;
      if (endsWith(name, " argument")) {
        msg = `The ${name} ${determiner} ${oneOf(expected, "type")}`;
      } else {
        const type = includes(name, ".") ? "property" : "argument";
        msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, "type")}`;
      }
      msg += `. Received type ${typeof actual}`;
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// node_modules/winston/node_modules/readable-stream/lib/internal/streams/state.js
var require_state2 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module2) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors3().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable2 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js"(exports, module2) {
    "use strict";
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_node()
    };
    var Stream = require_stream6();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy2();
    var _require = require_state2();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors3().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex2();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_2) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex2();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/winston/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex2 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module2) {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj)
        keys2.push(key);
      return keys2;
    };
    module2.exports = Duplex;
    var Readable = require_stream_readable2();
    var Writable = require_stream_writable2();
    require_inherits()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v2 = 0; v2 < keys.length; v2++) {
        method = keys[v2];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v2;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/winston/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream2 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module2) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors3().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// node_modules/winston/node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator2 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module2) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var finished = require_end_of_stream2();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve4 = iter[kLastResolve];
      if (resolve4 !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve4(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve4, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve4(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve4, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve4, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve4(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve4, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve4(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve4, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve4(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve4;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve4 = iterator[kLastResolve];
        if (resolve4 !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve4(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/winston/node_modules/readable-stream/lib/internal/streams/from.js
var require_from2 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/internal/streams/from.js"(exports, module2) {
    "use strict";
    function asyncGeneratorStep(gen, resolve4, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve4(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve4, reject) {
          var gen = fn.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve4, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve4, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ERR_INVALID_ARG_TYPE = require_errors3().codes.ERR_INVALID_ARG_TYPE;
    function from(Readable, iterable, opts) {
      var iterator;
      if (iterable && typeof iterable.next === "function") {
        iterator = iterable;
      } else if (iterable && iterable[Symbol.asyncIterator])
        iterator = iterable[Symbol.asyncIterator]();
      else if (iterable && iterable[Symbol.iterator])
        iterator = iterable[Symbol.iterator]();
      else
        throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
      var readable = new Readable(_objectSpread({
        objectMode: true
      }, opts));
      var reading = false;
      readable._read = function() {
        if (!reading) {
          reading = true;
          next();
        }
      };
      function next() {
        return _next2.apply(this, arguments);
      }
      function _next2() {
        _next2 = _asyncToGenerator(function* () {
          try {
            var _yield$iterator$next = yield iterator.next(), value = _yield$iterator$next.value, done = _yield$iterator$next.done;
            if (done) {
              readable.push(null);
            } else if (readable.push(yield value)) {
              next();
            } else {
              reading = false;
            }
          } catch (err) {
            readable.destroy(err);
          }
        });
        return _next2.apply(this, arguments);
      }
      return readable;
    }
    module2.exports = from;
  }
});

// node_modules/winston/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable2 = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/_stream_readable.js"(exports, module2) {
    "use strict";
    module2.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require("events").EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream6();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require("util");
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list2();
    var destroyImpl = require_destroy2();
    var _require = require_state2();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors3().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex2();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex2();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p2 = this._readableState.buffer.head;
      var content = "";
      while (p2 !== null) {
        content += decoder.write(p2.data);
        p2 = p2.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++)
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null)
        ;
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator2();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from2();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x2) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x2)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/winston/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/_stream_transform.js"(exports, module2) {
    "use strict";
    module2.exports = Transform2;
    var _require$codes = require_errors3().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex2();
    require_inherits()(Transform2, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform2(options) {
      if (!(this instanceof Transform2))
        return new Transform2(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform2.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform2.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform2.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform2.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform2.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/winston/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module2) {
    "use strict";
    module2.exports = PassThrough;
    var Transform2 = require_stream_transform();
    require_inherits()(PassThrough, Transform2);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform2.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/winston/node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/winston/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module2) {
    "use strict";
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors3().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream2();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop;
      if (typeof streams[streams.length - 1] !== "function")
        return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module2.exports = pipeline;
  }
});

// node_modules/winston/node_modules/readable-stream/readable.js
var require_readable = __commonJS({
  "node_modules/winston/node_modules/readable-stream/readable.js"(exports, module2) {
    var Stream = require("stream");
    if (process.env.READABLE_STREAM === "disable" && Stream) {
      module2.exports = Stream.Readable;
      Object.assign(module2.exports, Stream);
      module2.exports.Stream = Stream;
    } else {
      exports = module2.exports = require_stream_readable2();
      exports.Stream = Stream || exports;
      exports.Readable = exports;
      exports.Writable = require_stream_writable2();
      exports.Duplex = require_stream_duplex2();
      exports.Transform = require_stream_transform();
      exports.PassThrough = require_stream_passthrough();
      exports.finished = require_end_of_stream2();
      exports.pipeline = require_pipeline();
    }
  }
});

// node_modules/@dabh/diagnostics/diagnostics.js
var require_diagnostics = __commonJS({
  "node_modules/@dabh/diagnostics/diagnostics.js"(exports, module2) {
    var adapters = [];
    var modifiers = [];
    var logger = function devnull() {
    };
    function use(adapter) {
      if (~adapters.indexOf(adapter))
        return false;
      adapters.push(adapter);
      return true;
    }
    function set(custom) {
      logger = custom;
    }
    function enabled(namespace) {
      var async = [];
      for (var i = 0; i < adapters.length; i++) {
        if (adapters[i].async) {
          async.push(adapters[i]);
          continue;
        }
        if (adapters[i](namespace))
          return true;
      }
      if (!async.length)
        return false;
      return new Promise(function pinky(resolve4) {
        Promise.all(
          async.map(function prebind(fn) {
            return fn(namespace);
          })
        ).then(function resolved(values) {
          resolve4(values.some(Boolean));
        });
      });
    }
    function modify(fn) {
      if (~modifiers.indexOf(fn))
        return false;
      modifiers.push(fn);
      return true;
    }
    function write() {
      logger.apply(logger, arguments);
    }
    function process3(message) {
      for (var i = 0; i < modifiers.length; i++) {
        message = modifiers[i].apply(modifiers[i], arguments);
      }
      return message;
    }
    function introduce(fn, options) {
      var has = Object.prototype.hasOwnProperty;
      for (var key in options) {
        if (has.call(options, key)) {
          fn[key] = options[key];
        }
      }
      return fn;
    }
    function nope(options) {
      options.enabled = false;
      options.modify = modify;
      options.set = set;
      options.use = use;
      return introduce(function diagnopes() {
        return false;
      }, options);
    }
    function yep(options) {
      function diagnostics() {
        var args = Array.prototype.slice.call(arguments, 0);
        write.call(write, options, process3(args, options));
        return true;
      }
      options.enabled = true;
      options.modify = modify;
      options.set = set;
      options.use = use;
      return introduce(diagnostics, options);
    }
    module2.exports = function create(diagnostics) {
      diagnostics.introduce = introduce;
      diagnostics.enabled = enabled;
      diagnostics.process = process3;
      diagnostics.modify = modify;
      diagnostics.write = write;
      diagnostics.nope = nope;
      diagnostics.yep = yep;
      diagnostics.set = set;
      diagnostics.use = use;
      return diagnostics;
    };
  }
});

// node_modules/@dabh/diagnostics/node/production.js
var require_production = __commonJS({
  "node_modules/@dabh/diagnostics/node/production.js"(exports, module2) {
    var create = require_diagnostics();
    var diagnostics = create(function prod(namespace, options) {
      options = options || {};
      options.namespace = namespace;
      options.prod = true;
      options.dev = false;
      if (!(options.force || prod.force))
        return prod.nope(options);
      return prod.yep(options);
    });
    module2.exports = diagnostics;
  }
});

// node_modules/color-name/index.js
var require_color_name = __commonJS({
  "node_modules/color-name/index.js"(exports, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/is-arrayish/index.js
var require_is_arrayish = __commonJS({
  "node_modules/is-arrayish/index.js"(exports, module2) {
    module2.exports = function isArrayish(obj) {
      if (!obj || typeof obj === "string") {
        return false;
      }
      return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
    };
  }
});

// node_modules/simple-swizzle/index.js
var require_simple_swizzle = __commonJS({
  "node_modules/simple-swizzle/index.js"(exports, module2) {
    "use strict";
    var isArrayish = require_is_arrayish();
    var concat = Array.prototype.concat;
    var slice = Array.prototype.slice;
    var swizzle = module2.exports = function swizzle2(args) {
      var results = [];
      for (var i = 0, len = args.length; i < len; i++) {
        var arg = args[i];
        if (isArrayish(arg)) {
          results = concat.call(results, slice.call(arg));
        } else {
          results.push(arg);
        }
      }
      return results;
    };
    swizzle.wrap = function(fn) {
      return function() {
        return fn(swizzle(arguments));
      };
    };
  }
});

// node_modules/color-string/index.js
var require_color_string = __commonJS({
  "node_modules/color-string/index.js"(exports, module2) {
    var colorNames = require_color_name();
    var swizzle = require_simple_swizzle();
    var hasOwnProperty = Object.hasOwnProperty;
    var reverseNames = /* @__PURE__ */ Object.create(null);
    for (name in colorNames) {
      if (hasOwnProperty.call(colorNames, name)) {
        reverseNames[colorNames[name]] = name;
      }
    }
    var name;
    var cs = module2.exports = {
      to: {},
      get: {}
    };
    cs.get = function(string) {
      var prefix = string.substring(0, 3).toLowerCase();
      var val;
      var model;
      switch (prefix) {
        case "hsl":
          val = cs.get.hsl(string);
          model = "hsl";
          break;
        case "hwb":
          val = cs.get.hwb(string);
          model = "hwb";
          break;
        default:
          val = cs.get.rgb(string);
          model = "rgb";
          break;
      }
      if (!val) {
        return null;
      }
      return { model, value: val };
    };
    cs.get.rgb = function(string) {
      if (!string) {
        return null;
      }
      var abbr = /^#([a-f0-9]{3,4})$/i;
      var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
      var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
      var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
      var keyword = /^(\w+)$/;
      var rgb = [0, 0, 0, 1];
      var match;
      var i;
      var hexAlpha;
      if (match = string.match(hex)) {
        hexAlpha = match[2];
        match = match[1];
        for (i = 0; i < 3; i++) {
          var i2 = i * 2;
          rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
        }
        if (hexAlpha) {
          rgb[3] = parseInt(hexAlpha, 16) / 255;
        }
      } else if (match = string.match(abbr)) {
        match = match[1];
        hexAlpha = match[3];
        for (i = 0; i < 3; i++) {
          rgb[i] = parseInt(match[i] + match[i], 16);
        }
        if (hexAlpha) {
          rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
        }
      } else if (match = string.match(rgba)) {
        for (i = 0; i < 3; i++) {
          rgb[i] = parseInt(match[i + 1], 0);
        }
        if (match[4]) {
          if (match[5]) {
            rgb[3] = parseFloat(match[4]) * 0.01;
          } else {
            rgb[3] = parseFloat(match[4]);
          }
        }
      } else if (match = string.match(per)) {
        for (i = 0; i < 3; i++) {
          rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
        }
        if (match[4]) {
          if (match[5]) {
            rgb[3] = parseFloat(match[4]) * 0.01;
          } else {
            rgb[3] = parseFloat(match[4]);
          }
        }
      } else if (match = string.match(keyword)) {
        if (match[1] === "transparent") {
          return [0, 0, 0, 0];
        }
        if (!hasOwnProperty.call(colorNames, match[1])) {
          return null;
        }
        rgb = colorNames[match[1]];
        rgb[3] = 1;
        return rgb;
      } else {
        return null;
      }
      for (i = 0; i < 3; i++) {
        rgb[i] = clamp(rgb[i], 0, 255);
      }
      rgb[3] = clamp(rgb[3], 0, 1);
      return rgb;
    };
    cs.get.hsl = function(string) {
      if (!string) {
        return null;
      }
      var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
      var match = string.match(hsl);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h2 = (parseFloat(match[1]) % 360 + 360) % 360;
        var s = clamp(parseFloat(match[2]), 0, 100);
        var l = clamp(parseFloat(match[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h2, s, l, a];
      }
      return null;
    };
    cs.get.hwb = function(string) {
      if (!string) {
        return null;
      }
      var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
      var match = string.match(hwb);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h2 = (parseFloat(match[1]) % 360 + 360) % 360;
        var w2 = clamp(parseFloat(match[2]), 0, 100);
        var b = clamp(parseFloat(match[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h2, w2, b, a];
      }
      return null;
    };
    cs.to.hex = function() {
      var rgba = swizzle(arguments);
      return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
    };
    cs.to.rgb = function() {
      var rgba = swizzle(arguments);
      return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
    };
    cs.to.rgb.percent = function() {
      var rgba = swizzle(arguments);
      var r = Math.round(rgba[0] / 255 * 100);
      var g2 = Math.round(rgba[1] / 255 * 100);
      var b = Math.round(rgba[2] / 255 * 100);
      return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g2 + "%, " + b + "%)" : "rgba(" + r + "%, " + g2 + "%, " + b + "%, " + rgba[3] + ")";
    };
    cs.to.hsl = function() {
      var hsla = swizzle(arguments);
      return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
    };
    cs.to.hwb = function() {
      var hwba = swizzle(arguments);
      var a = "";
      if (hwba.length >= 4 && hwba[3] !== 1) {
        a = ", " + hwba[3];
      }
      return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
    };
    cs.to.keyword = function(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    };
    function clamp(num, min, max) {
      return Math.min(Math.max(min, num), max);
    }
    function hexDouble(num) {
      var str = Math.round(num).toString(16).toUpperCase();
      return str.length < 2 ? "0" + str : str;
    }
  }
});

// node_modules/color/node_modules/color-name/index.js
var require_color_name2 = __commonJS({
  "node_modules/color/node_modules/color-name/index.js"(exports, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/color/node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "node_modules/color/node_modules/color-convert/conversions.js"(exports, module2) {
    var cssKeywords = require_color_name2();
    var reverseKeywords = {};
    for (key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }
    var key;
    var convert = module2.exports = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    for (model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        channels = convert[model].channels;
        labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
    }
    var channels;
    var labels;
    var model;
    convert.rgb.hsl = function(rgb) {
      var r = rgb[0] / 255;
      var g2 = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min = Math.min(r, g2, b);
      var max = Math.max(r, g2, b);
      var delta = max - min;
      var h2;
      var s;
      var l;
      if (max === min) {
        h2 = 0;
      } else if (r === max) {
        h2 = (g2 - b) / delta;
      } else if (g2 === max) {
        h2 = 2 + (b - r) / delta;
      } else if (b === max) {
        h2 = 4 + (r - g2) / delta;
      }
      h2 = Math.min(h2 * 60, 360);
      if (h2 < 0) {
        h2 += 360;
      }
      l = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h2, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h2;
      var s;
      var r = rgb[0] / 255;
      var g2 = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v2 = Math.max(r, g2, b);
      var diff2 = v2 - Math.min(r, g2, b);
      var diffc = function(c2) {
        return (v2 - c2) / 6 / diff2 + 1 / 2;
      };
      if (diff2 === 0) {
        h2 = s = 0;
      } else {
        s = diff2 / v2;
        rdif = diffc(r);
        gdif = diffc(g2);
        bdif = diffc(b);
        if (r === v2) {
          h2 = bdif - gdif;
        } else if (g2 === v2) {
          h2 = 1 / 3 + rdif - bdif;
        } else if (b === v2) {
          h2 = 2 / 3 + gdif - rdif;
        }
        if (h2 < 0) {
          h2 += 1;
        } else if (h2 > 1) {
          h2 -= 1;
        }
      }
      return [
        h2 * 360,
        s * 100,
        v2 * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      var r = rgb[0];
      var g2 = rgb[1];
      var b = rgb[2];
      var h2 = convert.rgb.hsl(rgb)[0];
      var w2 = 1 / 255 * Math.min(r, Math.min(g2, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g2, b));
      return [h2, w2 * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      var r = rgb[0] / 255;
      var g2 = rgb[1] / 255;
      var b = rgb[2] / 255;
      var c2;
      var m2;
      var y2;
      var k2;
      k2 = Math.min(1 - r, 1 - g2, 1 - b);
      c2 = (1 - r - k2) / (1 - k2) || 0;
      m2 = (1 - g2 - k2) / (1 - k2) || 0;
      y2 = (1 - b - k2) / (1 - k2) || 0;
      return [c2 * 100, m2 * 100, y2 * 100, k2 * 100];
    };
    function comparativeDistance(x2, y2) {
      return Math.pow(x2[0] - y2[0], 2) + Math.pow(x2[1] - y2[1], 2) + Math.pow(x2[2] - y2[2], 2);
    }
    convert.rgb.keyword = function(rgb) {
      var reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      var currentClosestDistance = Infinity;
      var currentClosestKeyword;
      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value = cssKeywords[keyword];
          var distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      var r = rgb[0] / 255;
      var g2 = rgb[1] / 255;
      var b = rgb[2] / 255;
      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g2 = g2 > 0.04045 ? Math.pow((g2 + 0.055) / 1.055, 2.4) : g2 / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x2 = r * 0.4124 + g2 * 0.3576 + b * 0.1805;
      var y2 = r * 0.2126 + g2 * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g2 * 0.1192 + b * 0.9505;
      return [x2 * 100, y2 * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x2 = xyz[0];
      var y2 = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x2 /= 95.047;
      y2 /= 100;
      z /= 108.883;
      x2 = x2 > 8856e-6 ? Math.pow(x2, 1 / 3) : 7.787 * x2 + 16 / 116;
      y2 = y2 > 8856e-6 ? Math.pow(y2, 1 / 3) : 7.787 * y2 + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y2 - 16;
      a = 500 * (x2 - y2);
      b = 200 * (y2 - z);
      return [l, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      var h2 = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      t1 = 2 * l - t2;
      rgb = [0, 0, 0];
      for (var i = 0; i < 3; i++) {
        t3 = h2 + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      var h2 = hsl[0];
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l, 0.01);
      var sv;
      var v2;
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v2 = (l + s) / 2;
      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h2, sv * 100, v2 * 100];
    };
    convert.hsv.rgb = function(hsv) {
      var h2 = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v2 = hsv[2] / 100;
      var hi = Math.floor(h2) % 6;
      var f = h2 - Math.floor(h2);
      var p2 = 255 * v2 * (1 - s);
      var q2 = 255 * v2 * (1 - s * f);
      var t = 255 * v2 * (1 - s * (1 - f));
      v2 *= 255;
      switch (hi) {
        case 0:
          return [v2, t, p2];
        case 1:
          return [q2, v2, p2];
        case 2:
          return [p2, v2, t];
        case 3:
          return [p2, q2, v2];
        case 4:
          return [t, p2, v2];
        case 5:
          return [v2, p2, q2];
      }
    };
    convert.hsv.hsl = function(hsv) {
      var h2 = hsv[0];
      var s = hsv[1] / 100;
      var v2 = hsv[2] / 100;
      var vmin = Math.max(v2, 0.01);
      var lmin;
      var sl;
      var l;
      l = (2 - s) * v2;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h2, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      var h2 = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i;
      var v2;
      var f;
      var n;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      i = Math.floor(6 * h2);
      v2 = 1 - bl;
      f = 6 * h2 - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      n = wh + f * (v2 - wh);
      var r;
      var g2;
      var b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v2;
          g2 = n;
          b = wh;
          break;
        case 1:
          r = n;
          g2 = v2;
          b = wh;
          break;
        case 2:
          r = wh;
          g2 = v2;
          b = n;
          break;
        case 3:
          r = wh;
          g2 = n;
          b = v2;
          break;
        case 4:
          r = n;
          g2 = wh;
          b = v2;
          break;
        case 5:
          r = v2;
          g2 = wh;
          b = n;
          break;
      }
      return [r * 255, g2 * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      var c2 = cmyk[0] / 100;
      var m2 = cmyk[1] / 100;
      var y2 = cmyk[2] / 100;
      var k2 = cmyk[3] / 100;
      var r;
      var g2;
      var b;
      r = 1 - Math.min(1, c2 * (1 - k2) + k2);
      g2 = 1 - Math.min(1, m2 * (1 - k2) + k2);
      b = 1 - Math.min(1, y2 * (1 - k2) + k2);
      return [r * 255, g2 * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      var x2 = xyz[0] / 100;
      var y2 = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g2;
      var b;
      r = x2 * 3.2406 + y2 * -1.5372 + z * -0.4986;
      g2 = x2 * -0.9689 + y2 * 1.8758 + z * 0.0415;
      b = x2 * 0.0557 + y2 * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
      g2 = g2 > 31308e-7 ? 1.055 * Math.pow(g2, 1 / 2.4) - 0.055 : g2 * 12.92;
      b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g2 = Math.min(Math.max(0, g2), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g2 * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      var x2 = xyz[0];
      var y2 = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x2 /= 95.047;
      y2 /= 100;
      z /= 108.883;
      x2 = x2 > 8856e-6 ? Math.pow(x2, 1 / 3) : 7.787 * x2 + 16 / 116;
      y2 = y2 > 8856e-6 ? Math.pow(y2, 1 / 3) : 7.787 * y2 + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y2 - 16;
      a = 500 * (x2 - y2);
      b = 200 * (y2 - z);
      return [l, a, b];
    };
    convert.lab.xyz = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var x2;
      var y2;
      var z;
      y2 = (l + 16) / 116;
      x2 = a / 500 + y2;
      z = y2 - b / 200;
      var y22 = Math.pow(y2, 3);
      var x22 = Math.pow(x2, 3);
      var z2 = Math.pow(z, 3);
      y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
      x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x2 *= 95.047;
      y2 *= 100;
      z *= 108.883;
      return [x2, y2, z];
    };
    convert.lab.lch = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var hr;
      var h2;
      var c2;
      hr = Math.atan2(b, a);
      h2 = hr * 360 / 2 / Math.PI;
      if (h2 < 0) {
        h2 += 360;
      }
      c2 = Math.sqrt(a * a + b * b);
      return [l, c2, h2];
    };
    convert.lch.lab = function(lch) {
      var l = lch[0];
      var c2 = lch[1];
      var h2 = lch[2];
      var a;
      var b;
      var hr;
      hr = h2 / 360 * 2 * Math.PI;
      a = c2 * Math.cos(hr);
      b = c2 * Math.sin(hr);
      return [l, a, b];
    };
    convert.rgb.ansi16 = function(args) {
      var r = args[0];
      var g2 = args[1];
      var b = args[2];
      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      var r = args[0];
      var g2 = args[1];
      var b = args[2];
      if (r === g2 && g2 === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      var color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g2 = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g2, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        var c2 = (args - 232) * 10 + 8;
        return [c2, c2, c2];
      }
      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g2 = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g2, b];
    };
    convert.rgb.hex = function(args) {
      var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      var colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map(function(char) {
          return char + char;
        }).join("");
      }
      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 255;
      var g2 = integer >> 8 & 255;
      var b = integer & 255;
      return [r, g2, b];
    };
    convert.rgb.hcg = function(rgb) {
      var r = rgb[0] / 255;
      var g2 = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max = Math.max(Math.max(r, g2), b);
      var min = Math.min(Math.min(r, g2), b);
      var chroma = max - min;
      var grayscale;
      var hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g2 - b) / chroma % 6;
      } else if (max === g2) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g2) / chroma + 4;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var c2 = 1;
      var f = 0;
      if (l < 0.5) {
        c2 = 2 * s * l;
      } else {
        c2 = 2 * s * (1 - l);
      }
      if (c2 < 1) {
        f = (l - 0.5 * c2) / (1 - c2);
      }
      return [hsl[0], c2 * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      var s = hsv[1] / 100;
      var v2 = hsv[2] / 100;
      var c2 = s * v2;
      var f = 0;
      if (c2 < 1) {
        f = (v2 - c2) / (1 - c2);
      }
      return [hsv[0], c2 * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      var h2 = hcg[0] / 360;
      var c2 = hcg[1] / 100;
      var g2 = hcg[2] / 100;
      if (c2 === 0) {
        return [g2 * 255, g2 * 255, g2 * 255];
      }
      var pure = [0, 0, 0];
      var hi = h2 % 1 * 6;
      var v2 = hi % 1;
      var w2 = 1 - v2;
      var mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v2;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w2;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v2;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w2;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v2;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w2;
      }
      mg = (1 - c2) * g2;
      return [
        (c2 * pure[0] + mg) * 255,
        (c2 * pure[1] + mg) * 255,
        (c2 * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      var c2 = hcg[1] / 100;
      var g2 = hcg[2] / 100;
      var v2 = c2 + g2 * (1 - c2);
      var f = 0;
      if (v2 > 0) {
        f = c2 / v2;
      }
      return [hcg[0], f * 100, v2 * 100];
    };
    convert.hcg.hsl = function(hcg) {
      var c2 = hcg[1] / 100;
      var g2 = hcg[2] / 100;
      var l = g2 * (1 - c2) + 0.5 * c2;
      var s = 0;
      if (l > 0 && l < 0.5) {
        s = c2 / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c2 / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      var c2 = hcg[1] / 100;
      var g2 = hcg[2] / 100;
      var v2 = c2 + g2 * (1 - c2);
      return [hcg[0], (v2 - c2) * 100, (1 - v2) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      var w2 = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v2 = 1 - b;
      var c2 = v2 - w2;
      var g2 = 0;
      if (c2 < 1) {
        g2 = (v2 - c2) / (1 - c2);
      }
      return [hwb[0], c2 * 100, g2 * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = convert.gray.hsv = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      var val = Math.round(gray[0] / 100 * 255) & 255;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// node_modules/color/node_modules/color-convert/route.js
var require_route = __commonJS({
  "node_modules/color/node_modules/color-convert/route.js"(exports, module2) {
    var conversions = require_conversions();
    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);
      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      var path11 = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path11.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path11;
      return fn;
    }
    module2.exports = function(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);
      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// node_modules/color/node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "node_modules/color/node_modules/color-convert/index.js"(exports, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        if (typeof result === "object") {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach(function(fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module2.exports = convert;
  }
});

// node_modules/color/index.js
var require_color = __commonJS({
  "node_modules/color/index.js"(exports, module2) {
    "use strict";
    var colorString = require_color_string();
    var convert = require_color_convert();
    var _slice = [].slice;
    var skippedModels = [
      // to be honest, I don't really feel like keyword belongs in color convert, but eh.
      "keyword",
      // gray conflicts with some method names, and has its own method defined.
      "gray",
      // shouldn't really be in color-convert either...
      "hex"
    ];
    var hashedModelKeys = {};
    Object.keys(convert).forEach(function(model) {
      hashedModelKeys[_slice.call(convert[model].labels).sort().join("")] = model;
    });
    var limiters = {};
    function Color(obj, model) {
      if (!(this instanceof Color)) {
        return new Color(obj, model);
      }
      if (model && model in skippedModels) {
        model = null;
      }
      if (model && !(model in convert)) {
        throw new Error("Unknown model: " + model);
      }
      var i;
      var channels;
      if (obj == null) {
        this.model = "rgb";
        this.color = [0, 0, 0];
        this.valpha = 1;
      } else if (obj instanceof Color) {
        this.model = obj.model;
        this.color = obj.color.slice();
        this.valpha = obj.valpha;
      } else if (typeof obj === "string") {
        var result = colorString.get(obj);
        if (result === null) {
          throw new Error("Unable to parse color from string: " + obj);
        }
        this.model = result.model;
        channels = convert[this.model].channels;
        this.color = result.value.slice(0, channels);
        this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
      } else if (obj.length) {
        this.model = model || "rgb";
        channels = convert[this.model].channels;
        var newArr = _slice.call(obj, 0, channels);
        this.color = zeroArray(newArr, channels);
        this.valpha = typeof obj[channels] === "number" ? obj[channels] : 1;
      } else if (typeof obj === "number") {
        obj &= 16777215;
        this.model = "rgb";
        this.color = [
          obj >> 16 & 255,
          obj >> 8 & 255,
          obj & 255
        ];
        this.valpha = 1;
      } else {
        this.valpha = 1;
        var keys = Object.keys(obj);
        if ("alpha" in obj) {
          keys.splice(keys.indexOf("alpha"), 1);
          this.valpha = typeof obj.alpha === "number" ? obj.alpha : 0;
        }
        var hashedKeys = keys.sort().join("");
        if (!(hashedKeys in hashedModelKeys)) {
          throw new Error("Unable to parse color from object: " + JSON.stringify(obj));
        }
        this.model = hashedModelKeys[hashedKeys];
        var labels = convert[this.model].labels;
        var color = [];
        for (i = 0; i < labels.length; i++) {
          color.push(obj[labels[i]]);
        }
        this.color = zeroArray(color);
      }
      if (limiters[this.model]) {
        channels = convert[this.model].channels;
        for (i = 0; i < channels; i++) {
          var limit = limiters[this.model][i];
          if (limit) {
            this.color[i] = limit(this.color[i]);
          }
        }
      }
      this.valpha = Math.max(0, Math.min(1, this.valpha));
      if (Object.freeze) {
        Object.freeze(this);
      }
    }
    Color.prototype = {
      toString: function() {
        return this.string();
      },
      toJSON: function() {
        return this[this.model]();
      },
      string: function(places) {
        var self2 = this.model in colorString.to ? this : this.rgb();
        self2 = self2.round(typeof places === "number" ? places : 1);
        var args = self2.valpha === 1 ? self2.color : self2.color.concat(this.valpha);
        return colorString.to[self2.model](args);
      },
      percentString: function(places) {
        var self2 = this.rgb().round(typeof places === "number" ? places : 1);
        var args = self2.valpha === 1 ? self2.color : self2.color.concat(this.valpha);
        return colorString.to.rgb.percent(args);
      },
      array: function() {
        return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
      },
      object: function() {
        var result = {};
        var channels = convert[this.model].channels;
        var labels = convert[this.model].labels;
        for (var i = 0; i < channels; i++) {
          result[labels[i]] = this.color[i];
        }
        if (this.valpha !== 1) {
          result.alpha = this.valpha;
        }
        return result;
      },
      unitArray: function() {
        var rgb = this.rgb().color;
        rgb[0] /= 255;
        rgb[1] /= 255;
        rgb[2] /= 255;
        if (this.valpha !== 1) {
          rgb.push(this.valpha);
        }
        return rgb;
      },
      unitObject: function() {
        var rgb = this.rgb().object();
        rgb.r /= 255;
        rgb.g /= 255;
        rgb.b /= 255;
        if (this.valpha !== 1) {
          rgb.alpha = this.valpha;
        }
        return rgb;
      },
      round: function(places) {
        places = Math.max(places || 0, 0);
        return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
      },
      alpha: function(val) {
        if (arguments.length) {
          return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
        }
        return this.valpha;
      },
      // rgb
      red: getset("rgb", 0, maxfn(255)),
      green: getset("rgb", 1, maxfn(255)),
      blue: getset("rgb", 2, maxfn(255)),
      hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, function(val) {
        return (val % 360 + 360) % 360;
      }),
      // eslint-disable-line brace-style
      saturationl: getset("hsl", 1, maxfn(100)),
      lightness: getset("hsl", 2, maxfn(100)),
      saturationv: getset("hsv", 1, maxfn(100)),
      value: getset("hsv", 2, maxfn(100)),
      chroma: getset("hcg", 1, maxfn(100)),
      gray: getset("hcg", 2, maxfn(100)),
      white: getset("hwb", 1, maxfn(100)),
      wblack: getset("hwb", 2, maxfn(100)),
      cyan: getset("cmyk", 0, maxfn(100)),
      magenta: getset("cmyk", 1, maxfn(100)),
      yellow: getset("cmyk", 2, maxfn(100)),
      black: getset("cmyk", 3, maxfn(100)),
      x: getset("xyz", 0, maxfn(100)),
      y: getset("xyz", 1, maxfn(100)),
      z: getset("xyz", 2, maxfn(100)),
      l: getset("lab", 0, maxfn(100)),
      a: getset("lab", 1),
      b: getset("lab", 2),
      keyword: function(val) {
        if (arguments.length) {
          return new Color(val);
        }
        return convert[this.model].keyword(this.color);
      },
      hex: function(val) {
        if (arguments.length) {
          return new Color(val);
        }
        return colorString.to.hex(this.rgb().round().color);
      },
      rgbNumber: function() {
        var rgb = this.rgb().color;
        return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
      },
      luminosity: function() {
        var rgb = this.rgb().color;
        var lum = [];
        for (var i = 0; i < rgb.length; i++) {
          var chan = rgb[i] / 255;
          lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
      },
      contrast: function(color2) {
        var lum1 = this.luminosity();
        var lum2 = color2.luminosity();
        if (lum1 > lum2) {
          return (lum1 + 0.05) / (lum2 + 0.05);
        }
        return (lum2 + 0.05) / (lum1 + 0.05);
      },
      level: function(color2) {
        var contrastRatio = this.contrast(color2);
        if (contrastRatio >= 7.1) {
          return "AAA";
        }
        return contrastRatio >= 4.5 ? "AA" : "";
      },
      isDark: function() {
        var rgb = this.rgb().color;
        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
        return yiq < 128;
      },
      isLight: function() {
        return !this.isDark();
      },
      negate: function() {
        var rgb = this.rgb();
        for (var i = 0; i < 3; i++) {
          rgb.color[i] = 255 - rgb.color[i];
        }
        return rgb;
      },
      lighten: function(ratio) {
        var hsl = this.hsl();
        hsl.color[2] += hsl.color[2] * ratio;
        return hsl;
      },
      darken: function(ratio) {
        var hsl = this.hsl();
        hsl.color[2] -= hsl.color[2] * ratio;
        return hsl;
      },
      saturate: function(ratio) {
        var hsl = this.hsl();
        hsl.color[1] += hsl.color[1] * ratio;
        return hsl;
      },
      desaturate: function(ratio) {
        var hsl = this.hsl();
        hsl.color[1] -= hsl.color[1] * ratio;
        return hsl;
      },
      whiten: function(ratio) {
        var hwb = this.hwb();
        hwb.color[1] += hwb.color[1] * ratio;
        return hwb;
      },
      blacken: function(ratio) {
        var hwb = this.hwb();
        hwb.color[2] += hwb.color[2] * ratio;
        return hwb;
      },
      grayscale: function() {
        var rgb = this.rgb().color;
        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        return Color.rgb(val, val, val);
      },
      fade: function(ratio) {
        return this.alpha(this.valpha - this.valpha * ratio);
      },
      opaquer: function(ratio) {
        return this.alpha(this.valpha + this.valpha * ratio);
      },
      rotate: function(degrees) {
        var hsl = this.hsl();
        var hue = hsl.color[0];
        hue = (hue + degrees) % 360;
        hue = hue < 0 ? 360 + hue : hue;
        hsl.color[0] = hue;
        return hsl;
      },
      mix: function(mixinColor, weight) {
        if (!mixinColor || !mixinColor.rgb) {
          throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
        }
        var color1 = mixinColor.rgb();
        var color2 = this.rgb();
        var p2 = weight === void 0 ? 0.5 : weight;
        var w2 = 2 * p2 - 1;
        var a = color1.alpha() - color2.alpha();
        var w1 = ((w2 * a === -1 ? w2 : (w2 + a) / (1 + w2 * a)) + 1) / 2;
        var w22 = 1 - w1;
        return Color.rgb(
          w1 * color1.red() + w22 * color2.red(),
          w1 * color1.green() + w22 * color2.green(),
          w1 * color1.blue() + w22 * color2.blue(),
          color1.alpha() * p2 + color2.alpha() * (1 - p2)
        );
      }
    };
    Object.keys(convert).forEach(function(model) {
      if (skippedModels.indexOf(model) !== -1) {
        return;
      }
      var channels = convert[model].channels;
      Color.prototype[model] = function() {
        if (this.model === model) {
          return new Color(this);
        }
        if (arguments.length) {
          return new Color(arguments, model);
        }
        var newAlpha = typeof arguments[channels] === "number" ? channels : this.valpha;
        return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
      };
      Color[model] = function(color) {
        if (typeof color === "number") {
          color = zeroArray(_slice.call(arguments), channels);
        }
        return new Color(color, model);
      };
    });
    function roundTo(num, places) {
      return Number(num.toFixed(places));
    }
    function roundToPlace(places) {
      return function(num) {
        return roundTo(num, places);
      };
    }
    function getset(model, channel, modifier) {
      model = Array.isArray(model) ? model : [model];
      model.forEach(function(m2) {
        (limiters[m2] || (limiters[m2] = []))[channel] = modifier;
      });
      model = model[0];
      return function(val) {
        var result;
        if (arguments.length) {
          if (modifier) {
            val = modifier(val);
          }
          result = this[model]();
          result.color[channel] = val;
          return result;
        }
        result = this[model]().color[channel];
        if (modifier) {
          result = modifier(result);
        }
        return result;
      };
    }
    function maxfn(max) {
      return function(v2) {
        return Math.max(0, Math.min(max, v2));
      };
    }
    function assertArray(val) {
      return Array.isArray(val) ? val : [val];
    }
    function zeroArray(arr, length) {
      for (var i = 0; i < length; i++) {
        if (typeof arr[i] !== "number") {
          arr[i] = 0;
        }
      }
      return arr;
    }
    module2.exports = Color;
  }
});

// node_modules/text-hex/index.js
var require_text_hex = __commonJS({
  "node_modules/text-hex/index.js"(exports, module2) {
    "use strict";
    module2.exports = function hex(str) {
      for (var i = 0, hash = 0; i < str.length; hash = str.charCodeAt(i++) + ((hash << 5) - hash))
        ;
      var color = Math.floor(
        Math.abs(
          Math.sin(hash) * 1e4 % 1 * 16777216
        )
      ).toString(16);
      return "#" + Array(6 - color.length + 1).join("0") + color;
    };
  }
});

// node_modules/colorspace/index.js
var require_colorspace = __commonJS({
  "node_modules/colorspace/index.js"(exports, module2) {
    "use strict";
    var color = require_color();
    var hex = require_text_hex();
    module2.exports = function colorspace(namespace, delimiter) {
      var split = namespace.split(delimiter || ":");
      var base = hex(split[0]);
      if (!split.length)
        return base;
      for (var i = 0, l = split.length - 1; i < l; i++) {
        base = color(base).mix(color(hex(split[i + 1]))).saturate(1).hex();
      }
      return base;
    };
  }
});

// node_modules/kuler/index.js
var require_kuler = __commonJS({
  "node_modules/kuler/index.js"(exports, module2) {
    "use strict";
    function Kuler(text, color) {
      if (color)
        return new Kuler(text).style(color);
      if (!(this instanceof Kuler))
        return new Kuler(text);
      this.text = text;
    }
    Kuler.prototype.prefix = "\x1B[";
    Kuler.prototype.suffix = "m";
    Kuler.prototype.hex = function hex(color) {
      color = color[0] === "#" ? color.substring(1) : color;
      if (color.length === 3) {
        color = color.split("");
        color[5] = color[2];
        color[4] = color[2];
        color[3] = color[1];
        color[2] = color[1];
        color[1] = color[0];
        color = color.join("");
      }
      var r = color.substring(0, 2), g2 = color.substring(2, 4), b = color.substring(4, 6);
      return [parseInt(r, 16), parseInt(g2, 16), parseInt(b, 16)];
    };
    Kuler.prototype.rgb = function rgb(r, g2, b) {
      var red = r / 255 * 5, green = g2 / 255 * 5, blue = b / 255 * 5;
      return this.ansi(red, green, blue);
    };
    Kuler.prototype.ansi = function ansi(r, g2, b) {
      var red = Math.round(r), green = Math.round(g2), blue = Math.round(b);
      return 16 + red * 36 + green * 6 + blue;
    };
    Kuler.prototype.reset = function reset() {
      return this.prefix + "39;49" + this.suffix;
    };
    Kuler.prototype.style = function style(color) {
      return this.prefix + "38;5;" + this.rgb.apply(this, this.hex(color)) + this.suffix + this.text + this.reset();
    };
    module2.exports = Kuler;
  }
});

// node_modules/@dabh/diagnostics/modifiers/namespace-ansi.js
var require_namespace_ansi = __commonJS({
  "node_modules/@dabh/diagnostics/modifiers/namespace-ansi.js"(exports, module2) {
    var colorspace = require_colorspace();
    var kuler = require_kuler();
    module2.exports = function ansiModifier(args, options) {
      var namespace = options.namespace;
      var ansi = options.colors !== false ? kuler(namespace + ":", colorspace(namespace)) : namespace + ":";
      args[0] = ansi + " " + args[0];
      return args;
    };
  }
});

// node_modules/enabled/index.js
var require_enabled = __commonJS({
  "node_modules/enabled/index.js"(exports, module2) {
    "use strict";
    module2.exports = function enabled(name, variable) {
      if (!variable)
        return false;
      var variables = variable.split(/[\s,]+/), i = 0;
      for (; i < variables.length; i++) {
        variable = variables[i].replace("*", ".*?");
        if ("-" === variable.charAt(0)) {
          if (new RegExp("^" + variable.substr(1) + "$").test(name)) {
            return false;
          }
          continue;
        }
        if (new RegExp("^" + variable + "$").test(name)) {
          return true;
        }
      }
      return false;
    };
  }
});

// node_modules/@dabh/diagnostics/adapters/index.js
var require_adapters = __commonJS({
  "node_modules/@dabh/diagnostics/adapters/index.js"(exports, module2) {
    var enabled = require_enabled();
    module2.exports = function create(fn) {
      return function adapter(namespace) {
        try {
          return enabled(namespace, fn());
        } catch (e) {
        }
        return false;
      };
    };
  }
});

// node_modules/@dabh/diagnostics/adapters/process.env.js
var require_process_env = __commonJS({
  "node_modules/@dabh/diagnostics/adapters/process.env.js"(exports, module2) {
    var adapter = require_adapters();
    module2.exports = adapter(function processenv() {
      return process.env.DEBUG || process.env.DIAGNOSTICS;
    });
  }
});

// node_modules/@dabh/diagnostics/logger/console.js
var require_console2 = __commonJS({
  "node_modules/@dabh/diagnostics/logger/console.js"(exports, module2) {
    module2.exports = function(meta, messages) {
      try {
        Function.prototype.apply.call(console.log, console, messages);
      } catch (e) {
      }
    };
  }
});

// node_modules/@dabh/diagnostics/node/development.js
var require_development = __commonJS({
  "node_modules/@dabh/diagnostics/node/development.js"(exports, module2) {
    var create = require_diagnostics();
    var tty = require("tty").isatty(1);
    var diagnostics = create(function dev(namespace, options) {
      options = options || {};
      options.colors = "colors" in options ? options.colors : tty;
      options.namespace = namespace;
      options.prod = false;
      options.dev = true;
      if (!dev.enabled(namespace) && !(options.force || dev.force)) {
        return dev.nope(options);
      }
      return dev.yep(options);
    });
    diagnostics.modify(require_namespace_ansi());
    diagnostics.use(require_process_env());
    diagnostics.set(require_console2());
    module2.exports = diagnostics;
  }
});

// node_modules/@dabh/diagnostics/node/index.js
var require_node2 = __commonJS({
  "node_modules/@dabh/diagnostics/node/index.js"(exports, module2) {
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_production();
    } else {
      module2.exports = require_development();
    }
  }
});

// node_modules/winston/lib/winston/tail-file.js
var require_tail_file = __commonJS({
  "node_modules/winston/lib/winston/tail-file.js"(exports, module2) {
    "use strict";
    var fs5 = require("fs");
    var { StringDecoder } = require("string_decoder");
    var { Stream } = require_readable();
    function noop() {
    }
    module2.exports = (options, iter) => {
      const buffer = Buffer.alloc(64 * 1024);
      const decode = new StringDecoder("utf8");
      const stream = new Stream();
      let buff = "";
      let pos = 0;
      let row = 0;
      if (options.start === -1) {
        delete options.start;
      }
      stream.readable = true;
      stream.destroy = () => {
        stream.destroyed = true;
        stream.emit("end");
        stream.emit("close");
      };
      fs5.open(options.file, "a+", "0644", (err, fd) => {
        if (err) {
          if (!iter) {
            stream.emit("error", err);
          } else {
            iter(err);
          }
          stream.destroy();
          return;
        }
        (function read() {
          if (stream.destroyed) {
            fs5.close(fd, noop);
            return;
          }
          return fs5.read(fd, buffer, 0, buffer.length, pos, (error, bytes) => {
            if (error) {
              if (!iter) {
                stream.emit("error", error);
              } else {
                iter(error);
              }
              stream.destroy();
              return;
            }
            if (!bytes) {
              if (buff) {
                if (options.start == null || row > options.start) {
                  if (!iter) {
                    stream.emit("line", buff);
                  } else {
                    iter(null, buff);
                  }
                }
                row++;
                buff = "";
              }
              return setTimeout(read, 1e3);
            }
            let data = decode.write(buffer.slice(0, bytes));
            if (!iter) {
              stream.emit("data", data);
            }
            data = (buff + data).split(/\n+/);
            const l = data.length - 1;
            let i = 0;
            for (; i < l; i++) {
              if (options.start == null || row > options.start) {
                if (!iter) {
                  stream.emit("line", data[i]);
                } else {
                  iter(null, data[i]);
                }
              }
              row++;
            }
            buff = data[l];
            pos += bytes;
            return read();
          });
        })();
      });
      if (!iter) {
        return stream;
      }
      return stream.destroy;
    };
  }
});

// node_modules/winston/lib/winston/transports/file.js
var require_file = __commonJS({
  "node_modules/winston/lib/winston/transports/file.js"(exports, module2) {
    "use strict";
    var fs5 = require("fs");
    var path11 = require("path");
    var asyncSeries = require_series();
    var zlib = require("zlib");
    var { MESSAGE } = require_triple_beam();
    var { Stream, PassThrough } = require_readable();
    var TransportStream = require_winston_transport();
    var debug = require_node2()("winston:file");
    var os = require("os");
    var tailFile = require_tail_file();
    module2.exports = class File extends TransportStream {
      /**
       * Constructor function for the File transport object responsible for
       * persisting log messages and metadata to one or more files.
       * @param {Object} options - Options for this instance.
       */
      constructor(options = {}) {
        super(options);
        this.name = options.name || "file";
        function throwIf(target, ...args) {
          args.slice(1).forEach((name) => {
            if (options[name]) {
              throw new Error(`Cannot set ${name} and ${target} together`);
            }
          });
        }
        this._stream = new PassThrough();
        this._stream.setMaxListeners(30);
        this._onError = this._onError.bind(this);
        if (options.filename || options.dirname) {
          throwIf("filename or dirname", "stream");
          this._basename = this.filename = options.filename ? path11.basename(options.filename) : "winston.log";
          this.dirname = options.dirname || path11.dirname(options.filename);
          this.options = options.options || { flags: "a" };
        } else if (options.stream) {
          console.warn("options.stream will be removed in winston@4. Use winston.transports.Stream");
          throwIf("stream", "filename", "maxsize");
          this._dest = this._stream.pipe(this._setupStream(options.stream));
          this.dirname = path11.dirname(this._dest.path);
        } else {
          throw new Error("Cannot log to file without filename or stream.");
        }
        this.maxsize = options.maxsize || null;
        this.rotationFormat = options.rotationFormat || false;
        this.zippedArchive = options.zippedArchive || false;
        this.maxFiles = options.maxFiles || null;
        this.eol = typeof options.eol === "string" ? options.eol : os.EOL;
        this.tailable = options.tailable || false;
        this._size = 0;
        this._pendingSize = 0;
        this._created = 0;
        this._drain = false;
        this._opening = false;
        this._ending = false;
        if (this.dirname)
          this._createLogDirIfNotExist(this.dirname);
        this.open();
      }
      finishIfEnding() {
        if (this._ending) {
          if (this._opening) {
            this.once("open", () => {
              this._stream.once("finish", () => this.emit("finish"));
              setImmediate(() => this._stream.end());
            });
          } else {
            this._stream.once("finish", () => this.emit("finish"));
            setImmediate(() => this._stream.end());
          }
        }
      }
      /**
       * Core logging method exposed to Winston. Metadata is optional.
       * @param {Object} info - TODO: add param description.
       * @param {Function} callback - TODO: add param description.
       * @returns {undefined}
       */
      log(info, callback = () => {
      }) {
        if (this.silent) {
          callback();
          return true;
        }
        if (this._drain) {
          this._stream.once("drain", () => {
            this._drain = false;
            this.log(info, callback);
          });
          return;
        }
        if (this._rotate) {
          this._stream.once("rotate", () => {
            this._rotate = false;
            this.log(info, callback);
          });
          return;
        }
        const output = `${info[MESSAGE]}${this.eol}`;
        const bytes = Buffer.byteLength(output);
        function logged() {
          this._size += bytes;
          this._pendingSize -= bytes;
          debug("logged %s %s", this._size, output);
          this.emit("logged", info);
          if (this._rotate) {
            return;
          }
          if (this._opening) {
            return;
          }
          if (!this._needsNewFile()) {
            return;
          }
          this._rotate = true;
          this._endStream(() => this._rotateFile());
        }
        this._pendingSize += bytes;
        if (this._opening && !this.rotatedWhileOpening && this._needsNewFile(this._size + this._pendingSize)) {
          this.rotatedWhileOpening = true;
        }
        const written = this._stream.write(output, logged.bind(this));
        if (!written) {
          this._drain = true;
          this._stream.once("drain", () => {
            this._drain = false;
            callback();
          });
        } else {
          callback();
        }
        debug("written", written, this._drain);
        this.finishIfEnding();
        return written;
      }
      /**
       * Query the transport. Options object is optional.
       * @param {Object} options - Loggly-like query options for this instance.
       * @param {function} callback - Continuation to respond to when complete.
       * TODO: Refactor me.
       */
      query(options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        options = normalizeQuery(options);
        const file = path11.join(this.dirname, this.filename);
        let buff = "";
        let results = [];
        let row = 0;
        const stream = fs5.createReadStream(file, {
          encoding: "utf8"
        });
        stream.on("error", (err) => {
          if (stream.readable) {
            stream.destroy();
          }
          if (!callback) {
            return;
          }
          return err.code !== "ENOENT" ? callback(err) : callback(null, results);
        });
        stream.on("data", (data) => {
          data = (buff + data).split(/\n+/);
          const l = data.length - 1;
          let i = 0;
          for (; i < l; i++) {
            if (!options.start || row >= options.start) {
              add(data[i]);
            }
            row++;
          }
          buff = data[l];
        });
        stream.on("close", () => {
          if (buff) {
            add(buff, true);
          }
          if (options.order === "desc") {
            results = results.reverse();
          }
          if (callback)
            callback(null, results);
        });
        function add(buff2, attempt) {
          try {
            const log = JSON.parse(buff2);
            if (check(log)) {
              push2(log);
            }
          } catch (e) {
            if (!attempt) {
              stream.emit("error", e);
            }
          }
        }
        function push2(log) {
          if (options.rows && results.length >= options.rows && options.order !== "desc") {
            if (stream.readable) {
              stream.destroy();
            }
            return;
          }
          if (options.fields) {
            log = options.fields.reduce((obj, key) => {
              obj[key] = log[key];
              return obj;
            }, {});
          }
          if (options.order === "desc") {
            if (results.length >= options.rows) {
              results.shift();
            }
          }
          results.push(log);
        }
        function check(log) {
          if (!log) {
            return;
          }
          if (typeof log !== "object") {
            return;
          }
          const time = new Date(log.timestamp);
          if (options.from && time < options.from || options.until && time > options.until || options.level && options.level !== log.level) {
            return;
          }
          return true;
        }
        function normalizeQuery(options2) {
          options2 = options2 || {};
          options2.rows = options2.rows || options2.limit || 10;
          options2.start = options2.start || 0;
          options2.until = options2.until || /* @__PURE__ */ new Date();
          if (typeof options2.until !== "object") {
            options2.until = new Date(options2.until);
          }
          options2.from = options2.from || options2.until - 24 * 60 * 60 * 1e3;
          if (typeof options2.from !== "object") {
            options2.from = new Date(options2.from);
          }
          options2.order = options2.order || "desc";
          return options2;
        }
      }
      /**
       * Returns a log stream for this transport. Options object is optional.
       * @param {Object} options - Stream options for this instance.
       * @returns {Stream} - TODO: add return description.
       * TODO: Refactor me.
       */
      stream(options = {}) {
        const file = path11.join(this.dirname, this.filename);
        const stream = new Stream();
        const tail = {
          file,
          start: options.start
        };
        stream.destroy = tailFile(tail, (err, line) => {
          if (err) {
            return stream.emit("error", err);
          }
          try {
            stream.emit("data", line);
            line = JSON.parse(line);
            stream.emit("log", line);
          } catch (e) {
            stream.emit("error", e);
          }
        });
        return stream;
      }
      /**
       * Checks to see the filesize of.
       * @returns {undefined}
       */
      open() {
        if (!this.filename)
          return;
        if (this._opening)
          return;
        this._opening = true;
        this.stat((err, size) => {
          if (err) {
            return this.emit("error", err);
          }
          debug("stat done: %s { size: %s }", this.filename, size);
          this._size = size;
          this._dest = this._createStream(this._stream);
          this._opening = false;
          this.once("open", () => {
            if (this._stream.eventNames().includes("rotate")) {
              this._stream.emit("rotate");
            } else {
              this._rotate = false;
            }
          });
        });
      }
      /**
       * Stat the file and assess information in order to create the proper stream.
       * @param {function} callback - TODO: add param description.
       * @returns {undefined}
       */
      stat(callback) {
        const target = this._getFile();
        const fullpath = path11.join(this.dirname, target);
        fs5.stat(fullpath, (err, stat) => {
          if (err && err.code === "ENOENT") {
            debug("ENOENT\xA0ok", fullpath);
            this.filename = target;
            return callback(null, 0);
          }
          if (err) {
            debug(`err ${err.code} ${fullpath}`);
            return callback(err);
          }
          if (!stat || this._needsNewFile(stat.size)) {
            return this._incFile(() => this.stat(callback));
          }
          this.filename = target;
          callback(null, stat.size);
        });
      }
      /**
       * Closes the stream associated with this instance.
       * @param {function} cb - TODO: add param description.
       * @returns {undefined}
       */
      close(cb) {
        if (!this._stream) {
          return;
        }
        this._stream.end(() => {
          if (cb) {
            cb();
          }
          this.emit("flush");
          this.emit("closed");
        });
      }
      /**
       * TODO: add method description.
       * @param {number} size - TODO: add param description.
       * @returns {undefined}
       */
      _needsNewFile(size) {
        size = size || this._size;
        return this.maxsize && size >= this.maxsize;
      }
      /**
       * TODO: add method description.
       * @param {Error} err - TODO: add param description.
       * @returns {undefined}
       */
      _onError(err) {
        this.emit("error", err);
      }
      /**
       * TODO: add method description.
       * @param {Stream} stream - TODO: add param description.
       * @returns {mixed} - TODO: add return description.
       */
      _setupStream(stream) {
        stream.on("error", this._onError);
        return stream;
      }
      /**
       * TODO: add method description.
       * @param {Stream} stream - TODO: add param description.
       * @returns {mixed} - TODO: add return description.
       */
      _cleanupStream(stream) {
        stream.removeListener("error", this._onError);
        stream.destroy();
        return stream;
      }
      /**
       * TODO: add method description.
       */
      _rotateFile() {
        this._incFile(() => this.open());
      }
      /**
       * Unpipe from the stream that has been marked as full and end it so it
       * flushes to disk.
       *
       * @param {function} callback - Callback for when the current file has closed.
       * @private
       */
      _endStream(callback = () => {
      }) {
        if (this._dest) {
          this._stream.unpipe(this._dest);
          this._dest.end(() => {
            this._cleanupStream(this._dest);
            callback();
          });
        } else {
          callback();
        }
      }
      /**
       * Returns the WritableStream for the active file on this instance. If we
       * should gzip the file then a zlib stream is returned.
       *
       * @param {ReadableStream} source – PassThrough to pipe to the file when open.
       * @returns {WritableStream} Stream that writes to disk for the active file.
       */
      _createStream(source) {
        const fullpath = path11.join(this.dirname, this.filename);
        debug("create stream start", fullpath, this.options);
        const dest = fs5.createWriteStream(fullpath, this.options).on("error", (err) => debug(err)).on("close", () => debug("close", dest.path, dest.bytesWritten)).on("open", () => {
          debug("file open ok", fullpath);
          this.emit("open", fullpath);
          source.pipe(dest);
          if (this.rotatedWhileOpening) {
            this._stream = new PassThrough();
            this._stream.setMaxListeners(30);
            this._rotateFile();
            this.rotatedWhileOpening = false;
            this._cleanupStream(dest);
            source.end();
          }
        });
        debug("create stream ok", fullpath);
        if (this.zippedArchive) {
          const gzip = zlib.createGzip();
          gzip.pipe(dest);
          return gzip;
        }
        return dest;
      }
      /**
       * TODO: add method description.
       * @param {function} callback - TODO: add param description.
       * @returns {undefined}
       */
      _incFile(callback) {
        debug("_incFile", this.filename);
        const ext = path11.extname(this._basename);
        const basename = path11.basename(this._basename, ext);
        if (!this.tailable) {
          this._created += 1;
          this._checkMaxFilesIncrementing(ext, basename, callback);
        } else {
          this._checkMaxFilesTailable(ext, basename, callback);
        }
      }
      /**
       * Gets the next filename to use for this instance in the case that log
       * filesizes are being capped.
       * @returns {string} - TODO: add return description.
       * @private
       */
      _getFile() {
        const ext = path11.extname(this._basename);
        const basename = path11.basename(this._basename, ext);
        const isRotation = this.rotationFormat ? this.rotationFormat() : this._created;
        const target = !this.tailable && this._created ? `${basename}${isRotation}${ext}` : `${basename}${ext}`;
        return this.zippedArchive && !this.tailable ? `${target}.gz` : target;
      }
      /**
       * Increment the number of files created or checked by this instance.
       * @param {mixed} ext - TODO: add param description.
       * @param {mixed} basename - TODO: add param description.
       * @param {mixed} callback - TODO: add param description.
       * @returns {undefined}
       * @private
       */
      _checkMaxFilesIncrementing(ext, basename, callback) {
        if (!this.maxFiles || this._created < this.maxFiles) {
          return setImmediate(callback);
        }
        const oldest = this._created - this.maxFiles;
        const isOldest = oldest !== 0 ? oldest : "";
        const isZipped = this.zippedArchive ? ".gz" : "";
        const filePath = `${basename}${isOldest}${ext}${isZipped}`;
        const target = path11.join(this.dirname, filePath);
        fs5.unlink(target, callback);
      }
      /**
       * Roll files forward based on integer, up to maxFiles. e.g. if base if
       * file.log and it becomes oversized, roll to file1.log, and allow file.log
       * to be re-used. If file is oversized again, roll file1.log to file2.log,
       * roll file.log to file1.log, and so on.
       * @param {mixed} ext - TODO: add param description.
       * @param {mixed} basename - TODO: add param description.
       * @param {mixed} callback - TODO: add param description.
       * @returns {undefined}
       * @private
       */
      _checkMaxFilesTailable(ext, basename, callback) {
        const tasks = [];
        if (!this.maxFiles) {
          return;
        }
        const isZipped = this.zippedArchive ? ".gz" : "";
        for (let x2 = this.maxFiles - 1; x2 > 1; x2--) {
          tasks.push(function(i, cb) {
            let fileName = `${basename}${i - 1}${ext}${isZipped}`;
            const tmppath = path11.join(this.dirname, fileName);
            fs5.exists(tmppath, (exists) => {
              if (!exists) {
                return cb(null);
              }
              fileName = `${basename}${i}${ext}${isZipped}`;
              fs5.rename(tmppath, path11.join(this.dirname, fileName), cb);
            });
          }.bind(this, x2));
        }
        asyncSeries(tasks, () => {
          fs5.rename(
            path11.join(this.dirname, `${basename}${ext}`),
            path11.join(this.dirname, `${basename}1${ext}${isZipped}`),
            callback
          );
        });
      }
      _createLogDirIfNotExist(dirPath) {
        if (!fs5.existsSync(dirPath)) {
          fs5.mkdirSync(dirPath, { recursive: true });
        }
      }
    };
  }
});

// node_modules/winston/lib/winston/transports/http.js
var require_http = __commonJS({
  "node_modules/winston/lib/winston/transports/http.js"(exports, module2) {
    "use strict";
    var http = require("http");
    var https = require("https");
    var { Stream } = require_readable();
    var TransportStream = require_winston_transport();
    var jsonStringify = require_safe_stable_stringify();
    module2.exports = class Http extends TransportStream {
      /**
       * Constructor function for the Http transport object responsible for
       * persisting log messages and metadata to a terminal or TTY.
       * @param {!Object} [options={}] - Options for this instance.
       */
      // eslint-disable-next-line max-statements
      constructor(options = {}) {
        super(options);
        this.options = options;
        this.name = options.name || "http";
        this.ssl = !!options.ssl;
        this.host = options.host || "localhost";
        this.port = options.port;
        this.auth = options.auth;
        this.path = options.path || "";
        this.agent = options.agent;
        this.headers = options.headers || {};
        this.headers["content-type"] = "application/json";
        this.batch = options.batch || false;
        this.batchInterval = options.batchInterval || 5e3;
        this.batchCount = options.batchCount || 10;
        this.batchOptions = [];
        this.batchTimeoutID = -1;
        this.batchCallback = {};
        if (!this.port) {
          this.port = this.ssl ? 443 : 80;
        }
      }
      /**
       * Core logging method exposed to Winston.
       * @param {Object} info - TODO: add param description.
       * @param {function} callback - TODO: add param description.
       * @returns {undefined}
       */
      log(info, callback) {
        this._request(info, null, null, (err, res) => {
          if (res && res.statusCode !== 200) {
            err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);
          }
          if (err) {
            this.emit("warn", err);
          } else {
            this.emit("logged", info);
          }
        });
        if (callback) {
          setImmediate(callback);
        }
      }
      /**
       * Query the transport. Options object is optional.
       * @param {Object} options -  Loggly-like query options for this instance.
       * @param {function} callback - Continuation to respond to when complete.
       * @returns {undefined}
       */
      query(options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        options = {
          method: "query",
          params: this.normalizeQuery(options)
        };
        const auth = options.params.auth || null;
        delete options.params.auth;
        const path11 = options.params.path || null;
        delete options.params.path;
        this._request(options, auth, path11, (err, res, body) => {
          if (res && res.statusCode !== 200) {
            err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);
          }
          if (err) {
            return callback(err);
          }
          if (typeof body === "string") {
            try {
              body = JSON.parse(body);
            } catch (e) {
              return callback(e);
            }
          }
          callback(null, body);
        });
      }
      /**
       * Returns a log stream for this transport. Options object is optional.
       * @param {Object} options - Stream options for this instance.
       * @returns {Stream} - TODO: add return description
       */
      stream(options = {}) {
        const stream = new Stream();
        options = {
          method: "stream",
          params: options
        };
        const path11 = options.params.path || null;
        delete options.params.path;
        const auth = options.params.auth || null;
        delete options.params.auth;
        let buff = "";
        const req = this._request(options, auth, path11);
        stream.destroy = () => req.destroy();
        req.on("data", (data) => {
          data = (buff + data).split(/\n+/);
          const l = data.length - 1;
          let i = 0;
          for (; i < l; i++) {
            try {
              stream.emit("log", JSON.parse(data[i]));
            } catch (e) {
              stream.emit("error", e);
            }
          }
          buff = data[l];
        });
        req.on("error", (err) => stream.emit("error", err));
        return stream;
      }
      /**
       * Make a request to a winstond server or any http server which can
       * handle json-rpc.
       * @param {function} options - Options to sent the request.
       * @param {Object?} auth - authentication options
       * @param {string} path - request path
       * @param {function} callback - Continuation to respond to when complete.
       */
      _request(options, auth, path11, callback) {
        options = options || {};
        auth = auth || this.auth;
        path11 = path11 || this.path || "";
        if (this.batch) {
          this._doBatch(options, callback, auth, path11);
        } else {
          this._doRequest(options, callback, auth, path11);
        }
      }
      /**
       * Send or memorize the options according to batch configuration
       * @param {function} options - Options to sent the request.
       * @param {function} callback - Continuation to respond to when complete.
       * @param {Object?} auth - authentication options
       * @param {string} path - request path
       */
      _doBatch(options, callback, auth, path11) {
        this.batchOptions.push(options);
        if (this.batchOptions.length === 1) {
          const me = this;
          this.batchCallback = callback;
          this.batchTimeoutID = setTimeout(function() {
            me.batchTimeoutID = -1;
            me._doBatchRequest(me.batchCallback, auth, path11);
          }, this.batchInterval);
        }
        if (this.batchOptions.length === this.batchCount) {
          this._doBatchRequest(this.batchCallback, auth, path11);
        }
      }
      /**
       * Initiate a request with the memorized batch options, stop the batch timeout
       * @param {function} callback - Continuation to respond to when complete.
       * @param {Object?} auth - authentication options
       * @param {string} path - request path
       */
      _doBatchRequest(callback, auth, path11) {
        if (this.batchTimeoutID > 0) {
          clearTimeout(this.batchTimeoutID);
          this.batchTimeoutID = -1;
        }
        const batchOptionsCopy = this.batchOptions.slice();
        this.batchOptions = [];
        this._doRequest(batchOptionsCopy, callback, auth, path11);
      }
      /**
       * Make a request to a winstond server or any http server which can
       * handle json-rpc.
       * @param {function} options - Options to sent the request.
       * @param {function} callback - Continuation to respond to when complete.
       * @param {Object?} auth - authentication options
       * @param {string} path - request path
       */
      _doRequest(options, callback, auth, path11) {
        const headers = Object.assign({}, this.headers);
        if (auth && auth.bearer) {
          headers.Authorization = `Bearer ${auth.bearer}`;
        }
        const req = (this.ssl ? https : http).request({
          ...this.options,
          method: "POST",
          host: this.host,
          port: this.port,
          path: `/${path11.replace(/^\//, "")}`,
          headers,
          auth: auth && auth.username && auth.password ? `${auth.username}:${auth.password}` : "",
          agent: this.agent
        });
        req.on("error", callback);
        req.on("response", (res) => res.on("end", () => callback(null, res)).resume());
        req.end(Buffer.from(jsonStringify(options, this.options.replacer), "utf8"));
      }
    };
  }
});

// node_modules/is-stream/index.js
var require_is_stream = __commonJS({
  "node_modules/is-stream/index.js"(exports, module2) {
    "use strict";
    var isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
    isStream.writable = (stream) => isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
    isStream.readable = (stream) => isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
    isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream);
    isStream.transform = (stream) => isStream.duplex(stream) && typeof stream._transform === "function";
    module2.exports = isStream;
  }
});

// node_modules/winston/lib/winston/transports/stream.js
var require_stream7 = __commonJS({
  "node_modules/winston/lib/winston/transports/stream.js"(exports, module2) {
    "use strict";
    var isStream = require_is_stream();
    var { MESSAGE } = require_triple_beam();
    var os = require("os");
    var TransportStream = require_winston_transport();
    module2.exports = class Stream extends TransportStream {
      /**
       * Constructor function for the Console transport object responsible for
       * persisting log messages and metadata to a terminal or TTY.
       * @param {!Object} [options={}] - Options for this instance.
       */
      constructor(options = {}) {
        super(options);
        if (!options.stream || !isStream(options.stream)) {
          throw new Error("options.stream is required.");
        }
        this._stream = options.stream;
        this._stream.setMaxListeners(Infinity);
        this.isObjectMode = options.stream._writableState.objectMode;
        this.eol = typeof options.eol === "string" ? options.eol : os.EOL;
      }
      /**
       * Core logging method exposed to Winston.
       * @param {Object} info - TODO: add param description.
       * @param {Function} callback - TODO: add param description.
       * @returns {undefined}
       */
      log(info, callback) {
        setImmediate(() => this.emit("logged", info));
        if (this.isObjectMode) {
          this._stream.write(info);
          if (callback) {
            callback();
          }
          return;
        }
        this._stream.write(`${info[MESSAGE]}${this.eol}`);
        if (callback) {
          callback();
        }
        return;
      }
    };
  }
});

// node_modules/winston/lib/winston/transports/index.js
var require_transports = __commonJS({
  "node_modules/winston/lib/winston/transports/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "Console", {
      configurable: true,
      enumerable: true,
      get() {
        return require_console();
      }
    });
    Object.defineProperty(exports, "File", {
      configurable: true,
      enumerable: true,
      get() {
        return require_file();
      }
    });
    Object.defineProperty(exports, "Http", {
      configurable: true,
      enumerable: true,
      get() {
        return require_http();
      }
    });
    Object.defineProperty(exports, "Stream", {
      configurable: true,
      enumerable: true,
      get() {
        return require_stream7();
      }
    });
  }
});

// node_modules/winston/lib/winston/config/index.js
var require_config2 = __commonJS({
  "node_modules/winston/lib/winston/config/index.js"(exports) {
    "use strict";
    var logform = require_logform();
    var { configs } = require_triple_beam();
    exports.cli = logform.levels(configs.cli);
    exports.npm = logform.levels(configs.npm);
    exports.syslog = logform.levels(configs.syslog);
    exports.addColors = logform.levels;
  }
});

// node_modules/async/eachOf.js
var require_eachOf = __commonJS({
  "node_modules/async/eachOf.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    var _eachOfLimit = require_eachOfLimit2();
    var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
    var _once = require_once();
    var _once2 = _interopRequireDefault(_once);
    var _onlyOnce = require_onlyOnce();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfArrayLike(coll, iteratee, callback) {
      callback = (0, _once2.default)(callback);
      var index = 0, completed = 0, { length } = coll, canceled = false;
      if (length === 0) {
        callback(null);
      }
      function iteratorCallback(err, value) {
        if (err === false) {
          canceled = true;
        }
        if (canceled === true)
          return;
        if (err) {
          callback(err);
        } else if (++completed === length || value === _breakLoop2.default) {
          callback(null);
        }
      }
      for (; index < length; index++) {
        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
      }
    }
    function eachOfGeneric(coll, iteratee, callback) {
      return (0, _eachOfLimit2.default)(coll, Infinity, iteratee, callback);
    }
    function eachOf(coll, iteratee, callback) {
      var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
      return eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
    }
    exports.default = (0, _awaitify2.default)(eachOf, 3);
    module2.exports = exports["default"];
  }
});

// node_modules/async/internal/withoutIndex.js
var require_withoutIndex = __commonJS({
  "node_modules/async/internal/withoutIndex.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _withoutIndex;
    function _withoutIndex(iteratee) {
      return (value, index, callback) => iteratee(value, callback);
    }
    module2.exports = exports["default"];
  }
});

// node_modules/async/forEach.js
var require_forEach = __commonJS({
  "node_modules/async/forEach.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _eachOf = require_eachOf();
    var _eachOf2 = _interopRequireDefault(_eachOf);
    var _withoutIndex = require_withoutIndex();
    var _withoutIndex2 = _interopRequireDefault(_withoutIndex);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachLimit(coll, iteratee, callback) {
      return (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
    }
    exports.default = (0, _awaitify2.default)(eachLimit, 3);
    module2.exports = exports["default"];
  }
});

// node_modules/fn.name/index.js
var require_fn = __commonJS({
  "node_modules/fn.name/index.js"(exports, module2) {
    "use strict";
    var toString = Object.prototype.toString;
    module2.exports = function name(fn) {
      if ("string" === typeof fn.displayName && fn.constructor.name) {
        return fn.displayName;
      } else if ("string" === typeof fn.name && fn.name) {
        return fn.name;
      }
      if ("object" === typeof fn && fn.constructor && "string" === typeof fn.constructor.name)
        return fn.constructor.name;
      var named = fn.toString(), type = toString.call(fn).slice(8, -1);
      if ("Function" === type) {
        named = named.substring(named.indexOf("(") + 1, named.indexOf(")"));
      } else {
        named = type;
      }
      return named || "anonymous";
    };
  }
});

// node_modules/one-time/index.js
var require_one_time = __commonJS({
  "node_modules/one-time/index.js"(exports, module2) {
    "use strict";
    var name = require_fn();
    module2.exports = function one(fn) {
      var called = 0, value;
      function onetime() {
        if (called)
          return value;
        called = 1;
        value = fn.apply(this, arguments);
        fn = null;
        return value;
      }
      onetime.displayName = name(fn);
      return onetime;
    };
  }
});

// node_modules/stack-trace/lib/stack-trace.js
var require_stack_trace = __commonJS({
  "node_modules/stack-trace/lib/stack-trace.js"(exports) {
    exports.get = function(belowFn) {
      var oldLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = Infinity;
      var dummyObject = {};
      var v8Handler = Error.prepareStackTrace;
      Error.prepareStackTrace = function(dummyObject2, v8StackTrace2) {
        return v8StackTrace2;
      };
      Error.captureStackTrace(dummyObject, belowFn || exports.get);
      var v8StackTrace = dummyObject.stack;
      Error.prepareStackTrace = v8Handler;
      Error.stackTraceLimit = oldLimit;
      return v8StackTrace;
    };
    exports.parse = function(err) {
      if (!err.stack) {
        return [];
      }
      var self2 = this;
      var lines = err.stack.split("\n").slice(1);
      return lines.map(function(line) {
        if (line.match(/^\s*[-]{4,}$/)) {
          return self2._createParsedCallSite({
            fileName: line,
            lineNumber: null,
            functionName: null,
            typeName: null,
            methodName: null,
            columnNumber: null,
            "native": null
          });
        }
        var lineMatch = line.match(/at (?:(.+)\s+\()?(?:(.+?):(\d+)(?::(\d+))?|([^)]+))\)?/);
        if (!lineMatch) {
          return;
        }
        var object = null;
        var method = null;
        var functionName = null;
        var typeName = null;
        var methodName = null;
        var isNative = lineMatch[5] === "native";
        if (lineMatch[1]) {
          functionName = lineMatch[1];
          var methodStart = functionName.lastIndexOf(".");
          if (functionName[methodStart - 1] == ".")
            methodStart--;
          if (methodStart > 0) {
            object = functionName.substr(0, methodStart);
            method = functionName.substr(methodStart + 1);
            var objectEnd = object.indexOf(".Module");
            if (objectEnd > 0) {
              functionName = functionName.substr(objectEnd + 1);
              object = object.substr(0, objectEnd);
            }
          }
          typeName = null;
        }
        if (method) {
          typeName = object;
          methodName = method;
        }
        if (method === "<anonymous>") {
          methodName = null;
          functionName = null;
        }
        var properties = {
          fileName: lineMatch[2] || null,
          lineNumber: parseInt(lineMatch[3], 10) || null,
          functionName,
          typeName,
          methodName,
          columnNumber: parseInt(lineMatch[4], 10) || null,
          "native": isNative
        };
        return self2._createParsedCallSite(properties);
      }).filter(function(callSite) {
        return !!callSite;
      });
    };
    function CallSite(properties) {
      for (var property in properties) {
        this[property] = properties[property];
      }
    }
    var strProperties = [
      "this",
      "typeName",
      "functionName",
      "methodName",
      "fileName",
      "lineNumber",
      "columnNumber",
      "function",
      "evalOrigin"
    ];
    var boolProperties = [
      "topLevel",
      "eval",
      "native",
      "constructor"
    ];
    strProperties.forEach(function(property) {
      CallSite.prototype[property] = null;
      CallSite.prototype["get" + property[0].toUpperCase() + property.substr(1)] = function() {
        return this[property];
      };
    });
    boolProperties.forEach(function(property) {
      CallSite.prototype[property] = false;
      CallSite.prototype["is" + property[0].toUpperCase() + property.substr(1)] = function() {
        return this[property];
      };
    });
    exports._createParsedCallSite = function(properties) {
      return new CallSite(properties);
    };
  }
});

// node_modules/winston/lib/winston/exception-stream.js
var require_exception_stream = __commonJS({
  "node_modules/winston/lib/winston/exception-stream.js"(exports, module2) {
    "use strict";
    var { Writable } = require_readable();
    module2.exports = class ExceptionStream extends Writable {
      /**
       * Constructor function for the ExceptionStream responsible for wrapping a
       * TransportStream; only allowing writes of `info` objects with
       * `info.exception` set to true.
       * @param {!TransportStream} transport - Stream to filter to exceptions
       */
      constructor(transport) {
        super({ objectMode: true });
        if (!transport) {
          throw new Error("ExceptionStream requires a TransportStream instance.");
        }
        this.handleExceptions = true;
        this.transport = transport;
      }
      /**
       * Writes the info object to our transport instance if (and only if) the
       * `exception` property is set on the info.
       * @param {mixed} info - TODO: add param description.
       * @param {mixed} enc - TODO: add param description.
       * @param {mixed} callback - TODO: add param description.
       * @returns {mixed} - TODO: add return description.
       * @private
       */
      _write(info, enc, callback) {
        if (info.exception) {
          return this.transport.log(info, callback);
        }
        callback();
        return true;
      }
    };
  }
});

// node_modules/winston/lib/winston/exception-handler.js
var require_exception_handler = __commonJS({
  "node_modules/winston/lib/winston/exception-handler.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var asyncForEach = require_forEach();
    var debug = require_node2()("winston:exception");
    var once = require_one_time();
    var stackTrace = require_stack_trace();
    var ExceptionStream = require_exception_stream();
    module2.exports = class ExceptionHandler {
      /**
       * TODO: add contructor description
       * @param {!Logger} logger - TODO: add param description
       */
      constructor(logger) {
        if (!logger) {
          throw new Error("Logger is required to handle exceptions");
        }
        this.logger = logger;
        this.handlers = /* @__PURE__ */ new Map();
      }
      /**
       * Handles `uncaughtException` events for the current process by adding any
       * handlers passed in.
       * @returns {undefined}
       */
      handle(...args) {
        args.forEach((arg) => {
          if (Array.isArray(arg)) {
            return arg.forEach((handler) => this._addHandler(handler));
          }
          this._addHandler(arg);
        });
        if (!this.catcher) {
          this.catcher = this._uncaughtException.bind(this);
          process.on("uncaughtException", this.catcher);
        }
      }
      /**
       * Removes any handlers to `uncaughtException` events for the current
       * process. This does not modify the state of the `this.handlers` set.
       * @returns {undefined}
       */
      unhandle() {
        if (this.catcher) {
          process.removeListener("uncaughtException", this.catcher);
          this.catcher = false;
          Array.from(this.handlers.values()).forEach((wrapper) => this.logger.unpipe(wrapper));
        }
      }
      /**
       * TODO: add method description
       * @param {Error} err - Error to get information about.
       * @returns {mixed} - TODO: add return description.
       */
      getAllInfo(err) {
        let message = null;
        if (err) {
          message = typeof err === "string" ? err : err.message;
        }
        return {
          error: err,
          // TODO (indexzero): how do we configure this?
          level: "error",
          message: [
            `uncaughtException: ${message || "(no error message)"}`,
            err && err.stack || "  No stack trace"
          ].join("\n"),
          stack: err && err.stack,
          exception: true,
          date: (/* @__PURE__ */ new Date()).toString(),
          process: this.getProcessInfo(),
          os: this.getOsInfo(),
          trace: this.getTrace(err)
        };
      }
      /**
       * Gets all relevant process information for the currently running process.
       * @returns {mixed} - TODO: add return description.
       */
      getProcessInfo() {
        return {
          pid: process.pid,
          uid: process.getuid ? process.getuid() : null,
          gid: process.getgid ? process.getgid() : null,
          cwd: process.cwd(),
          execPath: process.execPath,
          version: process.version,
          argv: process.argv,
          memoryUsage: process.memoryUsage()
        };
      }
      /**
       * Gets all relevant OS information for the currently running process.
       * @returns {mixed} - TODO: add return description.
       */
      getOsInfo() {
        return {
          loadavg: os.loadavg(),
          uptime: os.uptime()
        };
      }
      /**
       * Gets a stack trace for the specified error.
       * @param {mixed} err - TODO: add param description.
       * @returns {mixed} - TODO: add return description.
       */
      getTrace(err) {
        const trace = err ? stackTrace.parse(err) : stackTrace.get();
        return trace.map((site) => {
          return {
            column: site.getColumnNumber(),
            file: site.getFileName(),
            function: site.getFunctionName(),
            line: site.getLineNumber(),
            method: site.getMethodName(),
            native: site.isNative()
          };
        });
      }
      /**
       * Helper method to add a transport as an exception handler.
       * @param {Transport} handler - The transport to add as an exception handler.
       * @returns {void}
       */
      _addHandler(handler) {
        if (!this.handlers.has(handler)) {
          handler.handleExceptions = true;
          const wrapper = new ExceptionStream(handler);
          this.handlers.set(handler, wrapper);
          this.logger.pipe(wrapper);
        }
      }
      /**
       * Logs all relevant information around the `err` and exits the current
       * process.
       * @param {Error} err - Error to handle
       * @returns {mixed} - TODO: add return description.
       * @private
       */
      _uncaughtException(err) {
        const info = this.getAllInfo(err);
        const handlers = this._getExceptionHandlers();
        let doExit = typeof this.logger.exitOnError === "function" ? this.logger.exitOnError(err) : this.logger.exitOnError;
        let timeout;
        if (!handlers.length && doExit) {
          console.warn("winston: exitOnError cannot be true with no exception handlers.");
          console.warn("winston: not exiting process.");
          doExit = false;
        }
        function gracefulExit() {
          debug("doExit", doExit);
          debug("process._exiting", process._exiting);
          if (doExit && !process._exiting) {
            if (timeout) {
              clearTimeout(timeout);
            }
            process.exit(1);
          }
        }
        if (!handlers || handlers.length === 0) {
          return process.nextTick(gracefulExit);
        }
        asyncForEach(handlers, (handler, next) => {
          const done = once(next);
          const transport = handler.transport || handler;
          function onDone(event) {
            return () => {
              debug(event);
              done();
            };
          }
          transport._ending = true;
          transport.once("finish", onDone("finished"));
          transport.once("error", onDone("error"));
        }, () => doExit && gracefulExit());
        this.logger.log(info);
        if (doExit) {
          timeout = setTimeout(gracefulExit, 3e3);
        }
      }
      /**
       * Returns the list of transports and exceptionHandlers for this instance.
       * @returns {Array} - List of transports and exceptionHandlers for this
       * instance.
       * @private
       */
      _getExceptionHandlers() {
        return this.logger.transports.filter((wrap) => {
          const transport = wrap.transport || wrap;
          return transport.handleExceptions;
        });
      }
    };
  }
});

// node_modules/winston/lib/winston/rejection-handler.js
var require_rejection_handler = __commonJS({
  "node_modules/winston/lib/winston/rejection-handler.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var asyncForEach = require_forEach();
    var debug = require_node2()("winston:rejection");
    var once = require_one_time();
    var stackTrace = require_stack_trace();
    var ExceptionStream = require_exception_stream();
    module2.exports = class RejectionHandler {
      /**
       * TODO: add contructor description
       * @param {!Logger} logger - TODO: add param description
       */
      constructor(logger) {
        if (!logger) {
          throw new Error("Logger is required to handle rejections");
        }
        this.logger = logger;
        this.handlers = /* @__PURE__ */ new Map();
      }
      /**
       * Handles `unhandledRejection` events for the current process by adding any
       * handlers passed in.
       * @returns {undefined}
       */
      handle(...args) {
        args.forEach((arg) => {
          if (Array.isArray(arg)) {
            return arg.forEach((handler) => this._addHandler(handler));
          }
          this._addHandler(arg);
        });
        if (!this.catcher) {
          this.catcher = this._unhandledRejection.bind(this);
          process.on("unhandledRejection", this.catcher);
        }
      }
      /**
       * Removes any handlers to `unhandledRejection` events for the current
       * process. This does not modify the state of the `this.handlers` set.
       * @returns {undefined}
       */
      unhandle() {
        if (this.catcher) {
          process.removeListener("unhandledRejection", this.catcher);
          this.catcher = false;
          Array.from(this.handlers.values()).forEach(
            (wrapper) => this.logger.unpipe(wrapper)
          );
        }
      }
      /**
       * TODO: add method description
       * @param {Error} err - Error to get information about.
       * @returns {mixed} - TODO: add return description.
       */
      getAllInfo(err) {
        let message = null;
        if (err) {
          message = typeof err === "string" ? err : err.message;
        }
        return {
          error: err,
          // TODO (indexzero): how do we configure this?
          level: "error",
          message: [
            `unhandledRejection: ${message || "(no error message)"}`,
            err && err.stack || "  No stack trace"
          ].join("\n"),
          stack: err && err.stack,
          exception: true,
          date: (/* @__PURE__ */ new Date()).toString(),
          process: this.getProcessInfo(),
          os: this.getOsInfo(),
          trace: this.getTrace(err)
        };
      }
      /**
       * Gets all relevant process information for the currently running process.
       * @returns {mixed} - TODO: add return description.
       */
      getProcessInfo() {
        return {
          pid: process.pid,
          uid: process.getuid ? process.getuid() : null,
          gid: process.getgid ? process.getgid() : null,
          cwd: process.cwd(),
          execPath: process.execPath,
          version: process.version,
          argv: process.argv,
          memoryUsage: process.memoryUsage()
        };
      }
      /**
       * Gets all relevant OS information for the currently running process.
       * @returns {mixed} - TODO: add return description.
       */
      getOsInfo() {
        return {
          loadavg: os.loadavg(),
          uptime: os.uptime()
        };
      }
      /**
       * Gets a stack trace for the specified error.
       * @param {mixed} err - TODO: add param description.
       * @returns {mixed} - TODO: add return description.
       */
      getTrace(err) {
        const trace = err ? stackTrace.parse(err) : stackTrace.get();
        return trace.map((site) => {
          return {
            column: site.getColumnNumber(),
            file: site.getFileName(),
            function: site.getFunctionName(),
            line: site.getLineNumber(),
            method: site.getMethodName(),
            native: site.isNative()
          };
        });
      }
      /**
       * Helper method to add a transport as an exception handler.
       * @param {Transport} handler - The transport to add as an exception handler.
       * @returns {void}
       */
      _addHandler(handler) {
        if (!this.handlers.has(handler)) {
          handler.handleRejections = true;
          const wrapper = new ExceptionStream(handler);
          this.handlers.set(handler, wrapper);
          this.logger.pipe(wrapper);
        }
      }
      /**
       * Logs all relevant information around the `err` and exits the current
       * process.
       * @param {Error} err - Error to handle
       * @returns {mixed} - TODO: add return description.
       * @private
       */
      _unhandledRejection(err) {
        const info = this.getAllInfo(err);
        const handlers = this._getRejectionHandlers();
        let doExit = typeof this.logger.exitOnError === "function" ? this.logger.exitOnError(err) : this.logger.exitOnError;
        let timeout;
        if (!handlers.length && doExit) {
          console.warn("winston: exitOnError cannot be true with no rejection handlers.");
          console.warn("winston: not exiting process.");
          doExit = false;
        }
        function gracefulExit() {
          debug("doExit", doExit);
          debug("process._exiting", process._exiting);
          if (doExit && !process._exiting) {
            if (timeout) {
              clearTimeout(timeout);
            }
            process.exit(1);
          }
        }
        if (!handlers || handlers.length === 0) {
          return process.nextTick(gracefulExit);
        }
        asyncForEach(
          handlers,
          (handler, next) => {
            const done = once(next);
            const transport = handler.transport || handler;
            function onDone(event) {
              return () => {
                debug(event);
                done();
              };
            }
            transport._ending = true;
            transport.once("finish", onDone("finished"));
            transport.once("error", onDone("error"));
          },
          () => doExit && gracefulExit()
        );
        this.logger.log(info);
        if (doExit) {
          timeout = setTimeout(gracefulExit, 3e3);
        }
      }
      /**
       * Returns the list of transports and exceptionHandlers for this instance.
       * @returns {Array} - List of transports and exceptionHandlers for this
       * instance.
       * @private
       */
      _getRejectionHandlers() {
        return this.logger.transports.filter((wrap) => {
          const transport = wrap.transport || wrap;
          return transport.handleRejections;
        });
      }
    };
  }
});

// node_modules/winston/lib/winston/profiler.js
var require_profiler = __commonJS({
  "node_modules/winston/lib/winston/profiler.js"(exports, module2) {
    "use strict";
    module2.exports = class Profiler {
      /**
       * Constructor function for the Profiler instance used by
       * `Logger.prototype.startTimer`. When done is called the timer will finish
       * and log the duration.
       * @param {!Logger} logger - TODO: add param description.
       * @private
       */
      constructor(logger) {
        if (!logger) {
          throw new Error("Logger is required for profiling.");
        }
        this.logger = logger;
        this.start = Date.now();
      }
      /**
       * Ends the current timer (i.e. Profiler) instance and logs the `msg` along
       * with the duration since creation.
       * @returns {mixed} - TODO: add return description.
       * @private
       */
      done(...args) {
        if (typeof args[args.length - 1] === "function") {
          console.warn("Callback function no longer supported as of winston@3.0.0");
          args.pop();
        }
        const info = typeof args[args.length - 1] === "object" ? args.pop() : {};
        info.level = info.level || "info";
        info.durationMs = Date.now() - this.start;
        return this.logger.write(info);
      }
    };
  }
});

// node_modules/winston/lib/winston/logger.js
var require_logger = __commonJS({
  "node_modules/winston/lib/winston/logger.js"(exports, module2) {
    "use strict";
    var { Stream, Transform: Transform2 } = require_readable();
    var asyncForEach = require_forEach();
    var { LEVEL, SPLAT } = require_triple_beam();
    var isStream = require_is_stream();
    var ExceptionHandler = require_exception_handler();
    var RejectionHandler = require_rejection_handler();
    var LegacyTransportStream = require_legacy();
    var Profiler = require_profiler();
    var { warn } = require_common3();
    var config = require_config2();
    var formatRegExp = /%[scdjifoO%]/g;
    var Logger = class extends Transform2 {
      /**
       * Constructor function for the Logger object responsible for persisting log
       * messages and metadata to one or more transports.
       * @param {!Object} options - foo
       */
      constructor(options) {
        super({ objectMode: true });
        this.configure(options);
      }
      child(defaultRequestMetadata) {
        const logger = this;
        return Object.create(logger, {
          write: {
            value: function(info) {
              const infoClone = Object.assign(
                {},
                defaultRequestMetadata,
                info
              );
              if (info instanceof Error) {
                infoClone.stack = info.stack;
                infoClone.message = info.message;
              }
              logger.write(infoClone);
            }
          }
        });
      }
      /**
       * This will wholesale reconfigure this instance by:
       * 1. Resetting all transports. Older transports will be removed implicitly.
       * 2. Set all other options including levels, colors, rewriters, filters,
       *    exceptionHandlers, etc.
       * @param {!Object} options - TODO: add param description.
       * @returns {undefined}
       */
      configure({
        silent,
        format: format2,
        defaultMeta,
        levels,
        level = "info",
        exitOnError = true,
        transports: transports2,
        colors,
        emitErrs,
        formatters,
        padLevels,
        rewriters,
        stripColors,
        exceptionHandlers,
        rejectionHandlers
      } = {}) {
        if (this.transports.length) {
          this.clear();
        }
        this.silent = silent;
        this.format = format2 || this.format || require_json()();
        this.defaultMeta = defaultMeta || null;
        this.levels = levels || this.levels || config.npm.levels;
        this.level = level;
        if (this.exceptions) {
          this.exceptions.unhandle();
        }
        if (this.rejections) {
          this.rejections.unhandle();
        }
        this.exceptions = new ExceptionHandler(this);
        this.rejections = new RejectionHandler(this);
        this.profilers = {};
        this.exitOnError = exitOnError;
        if (transports2) {
          transports2 = Array.isArray(transports2) ? transports2 : [transports2];
          transports2.forEach((transport) => this.add(transport));
        }
        if (colors || emitErrs || formatters || padLevels || rewriters || stripColors) {
          throw new Error(
            [
              "{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.",
              "Use a custom winston.format(function) instead.",
              "See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"
            ].join("\n")
          );
        }
        if (exceptionHandlers) {
          this.exceptions.handle(exceptionHandlers);
        }
        if (rejectionHandlers) {
          this.rejections.handle(rejectionHandlers);
        }
      }
      isLevelEnabled(level) {
        const givenLevelValue = getLevelValue(this.levels, level);
        if (givenLevelValue === null) {
          return false;
        }
        const configuredLevelValue = getLevelValue(this.levels, this.level);
        if (configuredLevelValue === null) {
          return false;
        }
        if (!this.transports || this.transports.length === 0) {
          return configuredLevelValue >= givenLevelValue;
        }
        const index = this.transports.findIndex((transport) => {
          let transportLevelValue = getLevelValue(this.levels, transport.level);
          if (transportLevelValue === null) {
            transportLevelValue = configuredLevelValue;
          }
          return transportLevelValue >= givenLevelValue;
        });
        return index !== -1;
      }
      /* eslint-disable valid-jsdoc */
      /**
       * Ensure backwards compatibility with a `log` method
       * @param {mixed} level - Level the log message is written at.
       * @param {mixed} msg - TODO: add param description.
       * @param {mixed} meta - TODO: add param description.
       * @returns {Logger} - TODO: add return description.
       *
       * @example
       *    // Supports the existing API:
       *    logger.log('info', 'Hello world', { custom: true });
       *    logger.log('info', new Error('Yo, it\'s on fire'));
       *
       *    // Requires winston.format.splat()
       *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });
       *
       *    // And the new API with a single JSON literal:
       *    logger.log({ level: 'info', message: 'Hello world', custom: true });
       *    logger.log({ level: 'info', message: new Error('Yo, it\'s on fire') });
       *
       *    // Also requires winston.format.splat()
       *    logger.log({
       *      level: 'info',
       *      message: '%s %d%%',
       *      [SPLAT]: ['A string', 50],
       *      meta: { thisIsMeta: true }
       *    });
       *
       */
      /* eslint-enable valid-jsdoc */
      log(level, msg, ...splat) {
        if (arguments.length === 1) {
          level[LEVEL] = level.level;
          this._addDefaultMeta(level);
          this.write(level);
          return this;
        }
        if (arguments.length === 2) {
          if (msg && typeof msg === "object") {
            msg[LEVEL] = msg.level = level;
            this._addDefaultMeta(msg);
            this.write(msg);
            return this;
          }
          msg = { [LEVEL]: level, level, message: msg };
          this._addDefaultMeta(msg);
          this.write(msg);
          return this;
        }
        const [meta] = splat;
        if (typeof meta === "object" && meta !== null) {
          const tokens = msg && msg.match && msg.match(formatRegExp);
          if (!tokens) {
            const info = Object.assign({}, this.defaultMeta, meta, {
              [LEVEL]: level,
              [SPLAT]: splat,
              level,
              message: msg
            });
            if (meta.message)
              info.message = `${info.message} ${meta.message}`;
            if (meta.stack)
              info.stack = meta.stack;
            this.write(info);
            return this;
          }
        }
        this.write(Object.assign({}, this.defaultMeta, {
          [LEVEL]: level,
          [SPLAT]: splat,
          level,
          message: msg
        }));
        return this;
      }
      /**
       * Pushes data so that it can be picked up by all of our pipe targets.
       * @param {mixed} info - TODO: add param description.
       * @param {mixed} enc - TODO: add param description.
       * @param {mixed} callback - Continues stream processing.
       * @returns {undefined}
       * @private
       */
      _transform(info, enc, callback) {
        if (this.silent) {
          return callback();
        }
        if (!info[LEVEL]) {
          info[LEVEL] = info.level;
        }
        if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {
          console.error("[winston] Unknown logger level: %s", info[LEVEL]);
        }
        if (!this._readableState.pipes) {
          console.error(
            "[winston] Attempt to write logs with no transports, which can increase memory usage: %j",
            info
          );
        }
        try {
          this.push(this.format.transform(info, this.format.options));
        } finally {
          this._writableState.sync = false;
          callback();
        }
      }
      /**
       * Delays the 'finish' event until all transport pipe targets have
       * also emitted 'finish' or are already finished.
       * @param {mixed} callback - Continues stream processing.
       */
      _final(callback) {
        const transports2 = this.transports.slice();
        asyncForEach(
          transports2,
          (transport, next) => {
            if (!transport || transport.finished)
              return setImmediate(next);
            transport.once("finish", next);
            transport.end();
          },
          callback
        );
      }
      /**
       * Adds the transport to this logger instance by piping to it.
       * @param {mixed} transport - TODO: add param description.
       * @returns {Logger} - TODO: add return description.
       */
      add(transport) {
        const target = !isStream(transport) || transport.log.length > 2 ? new LegacyTransportStream({ transport }) : transport;
        if (!target._writableState || !target._writableState.objectMode) {
          throw new Error(
            "Transports must WritableStreams in objectMode. Set { objectMode: true }."
          );
        }
        this._onEvent("error", target);
        this._onEvent("warn", target);
        this.pipe(target);
        if (transport.handleExceptions) {
          this.exceptions.handle();
        }
        if (transport.handleRejections) {
          this.rejections.handle();
        }
        return this;
      }
      /**
       * Removes the transport from this logger instance by unpiping from it.
       * @param {mixed} transport - TODO: add param description.
       * @returns {Logger} - TODO: add return description.
       */
      remove(transport) {
        if (!transport)
          return this;
        let target = transport;
        if (!isStream(transport) || transport.log.length > 2) {
          target = this.transports.filter(
            (match) => match.transport === transport
          )[0];
        }
        if (target) {
          this.unpipe(target);
        }
        return this;
      }
      /**
       * Removes all transports from this logger instance.
       * @returns {Logger} - TODO: add return description.
       */
      clear() {
        this.unpipe();
        return this;
      }
      /**
       * Cleans up resources (streams, event listeners) for all transports
       * associated with this instance (if necessary).
       * @returns {Logger} - TODO: add return description.
       */
      close() {
        this.exceptions.unhandle();
        this.rejections.unhandle();
        this.clear();
        this.emit("close");
        return this;
      }
      /**
       * Sets the `target` levels specified on this instance.
       * @param {Object} Target levels to use on this instance.
       */
      setLevels() {
        warn.deprecated("setLevels");
      }
      /**
       * Queries the all transports for this instance with the specified `options`.
       * This will aggregate each transport's results into one object containing
       * a property per transport.
       * @param {Object} options - Query options for this instance.
       * @param {function} callback - Continuation to respond to when complete.
       */
      query(options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        options = options || {};
        const results = {};
        const queryObject = Object.assign({}, options.query || {});
        function queryTransport(transport, next) {
          if (options.query && typeof transport.formatQuery === "function") {
            options.query = transport.formatQuery(queryObject);
          }
          transport.query(options, (err, res) => {
            if (err) {
              return next(err);
            }
            if (typeof transport.formatResults === "function") {
              res = transport.formatResults(res, options.format);
            }
            next(null, res);
          });
        }
        function addResults(transport, next) {
          queryTransport(transport, (err, result) => {
            if (next) {
              result = err || result;
              if (result) {
                results[transport.name] = result;
              }
              next();
            }
            next = null;
          });
        }
        asyncForEach(
          this.transports.filter((transport) => !!transport.query),
          addResults,
          () => callback(null, results)
        );
      }
      /**
       * Returns a log stream for all transports. Options object is optional.
       * @param{Object} options={} - Stream options for this instance.
       * @returns {Stream} - TODO: add return description.
       */
      stream(options = {}) {
        const out = new Stream();
        const streams = [];
        out._streams = streams;
        out.destroy = () => {
          let i = streams.length;
          while (i--) {
            streams[i].destroy();
          }
        };
        this.transports.filter((transport) => !!transport.stream).forEach((transport) => {
          const str = transport.stream(options);
          if (!str) {
            return;
          }
          streams.push(str);
          str.on("log", (log) => {
            log.transport = log.transport || [];
            log.transport.push(transport.name);
            out.emit("log", log);
          });
          str.on("error", (err) => {
            err.transport = err.transport || [];
            err.transport.push(transport.name);
            out.emit("error", err);
          });
        });
        return out;
      }
      /**
       * Returns an object corresponding to a specific timing. When done is called
       * the timer will finish and log the duration. e.g.:
       * @returns {Profile} - TODO: add return description.
       * @example
       *    const timer = winston.startTimer()
       *    setTimeout(() => {
       *      timer.done({
       *        message: 'Logging message'
       *      });
       *    }, 1000);
       */
      startTimer() {
        return new Profiler(this);
      }
      /**
       * Tracks the time inbetween subsequent calls to this method with the same
       * `id` parameter. The second call to this method will log the difference in
       * milliseconds along with the message.
       * @param {string} id Unique id of the profiler
       * @returns {Logger} - TODO: add return description.
       */
      profile(id, ...args) {
        const time = Date.now();
        if (this.profilers[id]) {
          const timeEnd = this.profilers[id];
          delete this.profilers[id];
          if (typeof args[args.length - 2] === "function") {
            console.warn(
              "Callback function no longer supported as of winston@3.0.0"
            );
            args.pop();
          }
          const info = typeof args[args.length - 1] === "object" ? args.pop() : {};
          info.level = info.level || "info";
          info.durationMs = time - timeEnd;
          info.message = info.message || id;
          return this.write(info);
        }
        this.profilers[id] = time;
        return this;
      }
      /**
       * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.
       * @returns {undefined}
       * @deprecated
       */
      handleExceptions(...args) {
        console.warn(
          "Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()"
        );
        this.exceptions.handle(...args);
      }
      /**
       * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.
       * @returns {undefined}
       * @deprecated
       */
      unhandleExceptions(...args) {
        console.warn(
          "Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()"
        );
        this.exceptions.unhandle(...args);
      }
      /**
       * Throw a more meaningful deprecation notice
       * @throws {Error} - TODO: add throws description.
       */
      cli() {
        throw new Error(
          [
            "Logger.cli() was removed in winston@3.0.0",
            "Use a custom winston.formats.cli() instead.",
            "See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"
          ].join("\n")
        );
      }
      /**
       * Bubbles the `event` that occured on the specified `transport` up
       * from this instance.
       * @param {string} event - The event that occured
       * @param {Object} transport - Transport on which the event occured
       * @private
       */
      _onEvent(event, transport) {
        function transportEvent(err) {
          if (event === "error" && !this.transports.includes(transport)) {
            this.add(transport);
          }
          this.emit(event, err, transport);
        }
        if (!transport["__winston" + event]) {
          transport["__winston" + event] = transportEvent.bind(this);
          transport.on(event, transport["__winston" + event]);
        }
      }
      _addDefaultMeta(msg) {
        if (this.defaultMeta) {
          Object.assign(msg, this.defaultMeta);
        }
      }
    };
    function getLevelValue(levels, level) {
      const value = levels[level];
      if (!value && value !== 0) {
        return null;
      }
      return value;
    }
    Object.defineProperty(Logger.prototype, "transports", {
      configurable: false,
      enumerable: true,
      get() {
        const { pipes } = this._readableState;
        return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;
      }
    });
    module2.exports = Logger;
  }
});

// node_modules/winston/lib/winston/create-logger.js
var require_create_logger = __commonJS({
  "node_modules/winston/lib/winston/create-logger.js"(exports, module2) {
    "use strict";
    var { LEVEL } = require_triple_beam();
    var config = require_config2();
    var Logger = require_logger();
    var debug = require_node2()("winston:create-logger");
    function isLevelEnabledFunctionName(level) {
      return "is" + level.charAt(0).toUpperCase() + level.slice(1) + "Enabled";
    }
    module2.exports = function(opts = {}) {
      opts.levels = opts.levels || config.npm.levels;
      class DerivedLogger extends Logger {
        /**
         * Create a new class derived logger for which the levels can be attached to
         * the prototype of. This is a V8 optimization that is well know to increase
         * performance of prototype functions.
         * @param {!Object} options - Options for the created logger.
         */
        constructor(options) {
          super(options);
        }
      }
      const logger = new DerivedLogger(opts);
      Object.keys(opts.levels).forEach(function(level) {
        debug('Define prototype method for "%s"', level);
        if (level === "log") {
          console.warn('Level "log" not defined: conflicts with the method "log". Use a different level name.');
          return;
        }
        DerivedLogger.prototype[level] = function(...args) {
          const self2 = this || logger;
          if (args.length === 1) {
            const [msg] = args;
            const info = msg && msg.message && msg || { message: msg };
            info.level = info[LEVEL] = level;
            self2._addDefaultMeta(info);
            self2.write(info);
            return this || logger;
          }
          if (args.length === 0) {
            self2.log(level, "");
            return self2;
          }
          return self2.log(level, ...args);
        };
        DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function() {
          return (this || logger).isLevelEnabled(level);
        };
      });
      return logger;
    };
  }
});

// node_modules/winston/lib/winston/container.js
var require_container = __commonJS({
  "node_modules/winston/lib/winston/container.js"(exports, module2) {
    "use strict";
    var createLogger3 = require_create_logger();
    module2.exports = class Container {
      /**
       * Constructor function for the Container object responsible for managing a
       * set of `winston.Logger` instances based on string ids.
       * @param {!Object} [options={}] - Default pass-thru options for Loggers.
       */
      constructor(options = {}) {
        this.loggers = /* @__PURE__ */ new Map();
        this.options = options;
      }
      /**
       * Retrieves a `winston.Logger` instance for the specified `id`. If an
       * instance does not exist, one is created.
       * @param {!string} id - The id of the Logger to get.
       * @param {?Object} [options] - Options for the Logger instance.
       * @returns {Logger} - A configured Logger instance with a specified id.
       */
      add(id, options) {
        if (!this.loggers.has(id)) {
          options = Object.assign({}, options || this.options);
          const existing = options.transports || this.options.transports;
          if (existing) {
            options.transports = Array.isArray(existing) ? existing.slice() : [existing];
          } else {
            options.transports = [];
          }
          const logger = createLogger3(options);
          logger.on("close", () => this._delete(id));
          this.loggers.set(id, logger);
        }
        return this.loggers.get(id);
      }
      /**
       * Retreives a `winston.Logger` instance for the specified `id`. If
       * an instance does not exist, one is created.
       * @param {!string} id - The id of the Logger to get.
       * @param {?Object} [options] - Options for the Logger instance.
       * @returns {Logger} - A configured Logger instance with a specified id.
       */
      get(id, options) {
        return this.add(id, options);
      }
      /**
       * Check if the container has a logger with the id.
       * @param {?string} id - The id of the Logger instance to find.
       * @returns {boolean} - Boolean value indicating if this instance has a
       * logger with the specified `id`.
       */
      has(id) {
        return !!this.loggers.has(id);
      }
      /**
       * Closes a `Logger` instance with the specified `id` if it exists.
       * If no `id` is supplied then all Loggers are closed.
       * @param {?string} id - The id of the Logger instance to close.
       * @returns {undefined}
       */
      close(id) {
        if (id) {
          return this._removeLogger(id);
        }
        this.loggers.forEach((val, key) => this._removeLogger(key));
      }
      /**
       * Remove a logger based on the id.
       * @param {!string} id - The id of the logger to remove.
       * @returns {undefined}
       * @private
       */
      _removeLogger(id) {
        if (!this.loggers.has(id)) {
          return;
        }
        const logger = this.loggers.get(id);
        logger.close();
        this._delete(id);
      }
      /**
       * Deletes a `Logger` instance with the specified `id`.
       * @param {!string} id - The id of the Logger instance to delete from
       * container.
       * @returns {undefined}
       * @private
       */
      _delete(id) {
        this.loggers.delete(id);
      }
    };
  }
});

// node_modules/winston/lib/winston.js
var require_winston = __commonJS({
  "node_modules/winston/lib/winston.js"(exports) {
    "use strict";
    var logform = require_logform();
    var { warn } = require_common3();
    exports.version = require_package().version;
    exports.transports = require_transports();
    exports.config = require_config2();
    exports.addColors = logform.levels;
    exports.format = logform.format;
    exports.createLogger = require_create_logger();
    exports.ExceptionHandler = require_exception_handler();
    exports.RejectionHandler = require_rejection_handler();
    exports.Container = require_container();
    exports.Transport = require_winston_transport();
    exports.loggers = new exports.Container();
    var defaultLogger = exports.createLogger();
    Object.keys(exports.config.npm.levels).concat([
      "log",
      "query",
      "stream",
      "add",
      "remove",
      "clear",
      "profile",
      "startTimer",
      "handleExceptions",
      "unhandleExceptions",
      "handleRejections",
      "unhandleRejections",
      "configure",
      "child"
    ]).forEach(
      (method) => exports[method] = (...args) => defaultLogger[method](...args)
    );
    Object.defineProperty(exports, "level", {
      get() {
        return defaultLogger.level;
      },
      set(val) {
        defaultLogger.level = val;
      }
    });
    Object.defineProperty(exports, "exceptions", {
      get() {
        return defaultLogger.exceptions;
      }
    });
    ["exitOnError"].forEach((prop) => {
      Object.defineProperty(exports, prop, {
        get() {
          return defaultLogger[prop];
        },
        set(val) {
          defaultLogger[prop] = val;
        }
      });
    });
    Object.defineProperty(exports, "default", {
      get() {
        return {
          exceptionHandlers: defaultLogger.exceptionHandlers,
          rejectionHandlers: defaultLogger.rejectionHandlers,
          transports: defaultLogger.transports
        };
      }
    });
    warn.deprecated(exports, "setLevels");
    warn.forFunctions(exports, "useFormat", ["cli"]);
    warn.forProperties(exports, "useFormat", ["padLevels", "stripColors"]);
    warn.forFunctions(exports, "deprecated", [
      "addRewriter",
      "addFilter",
      "clone",
      "extend"
    ]);
    warn.forProperties(exports, "deprecated", ["emitErrs", "levelLength"]);
    warn.moved(exports, "createLogger", "Logger");
  }
});

// l10n.js
var path10 = __toESM(require("path"), 1);
var import_fs11 = require("fs");

// cli.js
var path9 = __toESM(require("path"), 1);

// node_modules/commander/esm.mjs
var import_index = __toESM(require_commander(), 1);
var {
  program,
  createCommand,
  createArgument,
  createOption,
  CommanderError,
  InvalidArgumentError,
  InvalidOptionArgumentError,
  // deprecated old name
  Command,
  Argument,
  Option,
  Help
} = import_index.default;

// ../core/src/monsterManager.js
var path4 = __toESM(require("path"), 1);
var import_words_count = __toESM(require_dist(), 1);

// ../core/src/tmManager.js
var path = __toESM(require("path"), 1);
var import_fs = require("fs");
var import_helpers = __toESM(require_helpers(), 1);

// ../core/src/schemas.js
var coreTUprops = [
  "guid",
  "nid",
  // optional opaque native id of the segment (in the original storage format)
  "seq",
  // optional sequence number to shorten guid
  "rid",
  // this is for adding context to translation (also in case of refresh job from TM)
  "sid",
  // we need sid in the target so that we can qualify repetitions
  "src",
  // TODO: deprecate src and always populate nsrc, this is only needed for debugging decoder bugs
  "nsrc",
  // we need this to support repetition leveraging (based on matching the source)
  "prj",
  // this is primarily for filtering
  "ts",
  // TODO: do we really need it in the source?
  "isSuffixPluralized"
  // TODO: change this from boolean to `pluralForm` enumeration (so it doesn't have to be a suffix)
];
var sourceTUWhitelist = /* @__PURE__ */ new Set([
  ...coreTUprops,
  "notes"
  // this is for bug fixes
]);
var targetTUWhitelist = /* @__PURE__ */ new Set([
  ...coreTUprops,
  "inflight",
  "q",
  "tgt",
  "ntgt",
  "cost",
  "jobGuid",
  "translationProvider",
  "th",
  // this is used by TOS for a translation hash to detect bug fixes vendor-side
  "rev"
  // this is used by TOS to capture reviewed words and errors found
]);

// ../core/src/tmManager.js
var TM = class {
  constructor(sourceLang, targetLang, tmPathName, configSeal, jobs2) {
    const EMPTY_TM = {
      sourceLang,
      targetLang,
      configSeal,
      jobStatus: {},
      tus: {}
    };
    this.tmPathName = tmPathName;
    if ((0, import_fs.existsSync)(tmPathName)) {
      this.tm = JSON.parse((0, import_fs.readFileSync)(tmPathName, "utf8"));
      const jobMap = Object.fromEntries(jobs2);
      const extraJobs = Object.keys(this.tm?.jobStatus ?? {}).filter((jobGuid) => !jobMap[jobGuid]);
      if (!(this.tm?.configSeal === configSeal) || extraJobs.length > 0) {
        this.tm = EMPTY_TM;
        (0, import_helpers.sharedCtx)().logger.info(`Nuking existing TM ${tmPathName}`);
      }
    } else {
      this.tm = EMPTY_TM;
    }
    this.lookUpByFlattenSrc = {};
    Object.values(this.tm.tus).forEach((tu) => this.setEntryByGuid(tu.guid, tu));
  }
  get guids() {
    return Object.keys(this.tm.tus);
  }
  getEntryByGuid(guid) {
    return this.tm.tus[guid];
  }
  setEntryByGuid(guid, entry) {
    if (!entry.guid || !Number.isInteger(entry.q) || (!Number.isInteger(entry.ts) || !(typeof entry.tgt === "string" || entry.ntgt)) && !entry.inflight) {
      throw `cannot set TM entry missing mandatory field: ${JSON.stringify(entry)}`;
    }
    const cleanedTU = import_helpers.utils.cleanupTU(entry, targetTUWhitelist);
    Object.freeze(cleanedTU);
    this.tm.tus[guid] = cleanedTU;
    const flattenSrc = cleanedTU.nsrc ? import_helpers.utils.flattenNormalizedSourceToOrdinal(cleanedTU.nsrc) : cleanedTU.src;
    this.lookUpByFlattenSrc[flattenSrc] ??= [];
    !this.lookUpByFlattenSrc[flattenSrc].includes(cleanedTU) && this.lookUpByFlattenSrc[flattenSrc].push(cleanedTU);
  }
  getAllEntriesBySrc(src) {
    const flattenSrc = Array.isArray(src) ? import_helpers.utils.flattenNormalizedSourceToOrdinal(src) : src;
    return this.lookUpByFlattenSrc[flattenSrc] || [];
  }
  getJobStatus(jobGuid) {
    return this.tm.jobStatus[jobGuid];
  }
  async commit() {
    (0, import_helpers.sharedCtx)().logger.info(`Updating ${this.tmPathName}...`);
    (0, import_fs.writeFileSync)(this.tmPathName, JSON.stringify(this.tm, null, "	"), "utf8");
  }
  processJob(jobResponse, jobRequest) {
    this.dirty = true;
    const requestedUnits = {};
    jobRequest?.tus && jobRequest.tus.forEach((tu) => requestedUnits[tu.guid] = tu);
    const { jobGuid, status: status2, inflight, tus, updatedAt, translationProvider } = jobResponse;
    if (inflight) {
      for (const guid of inflight) {
        const reqEntry = requestedUnits[guid] ?? {};
        const tmEntry = this.getEntryByGuid(guid);
        if (!tmEntry) {
          this.setEntryByGuid(guid, { ...reqEntry, q: 0, jobGuid, inflight: true });
        }
      }
    }
    if (tus) {
      for (const tu of tus) {
        const tmEntry = this.getEntryByGuid(tu.guid);
        const reqEntry = requestedUnits[tu.guid] ?? {};
        const rectifiedTU = { ...reqEntry, ...tu, jobGuid, translationProvider };
        if (!tmEntry || tmEntry.q < tu.q || tmEntry.q === tu.q && tmEntry.ts < rectifiedTU.ts) {
          this.setEntryByGuid(tu.guid, rectifiedTU);
        }
      }
    }
    this.tm.jobStatus[jobGuid] = { status: status2, updatedAt };
  }
};
var TMManager = class {
  constructor({ monsterDir, jobStore, configSeal }) {
    this.monsterDir = monsterDir;
    this.jobStore = jobStore;
    this.configSeal = configSeal;
    this.tmCache = /* @__PURE__ */ new Map();
    this.generation = (/* @__PURE__ */ new Date()).getTime();
  }
  async getTM(sourceLang, targetLang) {
    const jobs2 = (await this.jobStore.getJobStatusByLangPair(sourceLang, targetLang)).filter((e) => ["pending", "done"].includes(e[1].status));
    const tmFileName = `tmCache_${sourceLang}_${targetLang}.json`;
    let tm = this.tmCache.get(tmFileName);
    if (!tm) {
      tm = new TM(sourceLang, targetLang, path.join(this.monsterDir, tmFileName), this.configSeal, jobs2);
      this.tmCache.set(tmFileName, tm);
    }
    for (const [jobGuid, jobStat] of jobs2) {
      const jobInTM = tm.getJobStatus(jobGuid);
      if (jobStat.status === "pending" || jobInTM?.status !== jobStat.status) {
        const jobResponse = await this.jobStore.getJob(jobGuid);
        if (jobResponse.updatedAt !== jobInTM?.updatedAt) {
          (0, import_helpers.sharedCtx)().logger.info(`Applying job ${jobGuid} to the ${sourceLang} -> ${targetLang} TM...`);
          const jobRequest = await this.jobStore.getJobRequest(jobGuid);
          tm.processJob(jobResponse, jobRequest);
        }
      }
    }
    return tm;
  }
  async shutdown() {
    for (const tm of this.tmCache.values()) {
      tm.dirty && await tm.commit();
    }
  }
};

// ../core/src/sourceManager.js
var import_fs2 = require("fs");
var import_helpers2 = __toESM(require_helpers(), 1);
var SourceManager = class {
  constructor({ configSeal, contentTypes, snapStore, seqMapPath, seqThreshold }) {
    this.configSeal = configSeal;
    this.contentTypes = contentTypes;
    this.snapStore = snapStore;
    if (seqMapPath) {
      this.seqMapPath = seqMapPath;
      this.seqThreshold = seqThreshold ?? 7;
      if ((0, import_fs2.existsSync)(seqMapPath)) {
        this.seqMap = JSON.parse((0, import_fs2.readFileSync)(seqMapPath, "utf8"));
        let max = 0, min = Number.MAX_SAFE_INTEGER;
        Object.values(this.seqMap).forEach((s) => {
          s > max && (max = s);
          s < min && (min = s);
        });
        this.maxSeq = max;
        this.minSeq = min;
      } else {
        this.seqMap = {};
        this.maxSeq = 32 * 32 - 1;
        this.minSeq = 32 * 32;
      }
    }
  }
  async getResourceStatsFromAllSources() {
    (0, import_helpers2.sharedCtx)().logger.info(`Getting resource stats from all sources...`);
    const combinedStats = [];
    for (const [contentType, pipeline] of Object.entries(this.contentTypes)) {
      const stats = await pipeline.source.fetchResourceStats();
      (0, import_helpers2.sharedCtx)().logger.verbose(`Fetched resource stats for content type ${contentType}`);
      combinedStats.push(stats.map((res) => ({ ...res, contentType })));
    }
    return combinedStats.flat(1).filter((e) => (0, import_helpers2.sharedCtx)().prj === void 0 || (0, import_helpers2.sharedCtx)().prj.includes(e.prj));
  }
  async getResourceStats() {
    return this.snapStore ? this.snapStore.getResourceStats() : this.getResourceStatsFromAllSources();
  }
  // produce at least a 2-char label and try to assign shorter numbers to shorter strings
  #generateSequence(seg) {
    const seq = this.seqMap[seg.guid];
    if (seq) {
      return seq;
    } else {
      const sl = (seg.nstr?.map((e) => typeof e === "string" ? e : e.t === "x" ? "1234567" : "")?.join("") ?? seg.str).length;
      const newSeq = sl <= this.seqThreshold && this.minSeq > 32 ? --this.minSeq : ++this.maxSeq;
      this.seqMap[seg.guid] = newSeq;
      return newSeq;
    }
  }
  async #getParsedResource(pipeline, resourceStat, resource) {
    let parsedRes = await pipeline.resourceFilter.parseResource({ resource, isSource: true });
    const res = { ...resourceStat, segments: parsedRes.segments };
    parsedRes.targetLangs && (res.targetLangs = parsedRes.targetLangs);
    for (const seg of res.segments) {
      if (pipeline.decoders) {
        const normalizedStr = import_helpers2.utils.getNormalizedString(seg.str, pipeline.decoders);
        if (normalizedStr[0] !== seg.str) {
          seg.nstr = normalizedStr;
        }
      }
      const flattenStr = seg.nstr ? import_helpers2.utils.flattenNormalizedSourceToOrdinal(seg.nstr) : seg.str;
      flattenStr !== seg.str && (seg.gstr = flattenStr);
      seg.guid = import_helpers2.utils.generateFullyQualifiedGuid(res.id, seg.sid, flattenStr);
      this.seqMapPath && (seg.seq = this.#generateSequence(seg));
      if (typeof seg.notes === "string") {
        seg.rawNotes = seg.notes;
        seg.notes = import_helpers2.utils.extractStructuredNotes(seg.notes);
      }
      if (seg?.notes?.ph && seg.nstr) {
        for (const part of seg.nstr) {
          if (part.t === "x" && seg.notes.ph[part.v]?.sample !== void 0 && part.s === void 0) {
            part.s = seg.notes.ph[part.v].sample;
          }
        }
      }
      Object.freeze(seg);
    }
    Object.freeze(res);
    return res;
  }
  async getResourceFromSource(resourceStat) {
    (0, import_helpers2.sharedCtx)().logger.verbose(`Getting resource ${resourceStat.id}...`);
    const pipeline = this.contentTypes[resourceStat.contentType];
    const rawResource = await pipeline.source.fetchResource(resourceStat.id);
    return this.#getParsedResource(pipeline, resourceStat, rawResource);
  }
  async getResource(resourceStat) {
    return this.snapStore ? this.snapStore.getResource(resourceStat) : this.getResourceFromSource(resourceStat);
  }
  async *getAllResourcesFromSources() {
    (0, import_helpers2.sharedCtx)().logger.info(`Getting all resource...`);
    for (const [contentType, pipeline] of Object.entries(this.contentTypes)) {
      if (pipeline.source.fetchAllResources) {
        for await (const [resourceStat, rawResource] of pipeline.source.fetchAllResources((0, import_helpers2.sharedCtx)().prj)) {
          yield await this.#getParsedResource(pipeline, { ...resourceStat, contentType }, rawResource);
        }
      } else {
        const stats = await pipeline.source.fetchResourceStats();
        for (const rs of stats) {
          if ((0, import_helpers2.sharedCtx)().prj === void 0 || (0, import_helpers2.sharedCtx)().prj.includes(rs.prj)) {
            yield await this.#getParsedResource(
              pipeline,
              { ...rs, contentType },
              await pipeline.source.fetchResource(rs.id)
            );
          }
        }
      }
    }
  }
  async *getAllResources() {
    return this.snapStore ? yield* this.snapStore.getAllResources() : yield* this.getAllResourcesFromSources();
  }
  async shutdown() {
    if (this.seqMapPath) {
      this.seqMapPath && (0, import_fs2.writeFileSync)(this.seqMapPath, JSON.stringify(this.seqMap, null, "	"), "utf8");
    }
  }
};

// ../core/src/stores/jsonJobStore.js
var path3 = __toESM(require("path"), 1);
var import_fs3 = require("fs");

// ../core/node_modules/nanoid/index.js
var import_crypto = require("crypto");

// ../core/node_modules/nanoid/url-alphabet/index.js
var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";

// ../core/node_modules/nanoid/index.js
var POOL_SIZE_MULTIPLIER = 128;
var pool;
var poolOffset;
var fillPool = (bytes) => {
  if (!pool || pool.length < bytes) {
    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);
    (0, import_crypto.randomFillSync)(pool);
    poolOffset = 0;
  } else if (poolOffset + bytes > pool.length) {
    (0, import_crypto.randomFillSync)(pool);
    poolOffset = 0;
  }
  poolOffset += bytes;
};
var nanoid = (size = 21) => {
  fillPool(size -= 0);
  let id = "";
  for (let i = poolOffset - size; i < poolOffset; i++) {
    id += urlAlphabet[pool[i] & 63];
  }
  return id;
};

// ../core/node_modules/globby/index.js
var import_node_fs2 = __toESM(require("node:fs"), 1);
var import_node_path2 = __toESM(require("node:path"), 1);
var import_merge2 = __toESM(require_merge2(), 1);
var import_fast_glob2 = __toESM(require_out4(), 1);
var import_dir_glob = __toESM(require_dir_glob(), 1);

// ../core/node_modules/globby/ignore.js
var import_node_process = __toESM(require("node:process"), 1);
var import_node_fs = __toESM(require("node:fs"), 1);
var import_node_path = __toESM(require("node:path"), 1);
var import_fast_glob = __toESM(require_out4(), 1);
var import_ignore = __toESM(require_ignore(), 1);

// ../core/node_modules/slash/index.js
function slash(path11) {
  const isExtendedLengthPath = /^\\\\\?\\/.test(path11);
  const hasNonAscii = /[^\u0000-\u0080]+/.test(path11);
  if (isExtendedLengthPath || hasNonAscii) {
    return path11;
  }
  return path11.replace(/\\/g, "/");
}

// ../core/node_modules/globby/utilities.js
var import_node_url = require("node:url");
var import_node_stream = require("node:stream");
var toPath = (urlOrPath) => urlOrPath instanceof URL ? (0, import_node_url.fileURLToPath)(urlOrPath) : urlOrPath;
var FilterStream = class extends import_node_stream.Transform {
  constructor(filter) {
    super({
      objectMode: true,
      transform(data, encoding, callback) {
        callback(void 0, filter(data) ? data : void 0);
      }
    });
  }
};
var isNegativePattern = (pattern) => pattern[0] === "!";

// ../core/node_modules/globby/ignore.js
var ignoreFilesGlobOptions = {
  ignore: [
    "**/node_modules",
    "**/flow-typed",
    "**/coverage",
    "**/.git"
  ],
  absolute: true,
  dot: true
};
var GITIGNORE_FILES_PATTERN = "**/.gitignore";
var applyBaseToPattern = (pattern, base) => isNegativePattern(pattern) ? "!" + import_node_path.default.posix.join(base, pattern.slice(1)) : import_node_path.default.posix.join(base, pattern);
var parseIgnoreFile = (file, cwd) => {
  const base = slash(import_node_path.default.relative(cwd, import_node_path.default.dirname(file.filePath)));
  return file.content.split(/\r?\n/).filter((line) => line && !line.startsWith("#")).map((pattern) => applyBaseToPattern(pattern, base));
};
var toRelativePath = (fileOrDirectory, cwd) => {
  cwd = slash(cwd);
  if (import_node_path.default.isAbsolute(fileOrDirectory)) {
    if (slash(fileOrDirectory).startsWith(cwd)) {
      return import_node_path.default.relative(cwd, fileOrDirectory);
    }
    throw new Error(`Path ${fileOrDirectory} is not in cwd ${cwd}`);
  }
  return fileOrDirectory;
};
var getIsIgnoredPredicate = (files, cwd) => {
  const patterns = files.flatMap((file) => parseIgnoreFile(file, cwd));
  const ignores = (0, import_ignore.default)().add(patterns);
  return (fileOrDirectory) => {
    fileOrDirectory = toPath(fileOrDirectory);
    fileOrDirectory = toRelativePath(fileOrDirectory, cwd);
    return fileOrDirectory ? ignores.ignores(slash(fileOrDirectory)) : false;
  };
};
var normalizeOptions = (options = {}) => ({
  cwd: toPath(options.cwd) || import_node_process.default.cwd(),
  suppressErrors: Boolean(options.suppressErrors)
});
var isIgnoredByIgnoreFiles = async (patterns, options) => {
  const { cwd, suppressErrors } = normalizeOptions(options);
  const paths = await (0, import_fast_glob.default)(patterns, { cwd, suppressErrors, ...ignoreFilesGlobOptions });
  const files = await Promise.all(
    paths.map(async (filePath) => ({
      filePath,
      content: await import_node_fs.default.promises.readFile(filePath, "utf8")
    }))
  );
  return getIsIgnoredPredicate(files, cwd);
};
var isIgnoredByIgnoreFilesSync = (patterns, options) => {
  const { cwd, suppressErrors } = normalizeOptions(options);
  const paths = import_fast_glob.default.sync(patterns, { cwd, suppressErrors, ...ignoreFilesGlobOptions });
  const files = paths.map((filePath) => ({
    filePath,
    content: import_node_fs.default.readFileSync(filePath, "utf8")
  }));
  return getIsIgnoredPredicate(files, cwd);
};

// ../core/node_modules/globby/index.js
var assertPatternsInput = (patterns) => {
  if (patterns.some((pattern) => typeof pattern !== "string")) {
    throw new TypeError("Patterns must be a string or an array of strings");
  }
};
var toPatternsArray = (patterns) => {
  patterns = [...new Set([patterns].flat())];
  assertPatternsInput(patterns);
  return patterns;
};
var checkCwdOption = (options) => {
  if (!options.cwd) {
    return;
  }
  let stat;
  try {
    stat = import_node_fs2.default.statSync(options.cwd);
  } catch {
    return;
  }
  if (!stat.isDirectory()) {
    throw new Error("The `cwd` option must be a path to a directory");
  }
};
var normalizeOptions2 = (options = {}) => {
  options = {
    ignore: [],
    expandDirectories: true,
    ...options,
    cwd: toPath(options.cwd)
  };
  checkCwdOption(options);
  return options;
};
var normalizeArguments = (fn) => async (patterns, options) => fn(toPatternsArray(patterns), normalizeOptions2(options));
var normalizeArgumentsSync = (fn) => (patterns, options) => fn(toPatternsArray(patterns), normalizeOptions2(options));
var getIgnoreFilesPatterns = (options) => {
  const { ignoreFiles, gitignore } = options;
  const patterns = ignoreFiles ? toPatternsArray(ignoreFiles) : [];
  if (gitignore) {
    patterns.push(GITIGNORE_FILES_PATTERN);
  }
  return patterns;
};
var getFilter = async (options) => {
  const ignoreFilesPatterns = getIgnoreFilesPatterns(options);
  return createFilterFunction(
    ignoreFilesPatterns.length > 0 && await isIgnoredByIgnoreFiles(ignoreFilesPatterns, options)
  );
};
var getFilterSync = (options) => {
  const ignoreFilesPatterns = getIgnoreFilesPatterns(options);
  return createFilterFunction(
    ignoreFilesPatterns.length > 0 && isIgnoredByIgnoreFilesSync(ignoreFilesPatterns, options)
  );
};
var createFilterFunction = (isIgnored) => {
  const seen = /* @__PURE__ */ new Set();
  return (fastGlobResult) => {
    const path11 = fastGlobResult.path || fastGlobResult;
    const pathKey = import_node_path2.default.normalize(path11);
    const seenOrIgnored = seen.has(pathKey) || isIgnored && isIgnored(path11);
    seen.add(pathKey);
    return !seenOrIgnored;
  };
};
var unionFastGlobResults = (results, filter) => results.flat().filter((fastGlobResult) => filter(fastGlobResult));
var unionFastGlobStreams = (streams, filter) => (0, import_merge2.default)(streams).pipe(new FilterStream((fastGlobResult) => filter(fastGlobResult)));
var convertNegativePatterns = (patterns, options) => {
  const tasks = [];
  while (patterns.length > 0) {
    const index = patterns.findIndex((pattern) => isNegativePattern(pattern));
    if (index === -1) {
      tasks.push({ patterns, options });
      break;
    }
    const ignorePattern = patterns[index].slice(1);
    for (const task of tasks) {
      task.options.ignore.push(ignorePattern);
    }
    if (index !== 0) {
      tasks.push({
        patterns: patterns.slice(0, index),
        options: {
          ...options,
          ignore: [
            ...options.ignore,
            ignorePattern
          ]
        }
      });
    }
    patterns = patterns.slice(index + 1);
  }
  return tasks;
};
var getDirGlobOptions = (options, cwd) => ({
  ...cwd ? { cwd } : {},
  ...Array.isArray(options) ? { files: options } : options
});
var generateTasks = async (patterns, options) => {
  const globTasks = convertNegativePatterns(patterns, options);
  const { cwd, expandDirectories } = options;
  if (!expandDirectories) {
    return globTasks;
  }
  const patternExpandOptions = getDirGlobOptions(expandDirectories, cwd);
  const ignoreExpandOptions = cwd ? { cwd } : void 0;
  return Promise.all(
    globTasks.map(async (task) => {
      let { patterns: patterns2, options: options2 } = task;
      [
        patterns2,
        options2.ignore
      ] = await Promise.all([
        (0, import_dir_glob.default)(patterns2, patternExpandOptions),
        (0, import_dir_glob.default)(options2.ignore, ignoreExpandOptions)
      ]);
      return { patterns: patterns2, options: options2 };
    })
  );
};
var generateTasksSync = (patterns, options) => {
  const globTasks = convertNegativePatterns(patterns, options);
  const { cwd, expandDirectories } = options;
  if (!expandDirectories) {
    return globTasks;
  }
  const patternExpandOptions = getDirGlobOptions(expandDirectories, cwd);
  const ignoreExpandOptions = cwd ? { cwd } : void 0;
  return globTasks.map((task) => {
    let { patterns: patterns2, options: options2 } = task;
    patterns2 = import_dir_glob.default.sync(patterns2, patternExpandOptions);
    options2.ignore = import_dir_glob.default.sync(options2.ignore, ignoreExpandOptions);
    return { patterns: patterns2, options: options2 };
  });
};
var globby = normalizeArguments(async (patterns, options) => {
  const [
    tasks,
    filter
  ] = await Promise.all([
    generateTasks(patterns, options),
    getFilter(options)
  ]);
  const results = await Promise.all(tasks.map((task) => (0, import_fast_glob2.default)(task.patterns, task.options)));
  return unionFastGlobResults(results, filter);
});
var globbySync = normalizeArgumentsSync((patterns, options) => {
  const tasks = generateTasksSync(patterns, options);
  const filter = getFilterSync(options);
  const results = tasks.map((task) => import_fast_glob2.default.sync(task.patterns, task.options));
  return unionFastGlobResults(results, filter);
});
var globbyStream = normalizeArgumentsSync((patterns, options) => {
  const tasks = generateTasksSync(patterns, options);
  const filter = getFilterSync(options);
  const streams = tasks.map((task) => import_fast_glob2.default.stream(task.patterns, task.options));
  return unionFastGlobStreams(streams, filter);
});
var isDynamicPattern = normalizeArgumentsSync(
  (patterns, options) => patterns.some((pattern) => import_fast_glob2.default.isDynamicPattern(pattern, options))
);
var generateGlobTasks = normalizeArguments(generateTasks);
var generateGlobTasksSync = normalizeArgumentsSync(generateTasksSync);

// ../core/src/stores/jsonJobStore.js
var import_helpers3 = __toESM(require_helpers(), 1);
var statusPriority = { done: 0, pending: 1, req: 2 };
var jobFilenameRegex = /(?<provider>[^_]+)_(?<sourceLang>[^_]+)_(?<targetLang>[^_]+)_job_(?<guid>[0-9A-Za-z_-]+)-(?<status>req|pending|done)\.json$/;
var JsonJobStore = class {
  constructor({ jobsDir }) {
    this.jobsBaseDir = path3.join((0, import_helpers3.sharedCtx)().baseDir, jobsDir);
  }
  #jobsDirForPair(sourceLang, targetLang) {
    const jobsDir = path3.join(this.jobsBaseDir, `${sourceLang}_${targetLang}`);
    if (!(0, import_fs3.existsSync)(jobsDir)) {
      (0, import_fs3.mkdirSync)(jobsDir, { recursive: true });
    }
    return jobsDir;
  }
  #findGlob(glob) {
    return globbySync(path3.join(this.jobsBaseDir, "**", glob));
  }
  async getAvailableLangPairs() {
    const files = this.#findGlob(`*_job_*.json`);
    const pairs = /* @__PURE__ */ new Map();
    for (const file of files) {
      const entry = file.match(jobFilenameRegex)?.groups;
      entry && pairs.set(`${entry.sourceLang}_${entry.targetLang}`, [entry.sourceLang, entry.targetLang]);
    }
    return Array.from(pairs.values());
  }
  async getJobStatusByLangPair(sourceLang, targetLang) {
    const files = this.#findGlob(`*${sourceLang}_${targetLang}_job_*.json`);
    const statusMap = {};
    for (const file of files) {
      const entry = file.match(jobFilenameRegex)?.groups;
      if (entry) {
        if (!statusMap[entry.guid] || statusPriority[entry.status] < statusPriority[statusMap[entry.guid].status]) {
          statusMap[entry.guid] = { status: entry.status };
        }
      }
    }
    return Object.entries(statusMap);
  }
  async createJobManifest() {
    return {
      jobGuid: (0, import_helpers3.sharedCtx)().regression ? `xxx${this.#findGlob("*job_*-req.json").length}xxx` : nanoid(),
      status: "created"
    };
  }
  async writeJob(job2) {
    const state = ["created", "blocked"].includes(job2.status) ? "req" : job2.status;
    const filename = `${job2.translationProvider}_${job2.sourceLang}_${job2.targetLang}_job_${job2.jobGuid}-${state}.json`;
    const jobPath = path3.join(this.#jobsDirForPair(job2.sourceLang, job2.targetLang), filename);
    if ((0, import_fs3.existsSync)(jobPath)) {
      throw `can't overwrite immutable job ${jobPath}`;
    } else {
      (0, import_fs3.writeFileSync)(jobPath, JSON.stringify(job2, null, "	"), "utf8");
    }
  }
  async getJob(jobGuid) {
    const pending = this.#findGlob(`*job_${jobGuid}-pending.json`)[0];
    const done = this.#findGlob(`*job_${jobGuid}-done.json`)[0];
    const job2 = done ?? pending;
    if (job2) {
      const jobFile = (0, import_fs3.readFileSync)(job2, "utf8");
      const parsedJob = JSON.parse(jobFile);
      return parsedJob;
    }
    return null;
  }
  async getJobRequest(jobGuid) {
    const req = this.#findGlob(`*job_${jobGuid}-req.json`)[0];
    return req ? JSON.parse((0, import_fs3.readFileSync)(req, "utf8")) : null;
  }
  async deleteJobRequest(jobGuid) {
    const req = this.#findGlob(`*job_${jobGuid}-req.json`)[0];
    return (0, import_fs3.unlinkSync)(req);
  }
};

// ../core/src/monsterManager.js
var import_helpers4 = __toESM(require_helpers(), 1);
var MonsterManager = class {
  constructor({ monsterDir, monsterConfig, configSeal, defaultAnalyzers: defaultAnalyzers2 = {} }) {
    if (monsterDir && monsterConfig && monsterConfig.sourceLang && (monsterConfig.contentTypes || monsterConfig.source || monsterConfig.snapStore) === void 0) {
      throw "You must specify sourceLang and contentTypes / source / snapStore in your config";
    } else {
      this.monsterDir = monsterDir;
      this.configSeal = configSeal;
      this.jobStore = monsterConfig.jobStore ?? new JsonJobStore({
        jobsDir: "l10njobs"
      });
      this.debug = monsterConfig.debug ?? {};
      this.sourceLang = monsterConfig.sourceLang;
      this.minimumQuality = monsterConfig.minimumQuality;
      if (monsterConfig.contentTypes) {
        this.contentTypes = monsterConfig.contentTypes;
        ["source", "resourceFilter", "segmentDecorator", "decoders", "textEncoders", "codeEncoders", "target"].forEach((propName) => {
          if (this[propName] !== void 0) {
            throw `You can't specify ${propName} if you use contentType`;
          }
        });
      } else {
        this.contentTypes = {
          default: {
            source: monsterConfig.source,
            resourceFilter: monsterConfig.resourceFilter,
            segmentDecorator: monsterConfig.segmentDecorator,
            decoders: monsterConfig.decoders,
            textEncoders: monsterConfig.textEncoders,
            codeEncoders: monsterConfig.codeEncoders,
            target: monsterConfig.target
          }
        };
      }
      for (const [type, pipeline] of Object.entries(this.contentTypes)) {
        if (!pipeline.resourceFilter) {
          throw `You must specify a resourceFilter in content type ${type}`;
        }
        ["source", "resourceFilter", "target"].forEach((propName) => {
          if (pipeline[propName] !== void 0 && typeof pipeline[propName] !== "object") {
            throw `Property ${propName} in contentType ${type} must be an object`;
          }
        });
        ["segmentDecorator"].forEach((propName) => {
          if (pipeline[propName] !== void 0 && typeof pipeline[propName] !== "function") {
            throw `Property ${propName} in contentType ${type} must be a function`;
          }
        });
        ["decoders", "textEncoders", "codeEncoders"].forEach((propName) => {
          if (pipeline[propName] !== void 0) {
            if (!Array.isArray(pipeline[propName])) {
              throw `Property ${propName} in contentType ${type} must be an array`;
            }
            pipeline[propName].forEach((coder, idx) => {
              if (typeof coder !== "function") {
                throw `Coder at index ${idx} in property ${propName} in contentType ${type} must be a function`;
              }
            });
          }
        });
      }
      if (monsterConfig.translationProviders) {
        this.translationProviders = monsterConfig.translationProviders;
      } else {
        this.translationProviders = {};
        monsterConfig.translationProvider && (this.translationProviders[monsterConfig.translationProvider.constructor.name] = {
          translator: monsterConfig.translationProvider
        });
      }
      this.tuFilters = monsterConfig.tuFilters;
      const seqMapPath = monsterConfig.seqMap && path4.join((0, import_helpers4.sharedCtx)().baseDir, monsterConfig.seqMap);
      this.source = new SourceManager({
        configSeal,
        contentTypes: this.contentTypes,
        snapStore: monsterConfig.snapStore,
        seqMapPath,
        seqThreshold: monsterConfig.seqThreshold
      });
      this.tmm = new TMManager({ monsterDir, jobStore: this.jobStore, configSeal });
      this.snapStore = monsterConfig.snapStore;
      this.analyzers = {
        ...defaultAnalyzers2,
        ...monsterConfig.analyzers ?? {}
      };
      this.capabilitiesByType = Object.fromEntries(Object.entries(this.contentTypes).map(([type, pipeline]) => [type, {
        snap: Boolean(pipeline.source && this.snapStore),
        status: Boolean(pipeline.source),
        push: Boolean(pipeline.source && Object.keys(this.translationProviders).length > 0),
        pull: Boolean(Object.keys(this.translationProviders).length > 0),
        translate: Boolean(pipeline.source && pipeline.target)
      }]));
      this.capabilities = Object.values(this.capabilitiesByType).reduce((p2, c2) => Object.fromEntries(Object.entries(c2).map(([k2, v2]) => [k2, (p2[k2] === void 0 ? true : p2[k2]) && v2])), {});
    }
  }
  // return segments in a resource decorated for the target languge
  #getDecoratedSegments(res, targetLang) {
    const pipeline = this.contentTypes[res.contentType];
    return pipeline.segmentDecorator ? pipeline.segmentDecorator(res.segments, targetLang) : res.segments;
  }
  // get all possible target languages from sources and from TMs
  async getTargetLangs(limitToLang, includeAll) {
    let srcTargetLangs = /* @__PURE__ */ new Set();
    const resourceStats = await this.source.getResourceStats();
    resourceStats.forEach((res) => res.targetLangs.forEach((targetLang) => srcTargetLangs.add(targetLang)));
    const allTargetLangs = new Set(srcTargetLangs);
    Object.values(await this.jobStore.getAvailableLangPairs()).forEach((pair) => allTargetLangs.add(pair[1]));
    if (limitToLang) {
      const langsToLimit = limitToLang.split(",");
      const invalidLangs = langsToLimit.filter((limitedLang) => !allTargetLangs.has(limitedLang));
      if (invalidLangs.length > 0) {
        throw `Invalid languages: ${invalidLangs.join(",")}`;
      }
      return langsToLimit;
    }
    return includeAll ? [...allTargetLangs] : [...srcTargetLangs];
  }
  // get source, decorate it for the target languge, and convert it to tu format
  async getSourceAsTus(targetLang) {
    const sourceLookup = {};
    for await (const res of this.source.getAllResources()) {
      const decoratedSegments = this.#getDecoratedSegments(res, targetLang);
      for (const seg of decoratedSegments) {
        sourceLookup[seg.guid] = import_helpers4.utils.makeTU(res, seg);
      }
    }
    return sourceLookup;
  }
  getMinimumQuality(jobManifest) {
    let minimumQuality = this.minimumQuality;
    if (typeof minimumQuality === "function") {
      minimumQuality = minimumQuality(jobManifest);
    }
    if (minimumQuality === void 0) {
      throw "You must specify a minimum quality in your config";
    } else {
      return minimumQuality;
    }
  }
  // use cases:
  //   1 - both are passed as both are created at the same time -> may cancel if response is empty
  //   2 - only jobRequest is passed because it's blocked -> write if "blocked", cancel if "created"
  //   3 - only jobResponse is passed because it's pulled -> must write even if empty or it will show as blocked/pending
  async processJob(jobResponse, jobRequest) {
    if (jobRequest && jobResponse && !(jobResponse.tus?.length > 0 || jobResponse.inflight?.length > 0)) {
      jobResponse.status = "cancelled";
      return;
    }
    if (jobRequest && !jobResponse && jobRequest.status === "created") {
      jobRequest.status = "cancelled";
      return;
    }
    const updatedAt = ((0, import_helpers4.sharedCtx)().regression ? /* @__PURE__ */ new Date("2022-05-29T00:00:00.000Z") : /* @__PURE__ */ new Date()).toISOString();
    if (jobRequest) {
      jobRequest.updatedAt = updatedAt;
      await this.jobStore.writeJob(jobRequest);
    }
    if (jobResponse) {
      jobResponse.updatedAt = updatedAt;
      await this.jobStore.writeJob(jobResponse);
    }
  }
  // eslint-disable-next-line complexity
  async #internalPrepareTranslationJob({ targetLang, minimumQuality, leverage }) {
    const job2 = {
      sourceLang: this.sourceLang,
      targetLang,
      tus: []
    };
    minimumQuality ??= this.getMinimumQuality(job2);
    const tm = await this.tmm.getTM(this.sourceLang, targetLang);
    const prjLeverage = {};
    const repetitionMap = {};
    let resourceCount = 0;
    for await (const res of this.source.getAllResources()) {
      resourceCount++;
      const prj = res.prj || "default";
      prjLeverage[prj] ??= {
        translated: 0,
        translatedWords: 0,
        translatedByQ: {},
        untranslated: 0,
        untranslatedChars: 0,
        untranslatedWords: 0,
        pending: 0,
        pendingWords: 0,
        internalRepetitions: 0,
        internalRepetitionWords: 0
      };
      const leverageDetails = prjLeverage[prj];
      if (res.targetLangs.includes(targetLang) && targetLang !== this.sourceLang) {
        const decoratedSegments = this.#getDecoratedSegments(res, targetLang);
        for (const seg of decoratedSegments) {
          const tmEntry = tm.getEntryByGuid(seg.guid);
          const tu = import_helpers4.utils.makeTU(res, seg);
          const plainText = tu.nsrc ? tu.nsrc.map((e) => typeof e === "string" ? e : "").join("") : tu.src;
          const words = import_words_count.default.wordsCount(plainText);
          const isCompatible = import_helpers4.utils.sourceAndTargetAreCompatible(tu?.nsrc ?? tu?.src, tmEntry?.ntgt ?? tmEntry?.tgt);
          if (!tmEntry || !tmEntry.inflight && (!isCompatible || tmEntry.q < minimumQuality)) {
            tm.getAllEntriesBySrc(tu.nsrc ?? tu.src).filter((tu2) => tu2.q >= minimumQuality).length > 0 && (repetitionMap[tu.src] = true);
            if (repetitionMap[tu.src]) {
              leverageDetails.internalRepetitions++;
              leverageDetails.internalRepetitionWords += words;
              !leverage && job2.tus.push(tu);
            } else {
              repetitionMap[tu.src] = true;
              job2.tus.push(tu);
              leverageDetails.untranslated++;
              leverageDetails.untranslatedChars += plainText.length;
              leverageDetails.untranslatedWords += words;
            }
          } else {
            if (tmEntry.inflight) {
              leverageDetails.pending++;
              leverageDetails.pendingWords += words;
            } else {
              leverageDetails.translated ??= 0;
              leverageDetails.translated++;
              leverageDetails.translatedWords += words;
              leverageDetails.translatedByQ[tmEntry.q] ??= 0;
              leverageDetails.translatedByQ[tmEntry.q]++;
            }
          }
        }
      }
    }
    return [job2, { tmSize: tm.guids.length, minimumQuality, prjLeverage, numSources: resourceCount }];
  }
  async prepareTranslationJob({ targetLang, minimumQuality, leverage }) {
    return (await this.#internalPrepareTranslationJob({ targetLang, minimumQuality, leverage }))[0];
  }
  async estimateTranslationJob({ targetLang }) {
    return (await this.#internalPrepareTranslationJob({ targetLang }))[1];
  }
  async prepareFilterBasedJob({ targetLang, tmBased, guidList }) {
    const tm = await this.tmm.getTM(this.sourceLang, targetLang);
    const sourceLookup = await this.getSourceAsTus(targetLang);
    if (!guidList) {
      if (tmBased) {
        guidList = tm.guids;
      } else {
        guidList = Object.keys(sourceLookup);
      }
    }
    let tus = guidList.map((guid) => {
      const sourceTU = sourceLookup[guid] ?? {};
      const translatedTU = tm.getEntryByGuid(guid) ?? {};
      return { ...sourceTU, ...translatedTU };
    });
    (0, import_helpers4.sharedCtx)().prj !== void 0 && (tus = tus.filter((tu) => (0, import_helpers4.sharedCtx)().prj.includes(tu.prj)));
    return {
      sourceLang: this.sourceLang,
      targetLang,
      tus
    };
  }
  getTranslationProvider(jobManifest) {
    if (jobManifest.translationProvider) {
      jobManifest.translationProvider = import_helpers4.utils.fixCaseInsensitiveKey(this.translationProviders, jobManifest.translationProvider);
    } else {
      for (const [name, providerCfg] of Object.entries(this.translationProviders)) {
        if (!providerCfg.pairs || providerCfg.pairs[jobManifest.sourceLang] && providerCfg.pairs[jobManifest.sourceLang].includes(jobManifest.targetLang)) {
          jobManifest.translationProvider = name;
          break;
        }
      }
    }
    return this.translationProviders[jobManifest.translationProvider];
  }
  async shutdown() {
    this.jobStore.shutdown && await this.jobStore.shutdown();
    await this.source.shutdown();
    await this.tmm.shutdown();
  }
};

// ../core/src/opsMgr.js
var path5 = __toESM(require("path"), 1);
var import_fs4 = require("fs");
var fs3 = __toESM(require("fs"), 1);
var MAX_INLINE_OUTPUT = 16383;
var Task = class {
  constructor(opsMgr) {
    this.opsMgr = opsMgr;
    this.opList = [];
    this.context = {};
  }
  saveState() {
    if (this.opsMgr.opsDir) {
      const state = {
        taskName: this.taskName,
        rootOpId: this.rootOpId,
        context: this.context,
        opList: this.opList
      };
      const fullPath = path5.join(this.opsMgr.opsDir, `${this.taskName}-plan.json`);
      return fs3.writeFileSync(fullPath, JSON.stringify(state, null, "	"), "utf8");
    }
  }
  setContext(context) {
    Object.freeze(context);
    this.context = context;
  }
  enqueue(opName, args, inputs) {
    inputs ??= [];
    const opId = this.opList.length;
    opName = typeof opName === "function" ? opName.name : opName;
    this.opList.push({ opId, opName, args, inputs, state: "pending" });
    return opId;
  }
  commit(opName, args, inputs) {
    this.rootOpId = this.enqueue(opName, args, inputs);
    this.taskName = `Task-${this.opList[this.rootOpId].opName}-${(/* @__PURE__ */ new Date()).getTime()}`;
    this.saveState();
    this.opsMgr.logger.info(`${this.taskName} committed`);
  }
  addInputDependency(opId, input) {
    const op = this.opList[opId];
    op.inputs ??= [];
    if (!op.inputs.includes(input)) {
      op.inputs.push(input);
      op.state = "pending";
    }
  }
  getOutputByOpId(opId) {
    const out = this.opList[opId].output;
    if (typeof out === "boolean") {
      const fullPath = path5.join(this.opsMgr.opsDir, `${this.taskName}-out${opId}.json`);
      const outJSON = fs3.readFileSync(fullPath, "utf8");
      return JSON.parse(outJSON);
    } else {
      return out;
    }
  }
  async execute() {
    let doneOps;
    let progress = 1;
    let errorMessage;
    while (progress > 0) {
      doneOps = 0;
      progress = 0;
      for (const op of this.opList) {
        if (op.state === "done") {
          doneOps++;
        } else if (!errorMessage) {
          const doneInputs = op.inputs.filter((id) => this.opList[id].state === "done");
          if (doneInputs.length === op.inputs.length) {
            try {
              const func = this.opsMgr.registry[op.opName].callback;
              if (!func) {
                throw `Op ${op.opName} not found in registry`;
              }
              const inputs = op.inputs.map(this.getOutputByOpId.bind(this));
              const boundFunc = func.bind(this);
              op.lastRanAt = (/* @__PURE__ */ new Date()).toISOString();
              this.opsMgr.logger.info(`Executing opId: ${op.opId} opName: ${op.opName}...`);
              const response = await boundFunc(op.args, inputs) ?? null;
              const responseJSON = JSON.stringify(response, null, "	");
              if (responseJSON.length > MAX_INLINE_OUTPUT && this.opsMgr.opsDir) {
                const fullPath = path5.join(this.opsMgr.opsDir, `${this.taskName}-out${op.opId}.json`);
                fs3.writeFileSync(fullPath, responseJSON, "utf8");
                op.output = true;
              } else {
                op.output = response;
              }
              op.state = "done";
            } catch (error) {
              errorMessage = error.stack ?? error;
              op.state = "error";
              op.output = errorMessage;
            }
            this.saveState();
            progress++;
          }
        }
      }
    }
    if (doneOps === this.opList.length) {
      return this.getOutputByOpId(this.rootOpId);
    } else {
      throw `OpsMgr: unable to execute task ${this.taskName} (${errorMessage})`;
    }
  }
  hydrate(filename) {
    if (this.opsMgr.opsDir) {
      const fullPath = path5.join(this.opsMgr.opsDir, filename);
      const state = JSON.parse(fs3.readFileSync(fullPath));
      this.taskName = state.taskName;
      this.rootOpId = state.rootOpId;
      this.context = state.context;
      this.opList = state.opList;
    } else {
      throw "Can't hydrate if opsDir is not configured";
    }
  }
};
var OpsMgr = class {
  constructor(params) {
    if (params?.opsDir) {
      this.opsDir = params.opsDir;
      if (!(0, import_fs4.existsSync)(this.opsDir)) {
        (0, import_fs4.mkdirSync)(this.opsDir, { recursive: true });
      }
    }
    this.registry = {};
    this.logger = params.logger;
  }
  registerOp(func, options = {}) {
    options.opName ??= func.name;
    if (this.registry[options.opName]) {
      if (this.registry[options.opName].callback !== func) {
        throw `Op ${options.opName} already exists in registry`;
      }
    } else {
      options.callback = func;
      options.idempotent ??= false;
      this.registry[options.opName] = options;
    }
  }
  createTask() {
    const task = new Task(this);
    task.logger = this.logger;
    return task;
  }
};

// ../core/src/commands/analyze.js
var import_helpers5 = __toESM(require_helpers(), 1);
async function analyzeCmd(mm, Analyzer, params, limitToLang, tuFilter) {
  let tuFilterFunction;
  if (tuFilter) {
    tuFilter = import_helpers5.utils.fixCaseInsensitiveKey(mm.tuFilters, tuFilter);
    tuFilterFunction = mm.tuFilters[tuFilter];
    if (!tuFilterFunction) {
      throw `Couldn't find ${tuFilter} tu filter`;
    }
  }
  if (typeof Analyzer.prototype.processSegment === "function") {
    const analyzer = new Analyzer(...params);
    for await (const res of mm.source.getAllResources()) {
      for (const seg of res.segments) {
        (!tuFilterFunction || tuFilterFunction(import_helpers5.utils.makeTU(res, seg))) && analyzer.processSegment({ rid: res.id, prj: res.prj, seg });
      }
    }
    return analyzer.getAnalysis();
  } else if (typeof Analyzer.prototype.processTU === "function") {
    const targetLangs = (await mm.getTargetLangs(limitToLang)).sort();
    const bodies = [];
    let lastAnalysis;
    const hasAggregateAnalysis = typeof Analyzer.prototype.getAggregateAnalysis === "function";
    let analyzer;
    for (const targetLang of targetLangs) {
      (!hasAggregateAnalysis || !analyzer) && (analyzer = new Analyzer(...params));
      const tm = await mm.tmm.getTM(mm.sourceLang, targetLang);
      const tus = tm.guids.map((guid) => tm.getEntryByGuid(guid));
      for (const tu of tus) {
        (!tuFilterFunction || tuFilterFunction(tu)) && analyzer.processTU({ targetLang, tu });
      }
      !hasAggregateAnalysis && bodies.push((lastAnalysis = analyzer.getAnalysis()).body);
    }
    return hasAggregateAnalysis ? analyzer.getAggregateAnalysis() : { ...lastAnalysis, body: bodies.flat(1) };
  } else {
    throw `could not find processSegment or processTU function in analyzer`;
  }
}

// ../core/src/commands/pull.js
var import_helpers6 = __toESM(require_helpers(), 1);
async function pullCmd(mm, { limitToLang, partial }) {
  const stats = { numPendingJobs: 0, translatedStrings: 0, doneJobs: 0, newPendingJobs: 0 };
  const targetLangs = await mm.getTargetLangs(limitToLang);
  for (const targetLang of targetLangs) {
    const pendingJobs = (await mm.jobStore.getJobStatusByLangPair(mm.sourceLang, targetLang)).filter((e) => e[1].status === "pending").map((e) => e[0]);
    stats.numPendingJobs += pendingJobs.length;
    for (const jobGuid of pendingJobs) {
      const jobRequest = await mm.jobStore.getJobRequest(jobGuid);
      const pendingJob = await mm.jobStore.getJob(jobGuid);
      if (pendingJob.status === "pending") {
        (0, import_helpers6.sharedCtx)().logger.info(`Pulling job ${jobGuid}...`);
        const translationProvider = mm.getTranslationProvider(pendingJob);
        const jobResponse = await translationProvider.translator.fetchTranslations(pendingJob, jobRequest);
        if (jobResponse?.status === "done") {
          await mm.processJob(jobResponse);
          stats.translatedStrings += jobResponse.tus.length;
          stats.doneJobs++;
        } else if (jobResponse?.status === "pending") {
          (0, import_helpers6.sharedCtx)().logger.info(`Got ${jobResponse.tus.length} translations for job ${jobRequest.jobGuid} but there are still ${jobResponse.inflight.length} translations in flight`);
          if (partial) {
            const { inflight, ...doneResponse } = jobResponse;
            doneResponse.status = "done";
            await mm.processJob(doneResponse);
            stats.translatedStrings += jobResponse.tus.length;
            const newRequest = await mm.jobStore.getJobRequest(jobResponse.jobGuid);
            const newManifest = await mm.jobStore.createJobManifest();
            newRequest.originalJobGuid = jobResponse.jobGuid;
            newRequest.jobGuid = newManifest.jobGuid;
            newRequest.tus = newRequest.tus.filter((tu) => inflight.includes(tu.guid));
            const { tus, ...newResponse } = doneResponse;
            newResponse.originalJobGuid = jobResponse.jobGuid;
            newResponse.jobGuid = newManifest.jobGuid;
            newResponse.inflight = inflight;
            newResponse.status = "pending";
            await mm.processJob(newResponse, newRequest);
            stats.newPendingJobs++;
          }
        }
      }
    }
  }
  return stats;
}

// ../core/src/commands/snap.js
async function snapCmd(mm, { maxSegments } = {}) {
  if (mm.snapStore) {
    maxSegments ??= 1e3;
    let resourceCount = 0;
    await mm.snapStore.startSnapshot();
    const chunkNumber = {};
    let accumulatedSegments = 0;
    let accumulatedPrj;
    let accumulatedResources = {};
    for await (const res of mm.source.getAllResourcesFromSources()) {
      const currentPrj = res.prj ?? "default";
      chunkNumber[currentPrj] ??= 0;
      if (accumulatedPrj !== currentPrj || accumulatedSegments >= maxSegments) {
        if (Object.keys(accumulatedResources).length > 0) {
          await mm.snapStore.commitResources(accumulatedPrj, chunkNumber[accumulatedPrj], accumulatedResources);
          chunkNumber[accumulatedPrj]++;
          accumulatedResources = {};
          accumulatedSegments = 0;
        }
        accumulatedPrj = currentPrj;
      }
      accumulatedResources[res.id] = res;
      accumulatedSegments += res.segments.length;
      resourceCount++;
    }
    if (Object.keys(accumulatedResources).length > 0) {
      await mm.snapStore.commitResources(accumulatedPrj, chunkNumber[accumulatedPrj], accumulatedResources);
    }
    await mm.snapStore.endSnapshot();
    return resourceCount;
  } else {
    throw `Snap store not configured`;
  }
}

// ../core/src/commands/push.js
var import_helpers7 = __toESM(require_helpers(), 1);
async function pushCmd(mm, { limitToLang, tuFilter, driver, refresh, translationProviderName, leverage, dryRun, instructions }) {
  let tuFilterFunction;
  if (tuFilter) {
    tuFilter = import_helpers7.utils.fixCaseInsensitiveKey(mm.tuFilters, tuFilter);
    tuFilterFunction = mm.tuFilters[tuFilter];
    if (!tuFilterFunction) {
      throw `Couldn't find ${tuFilter} tu filter`;
    }
  }
  let guidList;
  if (driver.jobGuid) {
    const req = await mm.jobStore.getJobRequest(driver.jobGuid);
    if (!req) {
      throw `jobGuid ${driver.jobGuid} not found`;
    }
    guidList = req.tus.map((tu) => tu.guid);
  }
  const status2 = [];
  const targetLangs = await mm.getTargetLangs(limitToLang);
  for (const targetLang of targetLangs) {
    const blockedJobs = (await mm.jobStore.getJobStatusByLangPair(mm.sourceLang, targetLang)).filter((e) => e[1].status === "req");
    if (blockedJobs.length === 0) {
      const jobBody = await (driver.untranslated ? mm.prepareTranslationJob({ targetLang, leverage }) : mm.prepareFilterBasedJob({ targetLang, tmBased: driver.tm, guidList }));
      tuFilterFunction && (jobBody.tus = jobBody.tus.filter((tu) => tuFilterFunction(tu)));
      const langStatus = { sourceLang: jobBody.sourceLang, targetLang };
      if (Object.keys(jobBody.tus).length > 0) {
        if (dryRun) {
          langStatus.tus = jobBody.tus;
        } else {
          jobBody.translationProvider = translationProviderName;
          const translationProvider = mm.getTranslationProvider(jobBody);
          langStatus.provider = jobBody.translationProvider;
          if (translationProvider) {
            const minimumJobSize = translationProvider.minimumJobSize ?? 0;
            if (jobBody.tus.length >= minimumJobSize || refresh) {
              const manifest = await mm.jobStore.createJobManifest();
              langStatus.jobGuid = manifest.jobGuid;
              const jobRequest = {
                ...jobBody,
                ...manifest
              };
              instructions && (jobRequest.instructions = instructions);
              const quota = translationProvider.quota ?? Number.MAX_VALUE;
              let jobResponse;
              if (jobBody.tus.length <= quota || refresh) {
                jobResponse = await (refresh ? translationProvider.translator.refreshTranslations(jobRequest) : translationProvider.translator.requestTranslations(jobRequest));
              } else {
                jobRequest.status = "blocked";
              }
              await mm.processJob(jobResponse, jobRequest);
              langStatus.status = jobResponse?.status ?? jobRequest.status;
              langStatus.num = jobResponse?.tus?.length ?? jobResponse?.inflight?.length ?? jobRequest?.tus?.length ?? 0;
            } else {
              langStatus.minimumJobSize = minimumJobSize;
              langStatus.num = jobBody?.tus?.length ?? 0;
            }
          } else {
            throw `No ${translationProviderName} translationProvider configured`;
          }
        }
        status2.push(langStatus);
      }
    } else {
      throw `Can't push a job for language ${targetLang} if there are blocked/failed jobs outstanding`;
    }
  }
  return status2;
}

// ../core/src/commands/job.js
async function jobPushCmd(mm, pushJobGuid) {
  const blockedRequest = await mm.jobStore.getJobRequest(pushJobGuid);
  if (blockedRequest.status === "blocked") {
    const translationProvider = mm.getTranslationProvider(blockedRequest);
    if (translationProvider) {
      const jobResponse = await translationProvider.translator.requestTranslations(blockedRequest);
      await mm.processJob(jobResponse);
      return {
        status: jobResponse.status,
        num: jobResponse.tus?.length ?? jobResponse.inflight?.length ?? 0
      };
    } else {
      throw "No corresponding translationProvider configured";
    }
  } else {
    throw `Only blocked jobs can be submitted (current status is ${blockedRequest.status})`;
  }
}

// ../core/src/commands/status.js
var import_helpers8 = __toESM(require_helpers(), 1);
async function statusCmd(mm, { limitToLang }) {
  const status2 = {
    lang: {}
  };
  const targetLangs = await mm.getTargetLangs(limitToLang);
  for (const targetLang of targetLangs) {
    const leverage = await mm.estimateTranslationJob({ targetLang });
    status2.lang[targetLang] = {
      leverage
    };
    status2.numSources = leverage.numSources;
    (0, import_helpers8.sharedCtx)().logger.info(`Calculated status of ${targetLang}`);
  }
  return status2;
}

// ../core/src/commands/jobs.js
async function jobsCmd(mm, { limitToLang }) {
  const unfinishedJobs = {};
  const targetLangs = await mm.getTargetLangs(limitToLang);
  for (const targetLang of targetLangs) {
    const pendingJobs = (await mm.jobStore.getJobStatusByLangPair(mm.sourceLang, targetLang)).filter((e) => e[1].status !== "done");
    unfinishedJobs[targetLang] = [];
    for (const [jobGuid, stats] of pendingJobs) {
      unfinishedJobs[targetLang].push(await (stats.status === "pending" ? mm.jobStore.getJob(jobGuid) : mm.jobStore.getJobRequest(jobGuid)));
    }
  }
  return unfinishedJobs;
}

// ../core/src/commands/tmExport.js
var fs4 = __toESM(require("fs/promises"), 1);

// ../core/node_modules/@l10nmonster/tmexchange/lib/tmx2js.js
var import_xml2js = __toESM(require_xml2js(), 1);
var parser = new import_xml2js.default.Parser();

// ../core/node_modules/@l10nmonster/tmexchange/lib/js2tmx.js
var import_xml2js2 = __toESM(require_xml2js(), 1);
var js2tmxClb = (obj, opt, cb) => {
  if (!cb && typeof opt === "function") {
    cb = opt;
    opt = { pretty: true, indent: "  ", newline: "\n" };
  }
  opt = opt || { pretty: true, indent: "  ", newline: "\n" };
  if (!obj.sourceLanguage) {
    const err = new Error("Please define sourceLanguage!");
    if (cb)
      return cb(err);
    throw err;
  }
  const builder = new import_xml2js2.default.Builder({
    rootName: "tmx",
    headless: opt.headless !== void 0 ? opt.headless : true,
    renderOpts: {
      pretty: opt.pretty !== false,
      indent: opt.indent || "  ",
      newline: opt.newline || "\n"
    }
  });
  obj.tuid = obj.tuid !== void 0 ? obj.tuid : true;
  const xmlJs = {
    $: {
      version: obj.version || "1.4b"
    },
    header: {
      $: {
        creationtool: obj.creationTool || "tmexchange",
        creationtoolversion: obj.creationToolVersion || "3",
        adminlang: obj.administrationLanguage || obj.sourceLanguage,
        datatype: obj.datatype || "PlainText",
        segtype: obj.segtype || "sentence",
        "o-tmf": obj.oTMF || "ABCTransMem",
        srclang: obj.sourceLanguage
      }
    },
    body: {
      tu: []
    }
  };
  Object.keys(obj.resources).forEach((nsName) => {
    const possibleNoNsTu = {
      $: {},
      tuv: []
    };
    if (obj.tuid)
      possibleNoNsTu.$.tuid = nsName;
    Object.keys(obj.resources[nsName]).forEach((k2, i) => {
      if (typeof obj.resources[nsName][k2] === "string") {
        if (i === 0)
          xmlJs.body.tu.push(possibleNoNsTu);
        const noNsTuv = {
          $: {
            "xml:lang": k2
          },
          seg: obj.resources[nsName][k2].replace(/\f/g, "")
        };
        possibleNoNsTu.tuv.push(noNsTuv);
        return;
      }
      const tu = {
        $: {},
        prop: {
          $: {
            type: "group"
          },
          _: nsName
        },
        tuv: []
      };
      if (obj.tuid)
        tu.$.tuid = k2;
      xmlJs.body.tu.push(tu);
      Object.keys(obj.resources[nsName][k2]).forEach((l) => {
        const tuv = {
          $: {
            "xml:lang": l
          },
          seg: obj.resources[nsName][k2][l].replace(/\f/g, "")
        };
        tu.tuv.push(tuv);
      });
    });
  });
  const xml = builder.buildObject(xmlJs);
  if (cb)
    cb(null, xml);
  return xml;
};
function js2tmx(obj, opt, cb) {
  if (!cb && opt === void 0) {
    return new Promise((resolve4, reject) => js2tmxClb(obj, opt, (err, ret) => err ? reject(err) : resolve4(ret)));
  }
  if (!cb && typeof opt !== "function") {
    return new Promise((resolve4, reject) => js2tmxClb(obj, opt, (err, ret) => err ? reject(err) : resolve4(ret)));
  }
  js2tmxClb(obj, opt, cb);
}

// ../core/src/commands/tmExport.js
var import_helpers9 = __toESM(require_helpers(), 1);
async function exportTMX(content, emitMissingTranslations) {
  const getMangledSrc = (tu) => tu.nsrc ? import_helpers9.utils.flattenNormalizedSourceV1(tu.nsrc)[0] : tu.src;
  const getMangledTgt = (tu) => tu.ntgt ? import_helpers9.utils.flattenNormalizedSourceV1(tu.ntgt)[0] : tu.tgt;
  const tmx = {
    sourceLanguage: content.sourceLang,
    resources: {}
  };
  for (const pair of content.pairs) {
    const mangledTgt = pair.translatedTU !== void 0 && getMangledTgt(pair.translatedTU);
    if (pair.sourceTU || (pair.translatedTU.src || pair.translatedTU.nsrc)) {
      const useAsSourceTU = pair.sourceTU || pair.translatedTU;
      if (emitMissingTranslations || Boolean(mangledTgt)) {
        const group = useAsSourceTU.prj || "default";
        tmx.resources[group] ??= {};
        tmx.resources[group][pair.sourceTU.guid] = {};
        tmx.resources[group][pair.sourceTU.guid][content.sourceLang] = getMangledSrc(useAsSourceTU);
        Boolean(mangledTgt) && (tmx.resources[group][pair.sourceTU.guid][content.targetLang] = mangledTgt);
      }
    } else {
      (0, import_helpers9.sharedCtx)().logger.info(`Couldn't retrieve source for guid: ${pair.sourceTU.guid}`);
    }
  }
  return tmx;
}
async function exportAsJob(content, jobGuid) {
  const jobReq = {
    sourceLang: content.sourceLang,
    targetLang: content.targetLang,
    jobGuid,
    updatedAt: ((0, import_helpers9.sharedCtx)().regression ? /* @__PURE__ */ new Date("2022-05-30T00:00:00.000Z") : /* @__PURE__ */ new Date()).toISOString(),
    status: "created",
    tus: []
  };
  const jobRes = {
    ...jobReq,
    translationProvider: "TMExport",
    status: "done",
    tus: []
  };
  for (const pair of content.pairs) {
    const useAsSourceTU = { ...pair.translatedTU, ...pair.sourceTU };
    if (useAsSourceTU.src || useAsSourceTU.nsrc) {
      jobReq.tus.push(import_helpers9.utils.cleanupTU(useAsSourceTU, sourceTUWhitelist));
    } else {
      (0, import_helpers9.sharedCtx)().logger.info(`Couldn't retrieve source for guid: ${useAsSourceTU.guid}`);
    }
    const useAsTargetTU = { ...pair.sourceTU, ...pair.translatedTU };
    if (useAsTargetTU.inflight) {
      (0, import_helpers9.sharedCtx)().logger.info(`Warning: in-flight translation unit ${useAsTargetTU.guid} can't be exported`);
    } else {
      const cleanTU = import_helpers9.utils.cleanupTU(useAsTargetTU, targetTUWhitelist);
      cleanTU.ts = cleanTU.ts || (/* @__PURE__ */ new Date()).getTime();
      jobRes.tus.push(cleanTU);
    }
  }
  return [jobReq, jobRes];
}
async function tmExportCmd(mm, { limitToLang, mode, format: format2, prjsplit }) {
  const targetLangs = await mm.getTargetLangs(limitToLang);
  const status2 = { files: [] };
  for (const targetLang of targetLangs) {
    const sourceLookup = await mm.getSourceAsTus(targetLang);
    const tm = await mm.tmm.getTM(mm.sourceLang, targetLang);
    const guidList = mode === "tm" ? tm.guids : Object.keys(sourceLookup);
    const guidsByPrj = {};
    guidList.forEach((guid) => {
      if (!prjsplit || !(0, import_helpers9.sharedCtx)().prj || (0, import_helpers9.sharedCtx)().prj.includes(mode === "tm" ? tm.getEntryByGuid(guid).prj : sourceLookup[guid].prj)) {
        const prj = prjsplit && sourceLookup[guid]?.prj || "default";
        guidsByPrj[prj] ??= [];
        guidsByPrj[prj].push(guid);
      }
    });
    for (const prj of Object.keys(guidsByPrj)) {
      const content = {
        sourceLang: mm.sourceLang,
        targetLang,
        pairs: guidsByPrj[prj].map((guid) => ({
          sourceTU: sourceLookup[guid],
          translatedTU: tm.getEntryByGuid(guid)
        }))
      };
      let filename;
      if (format2 === "job") {
        const jobGuid = `tmexport_${prjsplit ? `${prj}_` : ""}${mm.sourceLang}_${targetLang}`;
        const [jobReq, jobRes] = await exportAsJob(content, jobGuid);
        filename = `TMExport_${mm.sourceLang}_${targetLang}_job_${jobGuid}`;
        await fs4.writeFile(`${filename}-req.json`, JSON.stringify(jobReq, null, "	"), "utf8");
        await fs4.writeFile(`${filename}-done.json`, JSON.stringify(jobRes, null, "	"), "utf8");
      } else if (format2 === "json") {
        const json = await exportTMX(content, mode !== "tm");
        filename = `${prjsplit ? `${prj}_` : ""}${mm.sourceLang}_${targetLang}.json`;
        await fs4.writeFile(`${filename}`, JSON.stringify(json, null, "	"), "utf8");
      } else {
        const json = await exportTMX(content, mode !== "tm");
        filename = `${prjsplit ? `${prj}_` : ""}${mm.sourceLang}_${targetLang}.tmx`;
        await fs4.writeFile(`${filename}`, await js2tmx(json), "utf8");
      }
      status2.files.push(filename);
    }
  }
  return status2;
}

// ../core/node_modules/diff/lib/index.mjs
function Diff() {
}
Diff.prototype = {
  diff: function diff(oldString, newString) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var callback = options.callback;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    this.options = options;
    var self2 = this;
    function done(value) {
      if (callback) {
        setTimeout(function() {
          callback(void 0, value);
        }, 0);
        return true;
      } else {
        return value;
      }
    }
    oldString = this.castInput(oldString);
    newString = this.castInput(newString);
    oldString = this.removeEmpty(this.tokenize(oldString));
    newString = this.removeEmpty(this.tokenize(newString));
    var newLen = newString.length, oldLen = oldString.length;
    var editLength = 1;
    var maxEditLength = newLen + oldLen;
    if (options.maxEditLength) {
      maxEditLength = Math.min(maxEditLength, options.maxEditLength);
    }
    var bestPath = [{
      newPos: -1,
      components: []
    }];
    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
      return done([{
        value: this.join(newString),
        count: newString.length
      }]);
    }
    function execEditLength() {
      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
        var basePath = void 0;
        var addPath = bestPath[diagonalPath - 1], removePath = bestPath[diagonalPath + 1], _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
        if (addPath) {
          bestPath[diagonalPath - 1] = void 0;
        }
        var canAdd = addPath && addPath.newPos + 1 < newLen, canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;
        if (!canAdd && !canRemove) {
          bestPath[diagonalPath] = void 0;
          continue;
        }
        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
          basePath = clonePath(removePath);
          self2.pushComponent(basePath.components, void 0, true);
        } else {
          basePath = addPath;
          basePath.newPos++;
          self2.pushComponent(basePath.components, true, void 0);
        }
        _oldPos = self2.extractCommon(basePath, newString, oldString, diagonalPath);
        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {
          return done(buildValues(self2, basePath.components, newString, oldString, self2.useLongestToken));
        } else {
          bestPath[diagonalPath] = basePath;
        }
      }
      editLength++;
    }
    if (callback) {
      (function exec() {
        setTimeout(function() {
          if (editLength > maxEditLength) {
            return callback();
          }
          if (!execEditLength()) {
            exec();
          }
        }, 0);
      })();
    } else {
      while (editLength <= maxEditLength) {
        var ret = execEditLength();
        if (ret) {
          return ret;
        }
      }
    }
  },
  pushComponent: function pushComponent(components, added, removed) {
    var last = components[components.length - 1];
    if (last && last.added === added && last.removed === removed) {
      components[components.length - 1] = {
        count: last.count + 1,
        added,
        removed
      };
    } else {
      components.push({
        count: 1,
        added,
        removed
      });
    }
  },
  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
    var newLen = newString.length, oldLen = oldString.length, newPos = basePath.newPos, oldPos = newPos - diagonalPath, commonCount = 0;
    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
      newPos++;
      oldPos++;
      commonCount++;
    }
    if (commonCount) {
      basePath.components.push({
        count: commonCount
      });
    }
    basePath.newPos = newPos;
    return oldPos;
  },
  equals: function equals(left, right) {
    if (this.options.comparator) {
      return this.options.comparator(left, right);
    } else {
      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
    }
  },
  removeEmpty: function removeEmpty(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  },
  castInput: function castInput(value) {
    return value;
  },
  tokenize: function tokenize(value) {
    return value.split("");
  },
  join: function join5(chars) {
    return chars.join("");
  }
};
function buildValues(diff2, components, newString, oldString, useLongestToken) {
  var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
  for (; componentPos < componentLen; componentPos++) {
    var component = components[componentPos];
    if (!component.removed) {
      if (!component.added && useLongestToken) {
        var value = newString.slice(newPos, newPos + component.count);
        value = value.map(function(value2, i) {
          var oldValue = oldString[oldPos + i];
          return oldValue.length > value2.length ? oldValue : value2;
        });
        component.value = diff2.join(value);
      } else {
        component.value = diff2.join(newString.slice(newPos, newPos + component.count));
      }
      newPos += component.count;
      if (!component.added) {
        oldPos += component.count;
      }
    } else {
      component.value = diff2.join(oldString.slice(oldPos, oldPos + component.count));
      oldPos += component.count;
      if (componentPos && components[componentPos - 1].added) {
        var tmp = components[componentPos - 1];
        components[componentPos - 1] = components[componentPos];
        components[componentPos] = tmp;
      }
    }
  }
  var lastComponent = components[componentLen - 1];
  if (componentLen > 1 && typeof lastComponent.value === "string" && (lastComponent.added || lastComponent.removed) && diff2.equals("", lastComponent.value)) {
    components[componentLen - 2].value += lastComponent.value;
    components.pop();
  }
  return components;
}
function clonePath(path11) {
  return {
    newPos: path11.newPos,
    components: path11.components.slice(0)
  };
}
var characterDiff = new Diff();
var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
var reWhitespace = /\S/;
var wordDiff = new Diff();
wordDiff.equals = function(left, right) {
  if (this.options.ignoreCase) {
    left = left.toLowerCase();
    right = right.toLowerCase();
  }
  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
};
wordDiff.tokenize = function(value) {
  var tokens = value.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/);
  for (var i = 0; i < tokens.length - 1; i++) {
    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
      tokens[i] += tokens[i + 2];
      tokens.splice(i + 1, 2);
      i--;
    }
  }
  return tokens;
};
var lineDiff = new Diff();
lineDiff.tokenize = function(value) {
  var retLines = [], linesAndNewlines = value.split(/(\n|\r\n)/);
  if (!linesAndNewlines[linesAndNewlines.length - 1]) {
    linesAndNewlines.pop();
  }
  for (var i = 0; i < linesAndNewlines.length; i++) {
    var line = linesAndNewlines[i];
    if (i % 2 && !this.options.newlineIsToken) {
      retLines[retLines.length - 1] += line;
    } else {
      if (this.options.ignoreWhitespace) {
        line = line.trim();
      }
      retLines.push(line);
    }
  }
  return retLines;
};
var sentenceDiff = new Diff();
sentenceDiff.tokenize = function(value) {
  return value.split(/(\S.+?[.!?])(?=\s+|$)/);
};
var cssDiff = new Diff();
cssDiff.tokenize = function(value) {
  return value.split(/([{}:;,]|\s+)/);
};
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
var objectPrototypeToString = Object.prototype.toString;
var jsonDiff = new Diff();
jsonDiff.useLongestToken = true;
jsonDiff.tokenize = lineDiff.tokenize;
jsonDiff.castInput = function(value) {
  var _this$options = this.options, undefinedReplacement = _this$options.undefinedReplacement, _this$options$stringi = _this$options.stringifyReplacer, stringifyReplacer = _this$options$stringi === void 0 ? function(k2, v2) {
    return typeof v2 === "undefined" ? undefinedReplacement : v2;
  } : _this$options$stringi;
  return typeof value === "string" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, "  ");
};
jsonDiff.equals = function(left, right) {
  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, "$1"), right.replace(/,([\r\n])/g, "$1"));
};
function diffJson(oldObj, newObj, options) {
  return jsonDiff.diff(oldObj, newObj, options);
}
function canonicalize(obj, stack, replacementStack, replacer, key) {
  stack = stack || [];
  replacementStack = replacementStack || [];
  if (replacer) {
    obj = replacer(key, obj);
  }
  var i;
  for (i = 0; i < stack.length; i += 1) {
    if (stack[i] === obj) {
      return replacementStack[i];
    }
  }
  var canonicalizedObj;
  if ("[object Array]" === objectPrototypeToString.call(obj)) {
    stack.push(obj);
    canonicalizedObj = new Array(obj.length);
    replacementStack.push(canonicalizedObj);
    for (i = 0; i < obj.length; i += 1) {
      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
    }
    stack.pop();
    replacementStack.pop();
    return canonicalizedObj;
  }
  if (obj && obj.toJSON) {
    obj = obj.toJSON();
  }
  if (_typeof(obj) === "object" && obj !== null) {
    stack.push(obj);
    canonicalizedObj = {};
    replacementStack.push(canonicalizedObj);
    var sortedKeys = [], _key;
    for (_key in obj) {
      if (obj.hasOwnProperty(_key)) {
        sortedKeys.push(_key);
      }
    }
    sortedKeys.sort();
    for (i = 0; i < sortedKeys.length; i += 1) {
      _key = sortedKeys[i];
      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
    }
    stack.pop();
    replacementStack.pop();
  } else {
    canonicalizedObj = obj;
  }
  return canonicalizedObj;
}
var arrayDiff = new Diff();
arrayDiff.tokenize = function(value) {
  return value.slice();
};
arrayDiff.join = arrayDiff.removeEmpty = function(value) {
  return value;
};

// ../core/src/commands/translate.js
var import_helpers10 = __toESM(require_helpers(), 1);
async function translateCmd(mm, { limitToLang, dryRun }) {
  const status2 = { generatedResources: {}, deleteResources: {}, diff: {} };
  const resourceStats = await mm.source.getResourceStats();
  const targetLangs = await mm.getTargetLangs(limitToLang);
  for (const targetLang of targetLangs) {
    const sourceLang = mm.sourceLang;
    const tm = await mm.tmm.getTM(sourceLang, targetLang);
    status2.generatedResources[targetLang] = [];
    status2.deleteResources[targetLang] = [];
    status2.diff[targetLang] = {};
    for (const res of resourceStats) {
      if (res.targetLangs.includes(targetLang) && ((0, import_helpers10.sharedCtx)().prj === void 0 || (0, import_helpers10.sharedCtx)().prj.includes(res.prj))) {
        const resourceId = res.id;
        const pipeline = mm.contentTypes[res.contentType];
        const encodePart = import_helpers10.utils.partEncoderMaker(pipeline.textEncoders, pipeline.codeEncoders);
        const translator = async function translate2(sid, src) {
          const seg = { sid, str: src };
          let nsrc;
          const flags = { sourceLang, targetLang, prj: res.prj };
          if (pipeline.decoders) {
            const normalizedStr = import_helpers10.utils.getNormalizedString(src, pipeline.decoders, flags);
            if (normalizedStr[0] !== src) {
              nsrc = normalizedStr;
              seg.nstr = normalizedStr;
            }
          }
          if (pipeline.segmentDecorator && pipeline.segmentDecorator([seg], targetLang).length === 0) {
            (0, import_helpers10.sharedCtx)().logger.info(`Dropping ${sid} in ${resourceId} as decided by segment decorator`);
            return void 0;
          }
          const flattenSrc = nsrc ? import_helpers10.utils.flattenNormalizedSourceToOrdinal(nsrc) : src;
          const guid = import_helpers10.utils.generateFullyQualifiedGuid(resourceId, sid, flattenSrc);
          const entry = tm.getEntryByGuid(guid);
          try {
            return import_helpers10.utils.translateWithEntry(src, nsrc, entry, flags, encodePart);
          } catch (e) {
            (0, import_helpers10.sharedCtx)().logger.verbose(`Problem translating ${resourceId}+${sid}+${src} to ${targetLang}: ${e}`);
            return void 0;
          }
        };
        let translatedRes;
        if (pipeline.resourceFilter.generateResource) {
          const resource = await mm.source.getResource(res);
          translatedRes = await pipeline.resourceFilter.generateResource({ resource, translator });
        } else {
          const resource = await pipeline.source.fetchResource(res.id);
          translatedRes = await pipeline.resourceFilter.translateResource({ resource, translator });
        }
        const translatedResourceId = pipeline.target.translatedResourceId(targetLang, resourceId);
        if (dryRun) {
          let currentRaw;
          try {
            currentRaw = await pipeline.target.fetchTranslatedResource(targetLang, resourceId);
          } catch (e) {
            (0, import_helpers10.sharedCtx)().logger.info(`${targetLang}: Couldn't fetch translated resource ${translatedResourceId}`);
          }
          if (currentRaw) {
            const currentParsed = await pipeline.resourceFilter.parseResource({ resource: currentRaw, isSource: false });
            const currentFlattened = {};
            currentParsed.segments.forEach((x2) => currentFlattened[x2.sid] = x2.str);
            const newParsed = translatedRes ? await pipeline.resourceFilter.parseResource({ resource: translatedRes, isSource: false }) : { segments: [] };
            const newFlattened = {};
            newParsed.segments.forEach((x2) => newFlattened[x2.sid] = x2.str);
            const diff2 = diffJson(currentFlattened, newFlattened).filter((x2) => x2.added ?? x2.removed).map((x2) => [Boolean(x2.added), x2.value]);
            diff2 && (status2.diff[targetLang][translatedResourceId] = diff2);
          }
        } else {
          await pipeline.target.commitTranslatedResource(targetLang, resourceId, translatedRes);
          (translatedRes === null ? status2.deleteResources : status2.generatedResources)[targetLang].push(translatedResourceId);
        }
      }
    }
  }
  return status2;
}

// ../core/src/stores/fsSnapStore.js
var path6 = __toESM(require("path"), 1);
var import_fs5 = require("fs");
var import_helpers11 = __toESM(require_helpers(), 1);
var FsSnapStore = class {
  constructor({ snapDir } = {}) {
    this.snapDir = path6.join((0, import_helpers11.sharedCtx)().baseDir, snapDir ?? "snap");
    try {
      this.TOC = JSON.parse((0, import_fs5.readFileSync)(path6.join(this.snapDir, "TOC.json")));
      this.#generateRidLookup();
    } catch (e) {
      this.TOC = {};
      this.ridLookup = {};
    }
  }
  #generateRidLookup() {
    this.ridLookup = {};
    Object.entries(this.TOC).forEach(([filename, resObj]) => Object.keys(resObj).forEach((rid) => this.ridLookup[rid] = filename));
  }
  async startSnapshot() {
    !(0, import_fs5.existsSync)(this.snapDir) && (0, import_fs5.mkdirSync)(this.snapDir, { recursive: true });
    this.filesToNuke = Object.fromEntries((0, import_fs5.readdirSync)(this.snapDir, { withFileTypes: true }).filter((e) => e.isFile()).map((e) => [e.name, true]));
    this.newTOC = {};
  }
  async commitResources(prj, chunk, resources) {
    const filename = `${prj}-${chunk}.json`;
    (0, import_fs5.writeFileSync)(path6.join(this.snapDir, filename), JSON.stringify(resources, null, "	"), "utf8");
    this.filesToNuke[filename] = false;
    this.newTOC[filename] = Object.fromEntries(Object.values(resources).map((res) => {
      const { segments, ...manifest } = res;
      return [res.id, manifest];
    }));
  }
  async endSnapshot() {
    (0, import_fs5.writeFileSync)(path6.join(this.snapDir, "TOC.json"), JSON.stringify(this.newTOC, null, "	"), "utf8");
    this.filesToNuke["TOC.json"] = false;
    Object.entries(this.filesToNuke).filter((e) => e[1]).forEach((e) => (0, import_fs5.unlinkSync)(path6.join(this.snapDir, e[0])));
    this.TOC = this.newTOC;
    this.#generateRidLookup();
  }
  async getResourceStats() {
    return Object.values(this.TOC).map((obj) => Object.values(obj)).flat(1);
  }
  async getResource(rs) {
    const resources = JSON.parse((0, import_fs5.readFileSync)(path6.join(this.snapDir, this.ridLookup[rs.id])));
    return resources[rs.id];
  }
  async *getAllResources() {
    for (const filename of Object.keys(this.TOC)) {
      const resources = JSON.parse((0, import_fs5.readFileSync)(path6.join(this.snapDir, filename)));
      for (const res of Object.values(resources)) {
        yield res;
      }
    }
  }
};

// ../core/src/adapters/fs.js
var path7 = __toESM(require("path"), 1);
var import_fs6 = require("fs");
var import_helpers12 = __toESM(require_helpers(), 1);
var FsSource = class {
  constructor({ baseDir, globs, filter, targetLangs, prj, resDecorator, idFromPath, pathFromId }) {
    if (globs === void 0) {
      throw "a globs property is required in FsSource";
    } else {
      this.globs = globs;
      this.filter = filter;
      this.targetLangs = targetLangs;
      this.prj = prj;
      this.resDecorator = resDecorator;
      this.idFromPath = idFromPath;
      this.pathFromId = pathFromId;
      this.baseDir = baseDir ? path7.join((0, import_helpers12.sharedCtx)().baseDir, baseDir) : (0, import_helpers12.sharedCtx)().baseDir;
    }
  }
  async fetchResourceStats() {
    const resources = [];
    const expandedFileNames = globbySync(this.globs.map((g2) => path7.join(this.baseDir, g2)));
    (0, import_helpers12.sharedCtx)().logger.info(`Fetched fs globs: ${this.globs}`);
    for (const fileName of expandedFileNames) {
      let id = path7.relative(this.baseDir, fileName);
      if (typeof this.idFromPath === "function") {
        id = this.idFromPath(id);
      }
      if (!this.filter || this.filter(id)) {
        const stats = (0, import_fs6.statSync)(fileName);
        let resMeta = {
          id,
          modified: (0, import_helpers12.sharedCtx)().regression ? 1 : stats.mtime.toISOString()
        };
        this.targetLangs && (resMeta.targetLangs = this.targetLangs);
        this.prj && (resMeta.prj = this.prj);
        if (typeof this.resDecorator === "function") {
          resMeta = this.resDecorator(resMeta);
        }
        resources.push(resMeta);
      }
    }
    return resources;
  }
  async fetchResource(resourceId) {
    if (typeof this.pathFromId === "function") {
      resourceId = this.pathFromId(resourceId);
    }
    return (0, import_fs6.readFileSync)(path7.resolve(this.baseDir, resourceId), "utf8");
  }
};
var FsTarget = class {
  constructor({ baseDir, targetPath, deleteEmpty }) {
    this.targetPath = targetPath;
    this.deleteEmpty = deleteEmpty;
    this.baseDir = baseDir ? path7.join((0, import_helpers12.sharedCtx)().baseDir, baseDir) : (0, import_helpers12.sharedCtx)().baseDir;
  }
  translatedResourceId(lang, resourceId) {
    return path7.resolve(this.baseDir, this.targetPath(lang, resourceId));
  }
  async fetchTranslatedResource(lang, resourceId) {
    return (0, import_fs6.readFileSync)(this.translatedResourceId(lang, resourceId), "utf8");
  }
  async commitTranslatedResource(lang, resourceId, translatedRes) {
    const translatedPath = path7.resolve(this.baseDir, this.targetPath(lang, resourceId));
    if (translatedRes === null) {
      this.deleteEmpty && (0, import_fs6.existsSync)(translatedPath) && (0, import_fs6.unlinkSync)(translatedPath);
    } else {
      await (0, import_fs6.mkdirSync)(path7.dirname(translatedPath), { recursive: true });
      (0, import_fs6.writeFileSync)(translatedPath, translatedRes, "utf8");
    }
  }
};

// ../core/src/filters/snap.js
var SnapFilter = class {
  async parseResource({ resource }) {
    return JSON.parse(resource);
  }
  // takes a raw resource
  async translateResource({ resource, translator }) {
    return this.generateResource({ resource: JSON.parse(resource), translator });
  }
  // takes a normalized resource
  async generateResource({ resource, translator }) {
    const { id, segments } = resource;
    const translatedSegments = [];
    for (const seg of segments) {
      const translation = await translator(seg.sid, seg.str);
      translation !== void 0 && translatedSegments.push({ ...seg, str: translation });
    }
    return JSON.stringify({ id, segments: translatedSegments }, null, "	");
  }
};

// ../core/src/translators/grandfather.js
var import_helpers13 = __toESM(require_helpers(), 1);
var Grandfather = class {
  constructor({ quality }) {
    if (quality === void 0) {
      throw "You must specify a quality property for Grandfather";
    }
    this.quality = quality;
  }
  async requestTranslations(jobRequest) {
    const { tus, ...jobResponse } = jobRequest;
    jobResponse.tus = [];
    const txCache = {};
    const resourceStats = Object.fromEntries((await (0, import_helpers13.sharedCtx)().mm.source.getResourceStats()).map((r) => [r.id, r]));
    for (const tu of tus) {
      if (!txCache[tu.rid]) {
        const resMeta = resourceStats[tu.rid];
        const pipeline = (0, import_helpers13.sharedCtx)().mm.contentTypes[resMeta.contentType];
        const lookup = {};
        try {
          const resource = await pipeline.target.fetchTranslatedResource(jobRequest.targetLang, tu.rid);
          const parsedResource = await pipeline.resourceFilter.parseResource({ resource, isSource: false });
          for (const seg of parsedResource.segments) {
            if (pipeline.decoders) {
              const normalizedStr = import_helpers13.utils.getNormalizedString(seg.str, pipeline.decoders);
              if (normalizedStr[0] !== seg.str) {
                seg.nstr = normalizedStr;
              }
            }
            lookup[seg.sid] = import_helpers13.utils.makeTU(resMeta, seg);
          }
        } catch (e) {
          (0, import_helpers13.sharedCtx)().logger.info(`Couldn't fetch translated resource: ${e}`);
        }
        txCache[tu.rid] = lookup;
      }
      const previousTranslation = txCache[tu.rid][tu.sid];
      if (previousTranslation !== void 0) {
        const translation = {
          guid: tu.guid,
          q: this.quality
        };
        !tu.nsrc && (translation.src = tu.src);
        tu.nsrc && (translation.nsrc = tu.nsrc);
        if (previousTranslation.nsrc) {
          const [flattenSrc, phMap] = import_helpers13.utils.flattenNormalizedSourceV1(previousTranslation.nsrc);
          translation.ntgt = import_helpers13.utils.extractNormalizedPartsV1(flattenSrc, phMap);
        } else {
          translation.tgt = previousTranslation.src;
        }
        previousTranslation.ts && (translation.ts = previousTranslation.ts);
        const isCompatible = import_helpers13.utils.sourceAndTargetAreCompatible(tu?.nsrc ?? tu?.src, translation?.ntgt ?? translation?.tgt);
        if (isCompatible) {
          jobResponse.tus.push(translation);
        }
      }
    }
    jobResponse.status = "done";
    (0, import_helpers13.sharedCtx)().logger.info(`Grandfathering ${jobRequest.targetLang}... found ${tus.length} missing translations, of which ${jobResponse.tus.length} can be grandfathered`);
    return jobResponse;
  }
  // sync api only
  async fetchTranslations() {
    throw "Grandfather is a synchronous-only provider";
  }
  async refreshTranslations(jobRequest) {
    const fullResponse = await this.requestTranslations(jobRequest);
    const reqTuMap = jobRequest.tus.reduce((p2, c2) => (p2[c2.guid] = c2, p2), {});
    return {
      ...fullResponse,
      tus: fullResponse.tus.filter((tu) => !import_helpers13.utils.normalizedStringsAreEqual(reqTuMap[tu.guid].ntgt ?? reqTuMap[tu.guid].tgt, tu.ntgt ?? tu.tgt))
    };
  }
};

// ../core/src/translators/repetition.js
var import_helpers14 = __toESM(require_helpers(), 1);
var Repetition = class {
  constructor({ qualifiedPenalty, unqualifiedPenalty }) {
    if ((qualifiedPenalty && unqualifiedPenalty) === void 0) {
      throw "You must specify qualifiedPenalty and unqualifiedPenalty properties for Repetition";
    }
    this.qualifiedPenalty = qualifiedPenalty;
    this.unqualifiedPenalty = unqualifiedPenalty;
  }
  // eslint-disable-next-line complexity
  async requestTranslations(jobRequest) {
    const { tus, ...jobResponse } = jobRequest;
    jobResponse.tus = [];
    const tm = await (0, import_helpers14.sharedCtx)().mm.tmm.getTM((0, import_helpers14.sharedCtx)().mm.sourceLang, jobRequest.targetLang);
    for (const tu of tus) {
      const tuCandidates = tm.getAllEntriesBySrc(tu.nsrc ?? tu.src);
      if (tuCandidates.length > 0) {
        let bestCandidate = { q: 0, ts: 0 };
        let foundCandidate = false;
        for (const candidate of tuCandidates) {
          const isCompatible = import_helpers14.utils.sourceAndTargetAreCompatible(tu?.nsrc ?? tu?.src, candidate?.ntgt ?? candidate?.tgt);
          const adjustedQuality = Math.max(0, candidate.q - (tu.sid === candidate.sid ? this.qualifiedPenalty : this.unqualifiedPenalty), 0);
          const isSameQualityButNewer = adjustedQuality === bestCandidate.q && candidate.ts > bestCandidate.ts;
          const isBetterCandidate = adjustedQuality > bestCandidate.q || isSameQualityButNewer;
          if (isCompatible && isBetterCandidate) {
            bestCandidate = { ...candidate, q: adjustedQuality };
            foundCandidate = true;
          }
        }
        if (foundCandidate) {
          const leveragedTU = {
            guid: tu.guid,
            q: bestCandidate.q
          };
          !bestCandidate.nsrc && (leveragedTU.src = bestCandidate.src);
          bestCandidate.nsrc && (leveragedTU.nsrc = bestCandidate.nsrc);
          !bestCandidate.ntgt && (leveragedTU.tgt = bestCandidate.tgt);
          bestCandidate.ntgt && (leveragedTU.ntgt = bestCandidate.ntgt);
          const existingTU = tm.getEntryByGuid(tu.guid);
          if (existingTU && import_helpers14.utils.normalizedStringsAreEqual(existingTU.ntgt ?? existingTU.ntgt, leveragedTU.ntgt ?? leveragedTU.ntgt)) {
            (0, import_helpers14.sharedCtx)().logger.verbose(`Did not leverage ${bestCandidate.guid} for ${tu.guid} because TM already has an identical entry (maybe of quality < minimum quality)`);
          } else {
            leveragedTU.ts = (0, import_helpers14.sharedCtx)().regression ? (existingTU?.ts ?? 0) + 1 : (/* @__PURE__ */ new Date()).getTime();
            jobResponse.tus.push(leveragedTU);
            (0, import_helpers14.sharedCtx)().logger.verbose(`Leveraged ${bestCandidate.guid} for ${tu.guid}`);
          }
        }
      }
    }
    jobResponse.status = "done";
    (0, import_helpers14.sharedCtx)().logger.info(`Leveraging ${jobRequest.targetLang}... found ${tus.length} missing translations, of which ${jobResponse.tus.length} can be leveraged`);
    return jobResponse;
  }
  // sync api only
  async fetchTranslations() {
    throw "Repetition is a synchronous-only provider";
  }
  async refreshTranslations(jobRequest) {
    const fullResponse = await this.requestTranslations(jobRequest);
    const reqTuMap = jobRequest.tus.reduce((p2, c2) => (p2[c2.guid] = c2, p2), {});
    return {
      ...fullResponse,
      tus: fullResponse.tus.filter((tu) => !import_helpers14.utils.normalizedStringsAreEqual(reqTuMap[tu.guid].ntgt ?? reqTuMap[tu.guid].tgt, tu.ntgt ?? tu.tgt))
    };
  }
};

// ../core/src/translators/visicode.js
var import_helpers15 = __toESM(require_helpers(), 1);
function underlineString(str, runningLength) {
  const newStr = [];
  for (const c2 of str) {
    runningLength++;
    newStr.push(c2);
    newStr.push(runningLength % 5 === 0 ? "\u0332\u031F" : "\u0332");
  }
  return newStr.join("");
}
var Visicode = class {
  constructor({ quality } = {}) {
    if (quality === void 0) {
      throw "You must specify a quality for Visicode";
    } else {
      this.quality = quality;
    }
  }
  async requestTranslations(jobRequest) {
    const { tus, ...jobResponse } = jobRequest;
    const ts = (0, import_helpers15.sharedCtx)().regression ? 1 : (/* @__PURE__ */ new Date()).getTime();
    jobResponse.tus = jobRequest.tus.map((tu) => {
      const translation = { guid: tu.guid, ts };
      const prolog = `\u21E5${tu.seq ? `${import_helpers15.utils.integerToLabel(tu.seq)}:` : ""}`;
      if (tu.nsrc) {
        const parts = [];
        let runningLength = 0;
        for (const part of tu.nsrc) {
          if (typeof part === "string") {
            parts.push(underlineString(part, runningLength));
            runningLength += part.length;
          } else {
            parts.push({ ...part });
          }
        }
        translation.ntgt = [
          prolog,
          ...parts,
          `\u21E4`
        ];
      } else {
        translation.tgt = `${prolog}${underlineString(tu.src, 0)}\u21E4`;
      }
      translation.q = this.quality;
      return translation;
    });
    jobResponse.status = "done";
    return jobResponse;
  }
  async fetchTranslations() {
    throw "Visicode is a synchronous-only provider";
  }
};

// ../core/src/core.js
var helpers = __toESM(require_helpers(), 1);

// ../core/src/analyzers/duplicateSource.js
var DuplicateSource = class {
  constructor() {
    this.qualifiedMatches = {};
    this.unqualifiedMatches = {};
  }
  processSegment({ rid, prj, seg }) {
    const str = seg.gstr || seg.str;
    this.unqualifiedMatches[str] ??= [];
    this.unqualifiedMatches[str].push({ rid, prj, sid: seg.sid, str });
    const qStr = `${seg.sid}|${str}`;
    this.qualifiedMatches[qStr] ??= [];
    this.qualifiedMatches[qStr].push({ rid, prj, sid: seg.sid, str });
  }
  getAnalysis() {
    const analysis = {
      head: ["str", "prj", "rid", "sid"],
      groupBy: ["str"],
      body: []
    };
    const qualifiedRepetitions = Object.values(this.qualifiedMatches).filter((e) => e.length > 1);
    const unqualifiedRepetitions = Object.values(this.unqualifiedMatches).filter((e) => e.length > 1);
    for (const rep of [...qualifiedRepetitions, ...unqualifiedRepetitions]) {
      for (const r of rep) {
        analysis.body.push([rep[0].str, r.prj, r.rid, r.sid]);
      }
    }
    return analysis;
  }
};
__publicField(DuplicateSource, "help", "find duplicate text in source that could be leveraged as qualified/unqualified");

// ../core/src/analyzers/smellySource.js
var SmellySource = class {
  constructor(smellyRegex) {
    this.smelly = [];
    this.smellyRegex = smellyRegex ? new RegExp(smellyRegex) : /[^a-zA-Z 0-9.,;:!()\-'?/+’“”]/;
  }
  processSegment({ rid, prj, seg }) {
    const content = seg?.nstr?.map((e) => typeof e === "string" ? e : "")?.join("") || seg.str;
    if (this.smellyRegex.test(content)) {
      this.smelly.push([prj, rid, seg.sid, content]);
    }
  }
  getAnalysis() {
    return {
      head: ["prj", "rid", "sid", "str"],
      groupBy: ["prj", "rid"],
      body: this.smelly
    };
  }
};
__publicField(SmellySource, "helpParams", "[smellyRegex]");
__publicField(SmellySource, "help", "find all source segments that match the regular expression");

// ../core/src/analyzers/textExpansionSummary.js
function mean(numArray, position) {
  return numArray.reduce((s, n) => s + n[position], 0) / numArray.length;
}
function stdDev(numArray, position) {
  const meanValue = mean(numArray, position);
  return Math.sqrt(numArray.reduce((s, n) => s + (n[position] - meanValue) ** 2, 0) / (numArray.length - 1));
}
var TextExpansionSummary = class {
  constructor() {
    this.langStats = {};
  }
  processTU({ targetLang, tu }) {
    const src = tu.nsrc ? tu.nsrc.map((e) => typeof e === "string" ? e : "").join("") : tu.src;
    const tgt = tu.ntgt ? tu.ntgt.map((e) => typeof e === "string" ? e : "").join("") : tu.tgt;
    if (src && tgt && src.length > 0 && tgt.length > 0) {
      this.langStats[targetLang] ??= [];
      this.langStats[targetLang].push([
        src.length,
        tgt.length,
        tgt.length >= src.length ? tgt.length / src.length - 1 : -src.length / tgt.length + 1
      ]);
    }
  }
  getAnalysis() {
    return {
      head: ["lang", "avgSrc", "avgTgt", "avgGrowth", "growthStdDev"],
      body: Object.entries(this.langStats).map(([targetLang, stats]) => [
        targetLang,
        mean(stats, 0).toFixed(1),
        mean(stats, 1).toFixed(1),
        mean(stats, 2).toFixed(2),
        stdDev(stats, 2).toFixed(2)
      ])
    };
  }
};
__publicField(TextExpansionSummary, "help", "compute average lengths, growth, and standard deviation based on TM contents");

// ../core/src/analyzers/findByExpansion.js
var import_fs7 = require("fs");
var makeCSVCompatibleString = (nstr) => Array.isArray(nstr) ? nstr.map((e) => typeof e === "string" ? e : "").join("").replaceAll(",", "").replaceAll("\n", " ") : (nstr ?? "").replaceAll(",", "").replaceAll("\n", " ");
var FindByExpansion = class {
  constructor(average, minDelta) {
    this.foundTus = [];
    this.average = Number(average);
    this.minDelta = Number(minDelta);
    if (this.minDelta > 0) {
      if (isNaN(this.average)) {
        const teSummary = (0, import_fs7.readFileSync)(average, "utf8").split("\n").slice(1);
        this.stats = Object.fromEntries(teSummary.map((line) => {
          const row = line.split(",");
          return [row[0], [row[3], row[4]]];
        }));
      }
    } else {
      throw `invalid parameters ${this.average} ${this.minDelta}`;
    }
  }
  processTU({ targetLang, tu }) {
    const src = makeCSVCompatibleString(tu.nsrc ?? tu.src);
    const tgt = makeCSVCompatibleString(tu.ntgt ?? tu.tgt);
    const avg = this.stats ? this.stats[targetLang][0] : this.average;
    const delta = this.stats ? this.stats[targetLang][1] * this.minDelta : this.minDelta;
    if (src && tgt && src.length > 0 && tgt.length > 0) {
      const growth = tgt.length >= src.length ? tgt.length / src.length - 1 : -src.length / tgt.length + 1;
      Math.abs(growth - avg) >= delta && this.foundTus.push([
        targetLang,
        tu.guid,
        src,
        tgt,
        growth.toFixed(2)
      ]);
    }
  }
  getAnalysis() {
    return {
      head: ["lang", "guid", "src", "tgt", "delta"],
      groupBy: ["lang"],
      body: this.foundTus
    };
  }
};
__publicField(FindByExpansion, "helpParams", "<average|csvFile> <minDelta|sigmas>");
__publicField(FindByExpansion, "help", "find in TM all translations that grew more than minDelta/sigma multiples of the average");

// ../core/src/analyzers/mismatchedTags.js
function nestingIsValid(normalizedString) {
  if (!Array.isArray(normalizedString)) {
    return true;
  }
  let nestingLevel = 0;
  for (const part of normalizedString) {
    if (part.t === "bx") {
      nestingLevel++;
    } else if (part.t === "ex") {
      nestingLevel--;
      if (nestingLevel < 0) {
        break;
      }
    }
  }
  return nestingLevel === 0;
}
function makeCSVCompatibleString2(nstr) {
  return nstr.map((e) => typeof e === "string" ? e : `{${e.t}}`).join("").replaceAll(",", "").replaceAll("\n", " ");
}
var MismatchedTags = class {
  constructor() {
    this.foundTus = [];
  }
  processTU({ targetLang, tu }) {
    if (nestingIsValid(tu.nsrc) && !nestingIsValid(tu.ntgt)) {
      this.foundTus.push([
        targetLang,
        tu.guid,
        makeCSVCompatibleString2(tu.nsrc ?? tu.src),
        makeCSVCompatibleString2(tu.ntgt ?? tu.tgt)
      ]);
    }
  }
  getAnalysis() {
    return {
      head: ["lang", "guid", "src", "tgt"],
      groupBy: ["lang"],
      body: this.foundTus
    };
  }
};
__publicField(MismatchedTags, "help", "find mismatched open/close placeholders in translations");

// ../core/src/analyzers/contentExport.js
var contentExport_exports = {};
__export(contentExport_exports, {
  ExportTranslationGrid: () => ExportTranslationGrid,
  FindInTarget: () => FindInTarget
});
function makeCSVCompatibleString3(nstr) {
  return nstr.map((e) => typeof e === "string" ? e : `{${e?.t}}`).join("").replaceAll(",", "").replaceAll("\n", " ");
}
var FindInTarget = class {
  constructor(regex) {
    this.foundTus = [];
    this.regex = (regex && new RegExp(regex)) ?? /(?<ph>(?<phIdx>[a-y]|z\d+)_(?<t>x|bx|ex)_(?<phName>[0-9A-Za-z_]*))/;
  }
  processTU({ targetLang, tu }) {
    if (tu.ntgt) {
      for (const part of tu.ntgt) {
        if (typeof part === "string" && part.match(this.regex)) {
          this.foundTus.push([
            targetLang,
            tu.guid,
            makeCSVCompatibleString3(tu.ntgt)
          ]);
          break;
        }
      }
    }
  }
  getAnalysis() {
    return {
      head: ["lang", "guid", "tgt"],
      groupBy: ["lang"],
      body: this.foundTus
    };
  }
};
__publicField(FindInTarget, "helpParams", "[regex]");
__publicField(FindInTarget, "help", "find a_bx_bold kind of text in translations or the desired regex");
var ExportTranslationGrid = class {
  constructor() {
    this.langs = {};
    this.grid = {};
  }
  processTU({ targetLang, tu }) {
    this.langs[targetLang] = true;
    this.grid[tu.guid] ??= { src: makeCSVCompatibleString3(tu.nsrc || [tu.src]) };
    this.grid[tu.guid][targetLang] = makeCSVCompatibleString3(tu.ntgt || [tu.tgt]);
  }
  getAggregateAnalysis() {
    return {
      head: ["guid", "src", ...Object.keys(this.langs)],
      groupBy: ["lang"],
      body: Object.entries(this.grid).map(([guid, tx]) => [
        guid,
        tx.src,
        ...Object.keys(this.langs).map((lang) => tx[lang] || "")
      ])
    };
  }
};
__publicField(ExportTranslationGrid, "help", "export side by side translations");

// ../core/src/core.js
var defaultAnalyzers = {
  DuplicateSource,
  SmellySource,
  TextExpansionSummary,
  FindByExpansion,
  MismatchedTags,
  ...contentExport_exports
};

// ../core/src/monsterFactory.js
var path8 = __toESM(require("path"), 1);
var import_fs9 = require("fs");
async function createMonsterManager({ configPath, options, logger, env }) {
  if (!configPath) {
    throw "missing configuration";
  }
  const baseDir = path8.dirname(configPath);
  const Config = await import(configPath);
  if (typeof Config?.default !== "function") {
    throw "Invalid Config. Need to export a class constructor as a default export";
  }
  const configSeal = (0, import_fs9.statSync)(configPath).mtime.toISOString();
  const regression = options.regression;
  let prj = options.prj;
  prj && (prj = prj.split(","));
  const opsMgr = Config.opsDir ? new OpsMgr({ opsDir: path8.join(baseDir, Config.opsDir), logger }) : new OpsMgr({ logger });
  helpers.mergeProps({
    baseDir,
    opsMgr,
    env: env ?? {},
    arg: options.arg,
    logger: logger ?? { verbose: () => false, info: () => false, warn: () => false, error: () => false },
    regression,
    prj
  });
  try {
    const configParams = {
      helpers,
      stores: { JsonJobStore, FsSnapStore },
      adapters: { FsSource, FsTarget },
      filters: { SnapFilter },
      translators: { Grandfather, Repetition, Visicode }
    };
    logger.verbose("Initializing config with:");
    logger.verbose(configParams);
    const monsterConfig = new Config.default(configParams);
    logger.verbose("Successfully got config instance:");
    logger.verbose(monsterConfig, { depth: 5 });
    const monsterDir = path8.join(baseDir, monsterConfig.monsterDir ?? ".l10nmonster");
    logger.info(`Monster dir: ${monsterDir}`);
    if (!(0, import_fs9.existsSync)(monsterDir)) {
      (0, import_fs9.mkdirSync)(monsterDir, { recursive: true });
    }
    const mm = new MonsterManager({ monsterDir, monsterConfig, configSeal, defaultAnalyzers });
    helpers.sharedCtx().mm = mm;
    logger.info(`L10n Monster initialized!`);
    return mm;
  } catch (e) {
    throw `l10nmonster.cjs failed to construct: ${e.stack || e}`;
  }
}

// l10nCommands.js
var import_fs10 = require("fs");
var util = __toESM(require("node:util"), 1);
var winston = __toESM(require_winston(), 1);

// node_modules/tinyld/dist/tinyld.normal.node.mjs
var N = { TINYLD_CONFIG: "normal" };
var y = /[,.。，、#%&/\\+*¡!¿?[\]！？;:…„“«»”"“_–—~]/gi;
var p = /[0-9]/g;
var S = /[\uFF10-\uFF19]/g;
var v = /\s\s+/g;
var j = /’/gi;
var H = /[\u0300-\u036f]/g;
function X(a) {
  return typeof a == "string" || a instanceof String;
}
function V(a) {
  return a.toLowerCase().replace(j, "'").replace(y, " ").replace(S, (i) => String.fromCharCode(i.charCodeAt(0) - 65248)).replace(p, "").replace(v, " ").trim();
}
function U(a) {
  return a.normalize("NFD").replace(H, "");
}
var P = { light: { TRAINING_UNIQUE_GRAMS: [1, 2, 3, 4], TOP_LANGUAGE_UNIQUE_GRAMS: 60, TOP_LANGUAGE_STATS_GRAMS: 50 }, normal: { TRAINING_UNIQUE_GRAMS: [1, 2, 3, 4, 5], TOP_LANGUAGE_UNIQUE_GRAMS: 100, TOP_LANGUAGE_STATS_GRAMS: 180 }, heavy: { TRAINING_UNIQUE_GRAMS: [1, 2, 3, 4, 5], TOP_LANGUAGE_UNIQUE_GRAMS: 320, TOP_LANGUAGE_STATS_GRAMS: 1024 } };
var M = N.TINYLD_CONFIG || "normal";
var F = P[M].TRAINING_UNIQUE_GRAMS;
var n0 = P[M].TOP_LANGUAGE_UNIQUE_GRAMS;
var o0 = P[M].TOP_LANGUAGE_STATS_GRAMS;
var R = 1e4;
function Q(a) {
  return Math.round(a * R) / R;
}
var T = (a) => {
  let i = { only: [], verbose: false };
  return a ? Object.assign(i, a) : i;
};
var u = { afr: { code: "af", region: "africa", name: "Afrikaans", skipLight: true }, amh: { code: "am", region: "africa", name: "Amharic", skipLight: true, coefProb: 0 }, ber: { code: "ber", region: "africa", name: "Berber", skipLight: true, coefProb: 0.25 }, run: { code: "rn", region: "africa", name: "Kirundi", skipLight: true }, jpn: { code: "ja", region: "asia-east", name: "Japanese", alias: ["jp"], coefProb: 0 }, cmn: { code: "zh", region: "asia-east", name: "Chinese", alias: ["cn"], coefProb: 0.25 }, kor: { code: "ko", region: "asia-east", name: "Korean", alias: ["kr"], coefProb: 0 }, mya: { code: "my", region: "asia", name: "Burmese", skipLight: true, coefProb: 0 }, tha: { code: "th", region: "asia", name: "Thai", coefProb: 0 }, vie: { code: "vi", region: "asia", name: "Vietnamese", skipLight: true, coefProb: 0 }, ind: { code: "id", region: "asia", name: "Indonesian", skipLight: true }, khm: { code: "km", region: "asia", name: "Khmer", skipLight: true, coefProb: 0 }, tgl: { code: "tl", region: "asia", name: "Tagalog", skipLight: true }, ben: { code: "bn", region: "asia-south", name: "Bengali", coefProb: 0 }, tam: { code: "ta", region: "asia-south", name: "Tamil", skipLight: true, coefProb: 0 }, hin: { code: "hi", region: "asia-south", name: "Hindi", coefProb: 0 }, urd: { code: "ur", region: "asia-south", name: "Urdu", skipLight: true, coefProb: 0 }, guj: { code: "gu", region: "asia-south", name: "Gujarati", skipLight: true, coefProb: 0 }, kan: { code: "kn", region: "asia-south", name: "Kannada", skipLight: true, coefProb: 0 }, tel: { code: "te", region: "asia-south", name: "Telugu", skipLight: true, coefProb: 0 }, fra: { code: "fr", region: "europe-west", name: "French" }, eng: { code: "en", region: "europe-west", name: "English", alias: ["us", "gb"] }, deu: { code: "de", region: "europe-west", name: "German", coefProb: 0.5 }, spa: { code: "es", region: "europe-west", name: "Spanish" }, por: { code: "pt", region: "europe-west", name: "Portuguese", alias: ["po"] }, ita: { code: "it", region: "europe-west", name: "Italian" }, nld: { code: "nl", region: "europe-west", name: "Dutch" }, gle: { code: "ga", region: "europe-west", name: "Irish", skipLight: true }, lat: { code: "la", region: "europe", name: "Latin", skipLight: true }, ces: { code: "cs", region: "europe", name: "Czech", skipLight: true }, srp: { code: "sr", region: "europe", name: "Serbian", skipLight: true }, ell: { code: "el", region: "europe", name: "Greek", alias: ["gr"], coefProb: 0 }, mkd: { code: "mk", region: "europe", name: "Macedonian", skipLight: true, coefProb: 1.5 }, slk: { code: "sk", region: "europe", name: "Slovak", skipLight: true }, dan: { code: "da", region: "europe-north", name: "Danish", skipLight: true, coefProb: 1.5 }, swe: { code: "sv", region: "europe-north", name: "Swedish" }, fin: { code: "fi", region: "europe-north", name: "Finnish" }, nob: { code: "no", region: "europe-north", name: "Norwegian", coefProb: 1.5 }, isl: { code: "is", region: "europe-north", name: "Icelandic", skipLight: true, coefProb: 0.5 }, hun: { code: "hu", region: "europe-east", name: "Hungarian" }, ron: { code: "ro", region: "europe-east", name: "Romanian", coefProb: 0.5 }, bul: { code: "bg", region: "europe-east", name: "Bulgarian", skipLight: true }, bel: { code: "be", region: "europe-east", name: "Belarusian", skipLight: true }, rus: { code: "ru", region: "europe-east", name: "Russian" }, ukr: { code: "uk", region: "europe-east", name: "Ukrainian", skipLight: true }, pol: { code: "pl", region: "europe-east", name: "Polish", coefProb: 0.5 }, lit: { code: "lt", region: "europe-east", name: "Lithuanian", skipLight: true }, est: { code: "et", region: "europe-east", name: "Estonian", skipLight: true }, lvs: { code: "lv", region: "europe-east", name: "Latvian", skipLight: true }, hye: { code: "hy", region: "middle-east", name: "Armenian", skipLight: true, coefProb: 0 }, tur: { code: "tr", region: "middle-east", name: "Turkish" }, heb: { code: "he", region: "middle-east", name: "Hebrew", coefProb: 0 }, yid: { code: "yi", region: "middle-east", name: "Yiddish", skipLight: true, coefProb: 0.5 }, ara: { code: "ar", region: "middle-east", name: "Arabic", coefProb: 0 }, pes: { code: "fa", region: "middle-east", name: "Persian", skipLight: true, coefProb: 0 }, tat: { code: "tt", region: "middle-east", name: "Tatar", skipLight: true, coefProb: 0 }, kaz: { code: "kk", region: "middle-east", name: "Kazakh", skipLight: true }, mon: { code: "mn", region: "middle-east", name: "Mongolian", skipLight: true }, tuk: { code: "tk", region: "middle-east", name: "Turkmen", skipLight: true }, epo: { code: "eo", region: "other", name: "Esperanto", skipLight: true, coefProb: 0.5 }, vol: { code: "vo", region: "other", name: "Volapuk", skipLight: true, coefProb: 0.5 }, tlh: { code: "tlh", region: "other", name: "Klingon", skipLight: true, coefProb: 0.25 } };
var h = new Set(Object.entries(u).filter((a) => M === "heavy" || M === "normal" || M === "light" && !a[1].skipLight).map((a) => a[0]));
var k = [...h.values()];
var t0 = Object.fromEntries(k.map((a, i) => [a, i + 1]));
var g = Object.fromEntries(k.map((a, i) => [i + 1, a]));
function m(a) {
  return a in u ? u[a].code : a;
}
var C = { id: "tinyld-dict", multiples: { " 'a": "1F041Q7Q", " 'e": "1QK8", " 'e'": "1QNF", " 'e' ": "1QSG", " 'ej ": "1QCV", " 'n": "019Y0D06", " 'n ": "01JW", " 'o": "1QAT", " 'oh": "1QE3", " 'oh ": "1QHK", " aan": "017W0RA9", " aan ": "013Q0RA8", " aang": "011Z0R1C", " aban": "030904BX0L0E0M030O0H0P091506", " abb": "0N020Q4L1416", " abbi": "0N020Q3D", " abou": "0M4F", " aby": "0U530Y591A0R", " aby ": "0U3U0Y6H1A10", " acc": "03020L1P0M0X0O0P0Q1Z0R060T2Q0Z041006151F", " ace": "030U0O180P0S0T0B15EK1F0B", " acea": "1579", " aces": "0P061595", " ach": "0L1Q0M030N0H0P3S0R1A0S2L0T091A02", " ach ": "0N070SA41A02", " acho": "0P30", " aco": "0O0Z0P2O152T", " ad ": "03SG0Q1W0T9K0Z0B14061P1E", " ada ": "0BCT", " adal": "0BCV1F04", " adam": "03040L020T061F221N671O02", " ae": "0O040P050Q050T2Z0V06150B1B041C1X1O04", " af ": "011A0R1B0Z9E137N", " afis": "048W", " ag ": "0SJW", " agam": "03030B0A0SQU0T04", " agat": "030504220SE9", " agor": "0P2M", " agu": "03050O1G0P080S8J1O02", " agus": "03060SPR", " aho": "04620O2B0U020Y0C141I", " aho ": "04AF", " ahor": "0O2X", " ai ": "0L150Q0N1103157Q", " aici": "0S4R1553", " aik": "11561B03", " aika": "11A8", " ain": "0L0G0P2F0S180T0211321C1J", " aind": "0P32", " air ": "0B210L050M080S7Z", " aiu": "0Q35", " aiut": "0Q37", " aiz": "1D5W", " aju": "0O020P2B154T", " ajud": "0P2W", " aka": "030J046V0B9G0D0A14861F02", " akan": "03050BGO", " akar": "0302042Z148D", " akin": "0D3E14091B0N", " akk": "037V0R04120G142B", " akke": "038T", " ako": "041O0D810U030V1H0Y9C1O07", " ako ": "0DAQ0V3S0YBA", " akon": "0D3X", " aku": "030J041G0BLG10021A021O07", " aku ": "0BSG", " alam": "03040B0K0D3211031F0B", " ald": "0O020P030Z1W101Y122O131Y1F2E1N2J1O07", " aldr": "0Z23101Y122H133F", " ale ": "0U470Y2X150Y1A3S", " algo": "0O330P1G", " algu": "0O3P0P4S", " ali ": "0P0F0V4I1F1H", " aliq": "0T2B", " all ": "0M460N0A100412091C17", " allt": "0N02103B121N136C", " als": "03020M0B0N4U0R7M140J", " als ": "0N7K0R7J", " alt ": "0N0P0Z1Y122415071F03", " alti": "0Q020R2E0T0B0Z1N11041O05", " am ": "031Q0M0U0N1W15G6", " amic": "0L030Q3L0T3B", " amit": "0L030T0B143S", " an ": "0L050M2M0N4P0SSG0T1310021205150I1F0B", " anak": "0B590D0Q", " anc": "0L080M030O0A0P020Q4K0T0H1F09", " anco": "0Q31", " and ": "0MGA0Z02", " anda": "034U0BAC0O0J0P0M0Q9K10051F0Q", " andi": "0Q3Q1C1H", " ang ": "0DSG", " ann ": "0SCX1A03", " anno": "0L070M070Q0I0T2R1006110L", " ano ": "0D2D0P100U0K", " anoi": "0S8E", " anse": "0N040S920Z021003", " ant ": "1B4V", " any": "03020M3Q142D", " ao": "0P480S44", " ao ": "0P49", " aon": "0P060S4L", " aon ": "0SDB", " apa ": "0BG5140A150I", " apak": "0B9K", " api": "03030B0C0T0311041B41", " apie": "1B7Y", " aq": "032T0O2F0P470T1J", " aqu": "03040O3Q0P530T2W", " aqua": "0T2E", " aqui": "0P4S0T0F", " aqu\xED": "0O3Q", " ar ": "030F0P080SEL154V1BEQ1D9J", " ara ": "03SG1F0B", " araw": "0D1M", " arbe": "0N360R030Z2K101J121D", " are": "03050M6U0O040P050Q0I0T07155W1A041B041O05", " are ": "0M871576", " ari ": "04BR", " arka": "11021F3W", " arma": "030O0O0F0P0E0Q020T0N100415081C6H", " arv": "0T030Z02111A1C46", " arva": "0T02110N1C94", " ar\u012B ": "1D6C", " as ": "014J0L1V0M3U0P6R0S2T", " ase": "03D00O0I1115150Q1O06", " aseg": "03KG0O0A", " asse": "012K03090L1N0M020P070Q090T06", " asta": "15DW", " at ": "03020D3M0M4L0O020R080T0H0ZL512931F051P4J", " ats": "1B691D1G", " atsi": "1B87", " att ": "10KR", " at\xE1": "0S4U", " at\xE1 ": "0SH8", " au ": "0L6C1568", " aud": "0L030M020O030P020T2M150E1B06", " audi": "0L030M030O030P020T2D", " auf": "0N8T0T07", " auf ": "0NAT", " aus ": "0N5P", " av ": "105Y12AJ", " ave": "0L870M020O0H0P080Q710T0M154F1O06", " avec": "0L9D", " avet": "0Q34", " avez": "0L4A", " avo": "0L3G0M050R0H1106150A1D0Q1O04", " aw": "032U0B0C0D040M0L1A021N2T", " awst": "0D021N44", " ay": "03K5040N0B110D2G0L040O211F3U", " ay ": "03GJ0D3S1F0G", " az ": "14S81F0T", " azt": "147Z", " azt ": "147Q", " a\xF0": "13OF", " a\xF0 ": "13SG", " a\xF1": "0O1S", " a\xF1o": "0O2M", " a\xFD": "1NDD", " a\xFDd": "1N57", " a\xFDdy": "1N3W", " a\xFDt": "1NBD", " a\xFDtd": "1NAC", " a\xFDtm": "1N46", " a\u0109": "1O0Q", " a\u0161": "1BOB", " a\u0161 ": "1BSG", " a\u016D": "1O2M", " a\u0219": "154K", " ba ": "0D4A0S3V120A", " baba": "032004220D1K14041F1X", " back": "0M2C0N041003", " baha": "0B8U0D221F061N0Q", " bai": "014T0B2M0L0L0O0D0P0G0S11150C1B1F1D0U", " baie": "0154150D", " baki": "0D1P1102130E1O04", " bany": "0B600D031F08", " bar ": "0D030L030M040N020O030P020Q030V060Z0410031N79", " bard": "1A611F0D1N2F", " bare": "0M050V060Z131002122G", " barn": "0Z13101Y121V132614051B02", " bar\xE1": "1434", " ba\u015F": "1F641N5K", " be ": "0M7G100A14311B1R", " beau": "0L5L0M0M150D", " bee": "0M2N0N0D0R121402", " been": "0M3C0N060R05", " begy": "0Z1E121F", " beh": "01170M0F0N0L0Q040R0P0Y080Z0R1037120H1406", " beh\xF6": "102V", " bem": "0N0C0P2N0R040Z04140G1B06", " bem ": "0P35", " beni": "03020N020Q030R020T071F961O02", " bent": "0B0D0D020R3K14061B0H", " bera": "0B8U0N02130G1F06", " bert": "0B5J", " besi": "011O0M020N0H1B04", " besz": "1463", " bet ": "0M0310021B681D8C", " bh": "0SLY", " bhe": "0S4W", " bhea": "0S87", " bhei": "0SBD", " bhf": "0SE7", " bhfu": "0SSG", " bh\xED": "0S6T", " bh\xED ": "0SLC", " bi ": "0V33", " bien": "0L6X0N030O3M1O04", " bih ": "0V4R1Q2V", " bij": "0L020R3R1A021B0T1DA41Q1Z", " bij ": "0R3C", " bija": "1B0N1DI71Q2H", " bil ": "0Z1T1013120L1Q0C", " bilm": "1F491N9K", " bilo": "0D030V5K1Q0A", " bil\xFD": "1N90", " bin ": "0N521F07", " bine": "155G1F041Q0T", " bino": "1PSG", " bio ": "0V9N1004", " bir ": "0B0B1FS11NB21Q1C", " bira": "04F71F391N201Q0R", " biri": "04411F3S1N3I", " bisa": "04220BF00D021Q0U", " bith": "0S8U", " biz": "04290L0614331A021F5N1N9Y", " biz ": "1F3I1N7K", " bizi": "1F2N1N4G", " ble ": "123D", " blev": "0R030Z4U101P", " bli ": "10181223", " blij": "0R2Q", " blir": "100W1229", " bliv": "0Z36100F", " bly": "012G0Z0710071205", " bly ": "012D", " boe": "012G0R2F0Z0F", " boek": "012A0R2S", " bog": "0V0J0Z1J1404150K1A0J1Q1Z", " bok": "101D121S14041A021B061F02", " bol ": "0L030Y6N1F031N1G", " bola": "0B0J0D040O020P080Y3J1A031N7I", " bold": "0Z03141D1N3W", " bolm": "1N73", " bols": "0O0F0P0A1N4E", " bolu": "1N4T", " bona": "0T0Z1O3T", " bor ": "0Z1O1013121G1404", " bra ": "10271213", " brug": "0R060Z33", " bruk": "100F121G", " bu ": "03040L071FD71NEC", " bude": "0U5B0V4U0Y6R", " bue": "0O2S", " buen": "03030O3M", " buka": "0B5J0D0M", " buki": "0B090D051P3F", " bum": "0B0B0D0W", " bunu": "1FAB", " bura": "0P031F5O", " but ": "0L0B0M36", " buv": "0L051B9A", " buvo": "0L021BFD", " bw": "041S", " by ": "012Q0M2Y0U3H0Y900Z0D100212071A1G", " byc": "0U3V1A03", " bych": "0U5C", " byl": "0U9Y1A0M", " byl ": "0U7N", " byla": "0U2X", " bylo": "0U2G", " by\u0142": "1A86", " by\u0142 ": "1A4U", " by\u0165": "0Y31", " by\u0165 ": "0Y3R", " b\xE1": "0O020P020S1J0U0C0Y0V130A141I", " b\xE4": "0N04101C1N2A1P0N", " b\xF6": "0N04101P130O14091F151N0J1P0F", " b\xF8": "0Z10120T", " b\xF8r": "0Z1N1213", " b\xF8rn": "0Z1J", " b\xFC": "0N0B14091F3G1N0R1P0R", " b\xFD": "0U230Y0R130L", " b\xFDt": "0U2M", " b\xFDt ": "0U3M", " b\u0119d": "1A3L", " b\u0119dz": "1A45", " b\u016B": "1B3D1D58", " b\u016Bt": "1B341D4V", " b\u016Bt ": "1B0H1D63", " c'": "04180L5M0Q1N", " c'e": "0L8C0Q0H", " c'es": "0LDF", " ca ": "1557", " cad": "0L0G0O190P110Q0E0R090S3E0T0E150P1F0A", " cad ": "0SCX", " cai": "0L050M020O020P0W0Q020S5K0T041507", " cait": "0S9X", " can ": "0M4U1F06", " can'": "0M2H", " cane": "04I90P080Q0X0T22", " cap": "0B040L0R0M0A0O0Y0P0W0Q2X0T20151H", " care": "0L030M160O030P020T07159Q", " casa": "0O500P5K0Q3C151F", " ce ": "0LC90Q0E15EM", " cea": "0S5P152N", " cear": "0SBR1509", " cela": "0B0A0L490T041O07", " cet": "0L5Q0T0C1O04", " cett": "0L7Q", " chan": "0L4D0M1G0N080O020P090R020T0B0Z0810071Q0M", " chc": "0U570YA11A6Y", " chce": "0U450YBU1A3S", " chci": "0U381A4M", " che ": "0QOB", " chea": "0M080SGK1509", " chia": "0L020Q2X152V", " chom": "0S8U1Q0E", " chos": "0L5H0M041Q12", " cht\u011B": "0U32", " chui": "0SCK", " chun": "0SFI1Q14", " ci ": "0Q4S150F1A2G", " cik": "030H14051D36", " cik ": "1D7N", " cil": "0Q0E0V071D661F021P34", " cilv": "1DEN", " cine": "0O090P080Q0H0T0D155L", " co ": "043G0U9W1A69", " coi": "0L0C0M020O030P2H0Q050S130T02", " cois": "0P32", " com ": "0PD8", " come": "0M270O3I0P4P0Q4E0T0N150D", " comm": "0LC00M0R0Q0K0R090T19", " como": "0O5P0P5Y0Q021505", " comp": "0L6H0M1U0N0A0O5Y0P5G0Q4Y0R0R0T1I0Z0N153N", " con ": "0L040OCJ0Q8P", " cons": "0L3R0M0X0O390P4W0Q190R070T3R1528", " cont": "0L4W0M130O4P0P4Y0Q350R0O0T1Q1538", " cos": "041D0L040M080O290P0S0QIX0S0Z0T03150N", " cosa": "0O230Q4N", " cost": "03030L050M0B0O0P0P0Y0QCG0T02150U", " cos\xEC": "0Q36", " cou": "0L4Y0M400N030P020R02", " coul": "0L0R0M3T", " cre": "0L060M0G0O3X0P0L0Q230R040T2J1592", " cred": "0M030Q1G0T1I157B", " cs": "1484", " csa": "14AK", " csak": "148R", " csi": "1458", " csin": "144O", " cu ": "15FJ", " cua": "0B0D0O5I", " cuan": "0O4X", " cum": "04260B090O0J0P070T6I15651F09", " cum ": "0T6G154P", " cur ": "0T3E", " cu\xE1": "0O33", " cu\xE1n": "0O2V", " cy": "0L020T060Z0C10091A04", " cz": "1ABQ", " czas": "1A4B", " czy": "1A8V", " czy ": "1AB1", " c\xE1": "0O0F0P040S2Z", " c\xE1 ": "0P030S2Y", " c\xE2": "0P081584", " c\xE2n": "0P03156B", " c\xE2nd": "1564", " c\xE9": "0L0A0O040P0F0S61140C", " c\xE9n": "0S3I", " c\xE9n ": "0SDB", " c\xF3": "0O1J0P040S211A0A", " c\xF3m": "0O29", " c\xF3mo": "0O2V", " c\u0103": "15F8", " c\u0103 ": "15IJ", " d'": "0L8T0P020Q0T0S44", " d'a": "0L5O0Q0V0S1J", " d'u": "0L35", " d'un": "0L53", " d-": "03MO", " d-a\u0263": "038C", " d-s": "035B", " d-s\u0263": "03B1", " d-t": "03AO", " d-te": "039H", " daa": "01710D070R2Q", " daar": "016Z0R3J", " dab": "0N0B0O030T0J1B2V1D0O1P0N1Q2A", " daba": "0O030T031B5U1Q0C", " dac\u0103": "155F", " dag ": "010S0R220Z3A101N122M133V", " dah": "0B050D100N081F6B1Q9P", " daha": "0D041F8E1Q1A", " dahi": "0D1O0N071F05", " dala": "0B830D1B0U0B0V0D0Y0C1A021Q18", " dana": "0B0F0N080T090V5N1B081Q0C", " dans": "010P0LFD0R0G0V0B0Z0S100D120G130J150D1F0I", " dap": "0B200D0W0Q020R021Q25", " dapa": "0B3K0D1M1Q23", " dar ": "0N020O0L0P0T15431B7Q1F02", " darb": "1B4V1D5C", " dari": "0BCX0N0B0P021B041Q0J", " dar\u012B": "1D8S", " das": "0B080NJR0O030P1M0R021PEC1Q4B", " das ": "0NLY0O040P210R021PGB", " dass": "0NBS", " dat ": "013X0ROA0T0E15271P1N1Q0I", " dau": "0M080N09130O150J1B6C1D4J", " daud": "1DB4", " daug": "0M0B1BCE", " debe": "0O4K0T110V071B0A", " deci": "0M0W0O310P0U0Q0W0T0F0V0B151E1O14", " deg ": "03OT127U", " dei": "0N320P2I0Q2P0S220T0X1309", " dei ": "0P070Q2Q0T0L", " dein": "0N520T07", " deix": "0P2R", " dej": "0O2L0U0O0Y0I0Z061002151G1B06", " del ": "0O8H0Q4V0Z09100E12091P0G", " dell": "0Q6E", " dem ": "0N7G0Z22101B121X", " dema": "0L500M040O1T0P111O28", " den ": "0NBV0S4I0U1W0ZAM1097126Y", " deng": "0BHQ0Z041F03", " denk": "0N200R3Y", " denn": "0N1K0U090Y0S0Z3X100W1245", " der ": "0NM60R020ZB0121R1402", " dere": "0D020N070O0P0Z1D122I14021F0I", " des ": "0LGZ0N400O020R03150G1O0B", " desp": "0M080O300P0L0T04153N", " det ": "0ZMQ10NO12NZ", " dett": "0L050Q4D0Z3K101K125Q", " deu": "01270L2G0N0U0O020P1I0R0S0T2M1P1D", " deur": "012C0R0Z", " deve": "0L1X0M070P3Z0Q1B0T0A0V0F150X1F021O06", " dez": "0P0K0R4O15161O0Z", " deze": "0P060R681O03", " de\u011F": "1F9Z", " de\u011Fi": "1FCP", " dh": "0S79", " dhui": "0S87", " dh\xE9": "0S32", " dh\xE9a": "0SBR", " di ": "03070BGN0D0G0O090QPS0S0M0T031204", " dia ": "0BPC0P2E0Q090S3A", " dich": "0N4Z0O0S0Q040R0T", " did": "0B0C0M810T5C1B2D", " did ": "0M4L", " didn": "0M6Q", " didy": "0T4R", " die ": "01S40M0A0NP80R6X0T13", " dien": "0N0B0O0A0R0B1B5S1D7R", " dies": "0NA40T1D", " dig ": "0Z76106Y", " dij": "0B0F0O2G0V031Q08", " din ": "031W0D0C0Z3U1030123415C51F02", " dink": "011Y1B03", " diri": "030L0B320L0A0O070P0M0Q090T031B021O5C", " dis ": "01240L0U1Q2Y", " disc": "0L140M0J0O150P0T0Q0N0R070T3T1517", " diss": "0L070M020P520Q1Q0T0B0Z0Y120V", " dit ": "01FQ0L550R850Z1L100F120B", " dix": "0L0K0T4O", " dixi": "0T4B", " diz": "0P2T0Q061F06", " dize": "0P2K", " di\xFD": "1N8C", " di\xFDi": "1N6C", " di\u0148": "1N3M", " dl": "0S0W0U100Y1M1A2S1P1R", " dla": "1A3Z", " dla ": "1A3P", " dne": "0U2U0V060Y31", " dnes": "0U3G0Y3J", " do ": "0MBR0P9Q0Q020S6R0U6I0V1A0Y801AAM1O0J1Q0Y", " dobr": "0P040U2M0V6G0Y6T1A56", " doe": "014P0M3G0P0J0R6G", " doen": "014S0P0M0R5L", " does": "0M4O", " doi": "0L2Q0M1V0P15150U", " doin": "0M2K", " dolg": "144F", " domu": "0T3S0U0H0Y0C1A381F03", " dom\u0101": "1D7I", " don'": "0M7W", " doo": "010W0D0A0M0N0R3S0U061A02", " door": "0M0V0R3M", " dos ": "0D020L0C0O2X0P341Q0A", " dost": "0U3A0V170Y1K1A1G1F091N31", " dov": "0Q8D0U0X0V0T0Y0W0Z04150C1B0F", " dove": "0Q4X0U050V070Z03150B", " drau": "0N0G130X1B5I1D5Q", " drik": "0Z1I1213", " drug": "0M050R030V4S1A0Q1B0D", " dt": "0S2W", " du ": "0L7Q0NCN0ZHQ10K112M31B0X1O131P17", " dui": "010S0R1C0S6D", " duin": "0SEG", " duit": "0R0Y0SA4", " dul": "0B0S0D020O080S3A0T0E150A1B031Q06", " dul ": "0SCK", " dun\xF6": "1P6H", " dy": "03020D020M020Z0I100B120G13101A0C1B041N17", " dz": "030A1A5W1D8N", " dzi": "1A831D3D", " dzie": "1A751D3Q", " dz\u012B": "1D66", " dz\u012Bv": "1DEN", " d\xE4": "102M1N8M", " d\xE4l": "1NBS", " d\xE4l ": "1N85", " d\xE4lm": "1N4U", " d\xE4r": "103H", " d\xE4r ": "1036", " d\xE5": "0Z08100X120C", " d\xE9": "0L6I0O0D0P030S3N0U070Z02140A", " d\xE9a": "0S49", " d\xE9an": "0SEG", " d\xED": "0O200P020S1I0U1I1403", " d\xEDa": "0O2Z", " d\xF3": "0O1B0P0B0S1Q130E1A02", " d\xF6": "101Y1307140H1F221N181P3M", " d\xF6 ": "100B1P4G", " d\xF8": "0Z0Z120Z", " d\xF8d": "0Z181213", " d\xFA": "0P050S1S0Y0N1303", " d\xFC": "0N0414041F861N5W1P0D", " d\xFC\u015F": "1F671N4P", " d\xFC\u015F\xFC": "1F7J1N4Z", " d\u0117": "1B2A", " d\u011B": "0U48", " d\u011Bl": "0U40", " d\u011Bla": "0U3G", " d\u012B": "0T0P1D0H", " ea": "0L020M1S0S260T34154M", " ea ": "0S180T2E157I", " eam": "0T2N", " eam ": "0T2H", " echt": "0N0B0R2Q", " ede": "0T0W111G1F3I1N5T", " eden": "0T071F091N49", " edip": "1F021N4W", " ed\xFD": "1N41", " ed\xFD\xE4": "1N5F", " ee": "01270R9C1C2O", " een": "011U0RP5", " een ": "011D0RRS", " ees": "1C2J", " eest": "1C4F", " eet": "01270R0W", " eet ": "012C0R14", " eft": "0Z2J1020133J", " efte": "0Z331020", " efti": "137B", " ego ": "0T31", " egy": "0M030R030Z021002110214Q2", " egy ": "14LW", " egye": "144I", " ei ": "0N020P020R020T2E11HX120915611B041CLQ", " ein ": "0NFQ130X", " eine": "0NL6", " eins": "0N0X1367", " eiu": "0T3Q", " eius": "0T3Y", " ejo ": "049T", " ek ": "01RY1P0E", " ekk": "13L714031O08", " ekki": "13SG", " el ": "0OPO148215BX1F081O2K1P34", " ela": "0P8P140Q1C3N1P0Q", " ela ": "0P9G1P0Q", " ele ": "0PE3150E1F041P0U", " eles": "0P4I1404", " elk": "01230N060R1Y14241O02", " elke": "01240N0A0R12140T", " ella": "0O911O02", " ello": "0O2N140A", " elm": "143J1F0B1N0E1O02", " els": "0M0G0Z1W121P131I141U1O07", " elsk": "0Z2B121P1334", " el\u0151": "144A", " em ": "0PB7", " ema ": "1C5S", " emb": "0L0G0M050O0I0P0U144U1O04", " embe": "1454", " enc": "0L2E0M040O3F0P2L", " enco": "0L3Q0M040O280P2P", " end ": "0M0E0Z2V1C1L", " enge": "010T0N060P040R1N0Z19100W1216143D1F0A", " enig": "012D0R0V0Z08120C1O04", " enn": "0L0E111U123A131M142J1C14", " enn ": "122R132E", " entr": "0L2O0M030N020O2Y0P2E0Q111O0A", " eo": "0S0T0T22", " eq": "0M020O0I0P090T0S", " er ": "0NAW0R8M0ZSG102412SC13RP1F02", " era": "0O2Y0P2T0Q8V0R090T4V1009156I1O0K", " era ": "0O3B0P340Q5H10091562", " eran": "0O0H0Q3E0T0X", " erat": "0T3E", " erg ": "0R2S", " ert": "0N070R021008135C1F051N1J", " ert ": "1008135G", " ertu": "135Z", " eru": "0R080T0B137X", " eru ": "13CU", " es ": "0B060L1L0NC00OKI0T421DQA", " esc": "0L090M050O4Y0P510Q080T071O02", " escr": "0O2C0P2L", " esi": "0Q0G1110140F1B1U1C0Y1D3C1F02", " esi ": "1B3S1D83", " esm": "0P021D68", " esmu": "1DER", " eso": "0O3Q", " eso ": "0O4J", " ess": "0L160M020N120P3R0Q4E0T8110021402", " esse": "0L040M020N1O0P2J0Q4D0R020T8H1103", " est ": "0LPZ0TSG", " est-": "0L5B", " esta": "0D0C0M020OFC0PCQ0Q051OSE", " este": "0O5W0P480Q020Z021103141815RZ1O02", " esti": "0L040O080P170Q030T13110714051OE4", " esto": "0O820P5H0Q0H0T0A1F031O2I", " estu": "0D0A0O3J0P2G1O2K", " est\xE1": "0OE80PD3", " est\xE3": "0P30", " esu ": "1B5D", " et ": "0LAN0TLC0Z9F112P128A1CBI1F0I1N0V1P2T", " etd": "1N4M", " etdi": "1N69", " etm": "1F4S1NAX", " etme": "1F611NBX", " eto": "1PDP", " etos": "1PFL", " ett": "107B11DG1232140T1C111F3Y", " ett ": "107B120A", " ette": "115W122T140G1C2J", " etti": "1F5D", " ett\xE4": "11ND", " eu ": "0L160PLE0Z021543", " eum": "0T4A", " eum ": "0T4H", " ever": "0M4N", " ex ": "0Q020T2T", " ez": "14AF15031F05", " ez ": "14E3", " ezt": "1488", " ezt ": "148O", " e\u0161": "0Y1S", " e\u0161t": "0Y32", " e\u0161te": "0Y3T", " e\u0219ti": "154Y", " faci": "0L130M020O050P080Q0J0T5A152A1O12", " fact": "0L070M0A0O040T2C1509", " fai": "0LD70M0F0Q0F0S0T1507", " fair": "0L9I0M07", " fait": "0L9V0M03", " fala": "0P4Q14071O04", " fao": "0S2T", " faoi": "0SAY", " fara": "0O030P040Q061005138N14021O1S", " fare": "0P0A0Q600Z0B120U1F041O0C", " fari": "031A0L030M020P0F0T05131T1O6D", " fatt": "0Q3X0Z0H100J1209", " faz": "0P7K1F1Y", " faze": "0P7U", " fea": "0M070O020S38", " fear": "0M070SBR", " fei": "0N0H0P0W0R050S1N121O1306", " feil": "121G", " fel ": "100S1435151G", " fele": "0T1G1431", " fell": "037R0M0E120X1404", " fh": "03020S6M", " fhi": "03020S2R", " fhio": "0SAC", " fi ": "1578", " fic": "0L080O020P3M0T03101R1404", " fica": "0P3G", " fick": "101R1404", " fid": "0L030Q0U0T0J1O0E1P40", " finn": "0L030N030Z021025121T133M14051O04", " fj": "0Z0D100B120E1319", " flen": "0T031P6E", " fly": "0M050Z161014121E1308", " foa": "156D", " foar": "157H", " fog": "0P0C0Q040S1P148P", " foi": "0L1Q0P4Z", " foi ": "0L040P68", " folk": "0Z0L100I121D", " for ": "0MA50P090ZD0100212BN1O0E", " fore": "0M0H0Q020T0Q0Z1F121Z131L1O0B", " fors": "0N040Q0L0T040Z3E1002123J1O02", " fos": "0P0N0Q14140215B11O02", " fost": "0P030Q0215DP", " fra ": "0Q0G0Z3H123I", " frat": "0Q0V0T2Q150X1O1P", " from": "0L070M3Z1O05", " fr\xE5": "103G", " fr\xE5n": "1025", " fue": "0O5O0T0Q", " fue ": "0O4G", " fuer": "0O2O0T0R", " fui": "0L050O0S0P0Q0T2I", " fy": "0Z0A100H1102120A136L", " fyr": "0Z0H100E1209139O", " fyri": "13FL", " f\xE1": "0O0I0P0H0S281316140W", " f\xE5": "0Z0X10311218", " f\xE5 ": "0Z18101C121O", " f\xE5r": "0Z0S101Q1214", " f\xE5r ": "0Z0X101P1212", " f\xE6": "0Z0D12021312", " f\xE9": "0L060P080S5N130V142B", " f\xE9i": "0S61", " f\xE9id": "0SET", " f\xE9in": "0S8E", " f\xF3": "0P020S0W132G", " f\xF6": "10F1130Z140R1P0F", " f\xF6r": "10I0130E", " f\xF6r ": "109O", " f\xF6rs": "104K", " f\xF8": "0Z1G1223", " f\xF8l": "0Z0Y121V", " f\xF8r": "0Z21122X", " f\xF8r ": "0Z12121I", " f\xFC": "0N2G140M", " f\xFCr": "0N4H140F", " f\xFCr ": "0N6W", " f\u0103": "154J", " f\u0103cu": "155V", " gaa": "017J0D0A0R5F", " gaan": "017W0D0I0R4J", " gaat": "0R2V", " gac": "0S49", " gach": "0SFP", " gad": "0B0C0V020Z0F1A051D491P0M", " gall": "0O0B0Q0K0T2B1F02", " galv": "1B6H1D2O", " gang": "0N020R040Z21122D131P", " gaty": "1N4D", " gaw": "0D12", " gawi": "0D1N", " gc": "0S4T", " geb": "01350N260R471P0N", " ged": "01380B080N0S0R2M0Z04", " gee": "013B0N020R791O08", " gee ": "011Z", " geen": "01160R7R", " geg": "01200N1X0R1A130M1B02", " geh": "012E0N4N0R1R", " gek": "01270N130R2H1306", " geko": "011O0N0S0R1V", " gera": "0D050N1P0P0J0R090T03136O1B6G", " gere": "010V0N0G0O020P030R0P0T081B0N1F5N1N4P", " ger\xE7": "1F5A", " gesi": "01240N0H", " get ": "03020M3I133V", " getu": "0R03136P", " gev": "012N0R381F02", " gew": "012T0N2A0R3S", " gez": "03020N080R311F0F1N20", " ge\xE7": "1F3Y1N3X", " gh": "0Q050S3315091QNV", " gha": "0Q030S0V1QOP", " ghah": "1QRL", " gho": "0M021QF8", " gibi": "1F3Y", " gic": "101N", " gick": "101N", " gid": "0Z0A1F331N43", " gik": "04260Z1E1217", " gik ": "0Z1P", " gil": "0B0B0N03102E1B07", " gill": "102E", " gina": "0D1O", " gio": "0Q4P", " gitm": "1F4R1N48", " giv": "0M140Z1E10031P1Q", " gj": "0Z0G101O123T130H", " gje": "1225", " gjo": "0Z1910291228", " gjor": "0Z1I10291228", " gj\xF8": "125G", " gj\xF8r": "125F", " gli": "0L040Q3Z0R0A0Z0212051O02", " gli ": "0Q3U", " go ": "0M330SD41A2E", " god ": "0M0D0R0G0V0T0Z1L100F121K1P0I", " godt": "0Z2V121G", " goe": "012T0M080R4D", " goed": "011O0R5S", " goi": "0M34", " goin": "0M49", " gon": "0L020M0E0Q03144I1P0F", " gond": "144N", " good": "0M2U", " gos": "0L020P4Y0V091A05", " gost": "0P670V06", " got": "0M1Y0N0F0O030P020V06100K130O1A0P", " got ": "0M2J", " gow": "1N82", " gowy": "1N9U", " grib": "1D9X", " gr\u0101m": "1D58", " gud": "0Z0G100A12091B021P5Y", " gudi": "1P6W", " gus": "04D40D2M0O4A0Q030T03150A1O06", " gust": "0D4L0O5K0Q030T03150D1A021O0C", " gut": "04AJ0D020N360T02120Q1N1K", " gute": "049I0N28", " gy": "1003144G1B3X1N5K", " gye": "144M", " gyer": "144M", " gyv": "1B5I", " gyve": "1B90", " gyz": "1N5U", " gyzy": "1N40", " g\xE5": "0Z1Q104S122D", " g\xE5 ": "0Z1I102K1228", " g\xE5r": "0Z2O102D1238", " g\xE5r ": "0Z34102B1234", " g\xE6": "0Z04132H", " g\xF6": "1041130S14051FAO1NAM", " g\xF6r": "1057140A1F8D1NBH", " g\xF6r ": "1023", " g\xF6ra": "1038", " g\xF6rd": "1F251N4J", " g\xF6r\xFC": "1F5I1N3N", " g\xF8": "0Z15", " g\xF8r": "0Z30", " g\xF8r ": "0Z1I", " g\xF8re": "0Z27", " g\xFC": "0N021F701N8Q", " g\xFCn": "0N021F3Y1N6Y", " g\xFCn ": "1F261N4R", " g\xFCr": "1F091N3V", " g\xFCrl": "1N4H", " ha ": "0O3P0QFS102X123C147B1O02", " haa": "015R0N0C0R6J110H", " haar": "01520N0K0R7H1106", " habe": "0NEQ0O1S0T981F0R", " habi": "0B0C0L1N0M030O1F0P0B0T3Q", " habl": "0O5E1Q2A", " hac": "0O7F0T0U", " hace": "0O84", " had ": "0M4J0R4P1Q0E", " hadd": "0R0P123R140H", " hade": "0Z0Q102U", " hae": "0T3E1104", " haec": "0T38", " haf": "041G0N020Z0C1007134L1F1H", " hai ": "0B070Q3X150T", " hakk": "11071C291F3T", " haky": "1N4B", " hala": "0B0A0D0E1109140N1F0P1N5O", " halu": "0D0211JF", " ham ": "0Z411236", " han ": "0O1C0ZGB10FH12F6", " hann": "0Q3C0T03100413RA", " hap": "0D0K0M1Z11061F0E1N0D1Q0E", " happ": "0M2Q1108", " har ": "0ZN210G412IE1Q0K", " hari": "04EF0B750D050L020O021F0Y", " haru": "0B7O", " has ": "0M5U0O210T061N1J", " hat ": "0M060ND00Z06140B1Q0B", " hava": "110A14081B021F1H1O8A", " havd": "0Z3I", " have": "0MA70P090R030Z3M1005120514031O05", " hay": "0D080O4A1F2U", " hay ": "0O4Z", " ha\xE7a": "1N3W", " he ": "041O0MC60O2J11401Q06", " he'": "0M271Q0C", " he's": "0M261Q0I", " hea": "0M2C1C3X", " hea ": "1C5P", " heb": "0B040N030O020P020RH20T0Q0Z041O03", " heb ": "0REK", " hebb": "0R7J", " hebt": "0R31", " hee": "011E0RD1", " heef": "0RDU", " heel": "01160R2O", " hef": "0N02137O", " hefu": "138G", " hehe": "0491", " hei": "0L020M020N1G0R05113A120C135K", " heim": "0N0F0R02137R", " help": "011R0M350R24112R1O2Q", " hely": "143H", " hem ": "0R5W100X1F0U1N4M1Q0B", " hemm": "0Z08100R110412091N61", " hend": "0B0B0Z41120L130T", " henn": "03020Z0210391236135L", " her ": "0M6J0N0C0Z4Y122M1F6O1N2F", " here": "0M3J0N070O040R020T060U0411091N0H1O05", " het ": "01RI0RSG1002", " heur": "0L4G", " hic": "0O0Z0T421Q0F", " hic ": "0T4A", " hie": "01A70L100N2P0O0B0R430T0B110X1O0O1P27", " hier": "01AR0L1Q0N420O080R4T11061O1C", " hij": "0B040O1H0RFL1Q19", " hij ": "0RJO", " him ": "0M4U", " hind": "0DCX0N040R020Z0210031F041O04", " his ": "0M930T0F", " hi\xE7": "1F4X1N7C", " hi\xE7 ": "1F4J1N9E", " hj": "0Z1F1025121S1328", " hje": "0Z241249", " hjel": "0Z02121V", " hjem": "0Z211220", " hj\xE4": "102U", " hj\xE4l": "102H", " hj\xE6": "0Z1E", " hj\xE6l": "0Z1P", " hl": "0U250V0E0Y2N132Z", " hla": "0U1X0V0B0Y39130X", " ho ": "0Q9Y0U350Y461O07", " hoc": "0N0E0T5V0U020Y0B1F081QB1", " hoc ": "0T67", " hoch": "0N0N0U021QHJ", " hod": "0T1V0U3P0V070Y1Y120F1O13", " hodn": "0U2X", " hoe": "015L0R62", " hoe ": "013A0R4Q", " hoek": "011U0R04", " hog": "0O040R0714NN1Q19", " hogy": "14OG", " hoje": "0P2O", " hol ": "0N02142T1QFX", " hold": "0M0A0Z2Q121N1409", " hom ": "013Z", " home": "0M280P1Y0T041103", " homi": "0T2U", " homm": "0L2E110F1C4Z", " hon ": "109P", " hond": "011I0R1Z", " hono": "0L020M030O040T0610341A021O06", " honu": "137J", " hoo": "011I0M020R2V1C0L", " hou": "013E0M1N0P080R4A0U041107", " hou ": "013F0R2J", " houd": "0R37", " hov": "0U070Y7W0Z0U1209140U1Q0M", " hovo": "0U080Y9N", " how": "0M391N26", " how ": "0M4A", " hoz": "143L", " hr": "0U1O0V0N0Y2Z0Z03132Q1503", " hui": "012T0L070O020R340T0Y110F", " huis": "012I0R3A", " hull": "016G030411121205140A1C1A", " hun ": "0R1U0ZA712A3", " hund": "0M070N1I0O040Z3U101L121K133L1O1H", " huo": "1165", " hur ": "104V1Q0Q", " hus": "0D020M060U040Z2C101P12231405", " huw": "0D140R06", " huwa": "0D1X", " hv": "0U040V0D0Y0B0Z7K128E13CT", " hva": "0V0F0Z5R126S1385", " hva ": "126R", " hvad": "0Z6W", " hva\xF0": "13D6", " hve": "0Z37123R13BA", " hvem": "0Z241221", " hver": "0Z1P121R13JH", " hvi": "0Y0F0Z3E123F", " hvis": "0Z25121Y", " hvo": "0Z8O1289131T", " hvor": "0ZAD1289133P", " hy ": "01B0", " hyv": "1181", " hyvi": "117U", " hyv\xE4": "11BO", " h\xE1": "0O040P2G0S0P0U060Y05131M143K", " h\xE1 ": "0P2V", " h\xE1z": "143H", " h\xE4": "0N10109R11GY1C2H1N1T", " h\xE4n": "0N0G101S11OM", " h\xE4n ": "11SG", " h\xE4ne": "11L2", " h\xE4r": "10A71103", " h\xE4r ": "109W", " h\xE5": "0Z0U1020120N", " h\xE5l": "101T", " h\xE5ll": "101P", " h\xE6": "0T0D0Z0C131P", " h\xEA": "010K", " h\xF6": "0N0N10241107131614091N0T", " h\xF8": "0Z11121C", " h\xF8r": "0Z1C121V", " h\xFA": "0O020P02137Z140M", " h\xFAn": "0O020P0213B6", " h\xFAn ": "13KL", " i'": "0M44", " i'm": "0M45", " i'm ": "0M5N", " iar": "0S3L1519", " iarr": "0SCX", " iba": "030K041Z0D110O0E0T090Y1M", " ibi": "04FP0D0D0T1C", " ich": "0NNP0Y3A1A0S", " ich ": "0NSG0Y421A19", " ico": "04D1", " ico ": "04J9", " id ": "0T351P0K", " id\u0151": "1448", " ie": "010X0Q0Q0R1C0T0F151X1B0J1DAR1O04", " ies": "0T0915081D2Y", " iets": "011T0R2V", " if": "031A040R0M1L0Z0210091F081P13", " if ": "0M2W1P1B", " iga": "030D041G14441C3I1O03", " igaz": "144D", " igi": "030204HS0T0M1O05", " igih": "04CC", " igit": "04A40T0N", " igj": "121K", " igje": "121K", " ih": "030G040P0D020N4P0U040V0G0Z04100J112S1F1R", " ihmi": "1170", " ihr": "0N6Y", " ihr ": "0N6L", " ihre": "0N5A", " ij": "030B041C0R051402", " ik ": "0RSG", " iki": "04PM0D0511191B181F201N1U", " iki ": "04S41B2I1F1M1N1G", " ikk": "0ZJM110K12MB1C0S", " ikke": "0ZMF12MC", " il ": "0LJV0QKY", " ila": "031A0D0X11021F0A", " ili": "030P0D020T080V0W1B021F0B1O5H", " ili ": "030D0V2B1O86", " ill": "03030L050M080N020Q050R030T7B100I110S130I140P", " ils": "0L4V1B03", " ils ": "0L83", " im ": "0N460V090Y0V1A0F", " ima ": "0V5Y", " imb": "046C0D040L030Q0C0T03", " imy": "0479", " imya": "04C7", " ina ": "0D050SB5", " ingi": "042M0B9Q0Q021508", " ini ": "03030BMA", " inim": "03070D030P090T0C150M1CAC", " iny": "046M0D0E", " io": "0P020Q890S1P0T1315031O1M", " io ": "0QCM1O0G", " ir ": "0O1Z0P281B8Z1DSG1N0J", " is ": "01RI03020MFT0RQJ0SK10T140Z0710031205149O1P45", " isa ": "0D181C52", " isan": "0D3V", " isle": "1NAF", " isme": "030A142X", " isn": "0M2J", " isn'": "0M3H", " iss": "03070M040N0A0P8F", " isso": "0PAH", " ist ": "0NQ3", " iste": "03020S490T060V080Z02140Z1FA0", " isti": "0B090Q020T040V231F6B", " it ": "0M810T0B1P12", " it'": "0M2P", " it's": "0M3F", " ith": "0S2R", " ithe": "0S8E", " ito": "0D4L", " ito ": "0D7D", " itt": "030H146B1F02", " itt ": "1461", " itu": "0BEE0D020T04", " itu ": "0BNI", " iu": "0T2L151B1O0W", " ivy": "04B40M03", " ivyo": "04CH", " iy": "032I043R0D2G1F53", " iya": "0D1W", " iyan": "0D3F", " iyi": "032E044Q1F5T", " iyi ": "047A1F6L", " iyo": "045Y0D2Q", " iyo ": "04A40D17", " iyon": "0D3V", " izd": "0V091D3J", " izda": "0V0C1D6X", " izs": "1D2Z", " i\xE7": "1FBC1N1O", " i\xE7i": "1FBB1N0Q", " i\xE7in": "1FEL1N0N", " i\u015F": "1F331N54", " i\u0161": "0V080Y0T1BAU", " i\u0161 ": "1B6R", " i\u0307": "1F5C", " j'": "0L8W", " j'a": "0LBH", " j'ai": "0LFP", " jag": "0B060N030R020Z0510SG1Q0T", " jag ": "10SG", " jak ": "0U6K1A8R", " jako": "0U430V1B11041A0U1O07", " jam ": "0B2Z0T0K1B5D1O2W", " jama": "0L4M0P0D1F02", " jang": "0B581Q0I", " jatl": "1QCF", " jau": "0B0M0L0411021B5E1D7M", " jau ": "1B641D5Q", " jaun": "0L071B281D8C", " je ": "0LQE0N0E0RN00UNU0VRI0YSG1A0L1O1R1Q8V", " jed": "03060N1X0U4D0V4T0Y601A34", " jedn": "0U3L0V5U0Y331A21", " jeg": "0ZRI12SG140K1A2P1Q06", " jeg ": "0ZSG12SG", " jego": "1A4A", " jeh": "0U2K0Y36", " jeho": "0D020U3I0Y3X", " jej": "0U1R0Y411A271Q08", " jej ": "0U030Y4Y1A3I", " jen ": "0U2C130G1O1L", " jest": "0U2D0V101ARV", " je\u0161": "0U380V03", " je\u0161t": "0U4H", " ji ": "0U1T1BB1", " jie": "1B6U1P0E", " jie ": "1BC3", " jih": "1QD1", " jij ": "0R2U", " jis": "0U0Q1BHM1P0Z1Q24", " jis ": "1BRE", " jo ": "0U040Z0D111U120M1B4Z1D11", " job": "0M0Q0N030Z06101H1223142L1504", " jobb": "101H1223142Q", " jok": "0M05114F1B0M1P0F", " joka": "117W", " joo": "11091C2H", " jos ": "1191150W1B6A", " jot": "114J", " jou": "01B30L4K0M030R2F0Z02111L", " jou ": "01B60R1J", " jour": "0L500M040N020R040Z02", " jo\u0161 ": "0V4L", " js": "0UL0", " jse": "0UK7", " jsem": "0UOW", " jsi": "0U77", " jsi ": "0U9S", " jsm": "0U4F", " jsme": "0U63", " jso": "0U48", " jsou": "0U5U", " jst": "0U2U", " jste": "0U3Y", " jull": "01260R6O", " jum": "0B0F0L020M05110O150E1B1W1D361Q07", " jums": "1B3H1D7V", " juo": "112I1B32", " ju\u017C ": "1A4E", " jy": "019K1103", " jy ": "01J8", " j\xE1": "0P2K0U1D130C141I", " j\xE1 ": "0P340U27130E", " j\xE4": "100L113C1C47", " j\xED": "0U38", " j\xEDt ": "0U2I", " j\xF3": "0O04130P143C", " j\xF3 ": "144F", " j\xF3l ": "1434", " j\xF5": "1C1H", " j\xF6": "130A141Z1P1T", " j\u0101": "1D4K", " j\u012F": "1B1X", " j\u012F ": "1B34", " j\u016B": "1B5Z1D7J", " j\u016Bs": "1B901D85", " j\u016Bs ": "1BE41DF1", " ka ": "0D3F0V051C151DDP1P2Q", " kad": "0B080D050V39110O1BH71D351F6F1O02", " kad ": "0V121BPC1D7R", " kada": "0B0F0D050V741B621F7K1O02", " kah": "0D1311271C1I1F11", " kai": "0D2G0N02116L1B8Z1C0N1D0O", " kaik": "11DG", " kail": "0D3K1B04", " kaip": "110P1BB9", " kaj": "14051O9N", " kaj ": "1OHB", " kako": "0V6T1002", " kalb": "0D031BEE1F0A", " kami": "042F0BAY0D350V0814041A071O03", " kamu": "0BMP0D041B0E1F03", " kan ": "018E036D0B0X0R890ZAN108I128P1F06", " kann": "0N8D111M132N", " kano": "11031P9G", " kans": "0D040R0F100I11AC120L1F04", " kany": "04220D331403", " kao ": "0V52", " kapa": "0B2J0D1Q14021F151O1C", " kas ": "1BAO1CQZ1DF1", " kass": "0N020Z08100211071C48", " kau": "0B4X0D0B0N100R02114S13101B091C1R1D2Y", " kau ": "0B96", " kaut": "110B1D6G", " kay": "030J0B0E0D431F20", " kay ": "0D1O", " kaya": "0B0J0D1Y1F09", " kayo": "0D37", " ka\u017Ed": "0U2S0Y3I", " kd": "0U7F0Y3E", " kde": "0U320Y5R", " kde ": "0U450Y72", " kdo": "0U32", " kdo ": "0U45", " kdy": "0U6H", " kdy\u017E": "0U4E", " ke ": "0B6P0U0J1O9O", " kedy": "0Y2V", " kee": "010P0M0M0R1D1C94", " keeg": "1C52", " keel": "0R031CG1", " kein": "0N7E110D", " kell": "03020N05112T14BS1C5P1N0S", " kem": "031Z0B480Z0210021102131V140H1F06", " kend": "0B0B0D020R060Z1Z1F46", " kep": "0B2M0M0911021B0B", " kert": "0B0H117E140P1B04", " kes": "0B250D04112Z14081C3Y1F1C1N0Q1O02", " kes ": "1C841F04", " ke\u010F ": "0Y2U", " kh": "0B07", " ki ": "146M1F0U", " kia": "140H1B0E1O4S", " kiam": "1O57", " kie": "0R0A0Y0E112O140C1A3P1B3Z1O53", " kied": "1A53", " kiek": "1B7G", " kiel": "115L14021A021O6Z", " kii": "115514021C1N", " kik": "0R020Z021002140O1P6G", " kiko": "1P6S", " kim ": "0V061A0P1F1N1N2H1P3K", " kina": "0D1O0U060Z081005110312061A07", " kind": "011W0M0Q0N2K0R2M0Z0410021C2N", " kio": "0O030R02110414051A041B051O5N", " kion": "1O5T", " kirj": "11DG1C5C", " kis": "0D020M0B0N031002111I14341O081P6P", " kisi": "1O0A1P6O", " kita": "0BAJ0D18110N140D1B1M1F2E1N43", " kiu": "110814031O5R", " kiu ": "1O6S", " ki\xF6p": "1P3L", " kj": "0Y060Z031002122C130H", " kje": "121Z", " kj\xF8": "1234", " kj\xF8p": "121T", " klar": "0N0G0Z0M100U121Z1O11", " kni": "0M050N030R080U2G0Y510Z07100812091B02", " knih": "0U3C0Y5L", " kno": "0M6F0N040R07", " know": "0M8J", " kny": "1B2W", " knyg": "1B5W", " ko ": "04I80D8V0V1E10021B1L1D741P44", " kod": "0V0J11041B3V1C1M1F03", " kod\u0117": "1B7T", " koe": "01150R0H0Z04110J1C3M", " koer": "1C8M", " koh": "0N020U0H0Y0P11171C3P", " koht": "112B1C4C", " koj": "0V4G1B0F1C19", " koji": "0V5F1B06", " koli": "0U2C0V4L11091A021O02", " kolm": "116J1C4F", " kom ": "013X0R1O0Z1T101X121V133C", " komm": "0N4C0Z47106K110J124P1407", " kons": "0B0H0D040N060Z06100K110L120E1A061B071F0C1O4G", " konu": "131J1F7G", " koo": "011A0R0O11091C2Z", " kosk": "11AY", " kou": "010N0R0L0U2Z111U", " koup": "0U2S", " ko\u013E": "0Y37", " ko\u013Ek": "0Y3X", " kt": "0U1T0Y4V1A3H", " kte": "0U2Z", " kter": "0U3R", " kto": "0Y861A27", " kto ": "0Y4T1A2A", " ktor": "0Y5N", " kt\xF3r": "1A4M", " ku ": "04DY0B050Y0E11021A02", " kub": "04NO0B0B1A03", " kuba": "030304BX", " kube": "04ID0B091A02", " kubi": "04H3", " kug": "04DQ0N020Z04", " kugi": "0491", " kui": "0R02118S1C9W1O0F", " kui ": "1CGT", " kuid": "1C5S", " kuin": "11I3", " kuma": "0D2011051F04", " kun ": "0R0V0Z2511B612081O71", " kuna": "1C4V", " kung": "03020D4E1005", " kunn": "0R390Z2J1014112D122G130S", " kur ": "1B7Q1D71", " kuri": "048K0D0211051B731D1R1O0E", " kus ": "0R030U031C7S", " kuu": "11651C4M", " kuul": "117L1C7S", " kuv": "04720V06100211121F02", " kv": "0U0O0V030Y170Z0M101F120Q131M1B0Y1O15", " kvi": "0Y0B0Z1E100T120V13061B061O0N", " kvin": "0Z1M100Q120R1O11", " kw": "0109046S0R0J1A0I", " kwi": "048U0R091A0I", " k\xE4": "0N06102E11651C321N1U", " k\xE4n": "102K11091N1E", " k\xE4nn": "101O110M", " k\xE4y": "114Z", " k\xE6": "0Z0I130G", " k\xE9": "0U0C146F", " k\xE9r": "1465", " k\xE9s": "143O", " k\xF5": "1C6L", " k\xF5i": "1C60", " k\xF5ik": "1CAO", " k\xF6": "0N1C102B110A130P145T1F2K1N6J1P1N", " k\xF6m": "1N3F1P1F", " k\xF6me": "1N4M", " k\xF6n": "0N301002143X1N0E", " k\xF6ny": "142Y", " k\xF6p": "101Y14031F161N4N", " k\xF6p ": "10021N4J", " k\xF6z": "144S", " k\xF8": "0Z1U1202", " k\xF8b": "0Z2K", " k\xF8bt": "0Z1W", " k\xF8r": "0Z1F", " k\xFA": "0Y1V", " k\xFAp": "0Y33", " k\xFApi": "0Y3E", " k\xFC": "0N0E14111C3J1F1D1N0F", " k\xFCsi": "1C4F", " k\u0101": "1DBR", " k\u0101 ": "1D73", " k\u0101d": "1D5C", " k\u0101p\u0113": "1D5U", " k\u0105": "1A041B4F", " k\u0105 ": "1B71", " k\u0131": "1F4M", " k\u013C": "1D29", " l'": "0LD80Q6R1O03", " l'a": "0LAC0Q3S", " l'ai": "0L490Q02", " l'e": "0L3J0Q13", " laa": "012V0R32110K", " laat": "01240R3Y110U", " laba": "0D0Q0T081BCZ1D1W", " labh": "0SCK", " labi": "0D0A0O030T031B1S1D71", " lad ": "0Z1V1Q0J", " lah": "0B0E0D1D0U03110M1C1U1Q08", " laha": "0D2C", " lai ": "1DCH", " laik": "1B941DEA", " land": "010V0M0A0N130R1U0Z1W100M121F131V1O1B", " las ": "0N050OCL0R06130G15051A02", " late": "0M150N040R310T0C12061A04", " lave": "0L0N0P020Z23", " lavo": "0P030Q4O0T031B031O02", " law'": "1QC0", " lea": "0M2B0O030Q020S9N0T031402", " leab": "0SET", " leat": "0SH8", " leb": "030F0B4G0N2N0Y0J1407", " lebi": "0B8A", " leh": "03060N0N0U08110M144J1C0E", " lehe": "144L", " lei ": "0P070Q7U1209", " leis": "0N0G0P030SCC1B16", " leng": "0D070O11121R133814051B1M1Q2D", " lenn": "110C143U1C10", " ler": "0N0Y0P0K0R1J0Z031003120414061O1Z", " lern": "0N1K1O3K", " les ": "0LPC0O1E0R0A0U02", " lesz": "144L", " leur": "0L4E", " lh": "03070P190U0E", " li ": "0P050Q1I0VAX1OBR", " li-": "1P8B", " lia": "0B030M020P020T041B0A1O2A", " libr": "0D180L0O0M060O3A0Q260T3D1O2K", " lide": "0P020U0A0Z371003120615051F04", " liel": "1D9D", " lige": "0O040Z24", " lii": "0N021006113J1C25", " like": "0M6R1102123V", " lin ": "030B1O3R", " ling": "0D0G0L090M020O020P060Q100T3W15081O2F1P111Q0D", " lio": "0L030M020S901B031P0F", " liom": "0SQG", " litt": "03020L060M140T170Z02121D", " liv": "0L1U0M1P0P290Q030Z161015121Y15041O02", " livr": "0L330P2V", " ll": "03680O5B", " lla": "03280O2B", " lle": "0O4L", " lleg": "0O2X", " lli": "034I", " lo ": "0B030OBK0Q6E0Z041206", " loo": "0D0H0M2E0R0K1C24", " look": "0M38", " loq": "0T421Q23", " loqu": "0T4B", " loro": "0Q5V", " los ": "0N0E0OGY0R061A021Q1J", " lubi": "0D021A4P", " lucr": "0T021557", " lui ": "0L6P0Q6Y0R0315B5", " l\xE1": "0O0A0P1A0S2B0U0C0Y0I1310143Z", " l\xE1t": "130W1465", " l\xE4": "0N0I105M113Y1C4Z1P0Z", " l\xE4h": "114G1C37", " l\xE4he": "11461C6X", " l\xE4ks": "110Y1C4I", " l\xE4n": "0N0E101U11051P0E", " l\xE4ng": "0N0F101O", " l\xE5": "0Z0A102V120A", " l\xE5n": "0Z0D101O120F", " l\xE6": "0T050Z23120Z131S", " l\xE6n": "0Z1A", " l\xE6ng": "0Z1I", " l\xE6r": "0Z23122I131K", " l\xE6re": "0Z201222", " l\xE6s": "0Z1A130C", " l\xE9": "0L0A0S2Y0U0W130I1415", " l\xEC": "0Q0M", " l\xED": "0O080P0Z0U160Y0I133L", " l\xF5": "1C2O", " l\xF6": "0N06100W1112130U14031P7C", " l\xF6f": "10031P6C", " l\xF6fo": "1P68", " l\xF8": "0Z0S1211", " l\u012B": "0T031D2A", " l\u012Bdz": "1D5Q", " l\u016B": "0T081B021D2Z", " l\u016Bd": "0T081D3D", " l\u016Bdz": "1D8G", " m'": "0L390S17", " m'a": "0L3I0S0M", " ma ": "011403440L3M0Q2F0Y4R143A1A4R1CQT", " maa": "016S0B0R0D0W0R7G113U1C2M1F07", " maak": "013Q0R2G1102", " maar": "012I0D050R621105", " mab": "0B0A0D0V1Q0J", " mach": "0L0C0M060N5P0O030P0D0R090T081Q1V", " mag-": "0D1S", " maga": "0D1Z0L0M0M020Q041455150K1A021C481O04", " mai ": "0L030N020Q3W140A15GW", " mais": "0D040L8V0P96111P1B18", " mait": "0D030SJZ11131B051C10", " maja": "11031C4C1Q1S", " maka": "0B8D0D1T110N14021B021F07", " mal ": "010G0L210N270O120P0P0Q040Y2Z1F09", " malf": "1O3W", " mam ": "1A56", " mane": "0O0T0P0L0T1W1B7Y", " manj": "0V0K1O4A", " mann": "0M020N1P0R0F100E1103121L133W", " mano": "0D080L060O1A0Q0G1BH61O0X", " mans": "0D080T0G110C1D631O03", " man\u011D": "1O3N", " mas ": "0D2D0O020P401Q13", " mata": "0B2D0D1R0O0K0P0C10051109130G1B121Q0I", " mau": "0B2I0D030L0V0N070P080Q0H11041B09", " may ": "0D7Q0M0X", " ma\u0148": "1N49", " ma\u0148a": "1N5T", " ma\u0263": "034X", " ma\u0263e": "03AL", " mb": "044L0S33", " mbwi": "0497", " me ": "0L7J0M740ODP0P7J0Q3T0R7M0T6U0V3011381C68", " me'r": "1QAH", " mea": "0M0S0S0T0T5D154V", " mea ": "0T3M155G", " med ": "0ZBA108U12B1", " mee": "012B0M0N0N090R5211031C6J", " meel": "1CD1", " meer": "01210N0F0R48", " mege": "0Z5512051419", " megt": "1432", " meil": "0L1D0N0211441B161C4C", " mein": "0NBC1104130H", " mej": "0B0N0O2910041N0E1Q1C", " mejo": "0O2V", " meli": "0B5Q0D030M030T0U", " mema": "0B61", " memb": "0BIE0L0A0M050P060Q040T03150D1O06", " memi": "0B720T0G", " men ": "0M0C0R1G0Z2Y101O12311NS01P1C", " mena": "0B5G0L0A100E1B06", " menc": "0B5O0O040P021O05", " mend": "0B680L020T0D1F021N1O1O08", " mene": "0B540L030R0B0T030V360Z0C118E120J140C", " meng": "0BLR0N0C0R02", " menj": "0B6C0V0A141K", " menu": "0B6M0L030O0M0R020Z02", " meny": "03030B9C1404", " mer ": "030I0L0J10171225", " mere": "0B9F0O0B0P090R020T040Z1K110R140715181B08", " merg": "0P03154Z1B2C", " mery": "1F031N9S", " mes ": "0L3H0O0J0R081BJB", " mesm": "0P34", " met ": "016D0L080M0I0RBK", " meu": "0L0C0P640R020T4X154N", " meu ": "0P6A155W", " meum": "0T2B", " meus": "0P1L0T31", " me\xF0": "1386", " me\xF0 ": "13ED", " mf": "042A", " mfi": "046I", " mfis": "04B6", " mg": "03040D4Q1A02", " mga": "03030D8K", " mga ": "0DER", " mh": "0S7B", " mha": "0S5P", " mhai": "0SET", " mi-a": "155F", " mia": "0Q3N0S1E14181A2T1O6U", " mia ": "0Q3O1O89", " mida": "1CH7", " miel": "0L040O030Q02118L140J1A0G1B0P1O04", " mig ": "0ZAS109T13AS", " mih": "0T89110Z1407", " mihi": "0T8P112E", " mij": "0RD6150B1A02", " mij ": "0R51", " mijn": "0RDA", " miki": "135T", " miks": "117M1C8P1O05", " min ": "0Z8K105L125V14031O6Q1Q0R", " mind": "0M0M0N080R0F0Z0U1008120C14ER1C8G1Q1G", " minh": "0P5K", " minn": "100G110S1208138K1C4C1F051N0N", " mint": "0B0Q0O06146Y150I1B0J", " min\xE4": "11MU", " mio": "0Q42", " mio ": "0Q44", " mir ": "0N951Q0Z", " mis ": "0L0Y0O200R0D11021CBA", " misl": "0R040V8O1206", " mit ": "0L090NAS0Z2H1460", " mitt": "0N110T0D1023110A121J132V1C45", " mit\xE4": "11KP", " mi\xE9": "144S", " mi\xE9r": "0O02144Z", " mj\xF6g": "1364", " ml": "030Y0U2X0V0M0Y1K1A09", " mlu": "0U35", " mluv": "0U4D", " mn": "0U1W0V2Q0Y181A43", " mni": "1A59", " mnie": "1A88", " mno": "0U1Z0V3A0Y1K", " mnog": "0V72", " mo ": "0D5P0S70", " moc ": "0U2R", " moe": "018D0P040R9J", " moet": "015X0R8I", " mog": "0Q0G0R0O0V5F14021A3G", " mogu": "0V7Z", " moh": "0B050U2I0Y1W14021Q0B", " mohl": "0U2E0Y15", " moi": "0L4U0O040P0411061A1B", " moi ": "0L59110A1A09", " moj": "0O030U2T0V4J0Y661A3Q1Q0V", " moj ": "0V4P1Q0W", " moja": "0O040V2H0Y341A1S", " moje": "0U300V290Y2P1A3K", " mok": "0U0311031A031B5N1O03", " moky": "1B6F", " molt": "0Q6U", " mon ": "0L8S0Z031Q0M", " mond": "0L3K0M0J0N090Q0O0R0D149Y15091O1N", " mong": "0D1T1Q0K", " mor ": "0Z1M100D120K1508", " more": "0D020M2I0P030Q030T090V0B0Z03120F", " morg": "0N1Z0R220Z2E1013121G133J1O1B", " mort": "0L1W0O030P130Q0W0T2M1O2V", " most": "0M0V0O0E0P0P0Q0G0U0A0Y0A0Z021002145X1A08", " mo\u017C": "1A4S", " mo\u017Ce": "1A65", " mo\u017E": "0U1A0V4S0Y1D", " mo\u017Ee": "0VA2", " mp": "041P", " mu ": "04O00U2A0V0X0Y371A1F1C591F1P", " muc": "0M1J0O540Q031A021Q17", " much": "0M230O6N1A031Q22", " muit": "0PAF110K", " mul ": "11051CDH", " mull": "110T1CCF", " mult": "0D030L050M030O090P070Q020T4J158V1O5K", " mums": "1B4L1DAD", " munk": "1102142V", " muns": "04CX", " muny": "1N6U", " muri": "04EF0B0H0O0P0T021103151E1Q0B", " mus\xED": "0U5L0Y5W", " muto": "04291P54", " mutt": "0N1D118S", " muy": "0O4C1F0E1Q08", " muy ": "0O5O", " mw": "045Q", " mw'i": "0491", " my ": "01F40M5G0U0E0Y0K1A07", " myc": "103P", " myck": "103P", " mye": "122Y", " mye ": "122Y", " mys": "0L030M0F0U430Y6B100311021A04", " mysl": "0U5N0Y7Q", " my\u015Bl": "1A4D", " m\xE1": "0O540P0G0S1Z0U7T0YD413291466", " m\xE1 ": "0P030U4U0Y6P1310", " m\xE1m": "0U570Y6H", " m\xE1m ": "0U5K0Y6J", " m\xE1r": "0Y7114AZ", " m\xE1r ": "149O", " m\xE1ri": "0Y8L1420", " m\xE1s": "0O7G0P030U03144C", " m\xE1s ": "0O9L0P021418", " m\xE1\u0161 ": "0U2M0Y34", " m\xE2": "0L02152Z", " m\xE3": "0P1H", " m\xE4": "0N0F0Y0I101C111B1C2N", " m\xE5": "0Z1C104U122G", " m\xE5 ": "0Z1M1005123W", " m\xE5n": "0Z0Q102J120L", " m\xE5ng": "101R", " m\xE5s": "0Z0C103A", " m\xE5st": "103A", " m\xE5t": "0Z091002121F", " m\xE6": "0Z0F130A", " m\xE9": "0L1A0O0F0P0M0SGD0U0Y134S144I", " m\xE9 ": "0SIW0U0N", " m\xE9g": "1495", " m\xE9g ": "148X", " m\xE9r": "0L08137O140V", " m\xE9r ": "13F0", " m\xEA": "0L150P0A", " m\xED": "0O190P030S0P0U1M132X1407", " m\xEDn": "0O030P03134N1402", " m\xF3": "0O030P020S28130T140A1A4R", " m\xF3w": "1A3K", " m\xF3wi": "1A5A", " m\xF4": "0Y5A", " m\xF4j": "0Y3M", " m\xF4j ": "0Y40", " m\xF4\u017E": "0Y5K", " m\xF4\u017Ee": "0Y6L", " m\xF5": "1C31", " m\xF6": "0N0Y100Y1102130N14061C0B1N091P2D", " m\xF8": "0Z0K120P", " m\u0101": "0T0B1D52", " m\u0101j": "1D33", " m\u0103": "157I", " m\u0103 ": "158E", " m\u0113": "0T0H1D7X", " m\u0113s": "1D7P", " m\u0113s ": "1DHM", " m\u0117": "1B2W", " m\u0117g": "1B36", " m\u0117gs": "1B59", " m\u011B": "0U7G", " m\u011B ": "0U62", " m\u011Bl": "0U4M", " m\u011Bl ": "0U4A", " m\u012B": "0T031D20", " m\u0131": "1F43", " m\u0131 ": "1F3D", " m\u016B": "1B1L1D3O", " m\u016Bs": "1B2J1D2Y", " m\u016Bs\u0173": "1B56", " m\u016F": "0U3O", " m\u016Fj": "0U2Q", " m\u016Fj ": "0U3T", " m\u016F\u017E": "0U3A", " m\u016F\u017Ee": "0U3R", " n'": "049M0L9S0Q03", " n'a": "046M0L82", " n'ai": "0L53", " n'e": "0L5C", " n'es": "0L7N", " n'i": "04BJ0L0E", " n'u": "04BG", " n'um": "04EK", " naa": "010S0D080R8D110P", " naar": "0R9T1107", " nach": "0N7P0R0W0SC50U0A0Y0Q1Q0B", " nad ": "0U0B0V070Y0R1A0P1CAO", " nada": "0D020O400P3A0R060U030V1V1A0O", " nags": "0D1N", " nagy": "14AM", " naj": "0U160V200Y3M1A291O08", " naka": "0D520U0311021A03", " naki": "0D261F03", " nami": "0D2S0R030Y0S1A0J1B0L", " nang": "0D64", " napa": "0D1S0U070V0E11071A02", " nasa": "0D2D", " nati": "0D2L0L0G0M0F0N060O060P050Q020R080T0A0Z0810051507", " nav ": "1DHM1Q1A", " nazi": "0Q4P0Z021F08", " na\u0161": "0U2H0V190Y351B04", " nd": "04JZ0S2A", " nda": "04SG", " ndab": "04AL", " ndag": "04A4", " ndak": "04G8", " ndas": "04F3", " ndaz": "04EF", " ndi": "04EE", " ndi ": "04BX", " nebo": "0U280V0C0Y3J", " nebu": "0U2S0Y1Z150O1B2O1O04", " neby": "0U2N", " nec": "03050M080O2G0P0H0Q080T2B0U5B0Y55150W1O0P", " nece": "0M070O370P0L0Q080T0K150R1O1D", " nech": "0U750Y63", " nede": "0R0L0V1T0Y0O0Z08100312071B0E1F551O06", " nedo": "0U1Y0V0T0Y0Y1B091D2A1P4F", " nee": "011X0M370R1J0U051B031C181D2C1O05", " need": "0M4D1C2U", " nees": "1D5U", " neh ": "1QAQ", " nej": "03020U4O0Y2I0Z0H100E14021B0A1Q09", " nejs": "0U34", " neka": "0V1N1B241D881O02", " neke": "0V0Z149M1B1K", " neki": "0V1A143J", " nem ": "0P1E14SG1P0U1Q0A", " nema": "0U0B0V510Y1O131M1B2W1D1D1O03", " nemo": "0T1L0U3Y0V300Y2P1B13", " nem\xE1": "0U4R0Y4G", " nem\xF4": "0Y3G", " nem\u011B": "0U2I", " nem\u016F": "0U2Q", " neni": "1O7N", " nen\xED": "0U62", " nepa": "0U0E0Y0D1BAD1D7R1O02", " nepo": "0T060U2T0V0A0Y5K150I1O02", " nepr": "0U0J0V0W0Y2R1B2I1O0E", " nere": "15061B1R1F661O03", " nesc": "0T2I1O03", " net ": "012H0R101B1V1F021Q5B", " netu": "0U090Y0D1B5B", " neva": "0O050P040U071B1H1DDL", " neve": "0M2R0P080Q060R020U030V0G0Y1Y14221B14", " nevi": "0Q040U1I0V090Y77150A1B071D5C1O021P0I", " nev\xED": "0U2Z", " nez": "030Z04AM0L080U3G0V0D0Y2R1D2S1F02", " neza": "04HB0U1V0V0G0Y1H1F02", " nezi": "1D6G", " ne\u0161t": "0U030V521B03", " ne\u017E": "0U320Y1C1B3B", " ne\u017E ": "0U3Q0Y1F", " ne\u017Ei": "0U051B6F", " ng": "0304046Z0B0C0DAH0S0V1Q65", " ng ": "0DGM", " nga": "030204A40B060D1I1Q3E", " ngah": "04G3", " ngay": "0D28", " nic ": "0U3I1A2C", " nich": "0NP10R030U0B0Y0J1A0F", " nici": "157T", " nie ": "01SG0N2D0YBT1ASG", " niek": "0Y5D1A0L1BDU", " niem": "011M0N1T0R1V11021A17", " niet": "0O030RPP1A03", " nie\u010D": "0Y3O", " nih": "0T2R1F041Q13", " nihi": "0T2X", " nii": "116B1C32", " nii ": "11031C6H", " niin": "11C5", " nij": "0R020U020V5D1F02", " nije": "0VCS1F03", " nika": "0U050V5I", " nikd": "0U680Y4L", " nila": "0B080D2W", " nimu": "0497", " ninc": "145F", " niny": "0D4H", " nis": "0P0A0T0L0V5311021A061F02", " nisa": "0V911F02", " niy": "04150D4W1F0D", " niya": "0D8D", " ni\u010D": "0U0C0Y3E", " ni\u010D ": "0Y3Y", " nk": "043D", " noc": "0L020N3M0O1H0Q020R060T1D0U0U0Y161A0R", " noch": "0N5Y0O1U0R08", " nodi": "011I0R35", " noe": "0R0A0T0A127A1F09", " noe ": "0T061248", " noen": "123B", " nog": "012B0R490V070Z4Y100K1A091D1P", " nog ": "011W0R5I100F", " noge": "0V070Z4T", " noi": "0L0J0M050P1I0Q3X111A153E", " noi ": "0Q3V1546", " nok": "0Z0W1103121C13241D0U1F061O0K", " nol": "0Q020T2L11071D0W1PA3", " nolo": "0T0G11071PA2", " nom": "0B060L1P0O0V0P0Z0Q0R0T2I1D0Q1O171Q1B", " non": "0B040L180M060QSG0TJ80Z021Q09", " non ": "0L200QSG0TIK", " noo": "011M0D0O0M020R2M1C19", " nooi": "011A0R30", " nori": "15051BCH", " nors": "0Z0410021105120O1B4Y", " nor\u0117": "1B4R", " nos ": "0L1E0O3E0P2T0T260U0214041A03", " nost": "0O020Q2J0T2R110N150X", " not ": "0M700N031F051Q61", " noti": "0L020M0C0N030O0I0Q0E0T021D581O03", " nou": "01250LDU0R091111152Q", " nou ": "01270R0D151P", " nous": "0LIL1121", " now ": "0M2B", " ns": "0305042R", " nsh": "0472", " nsha": "049C", " nt": "030404FJ", " nta": "04HP", " nta ": "04HO", " nti": "04HN", " ntib": "04AL", " ntu": "04AS", " nu ": "0L020R2A0Z1Y102P15S41O061P2E", " nu-": "1557", " nua": "0L050S30", " nue": "0L020O421B08", " nues": "0O2Q", " nuev": "0O2N", " nun": "0N0A0O230P2I0T421B021O1Q1Q07", " nunc": "0O2R0P350T2O", " nuo": "0Q2T111F1B4X", " nur": "03020M020N2P0T0311071B071O27", " nur ": "0N4H1O49", " nus": "0T021B48", " nusi": "1B5I", " nyt ": "0Z0B117W", " nz": "045S", " nzo": "0497", " n\xE1": "0S490U4E0Y4O131E140J", " n\xE1 ": "0S3C130F", " n\xE1s ": "0U2C0Y1R", " n\xE3": "0PLO", " n\xE3o": "0POG", " n\xE3o ": "0PR9", " n\xE4": "0N0D103P115K1C4V1NA1", " n\xE4m": "0N021003110T1N99", " n\xE4me": "1NBX", " n\xE4r": "103J", " n\xE4r ": "102P", " n\xE4yt": "1178", " n\xE5": "0Z0K104N122C", " n\xE5 ": "0Z041002122E", " n\xE5g": "105Y", " n\xE5go": "1053", " n\xE5r": "0Z18123J", " n\xE5r ": "0Z1I123J", " n\xE6": "0Z0S120C131B", " n\xE6s": "0Z191315", " n\xE9": "0L0K0P020Q041436", " n\xED": "0P030SHL0U0S0Y0D1309", " n\xED ": "0SBB0U0M", " n\xEDl": "0S9U", " n\xEDl ": "0SQR", " n\xEDo": "0S2T", " n\xF3": "0P320S1B0T02130M1A03", " n\xF3s": "0P3P", " n\xF3s ": "0P4O", " n\xF8": "0Z0H120G", " n\xFC": "0N021C181F041P0F", " n\u0101": "0T061D26", " n\u0117": "1B1V", " n\u0117ra": "1B54", " n\u011B": "0U58", " n\u011Bco": "0U34", " n\u011Bk": "0U3H", " n\u011Bkd": "0U2N", " n\u014D": "0T16", " obai": "0S8U", " obe ": "0V0H1P5K", " obi": "0Q040T030V0J151H1A0X1PD3", " obik": "1P9S", " och": "0O0A0R080U0D0Y0R108N15101A0D", " och ": "108O1A03", " od ": "0U1S0V4L0Y271A30", " of ": "012E0MCF0R2K131V1P0Z", " og ": "0ZB512EI13B0", " oj": "0O0M11041A0Z", " okk": "134E", " ol ": "1F091NIS1O2B1P2E", " ola": "0B070D020O020Q0E140G15051B041F7F1N781P1M", " olar": "1F2H1N9R", " old": "0M0X0Z02140Q1FA0", " oldu": "1FD7", " ole": "0B110T0B0U0211NM1A021CHG1O021P2Z", " ole ": "11MK1CCV1P33", " oled": "1C9J", " olem": "11671C4S", " olen": "11HZ1CE6", " olet": "0T0411FN1C1Z", " oli ": "11KP1CDR1P3Q", " olik": "100911141P52", " olis": "1189", " oll": "117C14021C1F", " olla": "0O02117X1C3H", " ollu": "1186", " olm": "1F6Z", " olma": "1F91", " oly": "100D1103144J", " olya": "144O", " om ": "01BX0R7W0Z5X108Z126J150Z1P1Q", " oma": "0N020R0511121C7R1P0J", " oma ": "0N030R05110E1CGK1P0G", " omi": "0Q020T040V05110P1P5R", " omn": "0T7P", " omne": "0T3H", " omni": "0T4U", " on ": "0L3X0M600U120V540Y2J11SG1A581CSG1F0P1N0P", " ona": "0R050U0W0V3C0Y221A371F2T", " ona ": "0U180V7Z0Y2K1A531F3K", " ond": "01200O020P2P0R270V0E0Z0D10021F0N1N0T1O02", " onde": "01240P3B0R2S0Z02", " one": "0M300Q090R030T050U040V071A04", " one ": "0M3U0V0E1A07", " oni": "0U0A0V1H0Y0O1A0V1O3A1P1E", " oni ": "0U0E0V3D0Y0T1A1E1O661P0Z", " onk": "0N040Z06114G12071O07", " onko": "119V", " onl": "0M1H0Q020R061F5G", " onla": "0R051F7C", " ons": "01CH0R2T0Z021P0E", " ons ": "01CX0R3J", " ont": "01240L3E0M020P130R2Q100H", " ont ": "0L5F100H", " onu": "1FD61N58", " onu ": "1F9W", " onun": "1F92", " onu\u0148": "1N4G", " ony": "0U020Y0A1N7G", " ony ": "0U020Y0C1N9X", " oo": "013P0D020R10110H1C1O", " oor": "015P0R0K", " oor ": "014J0R02", " op ": "015O0RB40Z2I", " opp": "0L050M070Q050R040T120Z031118125B", " opp ": "122C", " oran": "0BA30L060M030N050R040Z0211041B041F041O0E", " orm": "0Q050S3X10051F06", " orm ": "0SEM1002", " os ": "0L020O0O0P8L0T060Z2G", " oss": "0P020Q080T031029123K", " oss ": "1029123K", " otr": "0O2G0U060V0310061A091D0Q", " ots": "11031C28", " ou": "01180L2D0M2K0P4M0R0L11091505", " out": "0L030M360P2B110B", " out ": "0M3R", " outr": "0L020P2L", " ova": "0T090V281004115H", " ovat": "11CM", " ovde": "0V5T", " ove": "0M1B0O030P020R580T0A0V0I0Y0A0Z4I110O1244", " over": "0M1S0R6X0Z5D1243", " ovo": "0P0A0U070V470Y0K1O05", " ovo ": "0P040V80", " ow": "0M0E1A091N0S", " o\xF9": "0L1P", " pa ": "010W0D1H0V0I1D20", " pada": "0B9V0U040V161A131B8K", " pad\u0117": "1B57", " paga": "0D030O0Q0P0J0Q0Q1B4U1D2A1O06", " pagk": "0D29", " palj": "119I1C81", " palu": "0T0211031C6X", " pal\u012B": "1D6X", " pang": "0B0L0D2A", " par ": "0L6I0O0B0P030T020V0E0Z0D1006120B15051DK31Q0Q", " paro": "0L0H0O020P070Q0W1B1F1O4Z", " pas ": "0LSG0R0C0U030V0O0Z091B231Q0I", " pasa": "0B0D0D0A0O3H15051A061BB71D4Z1F041O06", " pasi": "0B0E0D020O0414041BDW1O1M", " pate": "0O020Q030T2T1B181D6C1F03", " pat\u012B": "1D6G", " pe ": "15F5", " pea": "0L040M080S0T1C8I", " peal": "1C4C", " pec": "0B040O0B0P030Q070T3114021O04", " peng": "0B2Z0Z1Y1018121H", " pent": "0B0V0P020Q0215CC1O0F", " peop": "0M27", " per ": "0B0D0M020N040QF10R0R0T2E10031B6K1O421Q0H", " perc": "0B1G0L060M040O040P0H0Q5M0T0G140W1O02", " perg": "0BAK0P210T0E1B0A", " pern": "0B680P090T031B1C", " pero": "0D140O4V0U090Y0P", " pess": "0L020P380Q040T051108", " peu": "0L8L1103", " peut": "0L4T", " peux": "0L4T", " piac": "0Q5U1404", " pid": "0B040O0L113Z1C1M", " pid\xE4": "117U", " piki": "0B2P11021N851O02", " pina": "0D3Q", " pirm": "0D021B3L1D5C", " pit\xE4": "11CH", " pi\xF9": "0Q5B", " pi\xF9 ": "0Q5D", " plac": "0L140M0S0O070P020T4A0U05156O1A021O02", " plej": "0Z0B1O48", " pli": "0L030R020V0B0Z02100315161A041B0C1O4J1P0Z", " pli ": "1O7G", " plus": "0LCH0R020T0N0U020Z03110H15051A021O02", " po ": "0D7L0U1M0V100Y4C1A4D1B1Q1O021Q1D", " poat": "154Z", " pode": "0O1D0P770U0E0V0815051A0J", " poi": "0L1N0M0A0P0C0Q0F113R1A031B021C0V", " pomo": "0Q020U3C0V4B0Y1Y110G1A1V1O0E", " pom\xF4": "0Y2R", " pong": "0D1L0O0A1Q4R", " poo": "0M090R050Y0B1C24", " pool": "0M040R031C4C", " por ": "0OFK0PBM1OBM", " posl": "0U280V500Y17", " poss": "0L1C0M0H0P3W0Q470T4A1104", " pot ": "0L040R021567", " potr": "0Q1J0U0G0V2W0Y48150H1A3O", " pot\u0159": "0U48", " pou": "0LG10M040P1R0U100Y0L", " pour": "0LKN0M04", " pouv": "0L4A", " pov": "0P0A0Q0A0U160V140YAK150R1O5U1Q0X", " pova": "0U0B0Y0C1O88", " pove": "0M020Q0A0U030V0U0YAR150X", " pow": "0M081A89", " powi": "1AA0", " poz": "0O020U2A0V1R0Y5C1404150L1A1W1F031O02", " po\u010D": "0U1P0V160Y4V", " praa": "012V0R0M", " prac": "0M080O050R0E0U2T0Y3415081A4X", " prae": "0T2J1B0L1C22", " pran": "0B1S0D0S0Q0I0T0L0V0A1A031B4G1C4C", " prat": "0L0E0P0I0Q070R170V0K101R1B081F04", " prav": "0T030U3B0V3Q0Y4A1B0B1O0K", " praw": "1A4V", " pra\u0161": "0U021B4W", " pre ": "0V2V0Y3G", " prec": "0M030O0O0P500Q060R0E0T070Y0K100I150K1O0L", " pred": "0M030O040P020Q020V3C0Y4V150I1O03", " prek": "0V1X0Y2V1B0F", " pre\u010D": "0Y8V", " pri ": "0V0D0Y171O8U", " pria": "0B170L020T060Y2X1B04", " prie": "0L0S0R020Y0E15311B871D6G1O02", " pro ": "0N040T140U471B091O31", " pro\u010D": "0U5N0V12", " prz": "1AGN", " prze": "1AEP", " przy": "1AD8", " pr\xE1": "0O040P030U460Y47", " pr\xE1c": "0O060U3I0Y1P", " pr\xE1v": "0U1S0Y35", " pr\xE9": "0L3H0P06", " pr\xED": "0O020P030S0X0Y6C", " pr\xF8": "0Z0H121J", " pr\xF8v": "0Z0K121J", " pue": "0O970T4D", " pued": "0O9O", " puer": "0O140T2X", " puh": "117714021C0V1Q34", " puhu": "11CY", " pulc": "0T2V", " pum": "0D161Q0J", " puny": "0B60", " pute": "0T070V071565", " puw": "0D11", " puwe": "0D1X", " p\xE4": "0Y0I1003115D1C3J1P0H", " p\xE4i": "113S1C0H", " p\xE4iv": "118A", " p\xE4\xE4": "115L", " p\xE5": "0Z5I10CS127H", " p\xE5 ": "0ZDJ10G612GP", " p\xE9": "0L0E0O040P0F141T", " p\xE9nz": "143F", " p\xF5": "0P021C15", " p\xFC": "1C0Z1P4I", " p\xFCk": "1P5J", " p\u0101": "0T021D4W", " p\u0101r": "1D69", " p\u0103": "152Z", " p\u0113": "1D2L", " p\u0159": "0UBP", " p\u0159e": "0U8H", " p\u0159ed": "0U4A", " p\u0159es": "0U3P", " p\u0159i": "0U6F", " p\u0159ij": "0U2T", " p\u0159\xED": "0U4I", " qa": "03061L0E1QLZ", " qatl": "1QC8", " qo": "1Q7X", " qu'": "0LA11Q32", " qu'e": "0L4X", " qu'i": "0L88", " qua": "0L3L0M060N060P9S0QCM0TF5", " quae": "0T4S", " qual": "0L090M030N040P2T0Q780T0D", " quam": "0T6U", " quan": "0L4K0P760Q4M0T36", " que": "0LO80M0L0N030ORR0PSG0QFQ0T1Q", " que ": "0LRG0OSG0PSG", " qued": "0O2X0P02", " quel": "0LAN0N030Q5F", " quem": "0O080P3J0T1J", " quer": "0L020N020O2O0P970T07", " ques": "0L1N0M0P0O060P0A0QBO0T02", " qui": "0L840M0Z0O930P1C0Q3J0TGP", " qui ": "0LC50Q360T4M", " quid": "0T7Z", " quie": "0M090O890P040T07", " quis": "0O0Q0P0W0T3E", " quo": "0L1K0Q020TBT", " quod": "0T4R", " quot": "0L060Q020T3N", " qu\xE9": "0O7V", " qu\xE9 ": "0OA2", " raa": "010M0R11110C1C33", " raam": "0R0D11061C7D", " rah": "0B07111X1C3E1F0N", " rai": "0L100M0M0P0B0S3C110A1B04", " raib": "0SCR", " rans": "119I", " raz": "0O0N0P0D0Q060V410Y0I1A1V1N0D1O02", " redz": "1D7R", " reg ": "012N", " regn": "0N0G0Q0E0T0K0Z1I100K120W130Q1O02", " regt": "011W", " reik": "1105130O1B9S", " rend": "0L330O040P030Q0B0R0814301O06", " rett": "0N080Z0B121U1404", " rien": "0L490O020Q02", " roz": "0R050U420Y5914031A3U1O07", " rud": "0M030S4F0Z021B09", " rud ": "0SEZ", " ruma": "0B6N0O02110A", " run": "0M0G0N050R020Z0C100D110D120P1B021D3K1Q0E", " run\u0101": "1D8S", " rw": "03020422", " rya": "048B", " r\xE1": "0O0J0P0K0S0W0U3O0Y3213171427", " r\xE1d": "0P040U540Y3Z140S", " r\xE1d ": "0U530Y4V140M", " r\xE4": "0N02102111061C6S", " r\xE4\xE4": "1C87", " r\xE4\xE4g": "1CD3", " r\xE4\xE4k": "1C6R", " r\xE5": "0Z08100L1207", " r\xE9": "0L3Z0P020S1Q13191419", " r\xED": "0O0D0S2H0Y05130L", " r\xEDom": "0SA4", " r\xF6": "101D130C140C", " r\xF8": "0Z0I120J", " r\u0103": "153R", " s'": "0L4G", " s'e": "0L3B", " s-": "030315591O02", " s-a": "1584", " s-a ": "158A", " sa ": "03020DI50L3Q0Q1B0S4U0V5F0YR7101L121I15151CHI", " saa": "011B0B1M0D0M0R0411631C7L1F1S", " saa ": "113I1C4V", " sabe": "0O440P4L", " sabi": "0D210O0C0P1E", " sade": "100J110P1F44", " sagd": "0Z20", " sago": "0D071P3C", " said": "0M6T", " sais": "0L471116", " sal ": "019A0O090P040Z02", " sam ": "0VR41A17", " samm": "0N050Z1P100G110N121W130Q", " samo": "0U0L0V770Y0T11081A421O07", " sana": "0B250D0S0O030T0611341F471O06", " sano": "0O0311DU1O0B", " sao": "0L020S2T0V08", " sap\u0146": "1D63", " sav": "0L2B0M080V0K0Z0B1105120A14031BAB1D7G1F0N1O06", " savo": "0L1P1BGC1O02", " savu": "110A1D901F07", " say": "0BGX0D040M2C1F0V1Q0S", " saya": "0BQ80D05", " sb": "03040Q0N0U04", " scho": "0M1G0N430R3G0T1C0U130Y0S1A0C", " sci": "0L0B0M080Q0O0T4Y1O48", " scia": "0Q060T081O4H", " sco": "0L030M050Q2S0S130T081510", " scr": "0M0A0Q1U0S2J0T3H1536", " scri": "0Q1T0T3F153Y", " scr\xED": "0S9P", " sed ": "0O040T3H1O5A", " seda": "0B700O020U020V0K100N1CH7", " see": "010Z0B0M0M3B0N0B11021CFE", " see ": "0M250N061CQZ", " seg ": "03CA124S", " seg\xED": "143D", " seh": "0B120N410U0311021408", " sei ": "0N1H0P2Q0Q3Y", " sein": "0L050NC2110P132T", " seka": "0B6Y110K1B101O04", " sela": "0B7A11031F06", " sell": "03070M0A0O040T0G11201CGM", " selv": "0P040Z2F112C1228", " sem ": "0P1X0U0Y0Y0S13GG145C", " semb": "0B0Q0L1T0O020Q2M1F02", " semm": "030Q1104144Q", " semp": "0B0H0P290Q2P0T1U1F03", " semu": "0B5W", " sen ": "0U08100911C312061A051F3P1NG31O1K", " senh": "0P2Z1O06", " seni": "0B0T0T081B0W1F771NAC1O07", " seo": "0B2X0SBL", " seo ": "0SS8", " seor": "0B5K", " sepe": "0B6D0T0A1F02", " ser ": "0O3B0P3V0Z1R101Q12241A03", " ses ": "010G0L4P0U130Z0510061F051O0A", " sett": "03080M040Q1C100Q121D130X", " seu": "01180B040L2G0P5S111B", " seu ": "0P5G", " sf": "03030Q0C150W", " she ": "0M9D", " shou": "0M3U", " sia": "0B2Z0Q590S3611031A041B0A1O4P", " siad": "0SBD1A02", " sian": "0B1C0Q0B11051O3U", " sic": "0M0B0N7O0Q1L0T1N0U02", " sich": "0NCA0T03", " side": "0M0B0T060Z1Q121M", " sie ": "0NMN1A02", " siem": "0O2W1107", " sien": "01240L060O1G11081B0P", " sig ": "0Z47104H132I", " sige": "0D020Z2C", " sii": "0Q03115S1C5H", " siin": "112N1C7J", " sila": "0B0V0D2S1F0H", " sin ": "010L031E0O2N0SML0T040V0D0Z3Z1027122I1O27", " sina": "0D2E0P070Q0H0R0E0T070V0F10101C26", " sind": "04830N7T0Q020R0H0Z041C6B1O03", " sino": "0D1S0L050O0M0V0R1O02", " sins": "04EK", " sinu": "0D0U0T050V0611OA15061C97", " sinz": "04CH", " sin\xE4": "11GC", " sitt": "0M0A101W113C121G1318", " sit\xE4": "119D", " siy": "0D5L1F0B", " siya": "0D991F0F", " siz": "0M021F271N76", " siz ": "1F0P1N52", " si\u0119": "1AJL", " si\u0119 ": "1AQ2", " sj": "0V040Z06102E120P1330", " ska ": "103R", " skai": "1B3G1D5Y", " skal": "0Z3L10091249132D1A041B08", " skj": "0Z0D100G122V1308", " skje": "1220", " skri": "010G0Z1I101E121L133E1B0D1O1T", " skul": "0Z18104H122J13151O02", " slaa": "011O0R16", " slov": "0Q090R020U1L0Y4V11021B031F05", " slu": "0R080U0S0V0S0Y0C0Z0L101R1214150A", " slut": "0Z09101O1210", " sme": "03050M050Q0S0R070U020V0Z0Y6T0Z0A1002120C1B02", " sme ": "0Y81", " smo ": "0V6E", " smu": "03020U0D0Y0K0Z1G10051A091B08", " sna": "030M0M040R060U190V0A0Y0S0Z0X1016124B1B02", " snak": "0M020Z0F123Q", " so ": "012A04150M240N4A0Q1P0V030Y1W1P0M", " sob": "0D0A0N040O230P2R0U0J0V0R1A21", " sobr": "0D0I0O2M0P38", " soi": "0L3I0O050P02111V1O02", " sok": "0R050Z02110B14631A031F0A", " sok ": "143B1A03", " solo": "0O310P020Q2E", " som ": "0P050YSG0Z66106Z12AE1P0G", " some": "0M580O020P061O0F", " son ": "0L8Z0M0D0O570Q04100E1F1N1P0Z", " sono": "0P090QFP1O0C", " sont": "0LA5", " sora": "150M1F091N59", " sou": "012E0L4R0M0N0P2B0U1G1102", " sou ": "01270P2N", " spik": "10031P3Q", " spil": "0Z1L121F131R", " spis": "0U050Z3E122O", " spre": "0M040N1O0Q050R3D0V2K0Z021204150P1B0N", " spr\xE5": "100W121F", " spu": "0N030Q030R050T040V040Z0E120G131I159V1A02", " spun": "155N", " spus": "156K", " sp\xF8": "0Z15121K", " sp\xF8r": "0Z19121E", " sp\u0113": "0T031D31", " sta ": "0Q3H0R090U03120P150D", " ste ": "0V2M0YCF", " stor": "0M0V0Q0N0R0B0Z2D101S12271B0H", " st\xE4": "0N0E101U", " su ": "0L040O8V0Q1A0V5L1B811C2U1F0H1P0U", " sua": "0B160O030P4V0Q3N0S0T0T2511041B05", " sua ": "0P4Z0Q3O0T0R110A", " suda": "0B9V0O030Q0G1B0N1F031O04", " sui": "0L7V0M080O060P030Q080R060T0Y11081B03", " suis": "0LBG0T0K", " suka": "0B780D0611081B0D", " sul ": "0P070Q1311031C6U", " sull": "0Q15110J1C6X", " sum ": "0T761Q0S", " sunt": "0TBH15HR", " suo": "0D030Q670T18112M1B09", " suo ": "0Q3Z0T0V1102", " sur ": "0L890O050Z021O47", " sus ": "0O3L150D1Q0K", " susi": "0D06110A1B58", " suu": "0T18114A1C4K", " suur": "115H1C70", " sva": "0Q080U080V1G0Z0P1017121G131C1B1H1D13", " sve ": "0V6U", " svi": "0Q0A0V2W0Y0H0Z0D10051206130J1B051O021P17", " svo": "0Q020U2L0V3F0Y6H1002135K1B07", " svo ": "137A", " svoj": "0U2I0V730Y7Y", " sv\xE9": "0U3N1404", " sv\xE9 ": "0U2Q", " swoj": "1A3R", " sy ": "01AM", " sz": "14HA1A53", " sza": "144Y1A0W", " sze": "14GN1A0N", " szem": "143Q", " szer": "14CS1A06", " szo": "144W1A02", " sz\xE1": "145Y", " sz\xE1m": "1439", " sz\xE9": "143J", " sz\xF3": "143O1A06", " sz\xFC": "144K", " s\xE3": "0P35", " s\xE3o": "0P3T", " s\xE3o ": "0P4T", " s\xE4": "0N06103Z111V1N0Y1P1A", " s\xE4g": "102A", " s\xE5": "0Z2A1059122X", " s\xE5 ": "0Z59104O126M", " s\xE6": "0T040Z0N1204130R", " s\xE9": "0L0O0O180P0G0Q030S9O133C140C", " s\xE9 ": "0O1V0Q050SBG131Y", " s\xEA": "010T", " s\xED": "0O0P0P060S470U03132Q140D", " s\xED ": "0O0X0S411306", " s\xF3": "0O0N0P1I130I1406", " s\xF5": "1C4S", " s\xF6": "100U110L1311140H1C1B1FAA1N3C1P0N", " s\xF6y": "1FAI", " s\xF6yl": "1FDU", " s\xF8": "0Z0Y120T", " s\xFA": "0Y5L130G1404", " s\xFA ": "0Y861305", " s\xFC": "0N06140F1C2T1F2Z1N191P14", " s\u0101": "1D2I", " s\u0103": "15PO", " s\u0103 ": "15SD", " s\u0103-": "155X", " s\u0105": "1A2X1B0J", " s\u0105 ": "1A3H", " s\u0113": "0T0H", " s\u0131": "1F3X", " t'": "0L1X", " t-": "032I0S2P0Z02", " tad": "031A0B0K0U2U0V061B0E1D171F061Q0E", " tady": "03020U3X", " taga": "030G0D0S14051C7G1D3G1O02", " tage": "030U0N120Z3S10041O04", " tah": "03060B7C0D040U0F111I1C901F0F1Q0K", " taha": "03040B0H0D03111J1CGT1F02", " tahu": "03080BD7", " tai ": "11311BNA", " taip": "110A1B7Y", " tak ": "0B1P0U530Y3M0Z0T1A4W", " take": "032I0M27100511031205", " tako": "0D0A0U1E0V5F", " tal ": "030C0O0P0P0E0Z0810071C48", " tala": "03090D1F1025135M1402", " talk": "0M24", " tall": "031A0M090O040Z071004110712061C4Z", " tal\xE1": "144T", " tam ": "03030T1A0U3P0Y3I1A271B0U1D2O1F141QR9", " tam\xE1": "143A", " tan ": "0O3B", " tao": "0D1Q", " tao ": "0D1O", " tapa": "030G0D080O03118V130I14091B041N14", " tart": "0L050O060P03110J143N1B041F0P", " tas ": "0B0D0L030R071B541DMF", " tau": "0B080D030L030M040N0A0T0611081B5F", " tau ": "0B0F1BAE", " tave": "1B58", " tavo": "0Q0D110Q1B90", " tay": "030S0D1L1F031Q0D", " tayo": "0D2S", " teac": "0M110SBY", " tead": "1C76", " tee": "011V0M050N090R020Z03112L1C3Z1O02", " teg": "03150R1X0T050Z0E1209142D1A3T1B061C3J1O03", " tege": "0R2L1C4I", " tego": "1A60", " teha": "1C4Z", " tehd": "0U0611771F06", " tei": "0L020N0J0P020S0M1132130D1B1U1C5C1D4E", " teic": "0N021D7V", " tela": "0B5O0O020P020T041F06", " tell": "03BC0L170M2S0N040R030T061205", " tem ": "0P6N", " tema": "0B2M0O0B0P031A0F1B061CA11F051O0C", " ten ": "010K0M0A0O060R0A0U4A0Y261A5J1B4D", " teng": "03020B0O0O4X0Q03130G140N", " tenh": "03070P4P0U0S", " tenk": "03080U08121L1B03", " ter ": "0P2O0R0B0T06", " tera": "0B1G0Y2Z1A271O031Q3W", " terl": "0B6K1F02", " teru": "012W0B1B0R271O0H", " tess": "037N0Q020T071409", " tett": "03DG0Q031426", " tev": "03020P0I0R0A100314051D9H", " tev ": "1DF4", " tevi": "03041D8O", " te\u010F ": "0U2Q", " than": "0M2V", " that": "0MP3", " the ": "0MSG", " thei": "0M28", " them": "0M2N0N09", " ther": "0L020M530N020T06", " they": "0M8Q", " thi": "03020MCJ0S0X", " thin": "0M8D", " this": "0M93", " thou": "0M3F", " thr": "0M1Y", " thu": "03030M040R130S2P", " th\u014D": "0T3G", " th\u014Dm": "0T3N", " ti ": "03030O0W0P0A0Q3V0U3N0V4M0Y4A0Z0M120M140W", " tibi": "03040T5U", " tid": "03290BKP0P020Z2M102K122Q1P3A", " tida": "03090BS51P0J", " tie ": "0M030Y0H110B1B0G1D1R1O46", " tied": "119S14031P1L", " tiem": "0O3L1B03", " tien": "0L0V0O9H0Q050R0U112M1O12", " ties": "11191B551O07", " tiet": "0Y1I1182", " tij": "03040O020R2S1Q07", " tijd": "0R3P", " tik": "031M0B090D0311041B9B1D791P4N", " tik ": "1B6T1D6P", " tika": "030411021D83", " tiko": "1P4V", " tikr": "1B81", " til ": "0ZGI12FE13K6", " tilb": "0Z1Q121J131C", " till": "03080M030Z0C10B6120A130B", " timp": "155X", " ting": "0B5E0D150Z0K1002120T1B0G1Q0I", " tio": "0B060P070S0O100I1O9G", " tio ": "0P07100G1OA3", " tion": "0B0C1O7K", " tiu": "11041O7D", " tiu ": "1O8Z", " tiun": "1O3L", " tj": "030E0Z06100S12081304", " tlh": "1QD7", " tm": "035I0U060Y07", " to ": "0MQR0UM60VAG0YO80Z27121N1AG51B3B1DBJ", " toat": "154L", " tod": "0M180N0D0O8U0P58113Y1B0C1Q0C", " toda": "0M1O0O3V0P20", " tode": "0N06118S", " todo": "0O840P4R", " toe": "013Z0R3B", " toe ": "013A0R12", " tog": "0M0J0Q050V120Z2B1019120L", " tog ": "0V0H0Z291018", " toh": "0U4A0Y1M11061C0L1Q0N", " tohl": "0U3E", " toho": "0U2P0Y1R", " toi": "0B040L2C0M020N020R020Z05115R1C0Y", " told": "0M3Y", " tom'": "0M1O11081A081FHD", " tome": "0O060P070U3C0V2R1A12", " tomi": "100311SG147V1A061CEO", " toms": "0N1B0R170Z241015120R1DSG", " tomu": "0U1J0V330Y0Q1B6O1D4H1N8H", " tomy": "1N5Y", " tom\xE1": "0O140P0B0SH20U070Y0I", " ton ": "0L460N02", " too": "0M260R051C1D1P0R", " tot ": "01210N090R230T07152S", " toto": "0D0H0T050U0W0Y50", " tou": "0LCB0M0C0N020R020U091103", " tous": "0L4C", " tout": "0LC2", " trab": "0D0U0O490P3F1O02", " trav": "0L5M0M0C0O080P040V080Z0815051O08", " tre ": "0Q160Z231018121J1O4Y", " treb": "030C0V8U0Y0I15CX", " tror": "0Z21101R122C", " trou": "0L4M0M0F0P090R0I0U03", " tr\xE4": "0N0K101V", " tr\xE6": "0Z1R1206", " tr\xE8": "0L3J", " tr\xE8s": "0L5X", " tt": "037Y", " tua": "0B170P0N0Q1D0S0Q0T3C1B02", " tud": "030L0P2314FT", " tudo": "0P2N147O", " tule": "03050T0411BI1C6R", " tuo": "0Q2B0T0Z11931B1U", " tura": "032504DR", " tutt": "030G0Q691108130Y1F0A", " tuu": "0T30110S", " tvo": "0U1A0V2G0Y4C130E1B04", " tvoj": "0U1K0V5T0Y51", " twee": "011T0R2V", " tyc": "103J1A0C", " tyck": "103K", " tym ": "1A4U", " t\xE1": "0P060SP20U080Y1M1303141E", " t\xE1 ": "0SQ20Y0R", " t\xE1i": "0S4H", " t\xE1im": "0SG7", " t\xE3": "0P1K", " t\xE4": "0N04101B11DN1C4J1N1S", " t\xE4m": "118H", " t\xE4m\xE4": "11IE", " t\xE4n": "101F113M1C2Z", " t\xE4na": "1C6E", " t\xE4n\xE4": "116Y", " t\xE4y": "114M", " t\xE4yt": "117H", " t\xE6": "0Z0J130B", " t\xE9": "0L0S0O0A0P030S0N0U12141U", " t\xEA": "0L0F0P12", " t\xED": "0O0E0P070U0T0Y07132A140C", " t\xF5": "1C34", " t\xF6": "0N031004110W130X143P1C2Y1F021N0S", " t\xF6b": "143I", " t\xF6bb": "143Q", " t\xF6r": "1003110714471F02", " t\xF6rt": "1432", " t\xF6\xF6": "1C3N", " t\xF8": "0Z0C1206", " t\xFA": "0O130S9M0Y1D1412", " t\xFA ": "0O1M0SB60Y0V", " t\xFC": "0N09140F1C2E1F1S1N0M", " t\u0101": "1D5Z", " t\u0101 ": "1D4A", " t\u0105": "1A081B3I", " t\u0105 ": "1A0B1B5M", " t\u0113": "0T0F1D2E", " t\u0117": "1B1K", " t\u011B": "0U2R", " t\u011B ": "0U2N", " t\u0159": "0U1P", " ua": "0B0N0S3N0Z021205", " uai": "0S43", " ubi": "0302043G0O020T620V0J1A06", " ubi ": "0T69", " ubu": "030404B1", " ubu ": "04B6", " ubw": "0475", " uc": "030D0Q0U0U0515081A1V1F06", " ud ": "0Z2L", " ude": "03090U020Z1O1A05", " uden": "0Z1O", " ud\u011B": "0U5M", " ud\u011Bl": "0U7P", " ui": "011I0R1V0S35110J151V", " uile": "0S9P", " uit": "013H0R6X152S", " uit ": "01160R60150F", " um ": "0N380PFJ136T", " uma": "031Q0D0T0N020PBT0Q0715091A071F0F", " uma ": "0PEE", " umu": "030A04QN0B0N0D0F0Z0412091F11", " umun": "04IP", " umw": "04CK0N03", " umwa": "030204GU", " un ": "0LGW0OHN0QGS15F11DBT", " una ": "0D040OGB0QB70T0N150Z", " und ": "0NGJ", " unde": "0M1J0T0Q0Z1W101C121B154N", " une": "030E0LD50M040N080U02110J1515", " une ": "0LK3", " uns": "0L020M030N4E0P08", " unt": "0B7D0M0H0N2711071403", " untu": "0BDL", " unu": "0T0V0V08151O1C0Z1F0Y1N0D1O2V", " unu ": "15071O3G", " uo": "0Q0L0V0F1B08", " up ": "0M2L", " upp": "104J11031340", " upp ": "102C133L", " ur ": "03KW0Z09100M", " urad": "0V6X", " uras": "049I", " uri": "0303047Y0D03", " uro": "04150Y6G11021A0O", " urob": "0Y7X", " us ": "0M221P2B", " ut ": "0T65102V123F1P0F", " uten": "0T03121N", " uu": "0D020R0C111U1C1P", " uvek": "0V4H", " uw": "0308041L0R0K1A1C", " ux": "03110T0Y", " uy": "030H043D1F2P", " uyu": "048R1F14", " uyu ": "04EF", " uz ": "0V091D7W", " u\u010D": "03090U1L0V1M0Y2C", " u\u017E": "0U370V0D0Y2O1B61", " u\u017E ": "0U4X0Y4D1B39", " v ": "0U7J0YAC", " va ": "0L250O1N0Q3Y1002156E1B081P0Y", " vab": "1B041C2U1Q0J", " vaba": "1C6U", " vad ": "106W", " vado": "0Q3K140A1B0E", " vagy": "14EF1B04", " vai": "0L1V0O040P3B0Q3K119B1B4T1C0U1DG0", " vai ": "0P400Q3M112V1DQF", " vaik": "117W1B6N", " vain": "0L0C118A", " vair": "1B1D1D7V", " vaj": "0U040Y0D1102140D1C2C1D4A1Q2T", " vaja": "14021C5F1DAK", " vak": "0R0D100A110S120P130J140B1B2U1D1R1F0E", " vaka": "0R0B1119130G1B5T1D4C", " vala": "0L031108146Z1B2Q", " vald": "0T2S1006130H1B0C", " valg": "0Z0J120F1B4X1C1A", " valo": "0O090P070Q03111M150B1B021D9L1O0M", " vand": "011L0R2C0Z1S100213261B2R", " vann": "0Q3F0R051007110A1219130H1426", " var ": "0ZB610BJ12A613GU1D711F9E", " vara": "0P030V06103C112V150H1C1V1D2O1F05", " varf": "102I", " var\u0113": "1D6G", " vast": "0L030P020R0Q0T06116X14041C3Y1O07", " ve ": "0O0G0Q050U2V1F8F", " ved ": "0Z61121B", " vee": "010S0P020R3S1C3F", " veel": "010N0R4X1C6E", " vej": "0P0J0U080Z1Q1B02", " veld": "0R03123H130F", " vele": "0Q020R0B1447", " velm": "0U3A", " vem": "0O030P0O0U02101X1P4B1Q0D", " vem ": "0P0S0U03101Q", " vemo": "0O050P031P4Z", " veni": "0L180O0Y0Q0Y0T4H0Z07153G1O1Q", " venn": "0Q080Z1012241411", " veom": "0V4H", " vera": "010T0N0L0O0M0Q160R1A0T0A137J1O0V", " verg": "012S0L020N270O050P040Q060R2E1B091F051Q0D", " verk": "011Y0N0Y0R221027110H1208131Q1B151O0P", " verl": "011U0N330O0C0R2K", " vero": "0Q3Q0R0O0T0P0V12110E1O0W", " very": "0M3R", " ver\xF0": "13B5", " vese": "0U0315071D5H", " vet ": "102S123F", " veu": "0L57", " veux": "0L5T", " vez": "0O2I0P2D0U0C0V0E0Y0M1419150E", " vez ": "0O3B0P1X", " ve\u013E": "0YAA", " ve\u013Ea": "0Y3P", " ve\u013Em": "0Y73", " vi ": "0O0K0P0M0Q2H0T050V0B0Z7W109W12971OGM", " via ": "0P020Q0I0R030T0T0Z021O4D", " vid\u011B": "0U3B", " viel": "0N6C0R0I115Z", " viem": "0Y301103", " vien": "03020L2U0O1F0Q0S11061B8W1DI1", " vig": "0L030O040P030Q030T0P0Z0G140P1C0H1O031QAX", " vigh": "1QHE", " vih": "112714091C211Q43", " vii": "1158151L1C2D", " vil ": "0Z75127G1325", " vilk": "101S110A1B0O", " vilo": "1PCL1Q2R", " vin ": "0L0N0Z081009130N150Q1O53", " vind": "010P0P090R2U0T030Z181006120M130F150A", " vine": "0O030U0215151QEC", " vir ": "01AX0P0N0T0X", " virk": "0Z1I110E121O131L", " visi": "0L180M0Q0O0Y0P0W0Q160T0C1B6F1D6C1Q0S", " visk": "11021B54", " viso": "0Q020V0I1B1B1QAM", " viss": "0Q050R0C1013120Y131Y142T1D2Y", " visu": "0T0E15051B2M1D631Q1O", " viv": "0L190O2I0P1B0Q1Q0T1Q1O271Q13", " vi\xF0": "13FD", " vi\xF0 ": "13P4", " vi\u0146": "1DPW", " vi\u0146a": "1DR2", " vi\u0146i": "1DCZ", " vi\u0146u": "1D90", " vi\u0146\u0161": "1DOD", " vi\u0161e": "0V5A", " vl": "010P0R0J0U1I0V080Y24", " vla": "0R0A0U1Y0V0A0Y34", " voc": "0L020O030PJY0Q0C0R020T2P150A", " voc\xEA": "0PNB", " vog": "0N040Q440R0D0Z021Q06", " vogl": "0Q46", " voi": "0L4Z0M060Q3S11BN1558", " voi ": "0Q3U119M155U", " vola": "0L060O0C0Q070T0K0U0D0Y0O1O5Y1P0L", " vole": "0L0N0Q320T0F0U030V1Y", " voli": "0U030V4T1O1E", " voln": "0U0G1436", " volt": "0P1Y0Q1T0R0214E1", " von": "0L0H0N540P0B0R0M0U020Y0M120C1312141G1B06", " von ": "0N8C1402", " voo": "012Q0P050RAT1C0I", " voor": "012W0RE2", " vorb": "0N0K1576", " vore": "0N020Z1X1009", " vos": "0L120O0P0P0E0Q320R020T111B0D", " vost": "0Q331O02", " vot": "0L330M040O060P060Q0D0T0215091P0F", " votr": "0L50", " vou": "0LH60P2Q", " vou ": "0P3G", " vous": "0LMI", " vr": "012T0L1I0R2B0U150V3W0Y1J0Z041002156G", " vrai": "0L4A", " vre": "010N0R0X0V2E0Y080Z091002159I", " vrea": "1573", " vrem": "0V5J151F", " vri": "011Y0R3A", " vrie": "01220R37", " vro": "011D0R2X", " vuo": "0Q3A1147", " vy": "010804820U6B0Y7I1B1Z", " vyi": "0475", " vyo": "0490", " vyos": "04AA", " v\xE1": "0O020P0R0U390Y481446", " v\xE1l": "0U0J144D", " v\xE1m ": "0U1W0Y3L", " v\xE1r": "0P0H144I", " v\xE1s": "0U1M0Y3C140W", " v\xE1s ": "0U280Y45", " v\xE4": "0Y0L106C11421C8S", " v\xE4g": "101D1C4K", " v\xE4ga": "10021CAL", " v\xE4l": "102F11221C3F", " v\xE4lj": "10061C6K", " v\xE4n": "102V", " v\xE5": "0Z06101A120W", " v\xE5r": "101E121W", " v\xE6": "0Z2S122M1314", " v\xE6r": "0Z5X126J131F", " v\xE6re": "0Z5Q1241", " v\xE6rt": "0Z02121V", " v\xE9": "0L1013071429", " v\xED": "0O050P080U390Y0I130I140H", " v\xF5": "1C7Q", " v\xF5i": "1C6A", " v\xF5i ": "1C5I", " v\xF5t": "1C2M", " v\u0101": "1D22", " v\u0103": "153K", " v\u0113": "0T071D5Z", " v\u0113l": "1D5R", " v\u0117": "1B1H", " v\u011B": "0U42", " v\u011Bd\u011B": "0U2U", " v\u012B": "0T0O1D17", " v\u0161": "0U3G0Y5C", " v\u0161e": "0U3U0Y7P", " v\u0161ec": "0U41", " v\u0161et": "0Y99", " w ": "1AD1", " w'": "041H", " wa'": "1QD3", " waa": "015S0R8G", " waar": "015W0RAZ", " wag": "010Q03050N0C0R021A031N661Q0Y", " wagt": "1N89", " wala": "030V0B0D0D4T", " wanj": "04AV", " wann": "011R03070N130R1Z1A02", " want": "0M7S0R0C", " war ": "030P0M0A0N8A0R03", " was ": "019A0MFC0N9G0RC81A0F", " wat": "01BA03050M180RA4", " wat ": "019V0RBX", " wate": "011J0M0T0R1P", " we ": "0M5M0R9Q1A0B1N9C", " wee": "019P0L060M0X0Q040R660Z0515051A06", " wees": "01540R0P", " weet": "01450R51", " wei": "0M090N520R0H", " wel": "010J03090M150N210R2Q1N0Q", " wen": "010K030704190M170N4S0R0D", " wenn": "0N6H", " wer": "013V03160M3B0N5M0R5Z1A02", " werd": "0N660R31", " were": "0M4I0R18", " werk": "013W0N080R41", " wha": "0M680P02", " what": "0M8C0P03", " whe": "0M4E", " when": "0M3E", " wher": "0M24", " who": "0M2Z", " who ": "0M35", " why": "0M2E", " why ": "0M38", " wie": "011X0N6Z0R2N1A86", " wie ": "01210N8W0R3B1A10", " wiel": "1A3O", " wil ": "01730R68", " will": "0L030M4W0N480R1X1F02", " wir": "0NB31Q07", " wir ": "0NB0", " wird": "0N58", " wit": "0M6Q0N060R0G1A051Q17", " with": "0M8Z", " won": "010M0M240R0T", " woo": "01170M070R2Q", " wor": "01390M3Y0N1B0R41", " word": "013C0M0P0N0I0R58", " work": "0M2U", " wou": "010P0M3M0R0K", " woul": "0M4U", " wr": "0M0R1A19", " ws": "1A4E", " wsz": "1A4B", " wszy": "1A64", " wu": "0326040C0N181A061Q0K", " wy": "010B1A8Z", " w\xE4": "0N0S", " w\xEA": "010A", " w\xFC": "0N0X", " y ": "0L2J0O8M0T02", " y'": "0434", " ya ": "030404420B0Z0O2X1F0N1P1J", " yang": "0BRJ1F08", " yap": "1FFB1Q10", " yapa": "1F5X", " yapm": "1F9L", " yapt": "1F4U", " yar": "0302046C0M021F63", " yard": "0M021F4L", " ya\u015F": "1F44", " yel": "038P0D030M051F021P0X", " yell": "03FU0M06", " yeme": "1F3Z", " yes": "039H0M0P", " yess": "03DE", " yet": "035C0M0M1F1J", " yett": "03BA", " yh": "1135", " yi": "03GH042T1F1B1QC8", " yiw": "034M042H1Q0C", " yiwe": "039U044E", " yk": "111R130R", " yksi": "117C", " yl": "112F1N0N", " yo ": "042K0O4L", " you ": "0MM4", " you'": "0M3H", " your": "0M5I", " yr": "1004111A12021BBM", " yra": "1BHF", " yra ": "1BRA", " yuf": "032K1P58", " yuf\xF6": "1P3I", " y\xFC": "1F3E", " z ": "0U2Q0Y331A7I", " za ": "0U3R0V600Y3T1A48", " zad": "0U080V0L0Y081A1G1N3Z", " zady": "1N4W", " zajt": "0Y341402", " zal": "0R4G0U060V0D1A0E", " zal ": "0R5W", " zama": "0V0A1A051F7V", " zat": "0R0O0U0N0V0U0Y161A0P1F0Q1N5Z", " zat ": "0R0M1N5N", " ze ": "0RCC0U121A1J", " zeg": "03030R2R1A0I", " zic": "0R2N150I", " zich": "0R3K", " zie": "0N0V0Q080R461A0R1D0U", " zij": "0RII", " zij ": "0R48", " zijn": "0RKJ", " zin": "04290R1S1D50", " zin\u0101": "1D5U", " zn": "0U1Y0V460Y1B1A3E", " zna": "0U0M0V500Y0O1A3W", " zo ": "0R3H0Y0X", " zor": "0O030R0R1A031F431O0F", " zoru": "1F3S", " zost": "0Y2O1A51", " zou": "0R4W0U02", " zou ": "0R5O", " zr": "0U0M0V020Y0V1A3F", " zro": "0U071A4B", " zrob": "1A64", " zu ": "0ND5", " zv": "0U1J0V0I0Y2615031D0T", " zw": "030J0N120R0K1A1A", " z\xE1": "0U1N0Y2G140A", " \xE0": "0L3C0P0Y", " \xE0 ": "0LF00P37", " \xE0s": "0P0Y", " \xE1": "0O080P0E0S1A0Y08139G142W", " \xE1 ": "13DE", " \xE1g": "0P0V140B", " \xE1l": "0P030S0M142W", " \xE1ll": "145K", " \xE2": "0L03", " \xE4": "0N0B10CO11131C1E1N0U1PDH", " \xE4b": "1P3U", " \xE4bi": "1P47", " \xE4bin": "1P4V", " \xE4d": "1P36", " \xE4k": "100211031P1X", " \xE4l": "0N03101K11291P3K", " \xE4ls": "101V", " \xE4lsk": "101V", " \xE4l\xE4 ": "117I", " \xE4n": "0N04102H1P2D", " \xE4n ": "102C", " \xE4r": "0N0410OE11051C4H1P0F", " \xE4r ": "10RS", " \xE4ra": "1C4N", " \xE4ra ": "1CAO", " \xE4s": "11031P3V", " \xE4t": "101T1P1G", " \xE4v": "10061P37", " \xE4vil": "1P3K", " \xE5": "0Z0W101M126J", " \xE5 ": "10021294", " \xE5b": "0Z0D", " \xE5k": "1013", " \xE5p": "120B", " \xE5r": "0Z0X1017120U", " \xE5r ": "0Z211016121J", " \xE5t": "101X1204", " \xE5t ": "101T", " \xE6": "0T060Z0W1204131G", " \xE6b": "0Z0N", " \xE6bl": "0Z1Q", " \xE6ble": "0Z23", " \xE6t": "0T04132Q", " \xE7": "0L0O1F8P1N4N", " \xE7a": "0L3E1F6D1N3S", " \xE7a ": "0L5N", " \xE7al": "1F5B1N1O", " \xE7al\u0131": "1F64", " \xE7o": "1FAT", " \xE7ok": "1F9Q", " \xE7ok ": "1FCQ", " \xE7y": "1N2O", " \xE7\u0131": "1F2N", " \xE8": "0Q5N", " \xE8 ": "0QIM", " \xE9": "0L270O210P4X0R050S5F0Z06120313AW149Z", " \xE9 ": "0PI90SC0", " \xE9c": "0L1U", " \xE9g": "0L0C13L1140A", " \xE9g ": "13RF140A", " \xE9i": "0S3P", " \xE9l": "0L0N0O5Y142E", " \xE9l ": "0O8X140R", " \xE9let": "142X", " \xE9n": "0L060Z071205143D", " \xE9n ": "0Z0J120C147R", " \xE9r": "0L020P02143S", " \xE9rt": "1441", " \xE9rte": "142Y", " \xE9s": "0O0B0P08145O", " \xE9s ": "0P0A14CW", " \xE9t": "0L6P0Z031303140I", " \xE9ta": "0L5N", " \xE9tai": "0L80", " \xE9t\xE9": "0L39", " \xE9t\xE9 ": "0L5G", " \xE9v": "0L0C141V", " \xEA": "0L0N", " \xEAt": "0L39", " \xEAtes": "0L48", " \xEAtr": "0L32", " \xEAtre": "0L55", " \xED": "0S1G0Y0R138A1414", " \xED ": "0S4413G5", " \xEDs": "0Y1X130K", " \xEDs\u0165": "0Y39", " \xEDs\u0165 ": "0Y42", " \xEE": "15BJ", " \xEEm": "154X", " \xEEmi ": "1565", " \xEEn": "15QR", " \xEEn ": "15MV", " \xEEnc": "15AK", " \xEEnce": "156V", " \xEEnt": "15CC", " \xEEntr": "157R", " \xEEnt\xE2": "1554", " \xF3": "0P050S181313140S", " \xF4": "0P030Y03", " \xF5": "1C2R", " \xF5h": "1C18", " \xF5i": "1C2M", " \xF5ig": "1C36", " \xF5igu": "1C6K", " \xF5p": "1C3J", " \xF5ppi": "1C4I", " \xF6": "0N05101S130Z142K1C0F1F501NAV", " \xF6n": "100H1305141G1F46", " \xF6r": "1006130F140Y1F0A1N2G", " \xF6r\xE4n": "1N49", " \xF6ssz": "1434", " \xF6v": "102L14031F02", " \xF6ve": "103C1402", " \xF6ver": "103C", " \xF6z": "1F121N9D", " \xF6z ": "1N5P", " \xF6z\xFC": "1F0B1N5G", " \xF6z\xFCn": "1N55", " \xF6\xFD": "1N4U", " \xF6\u011F": "1F3O", " \xF6\u011Fr": "1F3D", " \xF6\u011Fre": "1F4L", " \xF8": "0Z181218", " \xF8j": "0Z0E", " \xF8n": "0Z0S120U", " \xF8ns": "0Z251224", " \xF8nsk": "0Z2L1224", " \xF8y": "120K", " \xFA": "0O0C0P090S0M0U0R0Y10131X1428", " \xFAg": "141O", " \xFAgy": "144A", " \xFAgy ": "144B", " \xFAj": "141I", " \xFAt": "0O040P050U050Y041330140H", " \xFC": "0N1714131C301F241N5I", " \xFCb": "0N1X", " \xFCbe": "0N4H", " \xFCber": "0N760R02", " \xFCh": "1C21", " \xFCk": "1C1T", " \xFCks": "1C29", " \xFCl": "140O1C3A1F0O", " \xFCle": "1C2J", " \xFCt": "14051C2X", " \xFCtl": "1C3M", " \xFCtle": "1C8M", " \xFC\xE7": "1F1P1N88", " \xFC\xE7i": "1N9R", " \xFC\xE7in": "1NCW", " \xFD": "1NHC", " \xFDa": "1NGD", " \xFDal": "1N7D", " \xFDaly": "1N6A", " \xFDa\u015F": "1N4V", " \xFDa\u015Fa": "1N49", " \xFDe": "1N9X", " \xFDer": "1N7Z", " \xFDerd": "1N4R", " \xFDo": "1N46", " \xFDok": "1N4E", " \xFDok ": "1N43", " \xFDy": "1N2Y", " \xFE": "13LD", " \xFEa": "13FS", " \xFEar": "133Y", " \xFEau ": "135W", " \xFEa\xF0": "13I7", " \xFEa\xF0 ": "13RW", " \xFEe": "13CO", " \xFEega": "135E", " \xFEes": "137O", " \xFEess": "13F1", " \xFEet": "137M", " \xFEett": "13EW", " \xFEi": "134T", " \xFEig": "133M", " \xFEig ": "137G", " \xFEv": "132P", " \xFEv\xED": "1340", " \xFEv\xED ": "1385", " \xFE\xE9": "133P", " \xFE\xE9r": "135X", " \xFE\xE9r ": "13BV", " \xFE\xFA": "139Y", " \xFE\xFA ": "13F1", " \u0101": "0T021D0P", " \u0107e": "0V46", " \u0107e ": "0V3G", " \u0109": "1O8X", " \u0109a": "1O1F", " \u0109e": "1O1O", " \u0109i": "1O7H", " \u0109i ": "1O43", " \u0109iu": "1O3M", " \u0109iuj": "1O3X", " \u0109u": "1O5H", " \u0109u ": "1O8H", " \u010D": "03060U3I0V250Y721B131D06", " \u010Da": "0U260V0S0Y4A", " \u010Das": "0U350V060Y3U", " \u010De": "0U2C0V1T0Y0V1B031D0G", " \u010Di": "0U0D0V1F0Y1Q1B2X", " \u010Dia": "0Y081B4H", " \u010Dia ": "1B8X", " \u010Do": "0U040V0V0Y8X", " \u010Do ": "0YD7", " \u010F": "0Y0I", " \u0113": "0T081D0P", " \u0117": "1B06", " \u011D": "1O2S", " \u011Di": "1O3L", " \u011Di ": "1O2H", " \u011Din": "1O26", " \u011Din ": "1O49", " \u0123": "1D06", " \u012B": "0T041D0D", " \u012F": "1B3Z", " \u012F ": "1B67", " \u0131": "1F0A", " \u0135": "1O0B", " \u0137": "1D0A", " \u013C": "1D18", " \u013Co": "1D46", " \u013Cot": "1D5C", " \u013Coti": "1DCW", " \u013E": "0Y14", " \u013Eu": "0Y1W", " \u014D": "0T02", " \u0151": "141Y", " \u0151 ": "141O", " \u0153": "0L02", " \u0159": "0U36", " \u0159e": "0U3Z", " \u0159ek": "0U5S", " \u0159ekl": "0U69", " \u0159\xED": "0U2E", " \u015B": "1A20", " \u015D": "1O5O", " \u015Da": "1O2X", " \u015Dat": "1O2N", " \u015Data": "1O3I", " \u015Di": "1O5M", " \u015Di ": "1O6L", " \u015F": "150E1F611N5L", " \u015Fa": "15031F2X1N0Z", " \u015Fe": "1F8W1N2X", " \u015Fey": "1F8F", " \u015Fey ": "1F6Y", " \u015Fe\xFDl": "1N46", " \u015Fi": "15171F32", " \u015Fo": "1F061N3K", " \u015Fu": "1F101N39", " \u0161": "0U2I0V3O0Y2X1B5R1C041D3E", " \u0161a": "0U0E0V0G0Y0I1B1Z1D1S", " \u0161eit": "1D58", " \u0161i": "0U040V0A0Y171B8Q1D24", " \u0161it": "1B7J", " \u0161ita": "1B74", " \u0161o": "0U030V091B0P1D5F", " \u0161o ": "1D2Z", " \u0161odi": "1D6G", " \u0161t": "0U0E0V7B0Y1G1B0J", " \u0161ta": "0V4Y1B0U", " \u0161ta ": "0VBM", " \u0161to": "0V3X", " \u0161to ": "0V9L", " \u0161\u0165as": "0U100Y2U", " \u0165": "0Y1B", " \u0165a": "0Y3E", " \u0165a ": "0Y4F", " \u016B": "1B021D09", " \u017C": "1A5R", " \u017Ce": "1A8U", " \u017Ce ": "1AAM", " \u017E": "0U7U0V2O0Y6X1B4E1D05", " \u017Ea": "0U030V0C0Y071B1R", " \u017Ee": "0UC00V3T0YCZ1B0S", " \u017Ee ": "0UGP0YII", " \u017Eel": "0U070V3Q0Y0B", " \u017Eeli": "0V68", " \u017Ei": "0U240V330Y3V1B52", " \u017Ein": "1B60", " \u017Eina": "1B55", " \u017Eino": "1B6I", " \u017Eiv": "0U1X0V3O0Y20", " \u017Eivo": "0U2G0V4K0Y27", " \u017Em": "1B2M", " \u017Emo": "1B48", " \u017Emon": "1B5P", " \u0219": "1549", " \u0219i": "158Y", " \u0219i ": "15BW", " \u0219t": "1558", " \u0219ti": "158A", " \u021B": "150N", " \u0263": "0364", " \u0263e": "03FV", " \u0263ef": "038R", " \u0263ef ": "03HP", " \u0263er": "039E", " \u0263er ": "03G5", " \u0430": "0V2E0X1I163517C6183R193X1LL81MAQ", " \u0430\u0434": "0V060X06160B17EM180E190C1L6R1M0T", " \u0430\u0434\u0430": "1LBW", " \u0430\u0434\u0430\u043C": "1LFC", " \u0430\u0434\u0437\u0456": "174D", " \u0430\u0434\u043D": "175D", " \u0430\u0436\u0438\u043B": "1M4L", " \u0430\u0437": "165B170D180219021L2R1M0O", " \u0430\u0437 ": "165Y", " \u0430\u0439": "1L8B1M0Z", " \u0430\u0439\u0442": "1L7W", " \u0430\u043A\u043E": "0V1G0X1M162U", " \u0430\u043A\u043E ": "0V3O0X1P165X", " \u0430\u043B": "0V1N0X0G160H1777180K191J1LF11M3S", " \u0430\u043B\u0434\u044B": "1L87", " \u0430\u043B\u0435": "0X03160317641802191G", " \u0430\u043B\u0435 ": "178D191Y", " \u0430\u043B\u0436": "175618041903", " \u0430\u043B\u0436\u044B": "177M", " \u0430\u043B\u043C": "1L6V", " \u0430\u043B\u043C\u0430": "1L9K", " \u0430\u043C": "0V0A0X0F160O171E180E190F1L0O1M63", " \u0430\u043C\u044C": "1M4G", " \u0430\u043C\u044C\u0434": "1M77", " \u0430\u0441\u0443": "1M2Y", " \u0430\u0441\u0443\u0443": "1M5V", " \u0430\u0458\u0434\u0435": "0X1C", " \u0431": "0V840X74166217AY18FE19FW1LQU1MSG", " \u0431\u0430": "0V1R0X2Y1622177I181919791LOG1MSG", " \u0431\u0430\u0433\u0430": "0X02160917161805193X1M1E", " \u0431\u0430\u0439": "190A1L531MSG", " \u0431\u0430\u0439\u0433": "1MA5", " \u0431\u0430\u0439\u0434": "190E1M6L", " \u0431\u0430\u0439\u043D": "1MSG", " \u0431\u0430\u0439\u0441": "1MIQ", " \u0431\u0430\u0439\u0445": "1M8L", " \u0431\u0430\u043B": "0V020X03170Z180519061L7A", " \u0431\u0430\u043B\u0430": "19061L8G", " \u0431\u0430\u0440": "0V060X1F1603171D180819041LHC1M2C", " \u0431\u0430\u0440 ": "1LD6", " \u0431\u0430\u0441": "1607170D180619071LG21M1N", " \u0431\u0430\u0441\u0442": "1L9N", " \u0431\u0430\u0441\u049B": "1L72", " \u0431\u0430\u0447\u0438": "193K", " \u0431\u0430\u0447\u044B": "174O", " \u0431\u0430\u0448 ": "0V280X1B", " \u0431\u0430\u044F": "170N1L0O1M36", " \u0431\u0430\u044F\u0440": "1M46", " \u0431\u0435": "0V1Y0X8N166X173V1846191P1LCP", " \u0431\u0435\u0440": "0X02170F180M19091LAS", " \u0431\u0435\u0448": "0X6N1656", " \u0431\u0435\u0448\u0435": "0X6Z16AH1802", " \u0431\u0438": "0VAH0X8J165B180O192K1L1U1MRL", " \u0431\u0438 ": "0V2A0X55161E192W1MQ4", " \u0431\u0438\u0434": "0X3R1M67", " \u0431\u0438\u0434 ": "1M8B", " \u0431\u0438\u0434\u0435": "0X2R", " \u0431\u0438\u043B": "0V3M0X2B1623180D1L14", " \u0431\u0438\u043B\u043E": "0V4L0X0V160L", " \u0431\u0438\u043E ": "0V5S", " \u0431\u0438\u0445": "0V2W161S", " \u0431\u0438\u0445 ": "0V761637", " \u0431\u0438\u0448": "1M3F", " \u0431\u0438\u0448 ": "1M6T", " \u0431\u043E": "0V3C0X3R162S175M187V194A1LJC1MK3", " \u0431\u043E\u0439\u044B": "1L8S", " \u0431\u043E\u043B": "0V0W0X1516161751186F190F1LNX1MJV", " \u0431\u043E\u043B ": "1MJJ", " \u0431\u043E\u043B\u0430": "1LB7", " \u0431\u043E\u043B\u0434": "1L8P", " \u0431\u043E\u043B\u043D": "0V0H0X0A16111M5K", " \u0431\u043E\u043B\u043E": "1MCE", " \u0431\u043E\u043B\u044B": "1L6G", " \u0431\u043E\u043B\u044C": "174O189D", " \u0431\u043E\u043B\u0493": "1L6M", " \u0431\u043E\u0441": "0V0Z0X2Q160P170M181X192C1L461M0T", " \u0431\u043E\u0441\u0442": "0V2F0X2U161E170W183H193B1L44", " \u0431\u0443": "0V360X0Q160O175X185H19ES1L0J1M30", " \u0431\u0443\u0432": "1946", " \u0431\u0443\u0432 ": "195K", " \u0431\u0443\u0434": "0V3B0X0E16051785186I1970", " \u0431\u0443\u0434\u0435": "0V4D0X05187J193K", " \u0431\u0443\u0434\u0437": "176X", " \u0431\u0443\u0434\u044C": "18121945", " \u0431\u0443\u043B": "170P18021963", " \u0431\u0443\u043B\u0430": "170E1932", " \u0431\u0443\u043B\u043E": "1802194E", " \u0431\u0443\u0442\u0438": "160C192R", " \u0431\u044A\u0434": "163D", " \u0431\u044A\u0434\u0435": "164Z", " \u0431\u044B": "17BX18FG", " \u0431\u044B ": "171T186N", " \u0431\u044B\u043B": "17AN18CH", " \u0431\u044B\u043B ": "1896", " \u0431\u044B\u043B\u0430": "1765184H", " \u0431\u044B\u043B\u043E": "17851888", " \u0431\u044B\u045E": "1751", " \u0431\u044B\u045E ": "177E", " \u0431\u044D": "170C1M5Q", " \u0431\u044D ": "1M5A", " \u0431\u044F\u0445 ": "163R", " \u0431\u0456": "1719193T1LHZ", " \u0431\u0456\u0437": "19021LB0", " \u0431\u0456\u0437 ": "1L87", " \u0431\u0456\u0437\u0434": "1L61", " \u0431\u0456\u043B": "170R193A1L8V", " \u0431\u0456\u043B\u044C": "193P", " \u0431\u0456\u0440": "1LG3", " \u0431\u0456\u0440 ": "1L8A", " \u0431\u04AF": "1L311M5P", " \u0431\u04B1": "1LBL", " \u0431\u04B1\u043B": "1LFH", " \u0431\u04B1\u043B ": "1LJZ", " \u0432": "0V8R0X8U16B717DF18QJ19Q81L0M1M2T", " \u0432 ": "16BI18J7197H", " \u0432\u0430": "0V450X16162D179Y188Z198B", " \u0432\u0430\u043C": "0V190X05172J185C1939", " \u0432\u0430\u043C ": "0V2O17371887193V", " \u0432\u0430\u0441": "0V1S0X04160N17341842192R", " \u0432\u0430\u0441 ": "0V4G0X05161D1744187C1940", " \u0432\u0435": "0V6C0X5X163Q17DR186J193B1L0T", " \u0432\u0435\u0434": "0X0E160S17A9180Z1906", " \u0432\u0435\u0434\u0430": "17ED", " \u0432\u0435\u043B": "0V0T0X0Z1605177E180Y191F", " \u0432\u0435\u043B\u044C": "179U1902", " \u0432\u0435\u0440": "0V1K0X1O160I175518321908", " \u0432\u0435\u0440\u0443": "0V280X1B17151802", " \u0432\u0435\u0447\u0435": "0V1W0X0V164V182A190M", " \u0432\u0435\u045C": "0X2B", " \u0432\u0435\u045C\u0435": "0X2G", " \u0432\u0436\u0435 ": "1941", " \u0432\u0438": "0V6D0X4L16A0184319GS1L0E", " \u0432\u0438 ": "0V1L0X0C163M19AM", " \u0432\u0438\u0434": "0V360X33162G183X190E", " \u0432\u0438\u0434\u0435": "0V470X13184X1902", " \u0432\u0438\u0436\u0434": "1651", " \u0432\u043E": "0V4S0XDB1611174U188O199Y", " \u0432\u043E ": "0XDI181C", " \u0432\u043E\u043B": "0V3V0X0D1605171S180Y190O", " \u0432\u043E\u043B\u0438": "0V741802", " \u0432\u043E\u043D": "0X021805199H", " \u0432\u043E\u043D\u0430": "198E", " \u0432\u043E\u043D\u0438": "195D", " \u0432\u0440": "0V4C0X5H163X183J190V", " \u0432\u0440\u0430": "0V1S0X2R161B1810190I", " \u0432\u0440\u0430\u0442": "0V420X2I162G1805", " \u0432\u0440\u0435": "0V2L0X36162N183H1906", " \u0432\u0440\u0435\u043C": "0V5V0X2R165G1863", " \u0432\u0441": "0X0C165Z18B01954", " \u0432\u0441\u0435": "0X031627187D1939", " \u0432\u0441\u0435 ": "161M185N194G", " \u0432\u0441\u0435\u0433": "1850", " \u0432\u0441\u0438": "163U", " \u0432\u0441\u0438\u0447": "167W", " \u0432\u0441\u0451": "1859", " \u0432\u0441\u0451 ": "1893", " \u0432\u044A": "165D", " \u0432\u044B": "17FV18F9", " \u0432\u044B ": "179C18D5", " \u0432\u044B\u0440\u0430": "174K180M", " \u0432\u044D": "1M6F", " \u0432\u044D ": "1M7H", " \u0432\u0456": "172E19G6", " \u0432\u0456\u0434": "171C197X", " \u0432\u0456\u0434 ": "193A", " \u0432\u0456\u043D": "170W19A2", " \u0432\u0456\u043D ": "19DY", " \u0433": "0V3X0X8S165417CL187F196E1L161M8J", " \u0433\u0430": "0V270X0N160P179G180P192S1L0K1M5Y", " \u0433\u0434\u0435 ": "0V3L184Q", " \u0433\u0438": "0V040X5Q1611180A1L0G", " \u0433\u0438 ": "0X7D160Z", " \u0433\u043B": "0V2D0X34162I172C181L190E", " \u0433\u043B\u0435\u0434": "0V2Q0X25162Y", " \u0433\u043E": "0V3F0XIF16DH174N189S19671M10", " \u0433\u043E ": "0XKF167I", " \u0433\u043E\u0432": "0V1B0X06164T185Z192K", " \u0433\u043E\u0432\u043E": "0V390X06169S18AN193P", " \u0433\u043E\u0434\u0438": "0V3L0X17163O1803191Q", " \u0433\u044D": "17LW1MCH", " \u0433\u044D\u0434": "1M2U", " \u0433\u044D\u0434\u044D": "1M3U", " \u0433\u044D\u0436": "1M67", " \u0433\u044D\u0436 ": "1MBS", " \u0433\u044D\u0440": "1M40", " \u0433\u044D\u0442": "17S5", " \u0433\u044D\u0442\u0430": "17SG", " \u0433\u044D\u0442\u044B": "17DL", " \u0434": "0VJR0XI216FX17CE18HK19IA1L9B1M7Y", " \u0434\u0430": "0VS80XRT16SD17GP185R192Q1L761M6I", " \u0434\u0430 ": "0VSG0XSG16SG177Z181A1L5E", " \u0434\u0430\u043B": "0V0I0X2O160W1721181C190I1L0X", " \u0434\u0430\u043B\u0438": "0X2E161B18081903", " \u0434\u0430\u043D": "0V340X1M160B170R180919041M0P", " \u0434\u0430\u043D ": "0V230X1N", " \u0434\u0430\u043D\u0430": "0V5L", " \u0434\u0435": "0V410XDT164018B2194L1LAE", " \u0434\u0435\u043A": "0XC4160318021905", " \u0434\u0435\u043A\u0430": "0XCN1803", " \u0434\u0435\u043B": "0V0O0X111604185J", " \u0434\u0435\u043B\u0430": "0V0B0X021880", " \u0434\u0435\u043D": "0X2B161O183P190Y1L1Z", " \u0434\u0435\u043D\u044C": "1857191B", " \u0434\u0435\u043F ": "1L7N", " \u0434\u0437": "17AL1906", " \u0434\u0437\u0435": "179G1903", " \u0434\u0437\u0435 ": "176O", " \u0434\u043B\u044F ": "176U185E1937", " \u0434\u043E": "0VA70XD616CJ176Y18CG19G01L2D1M1R", " \u0434\u043E ": "0V1D0X1J162T182C196A", " \u0434\u043E\u0431": "0V3X0X461645175U1816193A", " \u0434\u043E\u0431\u0440": "0V6D0X2V166N178K181A194N", " \u0434\u043E\u0439\u0434": "164I1802", " \u0434\u043E\u043B": "0V0R0X18160D170F184S190F1L0O1M15", " \u0434\u043E\u043B\u0436": "0X0A186P", " \u0434\u043E\u043C": "0V080X1Z160K1729183Z190K", " \u0434\u043E\u043C\u0430": "0V0F0X1X1611171B182W190H", " \u0434\u043E\u043F": "0V0I0X1U160C180A193J", " \u0434\u043E\u043F\u0430": "0V120X1O", " \u0434\u043E\u043F\u043E": "1806194Y", " \u0434\u043E\u0458": "0X27", " \u0434\u043E\u0458\u0434": "0X2A", " \u0434\u0440\u0443": "0V1U0X1W1628171718441928", " \u0434\u0440\u0443\u0433": "0V3Z0X1U164N1715185P1915", " \u0434\u0443": "0V1J0X0P161G1742184T198O1M84", " \u0434\u0443\u0436": "0V09170G1957", " \u0434\u0443\u0436\u0435": "0V09197F", " \u0434\u0443\u043C": "160Z174K185L194R", " \u0434\u0443\u043C\u0430": "161E175318A0195U", " \u0434\u0443\u0440": "0X09170M180D190D1M61", " \u0434\u0443\u0440\u0442": "1M8Z", " \u0434\u044D\u044D\u0440": "1M4I", " \u0435": "0V0K0X77167U170N18A9190N1LCD1M09", " \u0435 ": "0XJF16LV", " \u0435\u0433\u043E": "18751902", " \u0435\u0433\u043E ": "18CL", " \u0435\u0434": "0X2Q1653170B181C1L25", " \u0435\u0434\u0438": "0X0J162T180R", " \u0435\u0434\u0438\u043D": "0X0K165S181A", " \u0435\u0434\u043D": "0X1X162W", " \u0435\u0434\u043D\u0430": "0X19163M", " \u0435\u043C\u0435": "1L78", " \u0435\u043C\u0435\u0441": "1LA4", " \u0435\u043C\u0443 ": "1868", " \u0435\u0441": "0V0A0X031605170G185X19051L40", " \u0435\u0441\u043B\u0438": "186J", " \u0435\u0441\u0442": "1603184Q1L1N", " \u0435\u0441\u0442\u044C": "1883", " \u0435\u0449\u0451": "183Y", " \u0435\u0449\u0451 ": "1877", " \u0435\u0451 ": "184N", " \u0436": "0V2F0X11160X173G184E192U1LND1M1I", " \u0436\u0430": "0V0D0X0L16081734180Y190T1LO21M12", " \u0436\u0430\u0441": "1LAW", " \u0436\u0430\u0441\u0430": "1L99", " \u0436\u0430\u049B": "1L84", " \u0436\u0430\u049B\u0441": "1L87", " \u0436\u0430\u04A3\u0430": "1L61", " \u0436\u0435": "0V3T0X13161C183Y19081LA6", " \u0436\u0435\u043B": "0V3M0X09160E180L1L1I", " \u0436\u0435\u043B\u0438": "0V70", " \u0436\u0438\u0432": "0V2S0X2K162H1828191N", " \u0436\u0438\u0432\u0435": "0V180X1D162K1806191A", " \u0436\u043E": "0X02171Y190T1LA91M0S", " \u0436\u043E\u0493\u0430": "1L61", " \u0436\u043E\u049B": "1L80", " \u0436\u043E\u049B ": "1L9W", " \u0436\u044B\u043B": "170K1LAS", " \u0436\u044B\u043B\u0434": "1L5S", " \u0436\u044B\u0446\u0446": "175G", " \u0436\u04B1\u043C": "1L94", " \u0436\u04B1\u043C\u044B": "1LBK", " \u0436\u04D9": "1L9G", " \u0436\u04D9\u043D": "1LFU", " \u0436\u04D9\u043D\u0435": "1LKU", " \u0437": "0V7Y0X8P167D17FV18CQ19MI1L2E1M6I", " \u0437 ": "17CG198C", " \u0437\u0430": "0VCT0XH316L917M118FA19JU1L4G1M5V", " \u0437\u0430 ": "0V4L0XAT16B6179318551944", " \u0437\u0430\u0431": "0V150X2E1627175X182F191Y", " \u0437\u0430\u0432": "0V180X131616171B182I193C1M13", " \u0437\u0430\u043F": "0V0X0X1A1636173S181X193R", " \u0437\u0430\u043F\u043E": "0V090X0O163M170E180I1906", " \u0437\u0430\u0440\u0430": "0V0B0X0616111747180M192U", " \u0437\u0430\u0448\u0442": "0V4M0X07", " \u0437\u0430\u0449": "162W180B", " \u0437\u0430\u0449\u043E": "165O", " \u0437\u0431\u043E": "0V0U0X3H17091904", " \u0437\u0431\u043E\u0440": "0X3L1903", " \u0437\u0434\u0430": "17531808191X", " \u0437\u0434\u0435\u0441": "185J", " \u0437\u043D": "0V5S0X5N164A1759187V199P", " \u0437\u043D\u0430": "0V6V0X7E164T175S18AI19A2", " \u0437\u043D\u0430\u0435": "0X4G164V186J", " \u0437\u043D\u0430\u043C": "0V6C0X2Q164518081906", " \u0437\u043D\u0430\u044E": "185Z1941", " \u0437\u043D\u0430\u0454": "194I", " \u0437\u043E\u0448": "0X3Q", " \u0437\u043E\u0448\u0442": "0X3X", " \u0437\u0440": "0V03174K1809197R", " \u0437\u0440\u0430": "176F1907", " \u0437\u0440\u0430\u0431": "177C", " \u0437\u0440\u043E": "170U198M", " \u0437\u0440\u043E\u0431": "171719B5", " \u0437\u04AF": "1M44", " \u0437\u04AF\u0439": "1M3J", " \u0437\u04AF\u0439\u043B": "1M6P", " \u0437\u04E9\u0432": "1M2S", " \u0438": "0V9G0X7R169F18CD1L1T1M68", " \u0438 ": "0V5N0X6Z168V189T", " \u0438\u0434\u0435": "0V310X0J160N180R", " \u0438\u0437": "0V6V0X6P16BD185K", " \u0438\u0437 ": "0V191840", " \u0438\u0437\u0433": "0V270X38162C1802", " \u0438\u0437\u0433\u043B": "0V3I0X2D1643", " \u0438\u043B\u04AF\u04AF": "1M3I", " \u0438\u043C": "0V5M0X9D168I182U", " \u0438\u043C ": "0V0A0X2S160N181H", " \u0438\u043C\u0430": "0V5V0X9B168F", " \u0438\u043C\u0430 ": "0V5W0X4J167T", " \u0438\u043C\u0430\u043C": "0V3V0X2M1658", " \u0438\u043C\u0430\u0448": "0V110X231635", " \u0438\u0440": "0X02160218021M5E", " \u0438\u0440\u0441\u044D": "1M3I", " \u0438\u0441": "0V360X3I167T182F1L0F", " \u0438\u0441\u043A": "0V0N0X14167R180R", " \u0438\u0441\u043A\u0430": "0X0716F2180K", " \u0438\u0442\u0433\u044D": "1M4P", " \u0438\u0445 ": "0V0I18281M3F", " \u0439": "16021704193K", " \u0439\u043E": "160518021950", " \u0439\u043E\u0433": "1949", " \u0439\u043E\u0433\u043E": "1963", " \u043A": "0V9T0X8616AM17CK18GJ19BF1LKF1M0Y", " \u043A\u0430": "0V990XC316H017MP18CG194D1L1G", " \u043A\u0430\u0431": "1604176L18041905", " \u043A\u0430\u0431 ": "1794", " \u043A\u0430\u0434": "0V2N0X2K", " \u043A\u0430\u0434\u0430": "0V590X03", " \u043A\u0430\u0434\u0435": "0X2M", " \u043A\u0430\u0436": "0V1W0X4E1621172S1829191M", " \u043A\u0430\u0436\u0430": "0X2Q161H171D1902", " \u043A\u0430\u0437": "0V030X051648172C180B190L", " \u043A\u0430\u0437\u0430": "165F173B180G190S", " \u043A\u0430\u0437\u0432": "163L", " \u043A\u0430\u043A": "0V2Z0X69169M18BV", " \u043A\u0430\u043A ": "165918EW", " \u043A\u0430\u043A\u0432": "0V0R0X0K16D7", " \u043A\u0430\u043A\u043E": "0V6C0X63183V", " \u043A\u0430\u043B": "0X06160317FF18051903", " \u043A\u0430\u043B\u0456": "17IX", " \u043A\u0430\u0442\u043E": "164Y1803", " \u043A\u0430\u0445\u0430": "174G", " \u043A\u0435": "0V080X05160O170G180G190F1LME", " \u043A\u0435\u0437": "1L7M", " \u043A\u0435\u043B": "0X021LFX", " \u043A\u0435\u043B\u0435": "1L8Y", " \u043A\u0435\u0440": "19081L6X", " \u043A\u0435\u0440\u0435": "1L90", " \u043A\u0435\u0442": "1L75", " \u043A\u043D\u0438\u0433": "0X13163N183O190Q", " \u043A\u043D\u0456": "1752", " \u043A\u043D\u0456\u0433": "1762", " \u043A\u043E": "0V9T0XAE16EH175C18CE199I1L431M14", " \u043A\u043E\u0433": "0V0E0X36162V1852190L", " \u043A\u043E\u0433\u0430": "0V0P0X2Z1659", " \u043A\u043E\u0433\u0434": "187Y", " \u043A\u043E\u0435\u0442": "1655", " \u043A\u043E\u0436\u043D": "174G190X", " \u043A\u043E\u043B": "0V2A0X41164E173M180Y194G", " \u043A\u043E\u043B\u0430": "0V0R0X1D162A", " \u043A\u043E\u043B\u0438": "0V4P0X04160A180A195J", " \u043A\u043E\u043B\u043A": "0X2K1654", " \u043A\u043E\u0458": "0V3R0X2Q", " \u043A\u043E\u0458 ": "0X24", " \u043A\u043E\u0458\u0438": "0V4V", " \u043A\u0442\u043E ": "1856", " \u043A\u0443": "0V470X3G16371743183N193A", " \u043A\u0443\u043F\u0438": "0V3S0X1D161Z183Q192P", " \u043A\u044A\u0434\u0435": "164S", " \u043A\u04AF": "1L8R", " \u043A\u04AF\u043D": "1L8L", " \u043A\u04AF\u043D\u0456": "1L5Y", " \u043A\u04E9": "1LGG", " \u043A\u04E9\u0440": "1LCC", " \u043B": "0V5K0X4C164R175I186A195O1L0U1M0X", " \u043B\u0430\u0441\u043A": "176418021936", " \u043B\u0438": "0VB40XA916E8182Z192I", " \u043B\u0438 ": "0VCH0XBF16EG181R", " \u043B\u044E": "160Q176H184M1942", " \u043B\u044E\u0431": "160S176B184K192R", " \u043B\u044E\u0431\u0456": "174M", " \u043B\u044E\u0434\u0437": "175Q", " \u043C": "0VD10XEM16DB17FS18M119MT1LJN1MAM", " \u043C\u0430": "0V3M0X4R165I17I4185O19AJ1LBS1M9I", " \u043C\u0430\u0433": "0V030X05160C175E180J19091L0O1M0M", " \u043C\u0430\u0435 ": "1759", " \u043C\u0430\u043B": "0V1C0X2N162E174E181P191B1L17", " \u043C\u0430\u043B\u043A": "0X25164P", " \u043C\u0430\u0440": "0V0H0X0E160S174B1819190M1L121M3A", " \u043C\u0430\u0448": "0V050X0816041726181Y191Q1M50", " \u043C\u0430\u0448 ": "1M7B", " \u043C\u0430\u0454": "193O", " \u043C\u0430\u0454 ": "1931", " \u043C\u0430\u0493\u0430": "1L7W", " \u043C\u0435": "0V7A0XBC1699175D18AL19KP1LOZ", " \u043C\u0435 ": "0V3D0X4U163H1L1E", " \u043C\u0435\u043C": "1L6Z", " \u043C\u0435\u043C\u043B": "1L9I", " \u043C\u0435\u043D": "0V1F0X2E1621171C18AA19G01LS9", " \u043C\u0435\u043D ": "162V1LSG", " \u043C\u0435\u043D\u0435": "0V2J0X2B161E170F180719A8", " \u043C\u0435\u043D\u044F": "18GW", " \u043C\u0435\u043D\u0456": "19E41LCJ", " \u043C\u0435\u0440": "0V2A0X6P163P170Q180D19AE1L2V", " \u043C\u0435\u0440\u0438": "0V5O0X6X167J1802", " \u043C\u0435\u0440\u0456": "19E9", " \u043C\u0438": "0VAH0XE716HZ1824197X1L191M5I", " \u043C\u0438 ": "0V720XCK16C1197Z", " \u043C\u0438\u043D": "0V0H0X0Q162D1810190N1L191M6A", " \u043C\u0438\u043D\u0438": "161D18091MB9", " \u043C\u0438\u0441": "0V4R0X5N167O18041904", " \u043C\u0438\u0441\u043B": "0VBG0X5U16EY1902", " \u043C\u043D": "0V2M0X4T165Y178T18CI190R", " \u043C\u043D\u0435": "160A17CW18DC", " \u043C\u043D\u0435 ": "17I018LB", " \u043C\u043D\u043E": "0V350X6B166F171R1845190W", " \u043C\u043D\u043E\u0433": "0V6V0X6L16CP1712185C", " \u043C\u043E": "0VCD0XEJ16E517BI18ET19CZ1L0P1M19", " \u043C\u043E\u0433": "0V3Z1632171Z18581916", " \u043C\u043E\u0433\u0430": "0V2U165J", " \u043C\u043E\u0433\u0443": "0V5J171B185U", " \u043C\u043E\u0436": "0V3M0XBY1687177618721986", " \u043C\u043E\u0436\u0430": "0X2X160V177E", " \u043C\u043E\u0436\u0435": "0V760X9R16FB18A11965", " \u043C\u043E\u0436\u0443": "193C", " \u043C\u043E\u0439 ": "160C175H183T", " \u043C\u043E\u043B\u0430": "0X1J", " \u043C\u043E\u043B\u0438": "0V4J0X09160F18051903", " \u043C\u043E\u043B\u044F": "163O", " \u043C\u043E\u0440": "0V2S0X3P160A170J180P190G", " \u043C\u043E\u0440\u0430": "0V6N0X3M170E1802", " \u043C\u043E\u0458": "0V370X19", " \u043C\u0443": "0V1Z0X6Z163V1734181J19191M1R", " \u043C\u0443 ": "0V120X8F1639", " \u043C\u044B": "175V187F1L2P", " \u043C\u044B ": "179D189E", " \u043C\u044D": "171P185L1L0X1M7R", " \u043C\u044D\u0434": "1M7O", " \u043C\u044D\u0434\u044D": "1M9D", " \u043C\u044D\u0440": "171Z187K1L1P", " \u043C\u044D\u0440\u0438": "18D81L2A", " \u043C\u044F": "160S177E180D", " \u043C\u044F\u043D": "17AD", " \u043C\u044F\u043D\u0435": "17EE", " \u043C\u0456": "1736194L1L18", " \u043C\u0456\u0439 ": "192Y", " \u043C\u04AF\u043C\u043A": "1L64", " \u043C\u04E9\u043D\u0433": "1M3M", " \u043D": "0VGO0XJ216JA17KY18S419PW1L5K1MB9", " \u043D\u0430": "0VFY0XNP16QU17RN18OV19LR1L3B1MC8", " \u043D\u0430 ": "0V8C0XHN16K217NA18GM19CF", " \u043D\u0430\u0432": "0V0B0X2P160O175W1813192F", " \u043D\u0430\u0432\u0438": "0V0P0X291608", " \u043D\u0430\u0434": "0V0R0X1T16191732185919191M7L", " \u043D\u0430\u0434\u0430": "0V1A19071MCE", " \u043D\u0430\u0434\u043E": "0X04185V1902", " \u043D\u0430\u0439": "161U17511815191A1M1T", " \u043D\u0430\u0439-": "163U", " \u043D\u0430\u043C": "0V1N0X0V161O173V1843193H1M38", " \u043D\u0430\u043C ": "0V2K173W185S192W", " \u043D\u0430\u043C\u0430": "0V0U0X021608170M191D1M63", " \u043D\u0430\u043F": "0V2A0X5B166A173C1827191D", " \u043D\u0430\u043F\u0440": "0V180X46169E170Z180Z1908", " \u043D\u0430\u0441": "0V290X2H161G177V184S194G1M17", " \u043D\u0430\u0441 ": "0V280X0Z161H174O185H192P1M16", " \u043D\u0430\u0441\u0442": "0V250X0J160V17541822191K", " \u043D\u0430\u0458": "0V1J0X3Z", " \u043D\u0430\u0458\u0434": "0X31", " \u043D\u0435": "0VHZ0XR716Q617QI18SG19RE1L8F", " \u043D\u0435 ": "0VBR0XOS16OD17SG18SG19R01L5G", " \u043D\u0435\u0430 ": "0X1I", " \u043D\u0435\u0433": "0V120X2J161U182419071L42", " \u043D\u0435\u0433\u043E": "0V2E0X2M163S183S", " \u043D\u0435\u043A": "0V310X3V160C171V180N19021L0Q", " \u043D\u0435\u043A\u043E": "0V4J0X30180Z1902", " \u043D\u0435\u043C": "0V290X701608170T181U19261L4D", " \u043D\u0435\u043C\u0430": "0V460X6Z17101803192Q", " \u043D\u0435\u0442 ": "186E", " \u043D\u0435\u0448": "0V1V0X2K171G1L0T", " \u043D\u0435\u0448\u0442": "0V4Q0X2P1724", " \u043D\u0435\u0449": "16441907", " \u043D\u0435\u0449\u043E": "166J1902", " \u043D\u0438": "0VC90X8Q168K18901918", " \u043D\u0438 ": "0V0Q0X3Q1626181S", " \u043D\u0438\u0432 ": "0X1L", " \u043D\u0438\u043A": "0V3B0X41163Z185I", " \u043D\u0438\u043A\u0430": "0V4Y0X0F161A1818", " \u043D\u0438\u043A\u043E": "0V3I0X3V166X186C", " \u043D\u0438\u0441": "0V5J", " \u043D\u0438\u0441\u0430": "0V90", " \u043D\u0438\u0447\u0435": "184T", " \u043D\u0438\u0448\u0442": "0V2X0X21", " \u043D\u0438\u0449\u043E": "1649", " \u043D\u0438\u0458": "0V59", " \u043D\u0438\u0458\u0435": "0VCK", " \u043D\u043E": "0V300X34164Z1734185U192B1M4N", " \u043D\u043E\u043C": "160B180D19091M36", " \u043D\u043E\u043C ": "1M3M", " \u043D\u0443\u0436\u043D": "0X02160N1863", " \u043D\u044C": "180319131M5N", " \u043D\u044C ": "1M6G", " \u043D\u044D": "1M56", " \u043D\u044D\u0433": "1M4E", " \u043D\u044D\u0433 ": "1M5V", " \u043D\u044F": "168R175Q", " \u043D\u044F\u043A": "163O", " \u043D\u044F\u043A\u043E": "1660", " \u043D\u044F\u043C": "166M174E", " \u043D\u044F\u043C\u0430": "16D5175V", " \u043D\u0456": "177M1970", " \u043D\u0456\u043A": "1741192T", " \u043D\u0456\u043A\u043E": "175U193Y", " \u043E": "0VCH0X8S168F170718LC195M1LGC1M58", " \u043E\u0431": "0V2N0X2V167J187D192V1L1K", " \u043E\u0431\u0438": "0V0H0X1H163F180B190A", " \u043E\u0431\u0438\u0447": "0V130X0E1664", " \u043E\u0432": "0V7I0X6C18061904", " \u043E\u0432\u0430": "0V220X6V", " \u043E\u0432\u0430 ": "0V1R0X6J", " \u043E\u0432\u0434\u0435": "0V6F0X07", " \u043E\u0432\u043E": "0V3I0X0T18051903", " \u043E\u0432\u043E ": "0V7F", " \u043E\u0434": "0V7W0XCR1604184319351L0Z1M25", " \u043E\u0434 ": "0V3J0X8I", " \u043E\u0434\u0430\u043C": "0X1R", " \u043E\u0434\u0438": "0X37181U190T", " \u043E\u0434\u0438 ": "0X1Q", " \u043E\u0434\u043E\u043E": "1M46", " \u043E\u043B": "0V060X08180419091LEJ1M20", " \u043E\u043B ": "1LI6", " \u043E\u043B\u0430": "1L82", " \u043E\u043B\u0430\u0440": "1LB7", " \u043E\u043D": "0V7Q0X0Y160W18IF19071L7O1M0Q", " \u043E\u043D ": "0V4I18E519051L12", " \u043E\u043D\u0430": "0V2X0X0T160F188T", " \u043E\u043D\u0430 ": "0V710X0O18F9", " \u043E\u043D\u0438": "0V100X041850", " \u043E\u043D\u0438 ": "0V2G1892", " \u043E\u043D\u044B": "1LBS", " \u043E\u043D\u044B ": "1L67", " \u043E\u043D\u044B\u04A3": "1LAL", " \u043E\u0440": "0V060X0C160B180G19081L6T1M4D", " \u043E\u0440\u043E": "1M30", " \u043E\u0441\u0442": "0V2J0X2D162E184C190L", " \u043E\u0441\u0442\u0430": "0V600X2A164Q186T190R", " \u043E\u0441\u044B ": "1L5Y", " \u043E\u0442": "0V2O0X3O16FR189T190T1L5G", " \u043E\u0442 ": "169B183J1902", " \u043E\u0442\u0438": "0V0W0X181634", " \u043E\u0442\u0438\u0434": "0X131655", " \u043E\u0442\u044B": "1L6P", " \u043E\u0442\u044B\u0440": "1L8M", " \u043E\u0447\u0435": "0V110X0K1607185A1908", " \u043E\u0447\u0435\u043D": "188Y", " \u043E\u0449\u0435": "162T", " \u043E\u0449\u0435 ": "165V", " \u043F": "0VGZ0XEF16EB17LG18R919OQ1L431M0D", " \u043F\u0430": "0V410X55164F17SD182S193A1L3W", " \u043F\u0430 ": "0V0H0X0M175D1L0T", " \u043F\u0430\u0432": "176619031L10", " \u043F\u0430\u0434": "0V0Q0X0F160C17BL18061904", " \u043F\u0430\u0434\u0430": "0V1I160B177D18081905", " \u043F\u0430\u043A": "0V040X11160I177618031902", " \u043F\u0430\u043C": "0V0G0X0G1604175F1807190N", " \u043F\u0430\u0440": "0V140X251622175E181N191A1L19", " \u043F\u0430\u0440\u0438": "0V0A0X1J162S180I1909", " \u043F\u0430\u0441": "0V0L0X0616071760180B190B", " \u043F\u0430\u0442\u0440": "17571803", " \u043F\u0430\u0447": "1759", " \u043F\u0435": "0V200X1R162D177J185M19601L2D", " \u043F\u0435\u0440": "0V070X08160G17AB185X195M", " \u043F\u0435\u0440\u0430": "160717BJ", " \u043F\u0435\u0440\u0435": "188F1972", " \u043F\u0438": "0V3W0X2G163G182I1923", " \u043F\u0438\u0442\u0430": "0V4S0X0216151807190T", " \u043F\u043B\u0430": "0V2E0X2Y162B173M182I192L", " \u043F\u043E": "0VIC0XK416L6174818SD19O41L16", " \u043F\u043E ": "0V0O0X1Q163B1840190V", " \u043F\u043E-": "163V18241903", " \u043F\u043E\u0432": "0V160X33162E1822194W", " \u043F\u043E\u0432\u0435": "0V0N0X1M163H1827192N", " \u043F\u043E\u0434": "0V0W0X391633186W195G", " \u043F\u043E\u0434\u043E": "0X1K1618182P194P", " \u043F\u043E\u0436\u0430": "0V060X041609184R", " \u043F\u043E\u043B": "0V160X1T162I170V185O191N1L17", " \u043F\u043E\u043C": "0V2J0X69163F1709185E192N", " \u043F\u043E\u043C\u043E": "0V510X4Y1654187A1903", " \u043F\u043E\u0440\u0430": "0V0E0X1L160H1819190U", " \u043F\u043E\u0441": "0V540X3K162I170Q186Q1926", " \u043F\u043E\u0441\u043B": "0V540X16162A184K190H", " \u043F\u043E\u0442": "0V1X0X1W160C170O182P1947", " \u043F\u043E\u0442\u0440": "0V2F0X0L1608180R194U", " \u043F\u043E\u0447": "0V1I0X21161L1856192K", " \u043F\u043E\u0447\u0435": "0V1Z0X0J1606186Q190M", " \u043F\u0440": "0VGQ0XJ816L917O218MB19HW1L2J", " \u043F\u0440\u0430": "0V1X0X7J165817OE183P1943", " \u043F\u0440\u0430 ": "179G", " \u043F\u0440\u0430\u0432": "0V3B0X4J1696177O1860192Z", " \u043F\u0440\u0430\u0446": "178J192R", " \u043F\u0440\u0430\u0448": "0X2Y", " \u043F\u0440\u0435": "0V7P0X9W169J185O190J1L39", " \u043F\u0440\u0435\u0434": "0V370X32169U185Z1908", " \u043F\u0440\u0435\u0441": "0V4O0X1L161J180N", " \u043F\u0440\u0435\u0442": "0V180X1C16061802", " \u043F\u0440\u0438": "0V5K0X55167G18CM197V", " \u043F\u0440\u0438\u0439": "180Q193L", " \u043F\u0440\u0438\u0447": "0V4L0X0D160T180Z190F", " \u043F\u0440\u0438\u044F": "1640180H1902", " \u043F\u0440\u043E": "0V6P0X6M1673172Q18EF19B91L19", " \u043F\u0440\u043E ": "180J1955", " \u043F\u0440\u043E\u0431": "0V4C0X27163H182V1924", " \u043F\u0440\u043E\u0441": "0V0O0X0Z162N172Y187B1932", " \u043F\u0440\u044B": "17GV1804", " \u043F\u0440\u044B\u0433": "174U1807", " \u043F\u0440\u044B\u0439": "175E", " \u043F\u0456": "172D196E1L0S", " \u043F\u0456\u0434": "1932", " \u0440": "0V580X3L163X177E189R199J1L311M0L", " \u0440\u0430": "0V7S0X81169U17GV18CG19441L1C", " \u0440\u0430\u0431": "0X45163O174E18441902", " \u0440\u0430\u0431\u043E": "0X4D167K1720187D", " \u0440\u0430\u0434": "0V4I0X08160P1728181A1912", " \u0440\u0430\u0434\u0438": "0V920X04160G180M190M", " \u0440\u0430\u0437": "0V360X3A166517CM186Y191G", " \u0440\u0430\u0437\u0431": "0V0H0X12164Q171D1818", " \u0440\u0430\u0437\u043C": "0V180X0F160J176F180I", " \u0440\u0430\u0441": "0V0P0X1P1606176B183Y", " \u0440\u0430\u0441\u0441": "170E184O", " \u0440\u0435": "0V4M0X3E162M183X191K1L5Y", " \u0440\u0435\u0441": "0V070X08160A180D19081L73", " \u0440\u0435\u0441\u043F": "18041L6G", " \u0440\u0435\u0447\u0435": "0V160X1F190J", " \u0440\u043E": "0V100X0X161Y172X182W19C41L0D", " \u0440\u043E\u0431": "0V030X031604171F18031962", " \u0440\u043E\u0431\u0438": "195V", " \u0440\u043E\u0437": "0X0317121808196B", " \u0441": "0VO10XLQ16KA17HM18QB19I61LHM1M74", " \u0441 ": "0V17167S189M", " \u0441\u0430": "0VL20XBT166W17CA184119361LDN1M9G", " \u0441\u0430 ": "0V3V164B171I", " \u0441\u0430\u0439": "170B180519031L3K1M6E", " \u0441\u0430\u0439\u043D": "1M8I", " \u0441\u0430\u0439\u0445": "1M46", " \u0441\u0430\u043A": "0V0A0XAD1604170O", " \u0441\u0430\u043A\u0430": "0XAV", " \u0441\u0430\u043B": "0X04170V180519031L6Z", " \u0441\u0430\u043C": "0VJ90X53163B177K184919331L0Q", " \u0441\u0430\u043C ": "0VSG0X0X161K171B181A190Q", " \u0441\u0430\u043C\u043E": "0V5F0X451646171K183C190W", " \u0441\u0430\u043C\u0456": "174U191A", " \u0441\u0430\u043D": "0V040X021603170E180519041L231M3A", " \u0441\u0430\u043D\u0430": "1L1G1M5O", " \u0441\u0432": "0V8S0X2X163W17A8186X195F", " \u0441\u0432\u0430": "0V1J0X06160D17AZ180A1903", " \u0441\u0432\u0435": "0V3P0X151611173918131904", " \u0441\u0432\u0435 ": "0V5R", " \u0441\u0432\u0438": "0V2X0X0I160N180G1905", " \u0441\u0432\u043E": "0V330X1U1614171X187B1945", " \u0441\u0432\u043E\u0458": "0V6E0X18", " \u0441\u0434\u0435": "185W", " \u0441\u0434\u0435\u043B": "18AD", " \u0441\u0435": "0VID0XOJ16LA17191888192U1L7W", " \u0441\u0435 ": "0VJC0XPF16KA", " \u0441\u0435\u0433": "0X2J161F182O", " \u0441\u0435\u0433\u0430": "0X2N1630", " \u0441\u0435\u0433\u043E": "184Y", " \u0441\u0435\u043A": "0V030X2N1608180G190C", " \u0441\u0435\u043A\u043E": "0X20", " \u0441\u0435\u043D": "0V050X07180419061L9W", " \u0441\u0435\u043D ": "1L5L", " \u0441\u0435\u043D\u0456": "1L6D", " \u0441\u0438": "0V5K0XDD16I6182G191X1L1G", " \u0441\u0438 ": "0V4I0XCH16HO", " \u0441\u0438\u0433\u0443": "0V1V0X1L164I", " \u0441\u0438\u0442": "0V080X361608180A1907", " \u0441\u0438\u0442\u0435": "0X36", " \u0441\u043A": "0V1J0X1B161E176C1898198C", " \u0441\u043A\u0430": "0V050X0E1608177A188F196M", " \u0441\u043A\u0430\u0437": "177P18BO197R", " \u0441\u043B": "0V3L0X4T165F173S187C192N", " \u0441\u043B\u0435\u0434": "0V1H0X10164D1833", " \u0441\u043B\u0443": "0V0Z0X3D1620171O182N190N", " \u0441\u043B\u0443\u0447": "0V0T0X21162W1833", " \u0441\u043B\u0443\u0448": "0V1A0X1G160V181D", " \u0441\u043C": "0V3Y0X3S162K1728183E1917", " \u0441\u043C\u0435": "0V0Z0X4C1621171W181F190A", " \u0441\u043C\u0435 ": "0X22162F", " \u0441\u043C\u043E": "0V2Z182T", " \u0441\u043C\u043E ": "0V7C", " \u0441\u043E": "0V160XBG160L171E189K19311L7D1M3C", " \u0441\u043E ": "0X9T181U", " \u0441\u043E\u043D": "0X0M171H1806190F1L3I1M3D", " \u0441\u043E\u043D\u0441": "1M3Y", " \u0441\u043F": "0V2H0X2S163S178T184X196V1L11", " \u0441\u043F\u0430": "0V1C0X0F160J1771181Z190X", " \u0441\u043F\u0440\u0430": "0V0B0X0B1611174X181C191M", " \u0441\u0440\u0435\u045C": "0X1C", " \u0441\u0442": "0V8C0X5H16A8179O188K195K1L1E", " \u0441\u0442\u0430": "0V2I0X2Y163P17B2184B19341L10", " \u0441\u0442\u0430\u043B": "0V0G174C181Z190U", " \u0441\u0442\u0430\u0440": "0V1V0X0L1617174T1833191J", " \u0441\u0442\u0432\u0430": "0V550X07170W", " \u0441\u0442\u0435 ": "0V570X0I1644", " \u0441\u0442\u0440": "0V1A0X1H162Z172K182Q190U", " \u0441\u0442\u0440\u0430": "0V1V0X14164S172K183P190O", " \u0441\u0443": "0V6T0X5Z16151768181O191P1L321M2V", " \u0441\u0443 ": "0V5M1L1B", " \u0441\u0443\u043C": "0V0A0X711604172H180I190U", " \u0441\u0443\u043C ": "0X7E", " \u0441\u044A": "16DF180I", " \u0441\u044A\u043C": "169T", " \u0441\u044A\u043C ": "16IA", " \u0441\u044C\u043E\u0433": "1937", " \u0441\u044F\u0431\u0440": "174M", " \u0441\u0450 ": "0X2X", " \u0441\u0451\u043D\u043D": "174R", " \u0441\u0456": "171U190Z1L7Q", " \u0441\u0456\u0437": "1LCX", " \u0441\u0456\u0437 ": "1L9T", " \u0441\u0456\u0437\u0434": "1L6Q", " \u0442": "0VHL0XJF16I117F818PP19RX1LL71MKX", " \u0442\u0430": "0V5F0X66166Z17G0188T199P1LGR1MCO", " \u0442\u0430 ": "0V0J1806192U1M5J", " \u0442\u0430\u0430": "0X3J1M0Z", " \u0442\u0430\u0430 ": "0X3Q", " \u0442\u0430\u0431": "176S180419021L42", " \u0442\u0430\u0431\u0435": "178B", " \u0442\u0430\u0437": "163M1L14", " \u0442\u0430\u0437\u0438": "167I", " \u0442\u0430\u043A": "0V280X1X162817CF1894196W", " \u0442\u0430\u043A ": "178O189P1954", " \u0442\u0430\u043A\u0430": "0V0B0X1D1632171B180T190X", " \u0442\u0430\u043A\u0456": "174B190I", " \u0442\u0430\u043C\u0443": "0X1D172Z", " \u0442\u0430\u043D": "0X0816081710180C190G1L2M1M4J", " \u0442\u0430\u043D\u044B": "1L3A1M4A", " \u0442\u0430\u0440": "1709180619031L78", " \u0442\u0435": "0V4R0X80169C18BU197X1L7N1M0X", " \u0442\u0435 ": "0V2D0X4R165K1809191L", " \u0442\u0435\u0431": "0V0S0X2G161T18AT1942", " \u0442\u0435\u0431\u0435": "0V1G0X2L161718B1195U", " \u0442\u0435\u0431\u044F": "189I", " \u0442\u0438": "0V410X88168K180C19GR1L231M1T", " \u0442\u0438 ": "0V3X0X9E168W19HX", " \u0442\u043E": "0VPD0XSG16RW17CK18PV19SF1LBE1M9I", " \u0442\u043E ": "0VBB0X02160A170X182L190G", " \u0442\u043E\u0430": "0XC8160A", " \u0442\u043E\u0430 ": "0XCT", " \u0442\u043E\u0431": "0V0H18151953", " \u0442\u043E\u0431\u0456": "1964", " \u0442\u043E\u0432": "16A618041905", " \u0442\u043E\u0432\u0430": "16J418081904", " \u0442\u043E\u0433": "0V0T0X081607181C190W1M2U", " \u0442\u043E\u0433\u043B": "1M42", " \u0442\u043E\u0437": "162T", " \u0442\u043E\u0437\u0438": "165V", " \u0442\u043E\u0439": "168O171S1806190G", " \u0442\u043E\u0439 ": "16GQ172O180C190N", " \u0442\u043E\u043B": "0V0L0X26162K175A18381L39", " \u0442\u043E\u043B\u043A": "0X27165D1807", " \u0442\u043E\u043B\u044C": "177S185B", " \u0442\u043E\u043C": "0VMB0XSD16KC17B818QN19SG1LBM1M6C", " \u0442\u043E\u043C ": "0VSD0XSG16SG17B718SG19SG1LC01M9U", " \u0442\u043E\u043C\u0430": "0V9E174Z18AR19BA", " \u0442\u043E\u043C\u043E": "0V4Y1839193L", " \u0442\u043E\u043C\u0443": "0V7A17151877197O", " \u0442\u043E\u0458": "0V050X3N", " \u0442\u043E\u0458 ": "0V0C0X3T", " \u0442\u0440": "0V6S0X7Y16AM175Q183R1957", " \u0442\u0440\u0435": "0V4M0X7L160O180W191D", " \u0442\u0440\u0435\u0431": "0V9I0X7I180I191N", " \u0442\u0440\u044D\u0431": "1764", " \u0442\u0440\u044F": "167U1802", " \u0442\u0440\u044F\u0431": "16FB", " \u0442\u0443": "0V110X331632173U1825193O1L501M3A", " \u0442\u0443\u043A": "0X3Q1637", " \u0442\u0443\u043A ": "166G", " \u0442\u0443\u043A\u0430": "0X3P1607", " \u0442\u0443\u0440\u0430": "1L6M", " \u0442\u0443\u0442": "17481810192Y", " \u0442\u0443\u0442 ": "1765181V1949", " \u0442\u044B": "17GI18EE1L30", " \u0442\u044B ": "17M818IB", " \u0442\u044D": "172S1MK2", " \u0442\u044D\u0434": "1M2Q", " \u0442\u044D\u0434 ": "1M46", " \u0442\u044D\u0440": "170M1MJ8", " \u0442\u044D\u0440 ": "1MRS", " \u0442\u044F ": "164U", " \u0442\u04AF": "1L6I1M96", " \u0442\u04AF\u04AF": "1MA0", " \u0442\u04AF\u04AF\u043D": "1MHU", " \u0442\u04B1": "1L7N", " \u0442\u04B1\u0440": "1LAF", " \u0443": "0V9I0X2T162O177T18CP198N1L1F1M87", " \u0443 ": "0VA4160817GN189W19CU", " \u0443\u0430\u049B\u044B": "1L5V", " \u0443\u0431\u0430\u0432": "0X1D", " \u0443\u0436\u0435 ": "186J190A", " \u0443\u0440": "0V3Z0X031603170Q180J190A1M12", " \u0443\u0440\u0430": "0V4P170L1802", " \u0443\u0440\u0430\u0434": "0VB6", " \u0443\u0443": "1MAZ", " \u0443\u0443 ": "1M8U", " \u0443\u0443\u043B\u0437": "1M3U", " \u0443\u0448\u0442": "0X39", " \u0443\u0448\u0442\u0435": "0X3F", " \u0444": "0V0Y0X0Y161V171F181Q19291L0Y1M0J", " \u0444\u0440": "0V0V0X0W165Q1718181319281L0S1M17", " \u0444\u0440\u0430\u043D": "0V2C0X0W160G172K1828193H1L231M2V", " \u0444\u0440\u0435": "1666", " \u0444\u0440\u0435\u043D": "16CB", " \u0445": "0V2F0X0C161V1751186H197W1L231MMA", " \u0445\u0430": "0V0I0X08162T176U1807190A1L4X1ME1", " \u0445\u0430\u0430": "1M3A", " \u0445\u0430\u0430\u043D": "1M4T", " \u0445\u0430\u043B\u044B": "1L64", " \u0445\u0430\u0440": "0X071628170H180419041M7F", " \u0445\u0430\u0440\u0430": "170E180719021M5R", " \u0445\u0430\u0440\u0435": "1640", " \u0445\u0430\u0446\u0435": "175Z", " \u0445\u0430\u0447\u0443": "174M", " \u0445\u0438": "0V0A0X03160B180719021L0F1M70", " \u0445\u0438\u0439": "1M7L", " \u0445\u0438\u0439\u0436": "1M46", " \u0445\u0438\u0439\u0445": "1M5K", " \u0445\u043E": "0V3F0X091632173D18BV19A71M6F", " \u0445\u043E\u0440\u043E": "185W190D", " \u0445\u043E\u0442": "0V050X05160C185F193L1M17", " \u0445\u043E\u0442\u0435": "0V0D0X05160P1869", " \u0445\u043E\u0442\u0456": "1955", " \u0445\u043E\u0447": "173I186P1973", " \u0445\u043E\u0447\u0430": "174V1905", " \u0445\u043E\u0447\u0435": "186K1963", " \u0445\u043E\u0447\u0443": "18641948", " \u0445\u043E\u045B": "0V3J", " \u0445\u043E\u045B\u0435": "0V5R", " \u0445\u0442\u043E": "17511939", " \u0445\u0442\u043E ": "176P193Q", " \u0445\u0443": "160I171G180E19091M4O", " \u0445\u044D": "1MII", " \u0445\u044D\u0434": "1M2U", " \u0445\u044D\u0437\u044D": "1M3Y", " \u0445\u044D\u043B": "1M80", " \u0445\u044D\u043B\u0441": "1M55", " \u0445\u044D\u043B\u044D": "1M5O", " \u0445\u044D\u043D": "1M4G", " \u0445\u044D\u043D ": "1M77", " \u0445\u044D\u0440": "1M6L", " \u0445\u044D\u0440\u044D": "1M9Y", " \u0445\u0456\u0431\u0430": "1712192O", " \u0445\u04AF": "1MDA", " \u0445\u04AF\u043B\u044D": "1M3Q", " \u0445\u04AF\u043D": "1M4L", " \u0445\u04AF\u043D ": "1M6W", " \u0445\u04AF\u0441": "1M4R", " \u0445\u04AF\u0441\u044D": "1M46", " \u0446": "0V0U0X0N160K1755180X19CA1M36", " \u0446\u0430": "0X02171K18031M5Q", " \u0446\u0430\u0433": "1M4I", " \u0446\u0430\u0433 ": "1M46", " \u0446\u0435": "0V0Y0X18160W170M181819GX", " \u0446\u0435 ": "19HU", " \u0446\u0435\u0439 ": "192L", " \u0446\u044C\u043E": "193W", " \u0446\u044C\u043E\u0433": "194R", " \u0446\u044F": "160M176Z1912", " \u0446\u044F\u0431": "1769", " \u0446\u044F\u0431\u0435": "1795", " \u0446\u0456": "177C1932", " \u0446\u0456 ": "179G190U", " \u0447": "0V2B0X23165U175118EK197L1L071MBV", " \u0447 ": "1M5Q", " \u0447\u0430": "0V140X1A162U17CF182L193G1MAI", " \u0447\u0430\u0434": "0X0516061M67", " \u0447\u0430\u0434\u0430": "1M7F", " \u0447\u0430\u043B\u0430": "1762", " \u0447\u0430\u043C": "0X02173R1M6G", " \u0447\u0430\u043C\u0430": "1M5C", " \u0447\u0430\u043C\u0434": "1M5R", " \u0447\u0430\u043C\u0443": "175K", " \u0447\u0430\u0441": "0V0M0X0W161I177Y182R193C", " \u0447\u0430\u0441 ": "0V090X0A160U174I180I1923", " \u0447\u0435": "0V240X2916F5185U192G1L0I", " \u0447\u0435 ": "16EI", " \u0447\u0435\u043A\u0430": "0V290X1I191R", " \u0447\u0438": "0V1F0X17160U181919461MD2", " \u0447\u0438 ": "192Y1MBJ", " \u0447\u0438\u043D": "0V0A0X0E180219041M42", " \u0447\u0438\u043D\u0438": "0V0O0X0918021M6E", " \u0447\u043E": "0V0Q0X131625170N195L1M0S", " \u0447\u043E\u0432\u0435": "0V210X1C16461903", " \u0447\u043E\u043C": "194I", " \u0447\u043E\u043C\u0443": "196H", " \u0447\u0442": "18KA", " \u0447\u0442\u043E": "18OQ", " \u0447\u0442\u043E ": "18SE", " \u0447\u0442\u043E\u0431": "189I", " \u0448": "0V3J0X3M160H177K181T192A1L6G1M3K", " \u0448\u0438": "0V060X0A1605180719051L0D1M4Q", " \u0448\u0438\u0433 ": "1M42", " \u0448\u043C\u0430\u0442": "175H1905", " \u0448\u0442": "0V750XAH17HK180A1909", " \u0448\u0442\u0430": "0V51170B18061906", " \u0448\u0442\u0430 ": "0VBQ", " \u0448\u0442\u043E": "0V3O0XD517OW18031903", " \u0448\u0442\u043E ": "0V900XDE17SA", " \u0449": "162L180319C9", " \u0449\u0435": "16991804192Z", " \u0449\u0435 ": "16A7193E", " \u0449\u043E": "160819KJ", " \u0449\u043E ": "160319JG", " \u0449\u043E\u0431": "193M", " \u0449\u043E\u0431 ": "1956", " \u044D": "170Q18BK1L111MAE", " \u044D\u043C\u044D\u0433": "1M4E", " \u044D\u043D": "170818041L0E1MEV", " \u044D\u043D\u0434": "1M38", " \u044D\u043D\u0434 ": "1M5Z", " \u044D\u043D\u044D": "1MEH", " \u044D\u043D\u044D ": "1MO5", " \u044D\u0442": "18L4", " \u044D\u0442\u043E": "18NI", " \u044D\u0442\u043E ": "18QU", " \u044D\u0442\u043E\u0433": "185A", " \u044D\u0442\u043E\u043C": "186A", " \u044D\u0442\u043E\u0442": "184K", " \u044E": "1603170518061M5I", " \u044E\u043C": "160318021M67", " \u044E\u043C ": "1M71", " \u044E\u0443": "1M7N", " \u044E\u0443 ": "1M8E", " \u044F": "161217HV18GE19KG1L081M6Y", " \u044F ": "161Q17PM18QH19RN", " \u044F\u0432": "180G19021M5K", " \u044F\u0432\u0430": "1M3F", " \u044F\u0432\u0430\u0445": "1M5Z", " \u044F\u0433": "176V1M0X", " \u044F\u0433\u043E": "17B8", " \u044F\u0433\u043E ": "17FJ", " \u044F\u0435 ": "177W", " \u044F\u043A": "160617CC199B", " \u044F\u043A ": "17B5195L", " \u044F\u043A\u0456": "175H190U", " \u044F\u043C\u0430\u0440": "1M55", " \u044F\u043C\u0443 ": "174C", " \u044F\u043D": "17BQ18021903", " \u044F\u043D\u0430": "17CW", " \u044F\u043D\u0430 ": "17HZ", " \u044F\u043D\u044B": "176C", " \u044F\u043D\u044B ": "179A", " \u044F\u0440": "170B18031M4D", " \u044F\u0440\u044C": "1M3J", " \u044F\u0448\u0447\u044D": "176X", " \u0451": "174C1M10", " \u0451\u043D": "17B6", " \u0451\u043D ": "17HJ", " \u0451\u0441\u0442\u043E": "1M51", " \u0451\u0441\u0446": "175M", " \u0451\u0441\u0446\u044C": "1789", " \u0456": "177U19491L31", " \u0456 ": "17FM192V", " \u0456\u0441\u0442\u0435": "1L5S", " \u0458": "0VEQ0X3T", " \u0458\u0430": "0V6A0XCV", " \u0458\u0430 ": "0V5Q0XAO", " \u0458\u0430\u0441": "0V060X2R", " \u0458\u0430\u0441 ": "0X2P", " \u0458\u0435": "0VQ3", " \u0458\u0435 ": "0VQF", " \u0458\u0435\u0434": "0V3O", " \u045B\u0435": "0V3Y", " \u045B\u0435 ": "0V3A", " \u045C": "0X32", " \u045C\u0435": "0XAM", " \u045C\u0435 ": "0XDC", " \u045D": "0X0K1608", " \u045E": "178K", " \u045E ": "17GA", " \u045E\u0436\u043E ": "174G", " \u045E\u0441\u0451 ": "1758", " \u049B": "1LMM", " \u049B\u0430": "1LRR", " \u049B\u0430\u0437": "1LG2", " \u049B\u0430\u0437\u0430": "1LHZ", " \u049B\u0430\u0439": "1L8A", " \u049B\u0430\u043B": "1LD3", " \u049B\u0430\u043B\u0430": "1LAQ", " \u049B\u0430\u0440": "1LDD", " \u049B\u0430\u0440\u0430": "1LAQ", " \u049B\u0430\u0442": "1L78", " \u049B\u043E": "1LCT", " \u049B\u044B": "1L8Q", " \u049B\u044B\u0437": "1L8F", " \u049B\u044B\u0437\u043C": "1L6G", " \u049B\u04B1": "1LBE", " \u049B\u04B1\u0440": "1L6R", " \u049B\u04B1\u049B": "1L7C", " \u049B\u04B1\u049B\u044B": "1LAA", " \u04AF": "1L4X1M7X", " \u04AF\u043D\u044D": "1M4E", " \u04AF\u043D\u044D\u0445": "1M55", " \u04AF\u0448\u0456\u043D": "1L8S", " \u04AF\u04AF": "1M8N", " \u04AF\u04AF ": "1M50", " \u04AF\u04AF\u043D": "1M5F", " \u04AF\u04AF\u043D\u0438": "1M9D", " \u04B1": "1L4E", " \u04D9": "1L61", " \u04E9": "1L7T1M70", " \u04E9\u0437": "1L7I", " \u04E9\u043D\u04E9\u04E9": "1M51", " \u04E9\u0442": "1L6Z", " \u04E9\u0447\u0438\u0433": "1M3I", " \u04E9\u04E9\u0440": "1M4C", " \u05D0": "1HSG", " \u05D0\u05B7": "1HOL", " \u05D0\u05B7 ": "1HP9", " \u05D0\u05B7\u05D6": "1H7Z", " \u05D0\u05B7\u05D6 ": "1H4Z", " \u05D0\u05B7\u05D6\u05D5": "1H3G", " \u05D0\u05B7\u05DC": "1H6D", " \u05D0\u05B7\u05DC\u05E2": "1H34", " \u05D0\u05B7\u05DF ": "1H4P", " \u05D0\u05B7\u05E8": "1H59", " \u05D0\u05B8": "1H5H", " \u05D0\u05D5": "1HBL", " \u05D0\u05D5\u05D9": "1HBP", " \u05D0\u05D5\u05D9\u05E1": "1H4Z", " \u05D0\u05D5\u05D9\u05E3": "1H4J", " \u05D0\u05D5\u05DF": "1H5S", " \u05D0\u05D5\u05DF ": "1H69", " \u05D0\u05D9": "1HSG", " \u05D0\u05D9\u05D6": "1HSA", " \u05D0\u05D9\u05D6 ": "1HSG", " \u05D0\u05D9\u05DA": "1HLG", " \u05D0\u05D9\u05DA ": "1HMN", " \u05D0\u05D9\u05DF": "1HAG", " \u05D0\u05D9\u05DF ": "1HB8", " \u05D0\u05D9\u05E8": "1H8X", " \u05D0\u05D9\u05E8 ": "1H8Y", " \u05D1": "1H8U", " \u05D1\u05D0": "1H4V", " \u05D1\u05D0\u05B7": "1H74", " \u05D1\u05D9": "1H70", " \u05D1\u05D9\u05DF": "1H63", " \u05D1\u05D9\u05DF ": "1H6L", " \u05D1\u05D9\u05E1\u05D8": "1H4N", " \u05D2": "1HD5", " \u05D2\u05E2": "1HGW", " \u05D2\u05E2\u05D5": "1HAM", " \u05D2\u05E2\u05D5\u05D5": "1HBE", " \u05D3": "1HG3", " \u05D3\u05D0": "1H9Y", " \u05D3\u05D0\u05B8": "1HFC", " \u05D3\u05D0\u05B8\u05E1": "1HD5", " \u05D3\u05D5 ": "1H6S", " \u05D3\u05D9": "1H97", " \u05D3\u05D9 ": "1HDQ", " \u05D3\u05E2": "1HA0", " \u05D3\u05E2\u05DD": "1H5E", " \u05D3\u05E2\u05DD ": "1H5T", " \u05D3\u05E2\u05E8": "1HDI", " \u05D3\u05E2\u05E8 ": "1HC7", " \u05D4": "1HBV", " \u05D4\u05D0": "1HGT", " \u05D4\u05D0\u05B8": "1HOS", " \u05D4\u05D0\u05B8\u05D1": "1HCI", " \u05D4\u05D0\u05B8\u05D8": "1HHJ", " \u05D5": "1H9E", " \u05D5\u05D5": "1HHC", " \u05D5\u05D5\u05D0": "1HB4", " \u05D5\u05D5\u05D0\u05B8": "1H8T", " \u05D5\u05D5\u05D9": "1HAZ", " \u05D5\u05D5\u05D9 ": "1H42", " \u05D5\u05D5\u05D9\u05DC": "1H3U", " \u05D5\u05D5\u05E2": "1HBU", " \u05D5\u05D5\u05E2\u05DC": "1H3M", " \u05D5\u05D5\u05E2\u05E8": "1H3G", " \u05D6": "1HCX", " \u05D6\u05D9": "1HC8", " \u05D6\u05D9 ": "1H5A", " \u05D6\u05D9\u05D9": "1H6Y", " \u05D6\u05D9\u05D9 ": "1H3Q", " \u05D6\u05D9\u05D9\u05E2": "1H37", " \u05D6\u05D9\u05DA": "1HAO", " \u05D6\u05D9\u05DA ": "1HBG", " \u05D6\u05E2": "1H7K", " \u05D6\u05E2\u05E0": "1HBG", " \u05D6\u05E2\u05E0\u05E2": "1HA7", " \u05D6\u05F2\u05B7": "1H7V", " \u05D6\u05F2\u05B7\u05DF": "1H4D", " \u05D8": "1H9K", " \u05D8\u05D0": "1HDU", " \u05D8\u05D0\u05B8": "1HLB", " \u05D8\u05D0\u05B8\u05DD": "1HJA", " \u05D8\u05D0\u05B8\u05DE": "1H3X", " \u05D9\u05D9\u05B4\u05D3": "1H37", " \u05DB\u05F3\u05D1\u05D9": "1H3A", " \u05DC": "1H55", " \u05DC\u05D9\u05D1": "1H57", " \u05DC\u05D9\u05D1 ": "1H54", " \u05DE": "1HDT", " \u05DE\u05D0\u05B7": "1H5C", " \u05DE\u05D9": "1HBC", " \u05DE\u05D9\u05D8": "1H6E", " \u05DE\u05D9\u05D8 ": "1H5T", " \u05DE\u05D9\u05E8": "1HAI", " \u05DE\u05D9\u05E8 ": "1HBA", " \u05DE\u05E2": "1H5T", " \u05DE\u05E2\u05E0\u05D8": "1H3O", " \u05DE\u05E2\u05E8\u05D9": "1H2T", " \u05DE\u05F2\u05B7": "1H73", " \u05DE\u05F2\u05B7\u05DF": "1H69", " \u05E0": "1H9S", " \u05E0\u05D0\u05B8": "1H5H", " \u05E0\u05D9": "1HDI", " \u05E0\u05D9\u05E9": "1HKZ", " \u05E0\u05D9\u05E9\u05D8": "1HM5", " \u05E1\u05F3\u05D0\u05D9": "1H3T", " \u05E2": "1H5Z", " \u05E2\u05E8": "1H5A", " \u05E2\u05E8 ": "1H8T", " \u05E4": "1HC8", " \u05E4\u05BC": "1H5U", " \u05E4\u05BC\u05D0\u05B7": "1H2X", " \u05E4\u05BF": "1HH9", " \u05E4\u05BF\u05D0": "1HFU", " \u05E4\u05BF\u05D0\u05B7": "1HFC", " \u05E4\u05BF\u05D5": "1H92", " \u05E4\u05BF\u05D5\u05DF": "1H7J", " \u05E4\u05BF\u05E8": "1H58", " \u05E6": "1H5U", " \u05E6\u05D5": "1H5W", " \u05E6\u05D5 ": "1H7J", " \u05E6\u05D9": "1H4T", " \u05E6\u05D9 ": "1H7Y", " \u05E7": "1H9B", " \u05E7\u05D0\u05B7": "1H57", " \u05E7\u05D9": "1H6H", " \u05E7\u05D9\u05D9": "1HA8", " \u05E7\u05D9\u05D9\u05DF": "1H9N", " \u05E7\u05E2\u05DF ": "1H3D", " \u05E9": "1H68", " \u1E25": "0314", " \u200B": "0Z04", " \u4E0D": "0643", " \u4E0D\u597D\u610F\u601D": "06AO", " \u4E0D\u662F\u5417 ": "06BQ", " \u4E0D\u662F\u55CE ": "06BD", " \u4E0D\u8981": "069J", " \u4E3A\u4EC0\u4E48": "06NR", " \u4E3A\u4EC0\u4E48\u4F60": "0691", " \u4ECA\u5929": "069W", " \u4ECA\u5929\u65E9\u4E0A": "066R", " \u4ED6": "06I4", " \u4ED6\u4EEC": "06F5", " \u4ED6\u5011": "06BS", " \u4ED6\u5728": "067D", " \u4ED6\u662F": "0692", " \u4ED6\u7684": "06BM", " \u4F46": "062M", " \u4F46\u662F": "068C", " \u4F60": "06IJ", " \u4F60\u4E0D": "0685", " \u4F60\u4E3A\u4EC0\u4E48": "06GX", " \u4F60\u4EC0\u4E48\u65F6": "06AO", " \u4F60\u53EF\u4EE5": "06R5", " \u4F60\u61C9\u8A72": "06HS", " \u4F60\u662F": "0674", " \u4F60\u6700\u559C\u6B22": "066K", " \u4F60\u6709": "0676", " \u4F60\u70BA\u4EC0\u9EBC": "06EJ", " \u4F60\u7684": "06A3", " \u4F60\u77E5\u9053": "06O9", " \u4FD7\u8A71\u8AAA\uFF1A": "06BW", " \u5979": "069B", " \u5982\u679C": "06E7", " \u5982\u679C\u4F60": "06SA", " \u5982\u679C\u4F60\u4E0D": "067X", " \u5982\u679C\u6211": "06IJ", " \u5BF9\u4E0D\u8D77 ": "06AB", " \u5C0D\u4E0D\u8D77 ": "066R", " \u6211": "06SG", " \u6211\u4E0D": "06OU", " \u6211\u4E0D\u559C": "06MI", " \u6211\u4E0D\u559C\u6B22": "06FM", " \u6211\u4E0D\u559C\u6B61": "06CL", " \u6211\u4E0D\u60F3": "06O0", " \u6211\u4E0D\u662F": "06GB", " \u6211\u4E0D\u77E5": "06SD", " \u6211\u4E0D\u77E5\u9053": "06SG", " \u6211\u4E0D\u80FD": "06IJ", " \u6211\u4ECA\u5929": "06ME", " \u6211\u4EEC": "06QU", " \u6211\u4EEC\u5E94\u8BE5": "0683", " \u6211\u4EEC\u5FC5\u987B": "067X", " \u6211\u5011": "06O2", " \u6211\u53EF\u4EE5": "06NL", " \u6211\u559C": "066Z", " \u6211\u559C\u6B22": "06P1", " \u6211\u559C\u6B61": "06IS", " \u6211\u5728": "06CQ", " \u6211\u5E0C\u671B": "06PL", " \u6211\u5E0C\u671B\u4F60": "068U", " \u6211\u5F88": "0681", " \u6211\u5F88\u62B1\u6B49": "066Y", " \u6211\u60F3": "06I9", " \u6211\u60F3\u77E5\u9053": "068A", " \u6211\u60F3\u8981": "06KJ", " \u6211\u60F3\u8981\u4E00": "0675", " \u6211\u6628\u5929": "06H9", " \u6211\u662F": "068I", " \u6211\u6709": "067F", " \u6211\u6CA1\u6709": "06G6", " \u6211\u7684": "06IV", " \u6211\u77E5\u9053": "06RE", " \u6211\u77E5\u9053\u4F60": "06BD", " \u6211\u8981": "0681", " \u6211\u89BA\u5F97": "06GG", " \u6211\u89C9\u5F97": "06O9", " \u6211\u9700\u8981": "06KV", " \u6240\u4EE5": "067D", " \u6BCF\u4E2A\u4EBA\u90FD": "0698", " \u6BCF\u500B\u4EBA\u90FD": "066R", " \u6C64": "0661", " \u6C64\u59C6": "06SG", " \u6C64\u59C6\u4E0D": "06OI", " \u6C64\u59C6\u544A\u8BC9": "066R", " \u6C64\u59C6\u548C": "06M4", " \u6C64\u59C6\u548C\u739B": "06JM", " \u6C64\u59C6\u5728": "06IA", " \u6C64\u59C6\u662F": "06KR", " \u6C64\u59C6\u662F\u4E2A": "066Y", " \u6C64\u59C6\u6CA1\u6709": "067C", " \u6C64\u59C6\u8BF4\u4ED6": "069S", " \u6E6F": "063C", " \u6E6F\u59C6": "06MC", " \u6E6F\u59C6\u548C\u746A": "0675", " \u8FD9": "066O", " \u8FD9\u4E2A": "06B0", " \u8FD9\u662F": "06AA", " \u8FD9\u662F\u6211": "06IF", " \u8FD9\u662F\u6211\u7684": "068H", " \u9019": "064W", " \u9019\u500B": "0681", " \u9019\u662F": "0672", " \u90A3": "063U", "''": "0R031B0B1D0A1Q21", "''a' ": "1QDJ", "'a ": "0L2W1A031F3O1Q0N", "'a'": "1QGB", "'a' ": "1QOU", "'ab": "04180L0D0Q061Q04", "'ac": "0L110Q0N1Q2Q", "'ai": "0L9O0Q020S0I", "'ai ": "0LB4", "'aim": "0L31", "'aime": "0L4U", "'al": "0L0S0Q0T1Q04", "'am": "041U0L0P0Q0E1Q0W", "'an": "0L0S0Q0N1Q0O", "'ap": "0L170Q051Q0O", "'ar": "0L210Q0G1B021Q1N", "'au": "0L1P0Q0Q", "'av": "0L2D0Q091Q04", "'b": "1Q24", "'c": "1Q1D", "'d": "0M0L1F1N1Q2F", "'d ": "0M17", "'da": "1F381Q4C", "'e": "0L3D0Q0G0Z021F041QA3", "'e'": "1QM4", "'e' ": "1QSG", "'el": "0L150Q021Q1J", "'en": "0L2W0Q021Q0C", "'er": "0L020Q0H", "'es": "0LAH0Q0R1Q0H", "'est": "0LEN0Q0E", "'est ": "0LK9", "'f": "0S0K", "'fh": "0S1Q", "'g": "1Q07", "'h": "0L0J0Q0H1Q0Y", "'ha": "0L0B0Q131Q0Y", "'ho": "0L0I0Q0R1Q15", "'i": "042V0L1D0Q0I0S0B1F081Q1X", "'il": "0L421Q0A", "'il ": "0L5V1Q0C", "'im": "041P0L0M0Q09", "'in": "041Q0L1E0Q171F0D1Q0J", "'is": "041S0L020Q04", "'j": "1Q04", "'l": "0M0R1F0F1Q32", "'ll": "0M1J", "'ll ": "0M2T", "'m": "0M141Q2P", "'m ": "0M2A", "'n": "01620D060R031F1W1Q1B", "'n ": "01A00R04", "'ni": "1F441Q2G", "'nin": "1F4O", "'nin ": "1F6B", "'ny": "0D06", "'o": "0L0M0Q0B1Q3F", "'oh": "1Q80", "'oh ": "1QB2", "'on": "0L1B1Q0B", "'or": "0L0H0Q0I1Q03", "'p": "1Q1Q", "'pu' ": "1QEI", "'q": "1Q19", "'r": "0M0S1Q1D", "'re": "0M1L1Q07", "'re ": "0M2X", "'s ": "010E0M750N080R0I", "'t ": "0D030MBS", "'u": "041S0L0P0Q0B1F3K1Q0U", "'um": "044C0Q02", "'umu": "046P", "'umw": "046I", "'un": "0L3C0Q0G1F7K1Q04", "'un ": "0L3H1F8K", "'v": "0M0Q1Q1O", "'ve": "0M1J1Q0Z", "'ve ": "0M2S", "'w": "1Q1F", "'y": "0D0D0L091F1P", "'y ": "0D0D0L1B", "'\xE0": "0L04", "'\xE8": "0Q0K", "'\xE8 ": "0Q28", "'\xE9": "0L0X0S06", "'\xE9c": "0L18", "'\xE9t": "0L2H", "'\xE9ta": "0L36", "'\xE9tai": "0L4W", "'\xEA": "0L06", "'\u0131": "1F07", "(o": "1N05", "-a ": "03690P05159K1O02", "-aa": "0D0C", "-am ": "030G157Z", "-an": "031B0B0E", "-ap": "0B0C", "-ar": "0D0E11021515", "-a\u0263": "0355", "-ba": "0B0C0D020L0814031F04", "-be": "03020B0K1403", "-bu": "0B0B0D02", "-ce": "03020L2F", "-ce ": "0L40", "-d ": "03DF", "-ha": "0B0C0D02", "-i ": "031M152T", "-il": "03060L23", "-in": "033V0D04", "-is": "034E0D06", "-j": "0B030L061O02", "-ka": "0B070D031P0T", "-la": "0B0K0L050P0O1P0H", "-li": "0B030D020U031PAE", "-li ": "0U051PCQ", "-lo": "0P1A1P0D", "-me": "0B020P1O", "-mi": "0L06152V", "-mo": "0L17", "-nn": "03DV", "-nne": "038Q", "-nnes": "037R", "-nni": "0374", "-nni ": "03EG", "-o ": "0P0B153B", "-q": "0303", "-se": "03170B030P2415051O021P0D", "-se ": "0P2J1507", "-s\u0263e": "034T", "-s\u0263en": "037T", "-t-": "03120L16", "-ta": "036F0B040D03", "-te": "038F0B060L020P0B150Z", "-tu": "031Q0L3W", "-tu ": "0L6G", "-us": "03020D07", "-v": "0L0T0P021102140215031O021P0B", "-vo": "0L3Y0P03", "-vou": "0L6I", "-vous": "0LAO", "-w": "030D", "-y": "032E", "-ye": "0353", "-\xE4": "1P0I", "-\xEA": "0L02", "-\u021B": "150D", "-\u043D\u0438\u0431\u0443": "184M", "a' ": "1QSD", "a's": "0M0I0R051Q0A", "a'y": "0D061F1F", "a- ": "0D07", "a-a": "031A0B0C110G", "aa ": "0D0311JO1C25", aaa: "0D0A", aab: "0D041C15", aad: "010E0R08110I14031C27", aaf: "0B0G0R02", aag: "010T0D040R1I", "aag ": "011M0R4L", aai: "010M0R08110P1B0B1C0N", aak: "013A0D020R1D11181A021C0O", "aak ": "01710R29", aakt: "0R2Y", "aakt ": "0R2Z", aal: "011C0D0D0R1J111S1C3C1F07", "aal ": "012Q0R4A1C1C", aam: "010V0R0K112A1C3T", aama: "11181C3V", aamat: "110K1C81", "aan ": "01E70B4A0D260RE70T0811MY1C15", aand: "012A0R19", aang: "011Y0D0E0R11", aange: "01220R1C", aap: "010P0R08110V1C0S", "aar ": "01FC0N0K0RMG", aard: "01200R2Z", aardi: "011I0R0Q", aaro: "011D0R3J0T09", aarom: "010S0R4D", aas: "01110D080R0F111K1C36", aasta: "110U1C48", aat: "01380B0W0N040R2K11381A021C291F1O", "aat ": "016Y0B1O0N020R7I11181F16", aay: "0D04", abah: "04110D0X1F0U", abaho: "0D1J", abai: "0D030L030P040S111B71", "abai ": "1BD7", abaj: "04290O3D", abal: "03030D0F0O0G0P2Q1B071F0K", abalh: "0P3F", "abar ": "0B0O0O050P050T031B5Q", abbi: "0M020Q4B130M", abbia: "0Q4A", aben: "03050N5C0O0A0P050T0S", "aben ": "03060N7G0O0D", "abet ": "0L020R020T3I0Z0C1F02", abh: "0N020S9P0T061Q03", abha: "0S95", abhai: "0SIC", abhar: "0SFC", abita: "0D020L070O150P040Q0J0T2Y", abla: "03030O3I0Y0B140T1F021O0T", "able ": "0D020L4U0M2V0O1Y1O0G", abob: "1P3N", abou: "0L030M390P0A", about: "0L020M4F", "abu ": "0304048O0B040Z021B0H1D11", "aby ": "010F0M060N030R060U2S0Y590Z031A0U1N0P", ab\u00ED: "0O1R0U0F1304", ab\u00EDa: "0O2P", "ab\xEDa ": "0O31", ab\u0101: "1D2F", acak: "1F4V", "acak ": "1F51", aca\u011F: "1F65", aca\u011F\u0131: "1F89", acci: "0L0H0M0A0O0S0Q350T1A0Z041002150N", acea: "0T0A155T", aceas: "156O", acer: "03020L040O4O0P050Q1O0T2H150E1A08", "acer ": "0L070O3Z0T031A06", aces: "0L060M050O0B0P050Q030T041579", acest: "1595", acet: "0B080Q020T2I0U091A03", achai: "03040L030SB5", acho: "0O0F0P390T020U030Y081A0K1Q0A", "acho ": "0O0E0P2W", acht: "0N5F0R7F0S9R1Q0J", "acht ": "0N5F0R4X0SLC", achta: "0SBK1Q0Y", achte: "0N300R3G", aci\u00F3: "0O4N1A0M", aci\u00F3n: "0O5U", acq: "0L040Q0M0T02", acr: "03020L060M040O030P0Z0Q050T0H1507", act: "030B0L100M110O150P070R070T2G151H", acz: "1A4I", ac\u0103: "154B", "ac\u0103 ": "156X", adala: "0BCV0D0W0U030V0E110G1F021N0L", "adar ": "03060B080O0I0P0G1F7F", adary: "1B5E", adde: "03020M030Q040R0Q0T030Z041003123T1F0A", "adde ": "0Q020R03123S1F02", adece: "0O050P061F43", adh: "03020S830T0D1405", "adh ": "0S8P", adn: "0M040U0N0V0R0Y2D140V1A101C0E1Q03", ados: "0D020O2U0P2S0U070V031B03", "ados ": "0D030O3K0P3E1B061O02", "adre ": "0L020O2Y0P030Q1M", adt: "03070N0B0Z04141M1Q0Q", adus: "150E1C291D0J", ady: "03030D030M0O0U1Y0Y0K1A0H1F051NAV1Q0B", "ady ": "0M170U360Y0Y1A0J1N78", adym: "1N3N", adz: "1A2M1D2P", adz\u0113: "1D2S", ad\u0117: "1B2Q", ad\u0131: "1FB0", "ad\u0131 ": "1F4Q", ad\u0131\u011F\u0131: "1F47", aec: "0T2E", "aec ": "0T32", aed: "0T1T", aeg: "0T161C2M", aep: "0T0H", aeq: "0T0K", aes: "0O070Q0E0T1Q0V081104", aet: "0T1811031205", affe: "0L050M050N0V0Q080R050T0E0Z1F100Z120R1F0A", afis: "04A11A031O08", afise: "04GL", afs: "010803040R040Z0A130L", "ag-": "03060D1H", "ag-a": "0D16", agai: "0B2C0M1B0S1A1B021D0J", "agam ": "0P020SQU0T031417", agasi: "0D020L0H1C4L", "agat ": "0D0C0SE91N14", agaw: "0D1A", agawa: "0D1Q1102", agb: "0D0P10021304", agde: "0D040R050Z20", "agde ": "0R050Z2E", "agen ": "030L0N580O040R3I0Z1F101I1214", "ager ": "03030L140M070N050R080T030Z2R121G", aggi: "03020Q3L", agh: "0D0K0Q060S130Z021QB7", agk: "0D1G", agka: "0D2E", agla: "03020D0W0S0O0V0310021N2H", agom: "100214021P3I", agora: "0P2M", agp: "0D0Z", agpa: "0D1G", ags: "0D190N080R020Z06100I1208130K1403", agsa: "0D16", agt: "010P03060D0W0N1F0R050Z0N100B120B130G1N5L", "agt ": "03060N1V0R0K0Z0V100E120Q130R1N3W", agta: "0D0Z1403", agus: "0306042H0B0X0D040S8J0T041B04", "agus ": "0B1N0SPR0T041B08", agy: "0D0314BH1B051N7A", "agy ": "148V1N2T", agyn: "140M1N3D", agyo: "0D0214CV", agyok: "146P", agyon: "146J", ag\u00F0: "132E", ag\u00F0i: "133N", "ag\xF0i ": "136G", ahan: "04220B2A0D2D111I1C2V1F021N0F", "ahan ": "0B3L0D2W111S1C6X", ahas: "0B4U0D02110C1F02", ahasa: "0B8Q", ahat: "030B0B0F0D1E110C1F0V1N1T", "ahat ": "030P0B0M0D2D110Q1F0I1N1E", ahay: "0B0E0D17", "ahay ": "0D22", ahbe: "1QBA", "ahbe'": "1QHJ", aher: "046C0N03", ahera: "04A4", ahil: "03260D1911021F07", "ahil ": "03360D1K1F04", ahk: "0B1N0Y0B11061C0U1F07", ahn: "0B0L0N0C0U020Y0M1F021Q0F", "aho ": "049M0D0S", ahor: "04110O2A0U02", ahora: "0O2Q", ahr: "0B040N240U0J0Y091F06", aht: "0V05111Y1C1Z1F0H1Q23", "ahu ": "0B510U09", ahun: "0B310T02", ahv: "0O040V06110T1C191F0T1Q74", ahvis: "110C1QEQ", ahw: "03030B0Z1Q0A", aia: "0B090P0H0Q0A1403150K1C0E", aib: "0D0C0L040P050S3I140215061B03", aibh: "0S47", "aibh ": "0SEM", aic: "0O020P020S21152H1D0J", "aici ": "0S4R1553", "aid ": "0M5Q0R0214091C1K", aidh: "0S7V", "aidh ": "0SNP", aie: "01270L2F0R021106150J1B02", "aie ": "014W0L0Q150N", aien: "0L330R06", aient: "0L57", aig: "0D030L0F0M030O020S6F1B1F1C0U1D15", aigh: "0M040S5C", "aigh ": "0SGW", aii: "0D091503", "aik ": "0B3914021B05", aika: "0B12115R14031B2K1D27", aikk: "115X", aikki: "119L", ailan: "0D450O030Q031102", "aile ": "0O020S9P11051F06", "aim ": "0L0C0M020S5I0T03140J", aime: "0L620M02110F1B0B", aina: "0B0C0D020Q0I113S14041B0J1C0G1D0J", aind: "0L040P2J", ainda: "0P32", aine: "0L2F0M0E0N020R030Z021159150C1C0V", ainen: "11B0", ainn: "0B060S4H1102", "ainn ": "0SE2", aio: "0P0X0Q080T0F110I", aip: "110B1B691D0K", "aip ": "1B9J", "air ": "0B150L1A0M0S0P0R0R060SDJ1F0A", aire: "0L9E0M030O0B0R050S4R1B021F07", "aire ": "0LDN0O0D0R060SAY1B041F03", airea: "0S7Z", airt: "0S3P", "airt ": "0SDI", air\u0101k: "1D58", "ais ": "0D060LJN0O0B0PAO0S2R1B4O1D3C", aise: "0L1A0M060N0211551B021C0Y", aisi: "0L0L117K1B0O", aisin: "0L031183", aiso: "0L3D1B02", aison: "0L5O", aiss: "0L3F110A", aist: "0S0Q0V0U113Y1B1L1C111D2C", "ait ": "03020D050LJB0M0H0R050T0Z1108140M1F06", aith: "0M020SDW", "aith ": "0M020SR8", aithe: "0S9H", aiu: "0P0G0Q210T021503", aiut: "0Q38", aix: "0L040P16", aiz: "1B0H1D5U", ai\u0161: "1B1M", ajad: "0O0C14051C0I1D3A", ajadz: "1D88", "ajag ": "1D5L", ajar: "0B360O0Y0P091002", "aje ": "047C0O180U0M0V0Q15051A13", ajn: "0U030V0S0Y0M140I1A071O5I1Q0B", "ajn ": "1O68", "ajo ": "0O2N1O03", ajt: "0V0G0Y32141A1O0I1Q08", "ajte ": "0V180Y3E", ajtra: "0Y34", "aju ": "03080B070U020V3511021A0C", aj\u00ED: "0U330Y05", "aj\xED ": "0U34", aj\u00FA: "0Y3F", "aj\xFA ": "0Y4W1402", aj\u0101: "1D24", "ak-": "03110B0I", akah: "0B680D0E", "akah ": "0BBO", akai: "0B0V0D16111514031B0A", akak: "0B0E0D1E0V031102", akaka: "0D21", akal: "03190B0C0D100U070Y1211031B0C1F0X", "akan ": "03090BQM0D0I100211071F03", akaro: "0D05143C1B09", akat: "03080B0B0D140U0410021106140Q1F0I", akb: "03060D0614041A06", "aken ": "030D0M0B0N020R2X100E120M", akh: "0B0U0U091402", akin: "03020B1A0D2O0M0T111X140H1B191F0G", "akin ": "03020B250D2J114N1F06", aking: "0D210M131B09", akit: "03030B1H0D2L140H1F08", "akit ": "03060B2K0D2I140H1F09", akita: "0D291O02", akke: "010T036D0R1M0Z121102124O1408", "akke ": "0Z0H121I", akken: "03CQ0R0J0Z06120C1408", akker: "010L0R0Q0Z081225", akn: "03090B0C0V03100M13081407", akon: "0D260U0A0V071105140B1B021O0P", akong: "0D3Y", "aks ": "0M070R020Z071002110212061C5H", aksi: "03050B0D0D080V07114E1B071C2Q1F091O06", "aksi ": "03060B0K0D060V0A118P1B0D1F06", aktu: "0B280N020U050Z021004130C14031A041B081O05", "aku ": "03020BMG0U050V081A041D0Q", akuk: "0B4V0D02", akuka: "0B9A", akun: "0302049V0B06110B1404", akund: "04CS", akw: "041B", aky: "0D0A0U090Y0911021B2X1F021N3Y", ak\u0117: "1B1U", ak\u0131: "1F2X", alag: "0D1R14051O02", alaga: "0D29", alah: "0BAL0D08140U", "alah ": "0BH9", alak: "0B0E0D221106142M1B021F041O03", alaki: "0D2I141N", "alam ": "03060BB40D3D0P081N0N", alang: "0B0D0D391B03", alau: "0B28110K1B13", alaw: "0D0U", "alba ": "0T061B57", alb\u0117: "1B3C", alco: "0L060M030O060P020Q3A0R040T02150A", alcos: "0Q35", "alde ": "0D020O030R0E0T2S0Z0610051F04", aldr: "0O040Z1R101Y122I131R", aldri: "0Z23101Y122I130K", aldy: "1B081N3J", ald\u0131: "1F45", "aler ": "0L040N040R020Z2E120H", algo: "0O2E0P151B0Q", "algo ": "0O340P1F1B12", algu: "0O2U0P3S", algum: "0P2P", aling: "03020B270D2B0M040R0A0Z031B101O02", aliqu: "0T2C", alita: "0D1R0T03110F150Y1O02", alit\u00E0: "0Q4S", aliu: "0T0R1B391O04", "aliu ": "1B5Z", ali\u00FDa: "1N40", aljo: "113V", aljon: "118Q", alju: "0B0C0V0B11021C3F1O0H", "alju ": "0B0L11031C7G", "alla ": "03040L040O0F0Q440T03102S11B9131X1A031C1A", "alle ": "010X0L0N0N2W0O0L0Q1H0R1D0Z3Q115H123E1C4L1F02", allt: "0N04103M121N13321402", "allt ": "0N02101T133X", allti: "101Q121N", ally: "0M3I1N12", "ally ": "0M4R", alod: "14031D3Y", alr: "0M0F0O0614061O0A", "als ": "0M0F0N560R690Z031005", altid: "0Z1L", alua: "117G", alun: "0D060P0C0Q0E110K140515041C2N", "alun ": "030311041C6B", alvo: "0O040P040Z06110812071B3M1O08", alvoj: "11021B5M", alw: "03060M0L1Q0M", "aly ": "0M020U0G0Y0B14071N8F", alz: "03020N020O030Q0D1F02", al\u00E1: "0O060P060U070Y0A143W", al\u00E1l: "1458", al\u0103: "152N", al\u0117: "1B28", al\u012B: "1D3G", al\u012Bd: "1D3Y", al\u012Bdz: "1D9T", al\u0131: "1FAI", al\u0131\u015F: "1F4W", amais: "0L4M0P0C1105", "aman ": "032Z0B2G0D2B0L0B0O06111A133C1F5J1N0H1O0B", "amas ": "030D0O0D0P070T061B4Z1O1H", amatu: "0T090U0V11021C73", amh: "03020S8W0U02100613031Q07", "amh ": "0S80", amic: "0L020Q3T0T351504", aming: "0D3C0M05131B", "amit ": "030J0D130N10145F", amos: "0O5I0P5P0Q080T0414061B08", "amos ": "0O6U0P6V0T0314031B0H1O02", "amu ": "0BEP0U060V0411071B02", "amus ": "0B0D0T2N1B0O1Q0E", amw: "042J1A021Q05", am\u0131: "1F4C", "an'": "0M111F0D1Q0F", "an't ": "0M2H", "an-": "03500B0H0D020S1Z1402", anamh: "0SCK", "ance ": "0L4L0M1F0N070O040P0D0Q020R020U090Z091O0A", anch: "0L0W0M030N0J0O0B0P040Q2R0T041Q07", ancor: "0Q32", anc\u00FA: "0Y32", anc\u00FAz: "0Y3T", andag: "011W0R0D0Z0B12041B0C", andat: "030504350L020Q5G0T021508", anden: "0L020N1C0R1P0Z2T100J120E1B2C1O03", "andi ": "030304BB0B0F0L050Q090T0C13721O07", andia: "0B0D0O030Q471A02", "ando ": "0OBE0PBZ0Q870T1Y1B0H1O1X", andt: "0N080R040Z1J", "andt ": "0N030R030Z1T", andy: "0M020N021A041B0M1N8U", andyg: "1N6I", angan: "04530BBC0D4R13111O03", angat: "0B810D021104", "ange ": "0L1Z0M0V0N1Q0R0E0Z5212311O04", angg: "0B2R0D1K1Q0G", angga: "0B2I0D23", angk: "0B310D0N", anje: "04JO0O0H0R080V2Z150I", "anje ": "04RD0R0A0V6H", anjo: "0P031O2G", "anjo ": "0P021O46", anko: "0N030R070U020Z0A1004110T120B14061B0N1O24", anla: "0B0K0D030N040Z0211081F5Z1N1Z", anlar: "1F451N29", anmu: "0B2M1104", annak: "142V", annee: "011Z0R1Z110G", anno: "0L060M0E0QA60T2N1007110I", "anno ": "0QA20T10", anny: "0B6C141U1A05", annya: "0BBU", anob: "1P4F1Q0F", "anob ": "1P3R", anois: "0S8E110J", anong: "0D1Q", "anos ": "0O1T0P2W0T071B051D1R1O02", anp: "0B0J1003110B1Q0M", "ansa ": "030J045R0D0E1007118215061A021F07", anseo: "0S92", ansk: "0V0P0Y0X0Z2S102Q1147123W130H", "ansk ": "0Z241008121E", anska: "101X119U130H", anske: "0Z14100I121Y", anss: "114D", anssa: "118Z", anta\u016D: "1O4N", anted: "0M230Z02", antes: "0L0U0N030O3H0P2M0T0M", "ants ": "0L4D0M1I0R02", antsu: "1C4C", "antu ": "049O0B1T0U031B151O02", anud: "1C36", "anud ": "1C7M", "anut ": "030R1177", "any ": "0M2R0U0514061A241N48", anya: "030704C60BB30D2214151F0E1Q0U", "anya ": "030604IH0BDX0D1C140A1F07", anyak: "0B6O", anyan: "03040D2E1407", anye: "048O1408", "anye ": "04CX", anz: "0306042G0N1J0O0U0Q391F031O02", anza: "030404290O170Q3M1F03", "anza ": "043O0O0L0Q32", an\u00E7: "0L0V0P2B1F091N0R", an\u00E7a: "0L1F0P2K1N0G", an\u0101: "1D2B", an\u011D: "1O2C", an\u0131: "1FAY", aoi: "0S7J", aoin: "0S3G", aon: "0D0M0P050S5D0T0B1O02", "aon ": "0D0J0S491O02", apag: "0D0Y0O090P061503", apak: "0B580D0R", apaka: "0B9S0D16", "apat ": "0B5H0D2914041F02", aph: "0L050M030T0J14041N091Q07", "api ": "0B2E11021309140C1O02", apie: "0L090N060R080T0R0Y0A1A0D1B3Z", "apie ": "1A061B7Y", apk: "0B0914031A041B0A1F08", apm: "1B051D0X1F6B1N0E1Q04", apma: "1B021F6Y1N0J", apt\u0131: "1F3M", ap\u00FC: "1P61", ap\u00FCk: "1P7J", ap\u00FCki: "1P6W", "aq ": "030U1QJ0", aqu: "03090L100O2R0P5A0T261Q0N", aqui: "0L030O030P4C0T0E", "aqui ": "0P4I", aqu\u00ED: "0O2V", "aqu\xED ": "0O3Q", "ar-": "030V0B0J0P0L", arada: "0D020O080P051B0B1F061N4P", "aram ": "030A0B090P370T060V0H1A031D211F08", arami: "0D2L", arand: "0O050P060Q080T02101N1B03", arang: "042Z0B5C0D1I1402", araw: "03020D1H", "araw ": "03020D1Y", arbei: "0N3R0R04121N", arbej: "0Z2S", arbet: "101Q", ardy: "1N4M", ardz: "1A42", ardzo: "1A5C", ard\u0131: "1F6R", ard\u0131m: "1F4U", arec: "0O2I0P2C0Q04150A", arf\u00F6: "102I", arf\u00F6r: "102I", arij: "0R090V1T1B591D50", arija: "0V2V1B7X1DAW", "arlo ": "0O140Q2N", armas: "0O040P04110Y1C6H1O05", "arna ": "0B1G0R080V06101V120J131D1405150R1A04", "arom ": "010S0R4D141A", "aron ": "0O3M0T0A110214031O1M", "arr ": "0S3R1005", arrai: "0SBR", arriv: "0L4B0M0H0Q1J0R02", arus: "030N04150B4L0T0D11041A041B091F021O05", "arus ": "0B7H0T0E1B0I1F021O09", "ary'": "0M0H0R041F71", "ary'n": "1F5B", "ary'y": "1F41", aryn: "110N14071NBB", "aryn ": "111M1N6R", aryny: "1N7Q", aryt: "140A1B4B", aryti: "1B7F", ar\u00E0: "0Q10", ar\u00E1: "0O1M0P150S0T0U0G0Y0K141S", ar\u00E9: "0L0B0O120U061402", ar\u00ED: "0O2D0P030S0I0Y0I130I1405", ar\u00EDa: "0O3E0P02", "ar\xEDa ": "0O40", ar\u00F0: "1326", ar\u00F2: "0Q0O", ar\u0103: "152W", ar\u0113: "1D2Z", ar\u0113tu: "1D5L", ar\u0117: "1B1E", ar\u012B: "0T0D1D8A", ar\u012Bt: "1D4H", "ar\u012Bt ": "1D9H", ar\u0131: "1FFI", "ar\u0131 ": "1F64", ar\u0131n: "1F7O", "ar\u0131n ": "1F4Y", ar\u0131n\u0131: "1F3X", "as-": "033X0B030L1B0P031502", asaky: "0D0S1B51", asal: "0B1N0D0T0P03110314031F06", aseg: "03AH0O07", asegz: "03JT", asha: "04HB0M0214021Q0C", "asha ": "04AL", ashak: "04FU", asho: "04E1", ashob: "04LK", "asid ": "1C4C", "asie ": "011J0L020N030R020Y0F1A0T", asih: "03040B32", "asih ": "0B5L", "asin ": "030F0D090L0E112S1C6K", asj: "0B03120Y1C0S1Q08", asjo: "1226", asjon: "1226", "asn't": "0M2G", "ass ": "031K0M0O0N7Y100A120L140A1C18", "assa ": "03030L050P0B0Q090R020T02100711GI130B1407", asseb: "012K", "asti ": "0B1B0Q040T080U030V0O0Y0A11AU130E1B1V1C2J1D1I1O02", ast\u0103: "155I", "ast\u0103 ": "1559", asyo: "0D0U1F0K", asz: "143L1A4M", "asz ": "140Y1A3S", aszt: "143X", as\u00ED: "0O0X0U0E0Y0B13031404", as\u0103: "154B", "as\u0103 ": "156H", as\u0131: "1FAT", "as\u0131 ": "1F3X", as\u0131n: "1F5T", "at'": "0M10", "at's ": "0M2C", atang: "0B5B0D19", "atas ": "03040B3B0D0J0O0D0P090T051B0S1C1Z1O40", atay: "03080D131F05", "atay ": "030C0D1K", atc: "0L030M0J0U0310051A021D0U", atd: "1N2O", atege: "048W", "aten ": "030K0M080N1G0R5T0Z04100C1104120M1F10", "ater ": "011W0L060M190N1K0P040R230T4T0Z0F10051213", atha: "0S3P0T0311051406", athai: "0SBK", atie: "0L0I0M060N060O040R1B0T030Z04100211041B051D3Q", aties: "0R071B051D7E", "atin ": "030Z0D280L1B0M020Z0210021108120F14021F02", ating: "0D280M110P060R0215091B0I1O0V", atink: "1B5B", atk: "0B0Z0U0K0V0A0Y191130140D1A0S1B061D1I1F03", atlh: "1QNN", "atlh ": "1QNO", atq: "0T0Q", atsi: "041K0D0211051B4D1C1B1F03", "att ": "03020N0C10LI124013181426", atto: "0M020Q4R0T03110U1404", "atto ": "0Q401107", atud: "1C28", "atud ": "1C5F", "atur ": "0B0F0N0I0T2Z0Z0710021204130C", atus: "03020B080T4J110C1B0B1C1F1O0H", "atus ": "0B0E0T4P110M1B0K1C131O0Y", atv: "0V0F0Y0D130514041B1J1D22", aty: "0U050Y07110214031A141B1L1N50", "aty ": "0U070Y0B1A0O1N3V", at\u00E1: "0P020S3Z0U040Y0N1411", "at\xE1 ": "0S4R0U040Y10", at\u00E9: "0L060O030P1D0U041406", at\u0103: "157T", "at\u0103 ": "15B5", at\u0117: "1B1W", at\u012B: "1D4B", at\u012Bk: "1D3H", "at\u012Bk ": "1D88", at\u0131: "1F4F", aua: "0B02110H15081C17", aub: "0D020L020N131B051D0O", auc: "0L2F0N1M0T0F1A0X1D1X", auch: "0L0D0N3Y", audz: "1D5M", "audz ": "1D8W", aue: "0N0R1102", auf: "0L080N4R0T040Z0210021A04", "auf ": "0L050N79", "aug ": "13061B46", augi: "1B2Z1D0S", auh: "0B0E0D02110Q", auj: "0L0V0Y0P1B2G1D0V", auk: "0B050V04111P13091A0A1B591D2V", auki: "110F1A031B2T", "aus ": "0B060N520P050R070T03110Q130J1B1X", ausi: "0T0711091B64", ausia: "11051B6G", autre: "0L4G", aux: "0L2C0T07", "aux ": "0L3V", avad: "0O030P0314031B041C3E1F03", "avad ": "1C7S", avai: "0L6Q0M02110Q14061B1F", avail: "0L4S0M03", avas: "0P03111A140P1B081D171F021O4X", "avas ": "0P041B031D2T1O9G", avd: "0U1X0V050Y1M0Z1210041F021Q0M", avde: "0V050Y0N0Z2W1004", "avde ": "0V0E0Z3I", "avdu ": "0U2V0Y1R", avec: "0L5P1O02", "avec ": "0L9E0U02", avet: "0Q390T030V090Z0X10051102120B1F0C", avete: "0Q3A0T03", avez: "0L3L0V06", avit: "0Q020T580U0W0V0J14021O02", "avit ": "0T520U17", avn: "0U0G0V1B0Y0N0Z0M1002120E1Q0B", "avo ": "0O050P070Q290T050V0W0Y081BEF1O08", avoir: "0L4V", "avor ": "0M030N040O2N0P24", avr: "0L020P0U0Q130U060V0N0Y0E10031F0X", "avu ": "0U0E0V0R0Y191D3Q1O04", avv: "0Q1I12021Q04", avy: "0302043E0M020U060Y0A1B0M", av\u00ED: "0O0S0P020U0P0Y0O1408", "aw ": "031G0D1W0M0K1A0A1N0C1Q1G", "aw'": "1QA0", "aw' ": "1QD5", awal: "03CQ0B0K0D0J1A03", "awal ": "03M60B0U0D05", awan: "030R0B0U0D141A06", awe: "0109034Y045M1A0K", "awe ": "04FF1A05", awi: "031W0B020D0U1A431Q05", awin: "030P0D1A", "awin ": "030X0D2C", awstr: "0D021N43", "ay'": "0M021F021Q7Q", "ay' ": "1QB4", "ay-": "030H0D08", "aya ": "034I041O0BHS0D1D0L030M040O0W1F65", ayaca: "1F3W", ayan: "03030B130D1D0L050O031F0X", aye: "037904400L0N0M0C0O0S1F0T1Q04", "aye ": "04B70L051F05", ayo: "041O0B080D310L060O0Q", "ayo ": "044J0B0C0D2X0O05", ayon: "0D2B0L0A", "ayon ": "0D1Z0L06", ayong: "0D2B", ayr: "030K0D081F19", ays: "030I0B030D0C0L0N0M1G1105", "ays ": "0L0Z0M2N", ay\u0131: "1F7M", "ay\u0131 ": "1F4R", "aza ": "04DY0O0E140Z150F1F09", azer: "03030P5K0Q040Y0K1F03", "azer ": "0P6V", "azi ": "04JB0V0V140G150V1O03", azio: "0P030Q7N0V041O03", azion: "0Q7L", azt: "0304143D", "azt ": "0304147H", az\u00F3: "0O0N14031A02", az\u0103: "152X", az\u0131: "1F2Q", a\u00DF: "0N0B", a\u00E7: "0L020P1F1F2A1N2Q", a\u00E7a: "0L020P181F0B1N2O", a\u00E7o: "0L080P0U", a\u00E7\u00E3: "0P3F", a\u00E7\u00E3o: "0P3W", "a\xE7\xE3o ": "0P4W", a\u00E9: "1402", a\u00ED: "0O0A0P0C0S371303", "a\xED ": "0P0D0S53", a\u00EDo: "0S38", a\u00EDonn: "0S9A", a\u00EDs: "0O0O0P0S", a\u00EE: "0L0B", a\u00EEt: "0L1C", a\u00F0: "13M2", "a\xF0 ": "13SG", a\u00F0i: "134H", "a\xF0i ": "135I", a\u00F0u: "133H", a\u00F0ur: "1342", "a\xF0ur ": "1373", a\u00F1: "0O1M1N2C", a\u00F1a: "0O2A1N2K", "a\xF1a ": "0O0U1N3K", a\u00F1o: "0O2O", "a\xF1os ": "0O2Q", a\u00FA: "0O050P02", a\u00FD: "1NDQ", a\u00FDa: "1N8C", a\u00FDar: "1N68", a\u00FDd: "1N4M", a\u00FDdy: "1N3I", a\u00FDt: "1N8N", a\u00FDtd: "1N7U", a\u00FDtdy: "1NAI", a\u00FDtma: "1N4B", a\u00FDy: "1N35", a\u0107: "0V0O1A4M", "a\u0107 ": "1A99", a\u0109: "1O0S", a\u0109e: "1O0P", a\u010D: "030B0U160V1O0Y1T1B0P1D03", a\u010Di: "03060U040V1F0Y0B1B1U", a\u010Dk: "0U0B0V130Y1Q", a\u0117: "1B07", a\u011D: "1O19", a\u011Do: "1O11", a\u011F: "1F4L", a\u011F\u0131: "1F7N", a\u011F\u0131n: "1F3D", a\u0135: "1O1B", a\u0135o: "1O27", a\u013C: "1D0S", a\u013E: "0Y0G", a\u0142: "1ABO", "a\u0142 ": "1A8S", a\u0142a: "1A4V", "a\u0142a ": "1A4R", a\u0142e: "1A6L", a\u0142em: "1A6U", "a\u0142em ": "1AAL", a\u0148: "0U070Y0H1N3C", a\u0148a: "0Y0D1N4B", "a\u0148a ": "1N60", a\u0159: "0U0L", a\u015D: "1O0B", a\u015F: "15081F621N7B", a\u015Fa: "15061F2Y1N4Y", a\u015Fl: "1F391N27", a\u015Fy: "1N2O", a\u015F\u0131: "1F5T", a\u0161: "0U1C0V3H0Y211BCN1D0T", "a\u0161 ": "0V520Y0V1BO6", a\u0161a: "0V0T0Y0J1B1Q1D0K", a\u0163: "1509", a\u0165: "0U080Y4Z", "a\u0165 ": "0U0F0YBV", a\u016D: "1O6H", "a\u016D ": "1O6N", a\u016Dd: "1O0S", a\u016Dt: "1O11", a\u017C: "1A1X", a\u017E: "0U1O0V1N0Y1K1B2U1D0D1N04", a\u017Ed: "0U1G0Y1S1B02", "a\u017Ed\xFD ": "0U1R0Y2R", a\u017Ei: "0U0B0V140Y0B1B2X", a\u0219: "1523", a\u021B: "1520", a\u021Bi: "155O", a\u0263: "036L", "a\u0263 ": "036K", a\u0263e: "03B7", a\u0263ef: "034W", "a\u0263ef ": "03AK", a\u1E0D: "031F", a\u1E6D: "0319", "b'": "1Q08", "b-": "030D1P0C", baa: "010M0R0E1105", baba: "030W046P0D1L0O0214051F1M", "back ": "0M26", bae: "0D0C0T04", bago: "0D0T", baha: "0B5N0D1E14081F091N0O", bahas: "0B8S", bahay: "0B0K0D22", baho: "0D0U", "bai ": "14021B6X1D0M", baie: "014T150A", "baie ": "0154150C", baik: "0B401B08", "baik ": "0B5L1B0A", bair: "0P030S3T", "bair ": "0SBK", baj: "041A0B060O2V0V040Y0E140E15021A051O02", bajo: "0O2H1406", "bajo ": "0O35", baki: "041R0D0X13061O02", bakit: "0D1P", balh: "0P2P", "bam ": "0P020T310V0414031F0I1Q06", "bana ": "044X0O021F76", "bang ": "010P0B1X0D3I0R121Q0I", bantu: "049C0B300T0F", bany: "04320B3C0D021F05", banya: "03030B6H", barad: "1N4D", bard: "0L020O041A3Z1F0B1N1V", bardz: "1A6A", "bare ": "0N050Q020R0C0Z131002122H150W", barn: "0N040Z111025122413141406", bar\u00E1t: "1437", baw: "0303040D0B0O0D0B1A0N", baza: "04900V0215061O04", "baza ": "04F315071O02", ba\u015F: "1F5F1N45", "bb ": "100H1207144H", bba: "030F0Q0Q100K1309141I", "bban ": "0303142U", bbe: "030C0M040Q2Q0R1K0Z04100J120T14161Q0R", "bbe ": "0Q3R1002120I1407", bben: "03020R5P0Z021003120H141S", "bben ": "03040R7L0Z021003120H141T", bbi: "03120M020Q3C1002130E140F", bbia: "0Q4Z", bbiam: "0Q3E", bbl: "03020Q0C1002", bbr: "03040Q0K1406", "be'": "1QNR", "be' ": "1QRD", beau: "0L3D0M0G150B", beauc: "0L46", beds: "0Z16", been: "0M2G0N030R06", "been ": "0M3C0R07", bef: "0M0J0N090Z0510061204140C", begy: "0Z15121F1402", begyn: "0Z1E121F", beh: "010I0M080N090Q020R070Y0F0Z0B102D120914031Q0D", beh\u00F6: "102V", beh\u00F6v: "102V", beid: "0N0K0R0C0S1R121M1D17", bejd: "0Z2A", bejde: "0Z2K", belu: "0B2J0V021505", "bem ": "03030P2V0T0N0U021A02", bena: "0B3E0N03", benar: "0B6H", beni: "0Q030R020T070V021F6U", "beni ": "1F3T", benim: "0N021F5S", "bent ": "030D0L020R3K0T0T0Z0514091B0H", beo: "0T11", "bera ": "04IX0Q050T05130H1O09", berap: "0B6H", "bere ": "04AA0Q0F0T1M0U050Z04150C1F021O02", berh: "0B2F0N0D", beste: "010L0N1R0R190Z08121L", besz: "1466", besz\u00E9: "1468", beu: "010A0L030N030P080R0D0T021002", bew: "01090N0E0R0A", bg: "03030N05", bh: "0N020SDY0T031Q07", "bh ": "0S7D", bha: "0SA41Q0N", bhai: "0S6Y", bhail: "0S8E", bhair: "0SE9", bhar: "0S4J", "bhar ": "0SCR", bhe: "0S4B", bhei: "0S2Y", bheit: "0S7Z", bhf: "0SC3", bhfu: "0SBV", bhfui: "0SSF", bhr: "0S31", bhu: "0S1L", bh\u00ED: "0S5T", "bh\xED ": "0S6B", biam: "0P020Q3F1A08", biamo: "0Q3E", bica: "0B2C0O020Q040T0O0V031403", "bie ": "0R021A3U", bien: "0L5A0N030O320P030Q020Z021A0C1O02", "bien ": "0L7V0O3E", bih: "040V0B2B0D0E0V1K1Q1M", "bih ": "0B4D0V1W1Q1N", bij: "040D0B020R170U040V0P1A061B0O1D961Q17", "bij ": "0R2Y1Q07", bija: "0V071A041B0E1D931Q1F", "bija ": "0V081A021DK6", "bik ": "14031P8W", biko: "046F", bikor: "04AA", "bila ": "03160B0E0D030U0J0V4Y0Y191O02", bilen: "0Z0M100N120Y1F091NI9", biler: "0Z071F031N5Y", bilir: "1F8E", biliy: "1F5B", bilm: "0Q0H1F3D1N7G", bilme: "0Q0I1F1V1N9Z", "bilo ": "0D020U0A0V5L1O04", bil\u00FD: "1N6Q", bil\u00FD\u00E4: "1N8S", "bine ": "0Q020T0315571F03", bino: "0Q0D1B0F1O0H1PSG", binob: "1P92", binof: "1P5H", binol: "1P6C", binom: "1PLB", binon: "1O041PA0", binos: "1P4I", "bio ": "0O0C0P040Q060T030V4Q10041O02", "bir ": "03030B060O0M0P031FP91N8K1Q0U", bira: "030204F91F2E1N1G1Q0G", biri: "049J1F3A1N2X", "biri ": "030304D21F1J1N1U", bisa: "04220B8D0D021Q0I", "bisa ": "04220BDQ0D02", bita: "044G0D070L050O0X0P060Q0L0T30100315041O051Q0A", "bith ": "0S8M", biv: "04150V031Q0K", biy: "040I0D041F0D1Q0E", "biz ": "03021F2M1N5K", bi\u00E9: "0O0Q", bi\u0165: "0Y27", "bi\u0165 ": "0Y3S", bk: "0B020U020Y031A0C1D04", "ble ": "0D040L5G0M340O2T0Z0J123F1O1D", blev: "0R070Z41101Q", "blev ": "0Z3V101Q", "bli ": "0L0210181225", blie: "012E0L0L0N0B0R20", blief: "012I0R2I", blir: "100W1229", "blir ": "0L02100W1229", bliv: "0T090Z2O100F", blive: "0Z33", bly: "01190M0G0Z03100512021B02", "bly ": "012K0M0U", bl\u00E5: "0Z06100B1208", bne: "0V020Y0D0Z091A071Q04", boa: "0M050P0R15071O02", boe: "01160R0T0Z081203", boek: "012A0R2M", "boek ": "011R0R2H", bof: "1P1E", "bog ": "0D030V130Z1A", bogh: "0Z021QEH", "bogh ": "1QJJ", "bola ": "0B0J0D030O020P070Q020Y43", "boli ": "0V0D0Y2T1A0C", bolm: "1F021N59", bolma: "1F021N75", "bolo ": "0O020P0F0Q020Y351B0A1O02", bolsa: "0O070P071N3W", bolu: "0T021D0K1F031N3K", bona: "049D0Q020T0X1O2F", "bona ": "04E00T0N1O2O", "bor ": "0M020O040P020T0M0U030V030Z1D1013121H1407", "bora ": "04S60P0O0V08", borde: "0L050M030O030R020Z0T101S120Q", bout: "0L0Q0M39", "bout ": "0L0K0M4F", bp: "0S091Q0A", brug: "0R050Z2O", "brug ": "0R060Z1S", bruk: "100I121K", bry: "0Z0A100F12091A0P", br\u00F8: "0Z0A1209", br\u012B: "1D2B", "bs ": "03020M040T091D1L1P8O", "bt ": "030U0M040N1O0R0L0Z0H100A", bte: "0L050N090O030P030T030Y050Z0G1O04", "bte ": "0N0D0Z16", bua: "0B320S13", buah: "0B2U", "buah ": "0B5B", buat: "0B2S", bub: "0309040I0D05", bude: "0U4Y0V1X0Y6I", "bude ": "0U4J0V2B0Y3G", budem: "0U0T0V1S0Y2V", bue: "0L020O250T02", buen: "0O2S", buh: "040L0B080D0K", bui: "010E0M080P020Q050R0C0T0E156L", buie: "156U", "buie ": "158N", buj: "040G0B030O050U1V0Y1Z1A12", buje: "0U1L0Y391A0Q", buka: "042H0B3E0D0R0V05", buku: "0B2Q0V04", bunu: "0B0I1F7R", "bunu ": "1F8E", buo: "0D070Q101B0H", bura: "043D0B070P0315061F46", burad: "1F4D", "but ": "030K0B170L0D0M2B", buv: "0L031B6J", buvo: "1B8T", "buvo ": "1BG0", buw: "0D06", buy: "040M0M0H1F031Q03", bv: "0T020U070Y021Q03", bw: "042T0N031Q04", bwa: "043K", "bwa ": "047V", bwi: "045G1Q0E", bwir: "04CY", bwiri: "04HB", bwo: "041A0N02", byc: "0U3L1A03", bych: "0U5S", "bych ": "0U6U", bye: "0D020Z0A120G", byg: "0Z07100D1209130D", byl: "0L070M060U7D0Z041A0G", "byl ": "0U6I", byla: "0U2E", "byla ": "0U3C", "bylo ": "0U33", bys: "0U1Y1305", by\u0142: "1A5X", by\u0165: "0Y1T", "by\u0165 ": "0Y33", bz: "0N020V02", b\u00E1: "0S0I0U0F0Y0M1304142B", b\u00E4: "0N050Y03100J1N1I1P0O", b\u00E5: "0Z0510081204", b\u00E6: "0Z051203130L", b\u00E9: "0L070O070P090S0J140Q", b\u00E9m: "0P10", b\u00EA: "0P02", b\u00ED: "0O0M0S0B0U120Y0M130W140I", b\u00EDa: "0O1U", "b\xEDa ": "0O2F", b\u00F3: "0O03130U140V1A08", b\u00F3l: "141K1A05", "b\xF3l ": "143W1A05", b\u00F6: "0N02100M130C14081F0F1N091P1C", b\u00F6n: "1P1E", b\u00F6r: "1017130M1404", b\u00F8: "0Z0Q120K", b\u00F8g: "0Z0A", b\u00F8k: "120B", b\u00F8r: "0Z0N120G", b\u00F8rn: "0Z1C", b\u00FA: "0O030Y0513131405", b\u00FC: "0N0914061F1I1N0F1P0J", b\u00FD: "0U150Y0E130A", "b\xFDt ": "0U2N", b\u0101: "1D10", b\u0103: "150Y", b\u0105: "1A0J1B0G", b\u0113: "0T051D0R", b\u0117: "1B1Q", b\u0117t: "1B1F", b\u0119: "1A1D1B05", b\u0119dzi: "1A49", b\u011B: "0U14", b\u012B: "0T021D08", b\u0131: "1F17", b\u014D: "0T02", b\u0151: "140N", b\u0159: "0U0I", b\u016B: "1B1J1D1L", b\u016Bt: "1B2F1D4V", "b\u016Bt ": "1B0S1D3H", "b\u016Btu ": "1D58", b\u0173: "1B05", b\u0263: "032H", "c'": "040B0L150Q0F", "c'e": "0L530Q0B", "c'es": "0L8C", "c'est": "0LDF", "c'\xE8": "0Q1D", "c-": "0305", cac: "03080L0D0O0O0P0T0Q090T031A04", "cad ": "0S3E", cae: "0O060T1R", caf: "03030L0E0O0G0P0L0Q0F0T02150M", cai: "0L0A0P0U0Q030S6X0T021505", caith: "0S8M", cak: "0B050M031F51", "cak ": "0B041F4E", "cam ": "0B0B0P080T3Q150H1A031F06", "can ": "0M3Q0O0815071F0D1O0G", "can't": "0M2H", cane: "04B70P070Q100T1Z", "cane ": "04I90Q0Y0T04", "car ": "03020B0H0L0H0M120O1C0P2Q0Q020T0315151F03", "cara ": "0B700O0M0P0N0Q020T04", care: "03040L020M130O030P080Q2A0T0Q15A91F02", "care ": "0M0O0Q2A0T0H15CA", casa: "0O3W0P4F0Q3B1515", "casa ": "0O440P4C0Q3C151F", "cat ": "0B0C0L060M090S130T121402155G1F02", cau: "0L0E0M0M0O0B0P0I0Q070T0S1515", cav: "0L020O020P0J0Q0F0T0Z", cay: "0302040D0B0J0O081F0A", ca\u011F: "1F5F", ca\u011F\u0131: "1F66", ca\u011F\u0131m: "1F3T", ca\u011F\u0131n: "1F3S", cca: "030I0L060Q1B0T0H", cce: "030N0L0C0M0C0O030Q1K0R030T160Z0310051408150Q", cch: "0Q330T06", cchi: "0Q41", cco: "0L0P0M070Q2F0T05", ccu: "03050L0T0M050Q190T0P", cea: "0L040M020O020P040S5T0T0E15631A02", cear: "0S3L150E", ceart: "0SC51505", ceas: "155X", ceast: "156O", cei: "0L030M050O020P0U0S0P0T051517", cek: "030A0B021F45", "cek ": "03051F3G", "cela ": "0L490U0H0Y0S150I", "cem ": "03090P0K0T270U0C0V040Y4M150Y1A0D1P0R", "cer ": "03020L0S0M070O3R0P1I0T050Z041002150O1A04", "cere ": "0Q1P0T4F151R1F021O03", "ces ": "0L370M0Q0O2W0P090R070T130Z05140615081A05", cesi: "0O280Q030T0515061F071O0H", cesit: "0O2P1505", cest: "0O030P030Q020U170Y1L1579", "cest ": "155E", "cet ": "0L170T3S0U0J140B150I1A02", cett: "0L4P0Q0M", cette: "0L7T0Q02", ceu: "0L0D0P1G0T021504", cev: "0L040Q0S151Z1F0Q1O0C", ce\u011F: "1F54", ce\u011Fi: "1F5T", ce\u011Fim: "1F3T", chai: "03020L150M060S5G", chc: "0U4L0Y7P1A4Y1Q0E", chce: "0U440YC91A2F", "chce ": "0U2T0Y2E1A1R", chcel: "0Y3U", chcem: "0U0F0Y681A0A", chci: "0U3H1A2X", "chci ": "0U4T", chcia: "1A4F", chea: "0M060Q080S50150C", chean: "0SB5", cher: "0L310M0M0N2Z0O030P020Q0R0R0H0T0S1Q0H", "chi ": "0L030Q410T03150N", chia: "0Q4O0T04152D", chie: "0L1C0M040N140Q330R181508", chn: "0L030M020N0W0U2R1A0K1Q04", "cho ": "0O5F0P2C0T040U050Y0H1A05", chod: "0U2G0Y2V1A3J", chodz: "1A3S", choh: "1QBG", chomh: "0S92", chos: "0L3B0M030N040O1I0P021Q0M", chose: "0L5K0M04", chs: "0N17", "cht ": "0NLX0R9D0S86", chta: "0S491Q1E", "chta ": "0S8M", chte: "0N700R4X0U05", "chte ": "0N6G0R150U07", chten: "0N2C0R33", cht\u011B: "0U32", cht\u011Bl: "0U3S", "chu'": "1QB2", "chu' ": "1QC8", chugh: "1QBL", chui: "0R030S3A", chun: "0N0D0S471A041Q0S", "chun ": "0SFI1Q0X", ch\u00E9: "0L120O030Q3K0S1G0U040Y07", "ch\xE9 ": "0L170O040Q5N0U060Y0B", ch\u00F3: "0O070S1N1A0S", cias: "0O180P0G0Q020T0A1A0C1O2H", "cias ": "0O1L0P0K0T0B1O4V", cib: "0O0E0Q0C0T0Q", "cie ": "0L0E0O050P060Q030T050U0B0Y0R15051A6B1O02", cii: "0T060U040Y05150I1O0V", cij: "0R020V1Q1B0X1D2L", cik: "030M0V0A140D1B021D2M1F031O08", "cik ": "1D36", cilv: "1D66", cilv\u0113: "1DEN", cio: "0M050O3Y0P2Q0Q1T0T1O0V0B152E1A0E1B021O19", "cio ": "0O1K0P0T0Q1P0T2U0V02150P1O16", cion: "0O3Q0P1W0Q0R0T030V0914021B031O0H", "cit ": "03080L020T5M0U071403151B", ciz: "040G0Q0F0U091402150B1F021O05", ci\u00F2: "0Q0T", ci\u00F3: "0O59140D1A0G", ci\u00F3n: "0O75", "ci\xF3n ": "0O98", cj: "1A1M", cka: "03030U020Y07103C1A04", "cka ": "03030U040Y0C10211A06", cker: "0M040N0E104W", "cker ": "0M030N0F104J", cket: "0L030M0D0R03103V", "cket ": "0L040M0D0R03103V", ckl: "0M060N0D100Z", clo: "0L050M0K0O020P020T031502", cm: "03030T021502", cob: "0B0P0O050P0N0T0G1504", cog: "0M030O0G0Q050T0Y", coi: "0L070O020P230Q040S28", cois: "0P2F", coisa: "0P32", cok: "0B080U0314031A04", come: "0M230O2S0P3V0Q4D0T0M150A", "come ": "0M2H0O0C0P0A0Q4F", comm: "0L7L0M0N0Q0N0R080T1A", comme: "0LB50M080Q0K0R020T09", como: "0O4F0P4V0Q031504", "como ": "0O5P0P5X", comp: "0L4C0M1F0N060O4T0P4K0Q580R0L0T1F0Z0K152W", compr: "0L2R0M020O3A0P390Q2L0T04", "con ": "0B040L040O9T0Q8L0T0214051O1H", conhe: "0P2R", cono: "0L0A0M080O2B0P0D0Q3H0R04150E", conos: "0P0B0Q2O", cons: "0L2D0M0Q0O2P0P410Q1C0R050T3M151Q", conse: "0L120M040O190P2M0Q0B0R020T0F1508", cont: "0L460M0T0O580P790Q490R0K0T1M152N", contr: "0L420M0F0O3T0P3U0Q210R0D0T0S150U", cop: "0L0B0M040O070P0B0Q0N0T080U03152B", cora: "0L020M020O0K0P0Q0Q3J0T0L15041A07", "cora ": "0Q320T04", cosa: "0O1M0Q7D", "cosa ": "0O0R0Q7G", cost: "0L030M080O0W0P0Y0QCH0T02150N", costr: "0QBX", cos\u00EC: "0Q35", "cos\xEC ": "0Q36", coul: "0L0I0M2S1503", could: "0M3T", coup: "0L3N0M06", "coup ": "0L4Y", cq: "0Q060T02", cqu: "0L040Q0M0T05", cred: "0M040P100Q1I0T1H156H", "cred ": "155G", cri: "03030L1M0M0C0O1S0P2E0Q1O0R020T2H152R", cro: "0L1L0M0B0O040P070Q0A0T071506", cru: "0L070M030O0B0P080Q030T0J151S", cr\u00ED: "0O040P060S2K", cr\u00EDo: "0S2Y", cr\u00EDob: "0S8U", cs: "0L020M02149B", "cs ": "0L0C0M05142A", csa: "144X", csak: "148Q", "csak ": "1492", csi: "143U", csin: "1456", csin\u00E1: "1457", cso: "1427", "ct ": "030Z0L090M0X0R080U18151C", cta: "03020L050M030O0R0P040T2N150J", cte: "0L0Z0M0G0O050P030R050T0W150S", cto: "0L050M0F0O1N0P050T1G150V", ctu: "03090L0G0M0F0O0H0T39150O", ctus: "0T2P", "ctus ": "0T2T", cua: "0B0A0O3S0T021502", cuan: "0O3S", cuand: "0O4C", cub: "0O0F0P020Q020T0P", cuc: "03080B080O0T0Q0F0T05", cue: "0L060O2Z0T02", cug: "0Q0C", cui: "0L0I0O0I0P0S0Q0M0S190T1B151H", cuk: "03050B0J0U040Y0714061A051B051D0G1F1U", culu: "0T2O150D1F06", culum: "0T2C", "cum ": "0TB3156Z", cuo: "0Q1G", cup: "0L0M0M040O0X0P130Q150T0G150Z", "cur ": "03020T37150D", "cus ": "0M020R040T3W", cut: "0L0B0M080O070P0K0Q040T18155V1F04", "cut ": "0M080T0L15751F03", cu\u00E1: "0O20", cu\u00E1n: "0O26", cyk: "0Y040Z0F100A1A02", cz: "1AFV", cza: "1A3Q", cze: "1A7H", czego: "1A46", czn: "1A30", czy: "1ACZ", "czy ": "1A92", c\u00E1: "0O080P020S151409", "c\xE1 ": "0O050P030S2F", c\u00E2: "0P02152M", c\u00E2n: "0P041548", "c\xE2nd ": "156G", c\u00E2t: "154F", "c\xE2t ": "155I", c\u00E3: "0P02", c\u00E6: "0T06", c\u00E8: "0L02", c\u00E9: "0L090O0B0P040S2D0Y06140B", "c\xE9 ": "0L0I0O030S26", c\u00E9a: "0L020O020S1Z", c\u00E9n: "0O020S2W", "c\xE9n ": "0S3I", c\u00E9s: "0L030O0R", c\u00EA: "0P4R", "c\xEA ": "0PFB", c\u00EAs: "0P3W", "c\xEAs ": "0P4P", c\u00ED: "0O0F0P030U100Y0E1403", c\u00EDa: "0O11", c\u00F2: "0Q02", c\u00F3: "0O0N0P030S0Y14021A0B", c\u00F3m: "0O1I", c\u00F3mo: "0O28", "c\xF3mo ": "0O2Q", c\u00F4: "0L03", c\u00FA: "0S0G0Y0R", c\u00FAz: "0Y1S", c\u00FAzsk: "0Y2T", c\u00FC: "1F0G", c\u0101: "0T041D0F", c\u0103: "157G", "c\u0103 ": "15JZ", c\u0113: "0T051D0E", c\u0119: "1A11", c\u012B: "0T051D11", c\u0131: "1F1L", c\u014D: "0T05", c\u0153: "0L020T03", c\u016B: "0T091B0E", c\u021B: "150D", "d'a": "0L3F0Q0J0S191Q05", "d'e": "0L1C0Q031Q0E", "d'h": "0L18", "d'u": "0L1V", "d'un": "0L31", "d'v": "0M0B", "d-a\u0263e": "039B", "d-s": "0364", "d-s\u0263": "035B", "d-s\u0263e": "03AE", "d-t": "03BM", "d-te": "035B", "d-y": "0352", daa: "013G0B080D080R1J11071402", daar: "016M0R2O", "daar ": "013L0R2E", daba: "04390O090T041B2V1Q07", dabar: "1B5U", "dac\u0103 ": "155E", "dad ": "03020D0O0M040O6Q10081C0E", dade: "0O0Z0P630R03100S1C0H", "dade ": "0P6L100N", dae: "01080B040T0I", "dag ": "013H0D040R2Y0Z3Y103M123R1323140E", dage: "0N040R0S0Z1P100V121S", dagi: "0302041R0B07130X1B021C3Z", "dagi ": "030404221C9G", dah: "040G0B3M0D0O0N030V031F5L1Q5C", "dah ": "0B6G1Q56", daha: "0D0A1F6A1Q0R", "daha ": "1F8C", dahi: "0D0X0N041F04", dahil: "0D1O1F04", daj: "0U090V1D0Y191A1F1O0L1QA6", "daj ": "0V0P0Y101A0O1O0O1QD5", "dak ": "03020BJV0R030V031F06", daku: "046F0B0W", "dala ": "0D0B0U0T0V1F0Y2V14021A02", dalah: "0BCV", dalam: "0B8B0D06", dang: "0B4S0D0N0L0F0M091B0R1Q0D", "dang ": "0B880D13", dans: "010P0L9Q0R0C0V060Z0O100D120H130C150A1F0D", "dans ": "010P0LF20Z031F0E", dapa: "0B3E0D0W1Q17", dapat: "0B6H0D1N", daq: "0P0K0T021QFR", "daq ": "1QMU", "dare ": "0M020Q500T0G100G150J1F02", "dari ": "0BBD", dary: "1B5X", daryt: "1B8J", dar\u012B: "1D6L", dar\u012Bt: "1DAS", dash: "0497", dass: "0N7C0P020Q0211051402", "dass ": "0NBQ", "date ": "0L060M080O080Q400R020T020Z0415081B04", "dat\u0103 ": "155U", dau: "0B020M050N06130F150E1B4Z1D3R", daud: "1D4Q", daudz: "1DBJ", daug: "0M091B6L", "daug ": "1B8F", daw: "030O0D041A0N1N0D1Q0B", day: "030M0B050D020M2C1F271Q0A", "day ": "03060M3N1F02", daz: "04330N060O02", dazi: "048E", "dazi ": "04DV", da\u016D: "1O0W", "dd ": "03060M02100S120N130E141D", "dde ": "0Q020R0K0T040Z0B101L125O1F02", dder: "030A0R070T020Z1G1002120B", ddo: "0Q0F", debe: "0O3H0T0Y0V031B051N0K", deber: "0O2P", dece: "0M030O0D0P0D0Q030R020T0U0V050Z0215091F4F", "dece ": "0V0B1F43", deci: "0L0G0M0N0O2I0P0R0Q0W0T110V0415141O0L", "ded ": "030I0M251403", dee: "010Y0M040N040Q030R0R0T020Z021202150L", "deg ": "03E6127U140L", "dei ": "0P0H0Q2P0T0M140215081B08", dein: "0N350T06", dell: "0L020N020Q6D0R09100211591403", della: "0Q321189", delo: "0O030P040R020V080Y0N150H1O071P59", "delo ": "0O030P030V091O031P64", dema: "0L320M030O1E0P0T0Z021O17", deng: "0BB30D0J0Z031B041F02", denga: "0BJD0Z04", denk: "0N1G0R350U021106142G", "denk ": "0N020R2R", denn: "0N0X0U080Y0P0Z38100W110D1245140B", denne: "0Z3X110612451405", "dere ": "0N130Q3Z0R1W0T360Z0O122R151I", deren: "0N1F0R3H0T040Z0K1208", "ders ": "01260M090N0P0R2A0Z021F09", desp: "0M060O2B0P0H0T041004152U", "det ": "031M0N1D0T1M0ZMC10OH110M12PF141Q1F02", dett: "0L040Q4G0Z2X101K110O125Q141H1F09", detta: "0Q07101K110E", dette: "0L070Q030Z3K125Q1402", detto: "0Q48", deu: "010Y0L1N0N0J0O020P250R080T1H1P13", deur: "01270L0A0R0S", "deur ": "01290L0F0R0Y", deve: "0L150M050P350Q1A0T0A0V07150Q1F021O03", deze: "0P040R4O140B1O02", "deze ": "0R5W", de\u011F: "1F8T", de\u011Fi: "1F9M", de\u011Fil: "1FBJ", df: "03040S070Z041002", "dh ": "0SH8", dhe: "0N040R040S1W0U020Y0F0Z081406", dhu: "03030S1U0T0B", dhuin: "0S8E", dh\u00E9: "0S2I", dh\u00E9a: "0S32", dh\u00E9an: "0SBR", diam: "0B0F0O020P040Q480R020T0B", diamo: "0Q48", "dib ": "1C2K", "did ": "03070M3E1C0K", didn: "0M4Z", "didn'": "0M6Q", didy: "0T4I", didym: "0T4R", "die ": "01SG0L0I0M070NHZ0O1L0Q020R5A0T331505", "dien ": "0L070N050R070Z0410021B531D7A", diena: "1B1Z1D76", dies: "010J0L030M050N6A0O020T1C1B071D1G", diese: "0N9I", "dig ": "013R0D040N0M0R3X0Z7K107P1266145A", digi: "0O020P040R060T0E14021NBK1O09", digin: "0R081NBW", digt: "0N0A0R030Z0H102B", "digt ": "0N0C0R040Z0H102B", dih: "03020B0C0D071505", dij: "0B070O1M0V0C1B0J1Q07", "dik ": "0B080R06142Q1F111N1N1P8C", "diko ": "04411P3I", "dim ": "030C0P0A0V201F5M1N89", dink: "012A0U080Y0B110A1B0A", "dink ": "012D1B0F", "dip ": "1F061N65", diris: "046A1O3R", disc: "0L0O0M0E0N080O0W0P0N0Q0R0R0A0T3Q0Z02150Y", diss: "0L090P410Q1Q0T160Z0S1107120V", disse: "0L040P490Q1J0R020T0R0Z0Y120V", diu: "0B030P0K0T1S0U02150C1A04", dix: "0L0D0T2M", dixi: "0T48", dixit: "0T3J", diy: "03060D0A1F4J", diyo: "0D091F3R", diyor: "1F53", diz: "0O030P2D0Q0B0V021F06", di\u00F3: "0O141406", di\u00FD: "1N62", di\u00FDi: "1N4N", di\u00FDip: "1N67", di\u011F: "1F6Q", di\u011Fi: "1F79", di\u011Fin: "1F63", di\u0148: "1N4K", dji: "0109", "dn'": "0M3U", "dn't": "0M6Y", "dn't ": "0M9B", dnes: "0M030U2I0V030Y2V", "dnes ": "0U2W0Y39", "dni ": "0U060V0A0Y0T143X1A0L", dno: "0U1S0V2R0Y1C14071A0P", dnu: "0N020U0I0V0I0Y0T0Z0914021C0P", dn\u011B: "0U1R", "dn\u011B ": "0U2J", "dob ": "1P4F", dobr: "0P040U1W0V2N0Y5K1A3B", dobro: "0P020U0H0V4M0Y0D1A03", doe: "012M0M1V0P0I0R1W", doen: "015L0P0I0R4E", "doen ": "015W0R5S", does: "0M3G", doesn: "0M33", doh: "0B070U0614061Q03", doi: "0L1N0M110P0Y11061510", doin: "0M1W1108", doing: "0M2L", doj: "0U050Y0H1A061B0E1O161Q09", dolg: "1449", dolgo: "1447", domin: "0L040M020O0L0P0F0Q020T3Z1B0I", domu: "0T3L0U0E0Y0B1A211B0I1F03", dom\u0101: "1D45", dom\u0101j: "1D71", "don'": "0M5U", "don't": "0M7W", doo: "010F0D060M0D0R130U031A02", door: "0M0O0R2V", "door ": "0M0S0R31", dost: "0U2W0V0V0Y1J110D1A0Y1F071N27", dosta: "0U2G0V1P0Y1O110K1A1B", "dott ": "142W", dou: "0L0T0M060O030P0V0U1I0Y08151G", dove: "0Q4V0U050V070Y0A0Z051509", "dove ": "0Q3Y0V0B", dp: "0R020U0S0Y0T0Z031A0J1O021Q07", dq: "0T041Q06", drau: "0N0A130F1B2V1D2A", draug: "130B1B5A1D48", "dre ": "0L5E0O290P040Q1L0Z2T100E124F140Q", "dri ": "0Q06122H130T", drig: "0N020Z1P101Y", "drig ": "0Z23101Y", drik: "0Z191214", drink: "011M0M0U0R1G0Z041002110312041A031O0D", dr\u00ED: "0O0W", dr\u00F2: "0Q0C", dr\u00F8: "0Z091207", dse: "03040R030V060Z0G100712031C0Y", dsi: "0Z031A021C151D0Q", dsk: "01070U080V0E0Y0K0Z0H100D1205", dst: "0N020R090U0J0V070Y0I0Z1L100B12041A09", dste: "0R050Z2S", "dste ": "0R060Z2S", "dt ": "03060N0B0R140Z3X121X1411", dta: "0Z0610031202142Y1Q16", "dtam ": "143J", dte: "0N020Z0X1208140N", "dte ": "0N030Z28120H140E", dua: "0B130M030O030P0P0T0F1F031O07", dud: "030F0B0F0D020O090T021F021O05", due: "0L080M020O0C0Q100Z081207", duga: "047S0B060V07", "duga ": "04D70B0B", duin: "0S3X1105", duine: "0SEM", "duit ": "0L0W0S9P1102", "dul ": "0S3A140B150V", duno: "1P4O", dun\u00F6: "1P5L", dun\u00F6n: "1P6H", duo: "0P020T0Y1B2H1O0B", "dur ": "03090B1T0L0A133M1F1A1N0K", du\u011F: "1F76", du\u011Fu: "1F85", du\u011Fun: "1F8G", dya: "030R0D071Q0B", dyg: "1N5Y", dygy: "1N8D", dygyn: "1N8S", dyl: "11021N2X", dyla: "1N3X", dylar: "1N5A", dym: "0T2E1A061B061N65", "dym ": "1A081N70", dymu: "0T3W", dymus: "0T3U", dyo: "0D051F04", dyr: "0Z0H1008120D13121N4Z", "dyr ": "0Z0T1003120E1N3W", dyt: "11061A031B1H", dy\u017E: "0U1Y", "dy\u017E ": "0U36", dz: "03040R020U020Y1D14041AEG1D751O0H", "dz ": "0Y0S1A0E1D5D", dze: "0Y071A1O1D2P", dzi: "0U030Y0L1AKJ1D5G1O0N", dzia: "1A5X", dzia\u0142: "1A8B", dzie: "1AFS1D29", "dzie ": "1A9F", "dzo ": "1A3D1O06", dzu: "0Y041D2S", "dzu ": "1D3D", dz\u0113: "1D66", dz\u0113t: "1D49", dz\u012B: "1D7A", dz\u012Bv: "1D6V", dz\u012Bvo: "1DA1", d\u00E1: "0O020P090S0O0U2B0Y1D13031416", "d\xE1 ": "0O030P0E0U1O0Y14", d\u00E3: "0P03", d\u00E4: "0N02100X112I1N4N1P0M", "d\xE4 ": "114C", d\u00E4l: "11071N8G", "d\xE4l ": "1N60", d\u00E4lm: "1N3J", d\u00E4lmi: "1N4U", d\u00E4n: "113C1P0S", "d\xE4n ": "115W1P0J", d\u00E4r: "102L", "d\xE4r ": "1037", d\u00E5: "0Z06100D1207", d\u00E5r: "0Z08120C", d\u00E6: "0T020Z031306", d\u00E8: "0L02", "d\xE9 ": "0L140O0B0U100Y050Z0210081202", d\u00E9a: "0L020S4G", d\u00E9an: "0S49", d\u00E9ana: "0S8M", d\u00E9c: "0L1B0O020P02", d\u00E9j: "0L170O07", d\u00EA: "0P05", d\u00EC: "0Q06", "d\xEC ": "0Q0M", d\u00ED: "0O100P020S0P0U2P0Y1R140F", "d\xED ": "0O0F0U200Y1G", d\u00EDa: "0O2I0P02", "d\xEDa ": "0O2O", d\u00EE: "0L02", d\u00F2: "0Q03", d\u00F3: "0O0N0P030S0S0Y021308140F1A07", "d\xF3 ": "0O0M0S121304140B", d\u00F3n: "0O1C0Y05", d\u00F4: "0Y0M", d\u00F6: "100Q1305140R1F0S1N0L1P4M", "d\xF6 ": "10081P3N", d\u00F6n: "140M1F1G1P4J", "d\xF6n ": "140C1F021P5L", d\u00F8: "0Z0P120O", d\u00F8d: "0Z0H120G", d\u00F8r: "0Z0E120B", d\u00FA: "0S0Q0Y0L1302", d\u00FB: "0L03", d\u00FC: "0N03140F1F5O1N4B1P09", d\u00FCn: "14021F2O1N0R", d\u00FC\u015F: "1F5G1N3A", d\u00FC\u015F\u00FC: "1F5L1N3N", d\u00FC\u015F\u00FCn: "1F761N4O", d\u00FD: "0U0N0Y0W13091N31", "d\xFD ": "0U110Y1X", d\u00FD\u00E4: "1N4Q", d\u00FD\u00E4r: "1N5B", d\u0101: "1D1Z", "d\u0101 ": "1D3F", d\u0103: "150P", d\u0105: "1A0C1B0H", d\u0113: "0T091D1D", d\u0113j: "1D23", d\u0117: "1B48", "d\u0117 ": "1B1R", d\u0117j: "1B2H", d\u0117l: "1B3S", "d\u0117l ": "1B5W", d\u0117t: "1B1I", d\u0119: "1A171B05", d\u011B: "0U7G", d\u011Bl: "0U9X", "d\u011Bl ": "0U40", d\u011Bla: "0U8A", d\u011Blal: "0U5E", d\u011Blat: "0U5E", d\u011Bl\u00E1: "0U2U", d\u011Bt: "0U2B", d\u012B: "0T0E1D1J", d\u012Bt: "1D20", d\u012F: "1B08", d\u0131: "1FBL", "d\u0131 ": "1FBL", d\u0131m: "1F6L", "d\u0131m ": "1F6M", d\u0131r: "1F52", "d\u0131r ": "1F4J", d\u0131\u011F: "1F46", d\u0131\u011F\u0131: "1F4R", d\u0131\u011F\u0131n: "1F4H", d\u0142: "1A1V", d\u014D: "0T0B", "d\u014D ": "0T0P", d\u0151: "141M", d\u016B: "1B02", d\u016F: "0U0V", d\u0173: "1B08", d\u017E: "0U020V0B0Y031B1M1D0A", d\u017Ei: "0V051B46", d\u017Eia: "1B38", "e' ": "1QSG", "e'd": "0M0F1F071Q0F", "e'l": "0M0D1Q10", "e'r": "0M0G1Q3M", "e'riy": "1QAH", "e's": "0M1Y1Q06", "e's ": "0M3K", eab: "0O040S3N150J1B031C18", eabh: "0S4D", eabha: "0SFC", eac: "0M0Y0O030SC5150D", each: "0M1K0N030R020SDP", "each ": "0M160SL3", eacht: "0N050R020SMC", "ead ": "0M1H0S111C2C", eadh: "0S32", "eadh ": "0SBR", eak: "0M0Z0V0311031C1O", eaks: "0M0611021C22", eall: "0M220S0M1108", eally: "0M2U", "eam ": "0M0I0R050T4A151I", eamh: "0S36", "eamh ": "0S9H", eann: "0L060Q080S8Q", "eann ": "0SIH", eanna: "0SC5", "ear ": "0M1V0O0H0P070S3Z", eart: "0M0K0S5X1503", "eart ": "0M0B0SDP", eas: "0M1L0O0H0P030S3P0T0Q111215581O02", east: "0M0C0S1L111C155R", east\u0103: "154T", "eat ": "0M1T0S490T0Q1109150N", eau: "0L580M090R07153K", "eau ": "0L550R0G0Z021549", eauco: "0L46", eav: "0M0O0T04150K1C0I", "eaz\u0103 ": "154U", ebat: "0B090O030P020T2W150M", "ebat ": "0B0C0T2K150L", ebb: "032L0Q2S0R1I1002141V", ebbe: "03090Q480R5Q141Z", "ebbe ": "0Q3S1407", ebben: "0R7K141O", eben: "0B100D040N530O070P030T0414021B02", "eben ": "0N6Y0O0A", ebih: "0B4H", "ebih ": "0B8D", ebil: "0N0212051F3M", ebli: "012D0N0D0R0Z0Z0A120D1B021O06", eblie: "012I0N060R1C", ebt: "03050N0K0R0L", ebua: "0B2D", ebui: "0T0515AA", ebuie: "158K", ebuj: "0U2R0Y2R1A14", ebuje: "0U220Y3B1A0X", ecc: "030W0O0I0Q1B0T111402", "ece ": "0M050O1X0P200Q0K0T030U060V05152D1A081F4O1O02", ecek: "1F4E", "ecek ": "1F4N", eces: "0M070O3M0P0N0Q090T0O150N1F031O0P", ecesi: "0O2U15051F041O05", ece\u011F: "1F5T", ece\u011Fi: "1F7T", echc: "0U2D0Y351A031Q07", echce: "0U1N0Y3U1A02", echn: "0L050M030N0D0R030U2T14031A091B02", echt: "0N250R440U121Q07", "echt ": "0N1X0R39", ecis: "0M070O0F0P410Q0T0T0O100I150H", ecisa: "0O030P2Q0Q04", eco: "0L0N0M0P0O0Y0P0X0Q0O0R030T0G150Q1A031O1K", ecun: "0O030P020T2S150V", ecz: "1A3C", "edal ": "0U0D0Y66", "edan ": "0O080V3H101T", edang: "0B72", "eder ": "0N3D0O040R1S0Z1N1004120H1F0O1N0S", "edes ": "0N0D0O2U0P050T0M0Z0B111F", "edi ": "0L080P060Q0R0T0L0V0N14051B021F7R1N4X1O081P1E", "edim ": "0V0H1F411N2K", edip: "1F021N3X", "edip ": "1F031N55", "edit ": "0M020T2I0U021505", ediyo: "1F3S", edi\u011F: "1F4P", edi\u011Fi: "1F6C", edn: "03050U300V3R0Y2D1008140E1A1D", "edo ": "0O3C0P1F0Q130T0V10081B071O0A", edst: "0R060U0J0V050Y0J0Z1G12051A07", "edy ": "0M020U0D0Y511A2O", edz: "0Y1T14031A671D521O0T", edzi: "0Y0O1A6X1D0O1O10", edzia: "1A63", edzie: "1A43", ed\u00E4: "11291P0O", ed\u00EC: "0Q0I", ed\u00FD: "1N3A", ed\u00FD\u00E4: "1N4L", ed\u00FD\u00E4r: "1N52", eed: "010I0M230R0Q1C221O05", "eed ": "0M2E0R1G1C21", eef: "010C0R3M", eeft: "0RB7", "eeft ": "0REE", eeg: "010F0R0A1C1Z", eegi: "1C25", "eegi ": "1C52", "eek ": "012B0M0N0R2G", "eel ": "013R0M0M0R841C4J", eeld: "010H0R0V1C55", eeldi: "0R041CBI", eelt: "010N0R0H110F1C4J", "eelt ": "0R0K1CAO", eem: "01180M0N0O020P030R0K11071C11", "eem ": "012J0M0F0P030R1I1C0H", eep: "0M0W0R03", "eer ": "01A40M0A0N0A0O0V0R8W0Z051206", eerd: "010V0R3Z", "eerd ": "010K0R2X", "ees ": "016L0M0B0O0H0R1L1C1G", eeu: "01080R0A", efd: "03040R0B", eft: "030L0M0I0R3O0V030Z0Z101H1204132715041F03", "eft ": "030A0M0X0RCT1207", efte: "0R030Z2N10211F02", efter: "0Z3810211F03", efti: "030B0R070V04133L1507", eftir: "137D", efur: "134D1O04", "efur ": "137G", egaan: "011J0R0W110E", egali: "0Q051B6Y1O02", "egar ": "0O0V0P1713641A04", egd: "03060R0B0V051403", "egen ": "0N3K0R460Z0F100A120M140E", "eget ": "0T090Z5B10061208140R", egge: "030F0N040Q1K0R1N0Z0F121I141N", egh: "0Q05140R1QC8", "egi ": "0T0H130W1402150A1B031C4G1N3G1O0D1P0E", egli: "03020N020Q3C1504", egna: "030F0M020Q3I0T09100F131A14201A04", egne: "03020N0H0Q060V080Z1I100312151408", egs: "010A0M020N03140S", egt: "01150N0G0R0D131D141B1B03", egy: "0M020T0Q0Z0G1002120K14FW1B06", "egy ": "14LW", egye: "148I", egyn: "0Z15121F1402", egz: "039Z14031A081B0B1F03", egza: "03AB1A0B1B09", egzaw: "03K4", eg\u00E9: "1420", eg\u00E9sz: "142U", ehd: "030E0U03112E1F041Q07", ehen: "0N5P0T07110Q1404", "ehen ": "0N8X111A", ehet: "1109145V", "ehet ": "110L1430", ehi: "0B0F0D030M060N020Q020T05110A1F0L", ehk: "0B0C0U04110E", "eho ": "0D0E0U310Y4N", ehr: "03030N2R0U040Y061F0A", "ehr ": "0N53", eht: "0N18111J1C0E1Q07", eh\u00F6: "0N0C1024", eh\u00F6v: "102V", eh\u00F6ve: "102F", eia: "0P1P150F", eib: "0N0V", eic: "0N1R0S2D1D4E", eica: "1D3V", "eica ": "1D99", eich: "0N490S0O", "eid ": "012T0N0W0R2Y120F140B1C30", "eidh ": "0S9P", eid\u00E4: "113Z", eid\u00E4n: "1186", eie: "01180N0D0R070T06120M150F1B021C2F1D0Q", "eie ": "011U0N021206150G1C2S", eig: "0L0P0M0D0N0Y0P020R0B131P14041B1B1D0V", eiki: "1104130H1B4X", eikia: "1B7Y", "eil ": "0L170N1612141C29", eile: "0N0O0S1P111M120C150I1B021C2Q", "eile ": "0N0H0S5X110G150N1B031C6K", eill: "0L32113J", "eine ": "0L150NKE0R0H1C22", einem: "0N5V", einen: "0NC50R0311221205", einer: "0N6G0R04", eins: "0L050N100R05133F", "eins ": "0L070N0C136D", eio: "0P1H1504", eira: "0N0J0P3O130W1B03", "eira ": "0P3X131V", eiro: "0P421D0O", "eiro ": "0P4G", "eis ": "010Z0N0H0O0K0P1E0R0D0S380T171B0X1O05", "eit ": "0N6X0R0Q110B120D131S140O1B0A1D21", eite: "0N3U0O030P0F0R0C110514021B021D0J", eith: "0M0B0S36", "eith ": "0S92", eiti: "0N091107130X1B33", "eiti ": "1106130B1B5P", eito: "0P2E11071B021P0K", eiu: "0T211504", eius: "0T3S", "eius ": "0T3V", eix: "0P25", eiz: "0L020N050R030V02100215071D3Y", ei\u00DF: "0N1E", ei\u00F0: "132I", "ej ": "03020U210V050Y870Z0I100N14031A9Z1O1A1QAW", ejd: "03080U0I0Y0A0Z0V1A061Q08", ejde: "03040U0E0Y0G0Z25", ejl: "03030U0B0V030Z0H100214041O021Q0N", ejm: "03070U0D0Y0A1A0A1O0Q1Q0N", ejo: "041Y0L030O2A0P0M10021A021B0J1O1N", "ejo ": "045V0O0V0P0M1B061O1Z", ejor: "0O26", ejr: "03030U020Z0B1A09", ejs: "0U1E0V030Z0B1A1J", "eka ": "049A0B4U0U040V0U0Y1110081A0R1B0H1O06", "ekad ": "0V0Y1D5L", ekada: "0D020V0O1B52", ekd: "03030Y051N3O1O0A", eked: "0Y1J144E", "eked ": "143Z", ekem: "1113145X", "ekem ": "1468", "eken ": "010I0R4F1004140B1F0J", eker: "011P0B2F0R1E1003120714061F0C", eket: "0Z0510051206144U1B041F0L1N0E", "eket ": "0Z0610051206144G1F0F", ekki: "03080R0313KL", "ekki ": "0303110213SG", "ekl ": "0U42", ekle: "03030N030R041F3G1N0O1O02", ekom: "013O0N170R130V060Y0B0Z0210041B031O06", "ekom ": "01370V0A0Y0B", "eks ": "0M060R070Z0F1102120G1B0B1C4Q1D1L", eksi: "0B0B0D030V050Z07114K12041B041C1J1F0V1O07", "eksi ": "0B0E118U1F02", ekte: "010H0N060R0C0Z09100B121B140P1F3U1O09", ekten: "0N040R0212041F4R", ekz: "1O0S", elah: "0B4J0D03", "elah ": "0B88", elaj: "0B2P0O0414021O0B", elaja: "0B580O04", elak: "0B3X100314031A021F02", elaku: "0B5Y", elam: "0B2D1A021C0K1F04", "elas ": "0B2C0D020O0D0P2N1B0G1O0G", "eld ": "012G0M0A0N180R4V0Z051004120O130Q1409", eldi: "03050R0G0Z07123X130K1C4Z1F251N2B1Q0L", eldib: "1C68", eldig: "0R0H0Z07123U", "elf ": "011E0M210R1C", elh: "03160N020P3C0U021202140Z", elho: "0P351403", "elig ": "0N030R070Z2V124U", elih: "0B330D071102", eliha: "0B5Y", elij: "0R5S110V1P16", elijk: "0R7N", "elik ": "011O14071C1Z1F08", elke: "012103020N070R1L0U020Z02110O1429", elles: "03050L750N020T02110G120X14021C5S", ellet: "0Q050R030T030Z041004110R120B142V", "elli ": "037Z0Q1A0T0611081F0C", "ello ": "0M030O0S0Q4Q0T0E111U", ellos: "0N030O2O1106", ell\u00E4: "115I", "ell\xE4 ": "11BL", elme: "030H0P0G1102143Z1F1A1N1P1Q0C", "elmi ": "034L0U3A11021406", "elp ": "011R0M1W0R0C120R", elq: "03060L271Q08", elqu: "0L3O", elque: "0L4L", else: "010K03040M0G0N020R070Z3G1015123M1F03", "else ": "0M0L0R060Z2K100L121Z", elsk: "0U040Y0F0Z37100W123B131H1A17", elske: "0Z2U1226", elum: "0B2J0T0L1102", "elv ": "0Z1L121Q140G", ely: "010F03020M110U040Y08110C142J1B0J", "ely ": "0M1W0U070Y0E1104140S", el\u00E4: "100411381N0D", el\u00E9: "0L090O0F0P040U0I0Y0E1425", el\u0151: "142U", emba: "03020B5E0L080M040O0D0P090R041O03", ember: "041V0B550M0U0N050R050Z061002145O", embr: "0D030L0L0O0E0P120Q2Q0T07150K1O06", embu: "0B3Y0Y08", emd: "03120N050R0C12031A021F071O051Q0F", "emme ": "0L1Z0Z1E11A6121B1N3O", emmi: "031K0Q030R061122144I1C0G", "emo ": "0O050P030Q1T0T1L0V3R1B021O0R1P49", "emok ": "1N4T", emos: "0O4F0P4614021B06", "emos ": "0O5N0P591B0E", empo: "0L0A0O2W0P2V0Q1W0T1014021O1L", "empo ": "0O3I0P3E0Q1V1O21", empr: "0B040L090O2T0P2O0Q27", empre: "0D020L030O360P3D0Q28", emps: "0L3U", "emps ": "0L6E", emt: "037T0R040Z0J1007120O14051B021D1C", "emt ": "03730R0E0Z0O1002120J", emua: "0B35", em\u00E1: "0O0L0P060U240Y24", em\u00E9: "0P04141P", em\u00F4\u017Ee: "0Y3D", "en'": "0M0T1F02", "en-": "038C0L02", enang: "0B6D0D02", enar: "0B3Y0L020N030O0E0Q0O0R030T07100O1F05", "enas ": "0O0X0P1J0T071B641D2Y1O39", encia: "0O3D0P0B1402", enco: "0B0Y0L340M030O1Q0P260Q031O0X", encon: "0L1L0O270P2L1O0J", endes: "0L020N0H0O060P050Z1N140G", "endo ": "04290O540P4T0Q3N0T0E1B031O07", endr: "0L5F0O0W120F1B0H1O02", endre: "0L6Q0O04120A1O04", endum: "0T2G1C101O02", "enen ": "03020N1S0O1J0R2W0Z0H1007113V120C1F04", "enes ": "0N0C0O310P030T080Z031103120514061D2O", "eng ": "0B090D1C0N030R0D0Z0S120B1Q2Y", engan: "0304042F0BIA0O060P0B0Z0Q12081311", "enge ": "043I0M030N0E0Z1Z12141405", enger: "0302041V0B1X0M031248140O", engo: "0B0B0O3J0P030Q0H", "engo ": "0O4J0Q08", enho: "0P5J0R0414061O02", "enho ": "0P44", enhor: "0P2X", "enia ": "0O020Q020T050Y14110615051A491O03", "enie ": "011G0N030R020Y2P140315081A431O03", enig: "012M0N0X0R120T050Z08120E1O0E", "enim ": "0T160V0R1F4Y", "enin ": "03020B0H11181F58", eni\u00F1: "1N5S", "eni\xF1 ": "1N7C", eni\u0148: "1NBC", "eni\u0148 ": "1NE8", enja: "030A0B370R020V0Q", enke: "03050N180R1B0Z081009110B121O14061B021O02", enki: "111Z144Q1A061B1I1O06", "enki ": "1106143E1A081B0A1O04", "enn ": "0N4P123P131W140B", "enne ": "0L1L0N0L0Q0E0Z4010271117126H142U1A041C1E", enner: "03020Z11121F", ennes: "0L0E0Z2C1014110T122H", "enni ": "031N1337145B", ennyi: "1430", "ense ": "011J0L3N0M0F0O0F0P0C0Q080R020T0K1F031O05", "enso ": "0N040O0K0P0E0Q3L1O09", entia: "0M050P040Q020T2L1104", entru: "0N030R050Z0215CH1A05", "ents ": "0L4N0M1J1D2T", enya: "0307046C0B201403", "enya ": "04AA0B0D", enye: "045Y0B2F140R", en\u00E1: "0U100Y2E1402", "en\xE1 ": "0U100Y36", en\u00E7: "03020L040P111F0O1N0R", en\u00ED: "0O130U580Y1F", "en\xED ": "0U780Y1Z", en\u00FD: "0U110Y2M1N0P", "en\xFD ": "0U1F0Y46", en\u0105: "1B25", "en\u0105 ": "1B3G", eoc: "0O0E0P0J0Q0L0S0P1503", eoi: "0L030S331103", "eoir ": "0L080S7Z", "eoma ": "0V4G", eople: "0M27", eora: "0B3E0O02", eoran: "0B6L", epan: "0B2L0D031B041C0H", eper: "0B2V0M020R060T0Y14041B05", eph: "0M030T10", eq: "032G0M040O0E0P0C0T161Q0Z", equ: "0L060M080O1A0P1H0Q050T2S", erad: "0B0X0N0Y0O0H0P0F0R030U0C101R1B04", erai: "0B070L4I0P020Q0I110E15061B20", erano: "0O0J0Q3K1O02", erap: "0B3G", erapa: "0B6G", "erat ": "0B0O0T530Z02100F150Q", "eraz ": "0Y321A26", erch: "0L160N020Q5N", erch\u00E9: "0L070Q5J", "erd ": "011G0L020M020N060R4Z120914031506", erdie: "01870N0F0O040R0L", erede: "0N030R030Z291212140B1F391N0L", "erek ": "142B1F1D1N4G", ereka: "0B8Z", "eren ": "0N4X0O0M0RAJ0Z1X110F122214031F051N0S1O06", "erer ": "0N100O040P070T050Z1M121C", "eres ": "0N0V0O490P130R030T0Q0Z20120L140I1A021D1I", "eret ": "0T1G0Z1W1002120C14121N0H", erete: "0Q0D142V1509", eretn: "143H", erez: "046P0L0G0O05140F1507", ergee: "01260R0M", "ergi ": "0BAL0Z0310021204130Z150Y1B031F05", erha: "0B290M030N0Z0R0U1F15", erini: "11071F3H1N7Q", "eris ": "0T381B1N1N141O0X", "erit ": "0T3W110A150Q", erja: "0B5E0R0C1106130I", erju: "0B0B0O02133D", "erju ": "135A", "erk ": "014203020N040R1Y1002120D130F1B071F0F", "erna ": "03170O0G0P0E0Q030R020T0G0Y0A10251O09", ernah: "0B5Q0N02", "eron ": "0D050O3B110A1O30", "ertu ": "0L0313711B02", erug: "012Q0R1N", "erug ": "01210R1J", erum: "0B090N080T2K0Z02131D", "erum ": "0N080T2H132X", erun: "0B0B0N0X0Q040T4Z11091A041D0Q1F02", erunt: "0B0G0N050T5A", erw: "010Z0313040Y0B080M030N0U0R0J1A1M", "ery ": "010F0M3S0U041A0F1N60", er\u00E0: "0Q1I", er\u00E1: "0O0X0P1N0U0B0Y181407", er\u00E4: "0N06100V111C1N0A", er\u00E7: "0L030P031F3F", er\u00E7e: "1F3W", er\u00E7ek: "1F4S", er\u00ED: "0O2R0P0F0Y0L130A1408", er\u00EDa: "0O450P0C", "er\xEDa ": "0O3P", er\u00F0: "1369", er\u00F0u: "134S", er\u00F0ur: "135X", er\u00F2: "0Q1K", "es-": "030J0L25", esag: "0N100O020P020Q041P3F", esago: "1P3O", "esc ": "157V", esch: "0N420Q040R221513", esci: "0O030P040Q0J0T2P", esco: "0O0Z0P2R0Q1C0T03150A", escu: "0M020O290P170T06150T", esd: "030A0O0Q0P0F14041Q04", "esen ": "0N320O020V081105143L1F04", esh: "0302042F0M030N020O030Q071402", esien: "011T1A06", eske: "011103090Z231002110W121S140E", esmu: "03040V071D7W", "esmu ": "0V0H1DI1", "esn'": "0M29", "esn't": "0M33", esne: "03080R030T2K0U030Y0I140K1A041F02", "esne ": "0T2Q0Y0L14021A03", "eso ": "0D080N040O460P0D0Q1D0T190V050Y091B031O0D", esp\u0113j: "1D5Q", esq: "03080L0E0O060P180T071Q03", "essa ": "0L030P2V0Q120T0C100B118M132H", "esse ": "0L2F0N0L0P480Q1E0R050T7W0Z0B120714041C1L", essef: "0385", esser: "030Q0L0I0M020N210Q4J0R030T0B0Z0G1009120D", esso: "0L070M050N030P450Q5D0R040T050Z0410021103", "esso ": "0P0N0Q4R", essoa: "0P37", "est-": "03030L4U", "est-c": "0L6L", estab: "0M020O510P040T07", estar: "0O2U0P2G0Q0G0T021108130B1A021O02", estas: "0D020O100P0I0T0A110B1B0Q1OSF", estav: "0P5X1B02", estem: "0P040R0A0T030Z07120V14091A5V", este\u015B: "1A5K", estis: "0D020L020T1E11041B041OC4", estou: "0P5J0U04", estoy: "0O4K", est\u00E1: "0OB80PAN0U0B", "est\xE1 ": "0OAC0PCI", est\u00E3: "0P2K", est\u00E3o: "0P38", est\u00E4: "0N04100S114P", "est\xE4 ": "1170", "esu ": "0T030U080V0B1A051B361O0F", esy: "0D051A031B031F03", esz: "147M1A7R", "esz ": "143W1A5M", esze: "143H1A07", esz\u00E9: "146M", esz\u00E9l: "146K", es\u00EA: "010K", es\u00F8: "0Z0A120C", "et'": "0M0D", etd: "1N4C1Q04", etdi: "1N50", etek: "0R0E0U03143V1A021B081O02", "etek ": "0U03143E", "eten ": "0N1F0R9D0Z02100R121J140F150I1F03", etet: "0N030P020V030Z03100E110A1206144L", etj: "010H0R0A0Z05130814041N10", etko: "0V030Y3A112S", "etko ": "0V070Y3V116P", "etlh ": "1QC8", etm: "03030U021F5T1N8D", etme: "1F641N9L", etmek: "1F231N41", etos: "0O070P0A0U031B0C1O061PDP", etosi: "11021PD6", "ets ": "012Q0L0Y0M0M0N040R4J0Z0L100B120N", "ett ": "030D0N0L108E124514BZ1C0N", etta: "034O0L040Q3R101N114D137P14021F031Q0B", "etta ": "03270Q1J101K113D13F2", ettem: "030J1447", etter: "03090L050M1Q0N0R0Q1W0R0A0Z0B1007123R", "etti ": "03060Q0Y0R050Z0211251207130P14021F47", etto: "0L090Q7F1002110J1208", "etto ": "0Q6V", ett\u00E4: "11DJ", "ett\xE4 ": "11OP", etur: "0M090T270Z04133E15071B351O0L", eturi: "1B541O0P", etw: "0M060N0Y0R04", etz: "0N1P0R03", et\u00E0: "0Q0C", et\u00E4: "112O", "eu ": "0L2Z0N020POV0T04156F", eue: "0L050N0U", euk: "0R0E110B", eul: "0L1P0N0211021505", "eum ": "0B050M020N020R040T7L0U0214021A05", "eur ": "01380L8C0N030R1G", eure: "0L460N0E0R0K", eurs: "0L3C0R04", "eurs ": "0L5M0R04", "eus ": "0L040P3T0R0L0T5L110C", "eut ": "0L3D0N08", euw: "0R0T", eux: "0L8N", "eux ": "0LCV", "evas ": "0O0B1B0C1C101O3K", "even ": "0M170R6G0Z0310031F02", "ever ": "0L0I0M4F0P0V0R0Q0Z0L100F120S1F0Q", every: "0M3L", evet: "0Q050V0I0Z1J1005120L141J1F09", "evet ": "0V0W0Z1U1005120L14081F0C", "evi ": "0P040Q1L0T050V05110415041D3Y1F0C1O05", evie: "03020L0M0N020R030Y3Z1D2Y", eviem: "0Y3D", "evo ": "0O1B0P0G0Q3D0U030V061B021O05", evr: "010C0L140R070U0B0V070Y0B1305150J1F0F", ewa: "0302040J0B0R0M020N090R041A16", ewe: "011K043V0M030N0F0R0L1A04", "ewe ": "011L04B4", ewi: "010C0N0C0R051A181N0E", ewo: "010N0M040N0A0R0L1A0A", exc: "0L0J0M0A0O0E0P0D0R020T0G150C", exe: "0L0B0M020P0E0T0M1005150A", exs: "03080T0Q", "ey'": "0M0L1Q0M", eye: "045I0M0A0O091F7O", "eye ": "04EZ0M051F4O", eyi: "040V1F6I", "eyi ": "042O1F4X", "ez-": "03020L3Y", "ez-v": "0L5G", "ez-vo": "0L90", "eza ": "04HN0O1L0P1F0V06151C1A021D0O1O07", "eze ": "04720P030R4F0U050V051402151K1O08", ezt: "03030U03144L", "ezt ": "0302148A", ezw: "030Q041D1A07", ezz: "031T0Q17140M1F04", e\u00DF: "0N0A", e\u00E1: "0S1A1408", e\u00E1i: "0S1P", e\u00E4: "110N", e\u00E6: "0T02", e\u00E7: "0L020P0P1F1Q1N1E", e\u00E7a: "0P1K", e\u00E7o: "0L040P19", e\u00E9: "1402", e\u00EB: "010I0R03", e\u00EBl: "010D", e\u00ED: "0O081402", e\u00EF: "0R02", e\u00F0: "133E", "e\xF0 ": "134K", e\u00F1: "0O0L1N1G", e\u00F1a: "0O0S", e\u00F1o: "0O12", e\u00F3: "0O03", e\u00FC: "14031P06", e\u00FD: "1N8J", e\u00FDl: "1N3S", e\u00FDle: "1N3T", "e\xFDle ": "1N49", e\u00FD\u00E4: "1N9S", e\u00FD\u00E4n: "1N40", e\u00FD\u00E4r: "1NA4", "e\xFD\xE4r ": "1N4X", e\u00FD\u00E4ri: "1N5Y", e\u0101: "0T06", e\u0107: "0V2H1A14", e\u0109: "1O0E", e\u010D: "030R0U1T0V100Y3K1B0E", e\u010Do: "0Y5D", "e\u010Do ": "0Y8S", e\u010F: "0U0N0Y14", "e\u010F ": "0U1A0Y2J", e\u011D: "1O0G", e\u011F: "1F6O", e\u011Fi: "1FEV", e\u011Fil: "1F8S", "e\u011Fil ": "1F7E", e\u011Fin: "1F3E", e\u012B: "0T02", e\u012F: "1B07", e\u013C: "1D0I", e\u013E: "0Y3T", e\u013Ea: "0Y29", "e\u013Ea ": "0Y3Q", e\u013Ek: "0Y1S", e\u013Em: "0Y3F", e\u013Emi: "0Y5T", "e\u013Emi ": "0Y76", e\u0146: "1D0B", e\u0148: "0U0A0Y151N16", "e\u0148 ": "0U0H0Y2C1N0S", e\u014D: "0T08", e\u0159: "0U10", e\u015B: "1A48", "e\u015B ": "1A4Z", e\u015D: "1O04", e\u015F: "150A1F271N2C", e\u0161: "0U3O0V480Y3P1B1X1D13", "e\u0161 ": "0U3V0V5Z0Y5P1B0T", e\u0161i: "0U050V0T0Y0E1B211D0Y", e\u0161t: "0U2B0V1Y0Y1X1B0M", e\u0161te: "0Y32", "e\u0161te ": "0Y3T", "e\u0161to ": "0V52", e\u0161t\u011B: "0U3C", "e\u0161t\u011B ": "0U4I", e\u0165: "0Y0V", e\u016D: "1O05", e\u017C: "1A12", e\u017E: "0U1H0V0F0Y1C1B121D0P", "e\u017E ": "0U1Q0Y1A", e\u017Ei: "0U0O0V0E0Y121B271D15", e\u017Ein: "1B32", e\u0219: "152L", e\u0219t: "1580", e\u0219te: "155Z", "e\u0219te ": "156F", e\u0219ti: "157J", "e\u0219ti ": "1598", e\u021B: "1513", e\u021Bi: "1538", e\u025B: "030X", e\u0263: "039K", "e\u0263 ": "03KY", e\u1E0D: "033K", "e\u1E0D ": "0381", e\u1E25: "031K", e\u1E5B: "0315", e\u1E93: "0313", "f-": "030A1P0E", "face ": "0L0I0M0I0P02154Z", faci: "0L0N0M020O040P070Q0J0T52151S1O18", fah: "0N0S", fai: "0L8Y0M0A0Q090S3615041F02", faid: "0S2R", faidh: "0S9H", fair: "0L6E0M09", faire: "0LAH", fait: "0L6J0M02", "fait ": "0L8X", fala: "0P3R14071F031O03", falar: "0P2M1F03", fao: "0S2B", faoi: "0S2T", "far ": "03040M0B0Q060S1C0Z1H1010120F130F", "fara ": "1004138J", fare: "03050P080Q610Z0B1005120Y1F031O06", "fare ": "0Q5J0Z0712071F021O03", "fari ": "0Q0M1O3F", fatt: "0Q470Z0K100R120J", fatto: "0Q3M", fau: "0L1I0M020N02", faz: "03020P6B1F1Q", faze: "0P6B", fazer: "0P6M", fa\u00E7: "0L080P0T", fd: "01070R0L", fde: "010B03050R0F", fea: "0M050S3K0T03150L", fear: "0M050S3I", "fear ": "0M050S7Z", fee: "0M0S0N060R06", feil: "1102121I", fej: "0Z0B14111O02", fele: "0T1D14421503", "fen ": "030S0N4J0R0D0Z0C100512091F1S1P0J", ferd: "0N09121C", fez: "0P14", "ff ": "0M0N0N0610021205", ffa: "030E0L0I0M020Q0R10161103", ff\u00E8: "0Q0E", fg: "01050N0A0R050Z02", fh: "010403030N030S2W0Z02", fhe: "03030S1P", fhi: "03040S2F", fhio: "0S2P", fhios: "0SAC", fica: "0L080M030O0Z0P3M0Q0U0T14150N", fick: "101R1404", "fick ": "101N", fido: "0Q021O041P3O", finn: "0L020N021027121U132814051O02", finne: "0Z021002121S", finns: "10201321", fise: "04LR", "fise ": "04SB1F02", fiu: "0Q0C1511", fiz: "0P0U0V04140M15051A021B021F03", fj: "0Z0910041209130N", fje: "0Z0C1209", fk: "031N0B021F03", flen: "0T031P6A", fly: "0M030Z0I100X120L1305", fm: "0N021304", fn: "0N06131C", foa: "153X", foar: "155X", foart: "157F", fob: "1P2W", fod: "0T030Z0C", fog: "0P0B0Q050S1E1446", foi: "0L1A0P44", "foi ": "0L020P4Y", foj: "1O0V", folk: "0Z0M100K121I", fom: "0P0D1P3A", foo: "010A0L040M0G0R06", "for ": "0M7K0P070ZD5100212E21O07", fore: "0M1D0Q030T0P0Z171222130R1O06", fors: "0N040Q0L0T040Z331006123Y1305", forst: "0Z1L121T", fost: "0P030Q02100215B1", "fost ": "15DN", fou: "0L0M0M0L0R070U03", "fra ": "03070Q0G0Z34123O", frans: "03090R1T0Z1V1016120S1F2E1N3Q1P14", frat: "03020Q0V0T2K150Q1O0X", from: "0L040M2W1O03", "from ": "0M3Z", fr\u00E5: "1032", fr\u00E5n: "102T", "fr\xE5n ": "102P", fte: "03020M0Z0N0G0R030Z221021120U1F051O0J", fter: "0M150N040Z30102712081F02", "fter ": "0M170N050Z2Q101O1206", fti: "030C0N080R040V030Z0410041202132P15061F02", ftir: "133M", "ftir ": "136Q", "fu ": "030J0Q0C0V051309", fua: "0S1N", fue: "0O3X0T0E", "fue ": "0O3E", fuer: "0O2D0T0R", fug: "03040L020O030P070Q040T0I0Z0912041309150E", fui: "0L060O0I0P0L0S9P0T1E", fuil: "0SBI", "fuil ": "0SSC", fuo: "0Q0L", "fur ": "03020T041348", fuz: "041N150A1F021O07", fw: "0R02", fy: "03020Z08100712081330", fyr: "0Z07100C12041363", fyri: "1381", fyrir: "13FN", fz: "0N04", f\u00E1: "0O060P050S0S0U08130J140P", f\u00E4: "0N0I100J1P07", f\u00E4r: "1014", f\u00E5: "0Z0L1012120R", "f\xE5 ": "0Z0G1010120N", f\u00E5r: "0Z0A1019120G", "f\xE5r ": "0Z0R101P1212", f\u00E6: "0Z0D1202130O", f\u00E6r: "0Z091202130S", f\u00E8: "0L020Q04", "f\xE8 ": "0Q0E", f\u00E9: "0L090O050P070S1Y130I141H", f\u00E9i: "0S51", f\u00E9id: "0S3Z", f\u00E9idi: "0SEM", "f\xE9in ": "0S87", f\u00EA: "0L02", f\u00ED: "0O0A0P070S0B0Y031303", f\u00EDc: "0O0I0P0T", f\u00F0: "1310", f\u00F3: "0S0B0Y021315", f\u00F6: "106R130K140K1P26", f\u00F6n: "10081P2W", "f\xF6n ": "1P3N", f\u00F6r: "10G8130C1F02", "f\xF6r ": "10CB", f\u00F6rs: "104Q", f\u00F6rst: "102D", f\u00F8: "0Z16121K", f\u00F8d: "0Z0E1207", f\u00F8l: "0Z0G120W", f\u00F8r: "0Z0Z121F", "f\xF8r ": "0Z11121J", f\u00FA: "0O021403", f\u00FC: "0N1X140E1P0C", f\u00FCr: "0N201407", "f\xFCr ": "0N4K", f\u0103: "1519", f\u0103c: "1532", f\u0103cut: "155X", f\u0113: "0T05", f\u0131: "1F0P", f\u0151: "140J", "g'": "1Q05", "g-a": "030A0D0T", "g-b": "0B07", "g-i": "03070D0F", "g-o": "0B07", "g-u": "0D0B", gaa: "01470B020D080R1S1104", gaan: "01960B050D0F0R4E1106", "gaan ": "019N0B090D090R5R", "gaat ": "0R31", gach: "0S4F1A02", "gach ": "0SG11A04", gaga: "03020B0A0D0U", gah: "044E0B080D031N0M", gaha: "04A10D041N0S", "gaha ": "04G3", gaj: "0B0F0V02150A1A041F021O0J1Q07", gak: "0B0K0D031402", "gali ": "03030Q0411021B7V", galiu: "1B61", galli: "0O040Q020T2D", galv: "1B3W1D17", galvo: "1B6V", "gam ": "03050B040D020P080S9K0T0J14161A031B02", gana: "046I0D0C0O110P06130B1B0I1F02", "gana ": "04B60D060O06130O1B0Z1F02", "gang ": "010G0B0O0D2N0N0F0R0H0Z28121U130E", "gara ": "030N049C0B1O0O030Q0415071F0F1O02", "gaty ": "1A0A1N48", gawa: "0B040D151102", "gawa ": "0D1U1102", gawi: "0D18", gawin: "0D2A", gay: "0305040L0B020D1D1F04", "gay ": "0D130R02", gayo: "0D18", gayon: "0D29", gba: "03030D0D140J", gbi: "0D08", gc: "0S1K14091Q06", "gd ": "0R0M10061403", gde: "03020D020R0B0V1I0Z0T100K1205", "gde ": "0R120V1U0Z21100N1209", gea: "0L0D0N020R030S2D150M1O02", gee: "012S0R251O05", "gee ": "012P", geen: "01140R5U", "geen ": "01160R7R", geet: "01210R0C", "geet ": "01260R0G", gef: "0N181004130Y1O02", geg: "01100N120R0H130E1402", gegaa: "011J0R0S", geh: "01170N2C0R0I0Z021Q08", gek: "011704120N0M0R0T1304140D", geko: "011X041Z0N0Q0R1U", gels: "010P0N030R1J0Z1C1015121E13051F02", "gem ": "030J0N030P1H0T0C143I150Z1N0J1Q07", genz: "046I0N030Q05", gep: "010F0N040R070Z021N141O0A1P0G", "gera ": "04BH0B0Y0D040L061004136E1B11", "gere ": "04290N050Q180R060T1P0Z1Q120P150I", gerek: "14021F5M1N4O", gern: "0N1I0Z1L1002", gerne: "0N1F0Z1K", ger\u00E7: "1F3W", ger\u00E7e: "1F59", gesch: "0N510R1I", gesi: "012J0N0B0T0D1B051F061O0C", gesie: "011M", getur: "135U", gev: "011E0Q020R1B0Z021C0U1F021Q0K", gew: "011E0N140R13", gez: "030C041G0L050N070R0V14091F0D1N1E", ge\u00E7: "1F3R1N2Q", gf: "0Z021302140D", "gg ": "100M120B13071402", gga: "03270B330D0R0Q02100N130D1407", ggal: "0B3L0D0A140A", "ggal ": "0B580D09140A", gger: "03020M040Q190R020Z1810151216", ggi: "030C0B0S0D080M020Q4J130M", ggio: "0Q2U", ggo: "0B060D090Q031402", ggr: "03080B0S0Q021005", ggu: "030D0B280D031002130G", "ggu ": "0B2A", ghah: "0D071QKI", "ghah ": "1QO7", ghaj: "14041QBF", "ghaj ": "1QBQ", ghed: "0M040R040Z1V", ghet: "0Q040R040Z021013122M1Q0W", "ghet ": "100I121I1Q11", ghi: "0B080D080M020Q0M150E1Q3Q", ghl: "0S331Q1X", ghla: "0S3I1Q1W", ghlai: "0S8U", gho: "0B030M0214041QD3", "ghpu'": "1QB0", "ght ": "0L020M71", giau: "1B31", "giau ": "1B5I", gib: "0N0T0T031C0V1F2J", gick: "0U05101Q", "gick ": "101Q", "gid ": "03050D030S0M0Z091C22", gif: "041P0M030Z0E100O120B130D", gih: "044A0V07", gihe: "048R", "gihe ": "04EK", gik: "041W0B090Z0K120I14021P1M", "gik ": "0Z1I1P1R", gikk: "121A", gill: "102F", gilla: "102F", "ging ": "010S0B0H0D1Z0M0L0N150R2M", "gini ": "0Q0D1B021ND2", "ginn ": "0N021364", "gio ": "0O0D0P0D0Q340T081B061O09", gior: "0Q2Y", giorn: "0Q2L", gira: "04EE0B090M020O040P050Q060Z021003", "gira ": "04K30B0F0O02", "gis ": "0B0K0D050L020T1C130C140L1B0K1C0L1O351P13", gitab: "04910T09", gitm: "1F3I1N33", gitme: "1F471N3B", giu: "0P080Q100T0F15041B0D", giv: "0M0O0Z0Q10051P2M", give: "0M150Z1J1005", giy: "041E1F10", gi\u00E0: "0Q0W", gj: "0Z0C100M122Y131V140R", gja: "132U140G", "gja ": "133Y140V", gje: "121M1405", gjen: "122T", "gjen ": "121I", gjo: "0Z0I101Q120W140F", gjor: "0Z1D102C122B", gjord: "0Z0Y101P121E", gj\u00F8: "122B", gj\u00F8r: "125Q", "gj\xF8r ": "1229", gj\u00F8re: "123K", gk: "01060B1J0D1X0N080R02140J", gka: "0B1V0D1J1404", gki: "0B120D04", gko: "01080B060D0F0R021402", gku: "0B0B0D04", gled: "0M020V390Z051209", gleda: "0V6W", "gli ": "0Q6O0V0E1A04", glia: "0Q3J", glio: "0Q71", "glio ": "0Q591O02", gl\u00E9: "0L020O0O", gl\u00EA: "0P0S", gma: "030G0D0A14051O05", "gno ": "0O020P020Q2Y0T0K1O05", gny: "0B0P1405", gob: "0O081P34", "gob ": "1P3H", "god ": "0D060M090R0C0V0B0Z1C100I121L140O1P0I", godt: "0Z2D121G140E", "godt ": "0Z2U121D1405", goe: "011C0M040R17", goed: "011U0R4G", "goed ": "011O0R4A", goi: "0M1Q0Q0211051502", goin: "0M35", going: "0M4A", gol\u00F6: "1P41", "gom ": "0V081002141A1P3M", gond: "1002144M", gondo: "144M", good: "0M23", "good ": "0M2O", "gora ": "0P2M", gost: "0O030P500V031102150M", gosta: "0P3Z1104", "got ": "03040D070M21101O1428", gou: "01070L0C0P100R02", gov: "0M040P080Q030U040V460Y06", govo: "0V35", govor: "0V6X", gow: "1A061N5O", gowy: "1A031N7B", "gowy ": "1A021N98", goy: "040D0D051Q05", goz: "0Q0H1413", gpa: "0D0S", grand: "03040L4C0M0D0O1B0P1R0Q160T070Z021B031O42", grib: "0Z041D58", grib\u0113: "1D5C", gr\u00E5: "100D120F", gr\u00E6: "0Z0E130C", gr\u0101: "1D24", gr\u0101ma: "1D58", gsa: "0B070D0N0N051007130U1N0Z", gsi: "0B030D0E13041B07", gsm: "0Z0B10031B03", gsu: "0B050D09", gs\u00E5: "0Z0C120F", "gt ": "030I0L050N260R0U0Z2L105S120S13351D0U1N2P", gta: "0D0M1004140Y1B061Q0M", gte: "011J0L0E0N120R020Z14120F140J", "gte ": "011P0N230R070Z1P1213", gti: "01100D040Z0K1B0V", gtig: "011V0Z1G", "gtig ": "011R0Z0M", gud: "0Z06100912031B041P4Z", gudi: "1P67", gudik: "1P77", guf: "041E", guh: "041Y0B080D02", guk: "04390B021407", "gur ": "03090B0E0S1J134Y152D", "gus ": "0B0V0S8J0T0F14021B2O1C251O04", gusta: "0O550T081O0D", gusto: "0D4N0O090Q031O07", gu\u00E9: "0L0F0O090P1Z", gu\u00E9m: "0P2F", "gu\xE9m ": "0P32", gvi: "0Z06120D14021B021O03", gvo: "1O0R", gw: "0302040G0D020N021A051Q0C", gwa: "0304041C0D021A02", "gy ": "0M050U0214MK1N3E", gya: "0D0E1432", gye: "146I", gyer: "144H", gyere: "143T", gyn: "0Z0F120K140C1B021N82", gynd: "0Z151N0Y", gyny: "1N89", "gyny ": "1NAF", gyo: "1462", gyok: "146D", "gyok ": "146P", gyon: "1467", "gyon ": "146E", gyp: "0M020T0Q10021402", gyv: "140C1B3U", gyve: "140J1B4Z", gyven: "14071B9X", gyz: "14041N4C", gza: "039R0R031A081B06", gzaw: "03A8", gzawa: "03JV", g\u00E1: "0S0E0Y051304141M", g\u00E2: "0L02150E", g\u00E4: "0N03100811021N09", g\u00E5: "0Z1A1023121M", "g\xE5 ": "0Z0L101Y120Y", g\u00E5n: "101E", g\u00E5ng: "101W", g\u00E5r: "0Z15102E121D", "g\xE5r ": "0Z2S102U123A", g\u00E5t: "1009120A", g\u00E6: "0Z041315", g\u00E8: "0L02", g\u00E9: "0L0G0S061427", g\u00EA: "0P03", g\u00ED: "0O031303140U", g\u00F0: "131N", g\u00F0i: "132I", g\u00F3: "0O07130T140C1A0E", g\u00F6: "101G130F140C1F471N5J1P17", g\u00F6n: "130C14021F0L1P21", g\u00F6r: "103Y14051F7E1N88", "g\xF6r ": "1025", g\u00F6ra: "1039", "g\xF6ra ": "1037", g\u00F6r\u00FC: "1F431N2N", g\u00F6r\u00FCn: "1F451N2R", g\u00F8: "0Z0T", g\u00F8r: "0Z16", "g\xF8r ": "0Z1A", g\u00F8re: "0Z1X", "g\xF8re ": "0Z25", g\u00FA: "0O091403", g\u00FAn: "0O0S", g\u00FC: "0N020O03140A1F3I1N4W", g\u00FCn: "14071F5E1N5C", "g\xFCn ": "1F3C1N3W", g\u00FCr: "1F0E1N2T", g\u0101: "0T021D18", g\u0103: "1510", g\u0105: "1A061B0N", "g\u0105 ": "1A0C1B1P", g\u0117: "1B0T", g\u0119: "1A101B07", g\u0131: "1F0H", g\u013C: "1D09", g\u0142: "1A1R", g\u015F: "1N0M", g\u0173: "1B0M", "g\u0173 ": "1B1P", "h'": "1F021Q2B", "h'a' ": "1QGJ", "h-": "0B03", "ha'": "1QF1", "ha' ": "1QFS", haa: "012O0B040N050R22111Y1C0D", haar: "014S0N0D0R5O1103", "haar ": "014S0N070R7G", habe: "0N9I0O1D0T8R1F0K", "habe ": "0N97", haben: "0N700T0S", habet: "0L020N020T3V", habi: "0B0M0L1K0M030O130P080T3K", habit: "0L270M040O180P060T3R", habl: "0O451Q1E", habla: "0O4J", hace: "0O6B", "hace ": "0O2S", hacer: "0O52", "had ": "010W0M3C0R3X1C0Z1Q0N", hadd: "0R0J123R140G", hadde: "0R0P123R", hade: "0N060R030Z0M102W", "hade ": "0N040R02102W", haec: "0T32", "haec ": "0T38", haf: "040H0N0V0Z041005132Y1F1I", hah: "040D0D070N0211021QEX", "hah ": "0N021QJE", hail: "0Q020S3N1108", haile: "0S7Z1108", hair: "0M0G0SB6", "hair ": "0L020M0I0SK4", haire: "0S8M", hairt: "0S9P", hait: "03030L0N0S521108", haith: "0SG7", haj: "040O0P020U050V0L0Y0H10021105140Y1A081Q7P", haka: "04LA11021F02", "haka ": "04RZ", hakk\u0131: "1F3T", halu: "0D021195", halua: "11GJ", "hann ": "100413R9", hanno: "0Q3I", hao: "0S1W0V02", happ: "0L070M210R0B1104", "hari ": "04F30B7M0D03", haru: "0B4J0T05", harus: "0B8N", "has ": "0D020M4B0O2K0P1R0S220T081N14", hasa: "0B4L0L0514041F031N0F", "hasa ": "0B8O", "hat's": "0M2C", hava: "0P0D110914081C0I1F131O4J", havas: "1F021O8K", havd: "0Z2W", havde: "0Z3I", have: "0M7P0P0K0R050Z351006120714031O07", "have ": "0M9Q0P0A0Z31", hay: "03020B080D150O2S1F2L1Q2A", "hay ": "0D1S0O3T1Q08", ha\u00E7an: "1N3Y", hb: "03050M020N040S091F021Q42", hbe: "030H1F041QC2", "hbe'": "1QJ6", "hbe' ": "1QOC", hc: "0S0G0U290Y321A2E1Q0U", hce: "0U2J0Y7H1A1O", hcel: "0Y34", hcem: "0U0B0Y521A06", "hcem ": "0Y5P", hci: "0U251A21", "hci ": "0U3H", hcia\u0142: "1A4F", hde: "03060N04112E", hd\u00E4: "1120", "he'": "0M1U1Q0M", "he's": "0M2F1Q0B", "he's ": "0M3B", "hea ": "0Q08110415041C2C", hean: "0S5X1103", heann: "0SDP", hear: "0M1E0S3A", heart: "0M0E0S87", "heb ": "0RB71C0Y1Q08", hebb: "0R5P", hebbe: "0R7M", "hebt ": "0N020R31", "hed ": "03030M1I0Z1T1C0E1Q0E", hede: "010Q0R0C0Z1L110A1F04", hee: "010U03020M070Q0B0R3Z110O", heef: "0RAM", heeft: "0RDU", "heel ": "0R2N", hef: "0L040N040P060Z021004134S1502", hefu: "1344", hefur: "138G", heg: "03030P1I0Q031303140A1Q58", heh: "041Q0N031Q07", "hehe ": "0491", heid: "012P0N0M0R2W0S0V110X", "heid ": "012O0N060R3C", heim: "0N0L0R0A133Z", "heir ": "0M28", heith: "0S7Z", hej: "040Z0U080V020Y060Z0210051A021O0R1Q1E", "hele ": "0R180U030Z1I121G1C13", help: "011R0M2A0R1L11141O1I", "help ": "011U0M2L0R09", hely: "143Y", hemm: "0Z06100R1111120A1N4F", hemme: "0Z08120A1N55", hende: "0N0D0T020Z41120J", henn: "03050Z02103911031236132O1404", henne: "0Z031039110412361F02", heo: "0N020S1N0T02", hera: "046F0L020N0H0P020Q040T021403", "hera ": "04AF0L02", "here ": "0M9B0N040T03", "het ": "01QY0L020RQG101B1109122H143C1Q0L", heten: "100M121Q1403", heu: "0L270N0T0P030R030T041107", heur: "0L3O0R02", heure: "0L5H", hey: "03040M3M13121F0D", "hey ": "0M5L1F05", hf: "0S4J", hfu: "0S9Y", hfui: "0SBG", hfuil: "0SSF", hg: "0N031Q03", hh: "03040N0314071Q0F", "hic ": "0T42", hier: "01A70L180N2G0O060Q0C0R3L11031O0O", "hier ": "012N0L220N3O0R4G", hierd: "0181", hig: "0D070M0A0N0814021Q09", hih: "0D07110214021Q0O", hij: "040L0B020O0Y0R4Q1Q1W", "hij ": "0RFK1Q0W", "hil ": "031F0D0U0R080T2O1F031Q09", "hili ": "1N4D", "him ": "03020D020M3K0T021Q0N", "hin ": "03050D1F0M050N0T0S0V112C1A021Q06", hindi: "0DD01F04", "hing ": "0D070M6P0R02", hink: "0M4Y0N021002110A", "hink ": "0M61", "hios ": "0SAC", hira: "04850D0I", "hira ": "04BB", "his ": "0L030MCM0T0F150Q1F021Q0L", hiu: "0Q0I0T03110D1509", hiy: "040F0D09", hiz: "0O0Q15051F05", hi\u00E7: "1F4B1N55", "hi\xE7 ": "1F3C1N6Y", hj: "0Z12100S1109121513121C071Q0N", hje: "0Z0Y1108121Q", hjel: "0Z0D1105121W", hjelp: "121T", hjem: "0Z1T1221", hj\u00E4: "10271107", hj\u00E4l: "102M", hj\u00E4lp: "102F", hj\u00E6: "0Z0J", hj\u00E6l: "0Z1F", hj\u00E6lp: "0Z1Q", hk: "0B150N060U020Y07110E1C0Y1F02", hka: "0B1W110B1C0R1F02", hkan: "0B2W1C0G", "hkan ": "0B5811021C13", hke: "0N08110A1C191F02", hku: "0B0Q0Y0511041C0Z1F02", "hl ": "0N0L0U1P", hla: "0B030N0R0S3K0U2H0V0C0Y42110A130L1F071Q4O", hlaim: "0S8M", "hle ": "0N0I0U5K", "hm ": "0N0U", hme: "030C0N0S11091F021Q5D", hne: "0N1T0S170U0H0Y191106130615031F021Q0F", hny: "0B0S0U0M110U", hobo: "04MQ", hobor: "04S8", "hoc ": "0T5V", hoch: "0N0E0U021QBA", "hoch ": "0N0A1QFC", hodi: "0T1V0U2L0Y281O13", hodn: "0U2W0V090Y0V1A03", hodn\u011B: "0U2W", hoe: "012J0M050R1S", "hoe ": "01330R3J", hoeko: "011T", hog: "0O050R020S0P14BW1Q1Z", hogy: "14OC", "hogy ": "14OI", hoi: "0L0E0M030S31110P1C0P", hoj: "0O050P1Q0U020Y0711071Q46", "hoje ": "0P2O", hold: "0M090Z35122K140A", holde: "0Z27121E", "hom ": "013R0M020U0W0V020Y0B1Q52", homan: "0T2E1O02", homi: "0T2O", homin: "0T2T", hono: "0L020M020O030T08103414031A021O041Q0B", honom: "1034", honu: "0T0L133O", honum: "0T0N137K", hoo: "01170M0S0R1F11021C0J", hoor: "011V0R1B", "hor ": "0P2L0T031Q06", hora: "0L020O3L0P300T1M1A04", "hora ": "0O3Y0P1Q0T0U1A07", hose: "0L3B0M0P0N041102", "hou ": "01450M020P0S0R1W0U0L", houd: "0R34", houg: "0M2E", hough: "0M39", houl: "0M2R", hould: "0M3S", hovo: "0U090V030Y95", hovor: "0U050YB4", how: "0M250P021A0J1N1I", "how ": "0M3H0P02", hoy: "0D020O161Q1N", hoz: "142P", hp: "1Q26", "hpu'": "1QCW", "hpu' ": "1QHC", hq: "1Q19", "hr ": "0N4G0Z031305", hre: "0M0P0N3I0R070S170Y051106130D1F04", hren: "0N35", hs: "0M030N0Y0S071F07", hst: "0N0Z", hta: "0S3N111F1C0K1F0F1Q80", htah: "1QB2", "htah ": "1QDG", "hte ": "0N410R0V0U051F02", hti: "0M020N0P0R0C111Q1C161F1O", hts: "0M050N0Y0R061C13", htu: "0N0511181C32", ht\u011B: "0U1V", ht\u011Bl: "0U2Q", "ht\u011Bl ": "0U2V", "hu'": "1Q88", hub: "0B080D030O0H0U051Q09", huc: "0P060T0K1Q28", "hugh ": "1QBQ", hui: "011C0B0B0L120O020R1A0S5V0T0I110M", huin: "0S2R1104", huine: "0S8E", huis: "012J0R3Z1104", "huis ": "01270R4G", huj: "0B0K0U080Y0D11041Q0D", huk: "04110B0I0D02110C1F02", hull: "016303020Z02110H1205140C1C0K", hulle: "016G0Z02", "hun ": "0B2O0R1D0S470Z8J110M12A31Q0O", hund: "0M060N140O030Z3A101Q121N131S1O0R", "hund ": "0N0Z0Z1T100R120I130B", huo: "113Q", "hur ": "0S1C104V1Q0I", "hus ": "0T0D0Z1B100Z120H1Q06", huw: "0D0M0R04", huwa: "0D12", huwag: "0D1X", hva: "0U020V180Z271108122Q135P1C0K1F081Q8M", "hva ": "1106126R", hvad: "0Z5Q1Q9A", "hvad ": "0Z6W1QF2", hva\u00F0: "137L", "hva\xF0 ": "13CW", hve: "0Z1C1102121R137T1F0L1Q13", hvem: "0Z1R11031221", "hvem ": "0Z241221", hver: "0Z1U122E13BF1F02", "hver ": "0Z1N121K135D", hverj: "137C", hvern: "135I", hvi: "0U040Y090Z1A110M121D1C0M1Q57", hvis: "0Z1R1105121Y1Q92", "hvis ": "0Z24121W1QEQ", hvo: "0Z3C123D13141Q0H", hvor: "0Z8O1289131R", "hvor ": "0Z5V1245130F", hvord: "0Z1I1220", hvorf: "0Z2M122K", hwa: "030B040L0B0Z0N091A04", hyv: "114K", hyvin: "1170", hyv\u00E4: "1152", hz: "0N030R02", h\u00E1: "0O020P0M0S2J0U190Y10130S142Z", "h\xE1 ": "0P2J0S0W0U0G0Y0B", h\u00E1i: "0S4H1402", h\u00E1z: "0U0T141U", h\u00E2: "1F0J", h\u00E3: "0P0F", "h\xE3 ": "0P1J", h\u00E4: "0N10103N115S1C0P1N0X", h\u00E4n: "0N0A101E11HN", "h\xE4n ": "11KG", h\u00E4ne: "11A2", h\u00E4nel: "116Z", h\u00E4nen: "11CN", h\u00E4r: "107R1102", "h\xE4r ": "109X", h\u00E5: "0Z0L100X120F", h\u00E5l: "101Q", h\u00E5ll: "1026", h\u00E5n: "0Z0C1209", h\u00E5p: "120B", h\u00E5r: "0Z0C100P1205", h\u00E6: "0T070Z0A130W", h\u00E6n: "0Z0A", h\u00E7: "1F05", h\u00E8: "0L04", h\u00E9: "0L0E0O020Q0X0S220U090Y0A130S140W", "h\xE9 ": "0L0X0O030Q3K0U0E0Y0P", h\u00E9a: "0S44", h\u00E9an: "0S38", h\u00E9ana: "0S9X", h\u00E9i: "0S1Z", h\u00EA: "010C", "h\xEA ": "010K", h\u00ED: "0O060S2I140T", "h\xED ": "0O0F0S5J", h\u00F3: "0O020S151305140B1A0D", h\u00F4: "0L02", h\u00F5: "1C03", h\u00F6: "0N14101J1103130M14091N0E", h\u00F6r: "0N0Z1016", h\u00F6v: "1025", h\u00F6ve: "102F", h\u00F6ver: "102F", h\u00F8: "0Z0U120X", h\u00F8j: "0Z0F", h\u00F8r: "0Z0K120T", h\u00F8y: "120G", h\u00FA: "0S0X133S140G", "h\xFA ": "0S1N", h\u00FAn: "0P021373", "h\xFAn ": "13B6", h\u00FC: "0N0914071C051F04", h\u012B: "0T02", h\u0131: "1F0G", h\u013E: "0Y0L", h\u014D: "0T0T", h\u014Dm: "0T1T", h\u014Dm\u0101: "0T2I", h\u014Dm\u0101s: "0T2I", "i'": "0M271F0D1QA2", "i' ": "0Q031QLD", "i'd": "0M0H1F031Q0W", "i'l": "0M0Q1Q0X", "i'm": "0M2A1Q0X", "i'm ": "0M45", "i's": "0M0D", "i'v": "0M0R1Q18", "i-a": "030H156P", "i-a ": "0305156N", "i-l": "0B0G0L020P0715051P1A", iac: "0O030Q4I0S0N0T0N0Y2B14021A0B", iace: "0Q510T060Y0T", "iace ": "0Q34", "iad ": "0S4514031A0D", iae: "0T2N", "iae ": "0T4O", iah: "0B080Y08", iai: "0L070P090Q070S19110E140415051B5U", "iai ": "0Q07140815091B84", iaj: "0O0I0P0D1A0V1O3O", "iaj ": "1A0Y1O3K", iajn: "1O2B", "iajn ": "1O4K", iak: "0B080V050Y0K110714091A06", iamo: "0O030P020QCY1B02", "iamo ": "0QCW", iap: "0B200Q0P0T0G", iare: "0O020P020Q3W0T050Y0I1505", "iare ": "0Q3X0T040Y0H", iarr: "0S3E", iarra: "0SCX", iate: "0L090M0C0Q1H0Y3415051A021B08", iate\u013E: "0Y2S", iato: "0O040Q3X0T050Y0C11021A031B02", "iato ": "0O040Q3U", iau: "0L021102150E1BDO", "iau ": "150M1BF8", iaus: "1B4I", iausi: "1B7T", iav: "0P030Q0P0T041B0U", ia\u0142: "1A8P", "ia\u0142 ": "1A4K", ia\u0142e: "1A3R", ia\u0142em: "1A48", ia\u016D: "1O0R", ibaz: "0472", ibh: "0S5I", "ibh ": "0S5V", ibig: "0D0W", ibir: "047I0O0O1B031F02", ibt: "03030N0V", ibus: "0P0J0T7Q1Q08", "ibus ": "0P0O0T80", "icam ": "0P060T3A", icc: "0O0A0Q110T021409", iche: "0L0Q0M030N4F0O020Q1N0T031Q2M", icht: "0NLF0R2V1Q06", "icht ": "0NPQ0R28", icit: "0L090M020O050P020Q070R050T2W0Z03151X", "ico ": "04EZ0O3I0P2R0Q3M0R040T0S0Z021O0B", icul: "0L0L0M0I0O0A0P0E0T2R151M", ic\u0103: "152S", idad: "0D0D0O4K0P4X1C0I1O02", "idad ": "0D0O0O4O", idade: "0O0I0P54", idag: "100R1C3D", idagi: "1C81", idak: "03030BJU1102", "idak ": "03050BS3", idas: "0O0N0P0P11051B0B1C221O0W", "idas ": "0O0T0P0V11051B0N1C521O1S", "idel ": "0U020Y3D1P1N1Q0A", idh: "0SBJ", "idh ": "0SD6", idir: "030U042H0O040P050Q020S521F2G1N0P1O03", "idir ": "031O0L020O030P040R020SH81F3B1N0N", "idn'": "0M4Z", "idn't": "0M6Q", idst: "0U020Z1W", idste: "0Z1T", idt: "03020Z0K12041Q04", "idt ": "03020R050Z1E1207", idy: "030K0T2E1B04", idym: "0T4I", idymu: "0T45", id\u00E4: "113Z", id\u00E4n: "114I", "id\xE4n ": "11AK", id\u00E9: "0L150O040P020S0W0U0P0Z02100B12031407", id\u00ED: "0O040U1G0Y1X", id\u00F6: "1P1E", id\u011B: "0U20", id\u011Bl: "0U2K", "id\u011Bl ": "0U2K", id\u0151: "141S", ieb: "0N1M0O040T0Z0Y0N1A1N1B031D0N", "ied ": "0L0B0M2D0N0G0R0B1403", "iedy ": "1A3U", iedz: "1A7I1D1L", iedzi: "1AA5", ied\u00E4: "113Z", ief: "01210M030N0J0R111504", "ief ": "01450M050N0S0R15", "iego ": "0M040O080Q081A491B0C", iei: "0L0B0P030Q0K0T03151B1A02", iej: "0O0E1A5C1B0H", "iej ": "1A4I", iek: "010U0R0Q0Y4D110914051A2G1B851D8N", "iek ": "011A0R1O0Y0R14081A191B3N1D23", ieka: "0Y0S11031A0R1B4J1D1A", iekad: "1B54", "ieko ": "0Y0N1B56", "iem ": "0T160Y6B15061A5X1B041DDA", iema: "01280N130R2L110F1A041B03", ieman: "012D0N1F0R3G110Z", iemp: "0O4V0Q03", iempo: "0O3N", iempr: "0O2V", iena: "0Q080T0411041A0G1B481D4S", "iena ": "0Q070T021B331D5Y", ienas: "1B531D2Y", iend: "01280L0P0M1G0O4B0Q050R2Q0T180Z021006120B", iendo: "0O4I", "iene ": "0N030O6T0Q0W1205", ieni: "0N020Q0D0R02110X150C1A4A1B1R1D0Q", "iens ": "0L3B0N030R080T0U0Z0410021D7I", "ient ": "0L8A0M0C0N0C0R090T09150F", iente: "0L060N060O3L0P190Q1W0T0L0Z0510021506", iento: "0O3E1A031O0B", ienu: "0T021B081D31", "ienu ": "1B091D7N", ien\u0105: "1B39", "ien\u0105 ": "1B6M", "iera ": "0L030O2S0Q0Z0Y0B15051A0K1B021O03", ierd: "017L0O0F0R05151P1A0C", ierdi: "017Y", iero: "0O4T0Q0B0R020T020Y0L11031A0J1O0M", "iero ": "0O430Q0B11021A0A1O0P", iese: "010S0N610O070Q090Y08140215061B04", iesz: "1A4R", iets: "012K0R4J0Z0214021B06", "iets ": "012Q0R5W0Z03", ieu: "0L2Y0R0M1A04", iez: "0L1O0O0N0R040Y0J150N1A0I1D2M", ie\u010D: "0Y1Z1B0J", "ie\u010Do ": "0Y3D", ie\u0161: "0Y1H1B2A1D3N", ie\u0165: "0Y24", "if ": "031G0B080L0G0M1L13071F0H1P32", igaz: "1448", igd: "0D020R0C1A1B", "igen ": "030H0N3E0O040R1K0Z1H103E1205140X", "iger ": "03060L080N1I0Q0D0R0C0T080Z1S1003", igg: "03070M030Q070R020Z0J100U120C13071402", igge: "03030M040R090Z1C1010120R", "igh ": "0M0D0S7T1Q18", ighe: "01140M030R0J0Z1U1012122J1Q0Y", ighed: "0R060Z29", ighet: "1012122K1Q0K", ight: "0L020M4O0Z02", "ight ": "0L030M5G", igih: "048E", igihe: "04AQ", igini: "0D020Q021NB5", igis: "043D1O25", "igis ": "1O46", igj: "120M", igje: "121K", igjen: "121K", igli: "0N030Q4G0V06", "igo ": "0D040O2R0P320Q040T071B091O0C", igs: "0N060Z0812081B05", igt: "010H03060D030L040N0K0R070Z2A10531B0D1D0J", "igt ": "03060L030N0Y0R0R0Z4Q106P", igti: "010Q0Z171B0F", igus: "0T031B0L1C3A1O02", "igus ": "0T041B171C4L1O04", igv: "0Z07120D", igy: "0D0414121B03", "ih ": "03040B4J0U050V4Q1F0E1Q62", ihan: "04150B0J0D0U111U1F03", ihat: "0B4X11041402", "ihat ": "0B7M", ihe: "0306044X0D020N060Z021004110Z1204140C1Q0X", "ihe ": "04CV0N031103", ihi: "030G040O0B020D0U0T5T111E1F07", "ihi ": "030B0T881F03", ihil: "0D020T2R", "ihil ": "0T2U", ihin: "030504110D11112D1F03", ihm: "0N0O111U1C0N1Q0B", ihn: "0N1C0U060Y0B15051Q03", ihr: "0N2W1105", "ihr ": "0N40", ihre: "0N36110A", iht: "110L1C1F1F1M1Q0X", ihu: "0303041U0U0N0Y1B11041Q0J", iig: "1C1X1O06", iik: "112A1C0W", iin: "0D0E0Y0A119U150K1C3E1O02", "iin ": "0D040Y0811C91C39", iir: "11141C211F04", iis: "0D070T111004111S14021C2R1O0O", iit: "0D080T0O113O150Q1C0S1O02", "iit\xE4 ": "117L", "ij ": "03050R810U031A0L1QCA", "ija ": "0O0F0P020V2Z110T14071A041B571DEG", ijas: "0O0311051B091D40", "ijas ": "0O041B0F1D9X", ijd: "03020R1Q0U0J1Q0X", "ijd ": "0R4E", "ije ": "045E0O0E0R0G0U100V880Y1D14041A091N0V", ijf: "0R0O", ijg: "0R0B", ijk: "0R3I", "ijk ": "0R8I", ijn: "0R871Q06", "ijn ": "0RN9", ijo: "040L0O1U0P0A0V08110F150C1B3G1Q0E", "ijo ": "0O2C0P081B0T", "ijos ": "0O0O1B5D", ijs: "0R0G0V091A021D0H", ijt: "0R0C1Q08", "iju ": "0U080V1W1D3Y", ijv: "0R0F1Q08", ij\u0101: "1D27", ij\u0105: "1A021B1J", "ikai ": "140L1B291D5L", "ikan ": "03020B8D0D08111B1F081O0B", ikd: "0U2S0Y261B021N0S", "ikdo ": "0U2M", ikdy: "0U2O0Y3M", "ikdy ": "0U3P0Y4H", iker: "03090N0B0R080Z0D100B1104123F1419", "iker ": "0N0F0R090Z09100912391404", ikia: "11021B46", "ikia ": "11041B7O", ikir: "044X0B2A11051F0I1N60", "ikir ": "0B321F0B1N4T", "ikk ": "123E", ikke: "010J03170R0R0ZL5110Y12NR1406", "ikke ": "0R040ZMS12MK", ikker: "0R070Z1V121K", ikki: "115E", "ikki ": "1196", ikm: "0B0713051F02", ikn: "0B0C0U030V021005130914031A061F0G", ikob: "1P3S", "ikob ": "1P4D", ikod: "0D031P5W", "ikod ": "0D061P67", ikol: "1002110M14031F051O071P3I", ikor: "047F0D081102144M", "ikor ": "144S", ikra: "14031B2U1F02", "iks ": "011D0R080Z0211041B0O1C4M1D2Y1P0Y", iksi: "0D06114M1B0I1C0O1D0M1F041O04", "iksi ": "11AH1B09", ikti: "0302101C121G1B1K1D151F0C1O03", iktig: "101C121F", ik\u00E4: "112L1N0A1P0J", ik\u0117: "1B22", ilang: "0B370D6H", ildi: "0M0813141F451N17", "ilen ": "030L0N0L0R0H0Z0M100O113U12141F0H1NHC", "iler ": "0L030O020Z0C12091F2D1N44", ilik: "010F0B2P0D020V081B0R1F0F1N0O1P0G", ilir: "1F6H", "ilir ": "1F5E", iliy: "1F46", iliyo: "1F5K", ilj: "0R020V0X0Z04101G110O1205130X1C0V1N13", illar: "0L070O051025", iller: "0L1O0M020O030Z1J110312141F0I", ill\u00E4: "1003114A", "ill\xE4 ": "119G", ilma: "030211351B061C2Q", ilme\u00FD: "1N40", ilob: "1P7A", "ilob ": "1P7X", "ilom ": "0V071P52", "ils ": "0L760M060N020R020Z0213051P0Y", ilv\u0113: "1D66", ilv\u0113k: "1DE6", ilye: "145J", ilyen: "145C", il\u00E4: "11061P1N", il\u00ED: "0P020S1Q0U04", il\u00FD: "0U091N4S", il\u00FD\u00E4: "1N6L", il\u00FD\u00E4r: "1N5Z", "imas ": "0O0E0P0D0T091B6S1O0Y1Q13", imd: "03071B021F321N18", imese: "1C5I", imh: "0S1P", "imid ": "0S8U1505", "imme ": "0N0D1009118A", immer: "0M020N5E0R05", ims: "031W0M0J0V03130J1B081F1N", imt: "031M150K1B2A1D10", imus: "04190T6111061B0H1C0X1Q2B", "imus ": "0T6B11061B101Q1O", imw: "043Y", imwe: "048U0N02", "imwe ": "04EF", imy: "042X11021A0X1B0K1F02", imya: "047P1F02", imyak: "04CS", im\u0105: "1B1R", inab: "0D120O040T051Q08", inag: "0D1E0L020Q0H", "inai ": "1B58", inak: "0D120U05110A141K", inaka: "0D1L1104", inau: "0D030N061B3K", "inau ": "1B6Y", incs: "145V", "incs ": "145A", "ind ": "011P0M240N5H0R1W0Z1O10061209140Q150S1C66", "inde ": "046Y0L040N0O0R0C0T0E0Z2Z150N1F4H1N2F1O0J", inden: "0N180R180Z0T1006149G1F321N1X", inder: "01240D030M020N210R2N0Z1G1002", "indi ": "0305047L0DCY0Q0C13101B041F0E1N22", indig: "0D020L030N040O030R090T0514421O04", "ineh ": "1QAL", "inem ": "030D0N5V0T1E0V0A15051A08", "inen ": "03090NC60R060U030Z07100911QJ120R1F02", "iner ": "0L0X0M020N6E0R080Z0G1006120H", ingas: "110F130K1B601O05", inger: "0M090N0F0Q040R0A0T050Z1X100F121N1402", ingg: "0B720D0I", ingga: "0B7E0D0A", "ingo ": "04910O0A0P091B0S1O04", ingua: "0D020P050Q0Q0T3M1002", inh: "0N030P931107130P", inha: "0L020N040P7L", "inha ": "0P7X", inho: "0P2F0R031108", inime: "0T0A11051C9A", iniz: "0Q101F3G", inka: "0B0Y0N050U021005113I14031A031B451F021O0E", "inka ": "1002116B1A031B5V", "inn ": "0N0C0S6Y1003121B13K114051C0O", "inne ": "010K0N060SBD100E112A12251A0B", innen: "0N0U0R2O120J140I", "inni ": "111R13AF140Q1A0B1C1O", inns: "102B120K1316", "inns ": "102B", inob: "1P961Q1T", "inob ": "1P8G1Q24", inof: "1P4Z", "inof ": "1P4O", inol: "1P66", "inol ": "1P5E", inom: "0D0E0V081006110614091B0X1PJL", "inom ": "0D0R0V0K100414071PJ1", inoms: "1P3H", inon: "0D0E0L0511031O0Z1P8T", "inon ": "0L0511021O1W1P7T", "inos ": "0O0J0P090T09140415071B1E1O031P4V", inq: "03020L0M0O020P070Q0B0T0Z1Q08", inseg: "0Q2Q", insh: "04DF", inshi: "04AA", "inte ": "0L0H0N080O090P0F0S3S10KM140H152T1O0M", "inti ": "0D050Q030T0F110S140215051B5G", "intu ": "049Z0B0V110H", inua: "0L020O060P0C0Q0I1164150I", "inua ": "0L020P040Q0411DW1506", inud: "03021C3T1Q0B", "inud ": "1C911Q0A", inul: "0D070T030U0N0V050Y0X11BJ150Q1C1T", inull: "11MN", inun: "0D0A0N0G0O020P020Q0211AY130A150O", "inun ": "11MC", "inus ": "0T340Z02110D1B0C", "inut ": "03030U0C0V0F0Z031004117315121A0H1N0J", "iny ": "0M020U250Y311A0Y", inya: "030304450B4Q0D02", "inya ": "0B8O0D03", inyo: "042D0D2W", "inyo ": "0D47", inzi: "048B0N0K1504", "inzi ": "04AL1505", in\u00E1: "0P060U0G0Y0S1420", in\u00E1l: "1450", in\u00E4: "11BK1P0N", "in\xE4 ": "11I2", in\u00F6: "11021P29", in\u0101: "1D8N", in\u0101j: "1D43", in\u0101ja: "1D5H", in\u0101t: "1D49", "in\u0101t ": "1D5Q", in\u0117: "1B22", ioa: "0T0H1510", ioc: "0Q180T041506", "iom ": "0S8D1A081O2Q", "ione ": "0O020P030Q7D0T131A0J1B04", ionem: "0T2C", iones: "0O340T0Y", ions: "0L3Y0M1C0N040Z0510041102", "ions ": "0L6G0M1N", "ior ": "0M050O080P0Y0Q070T2W1507", iorn: "0Q2K", "ios ": "0O2K0P1P0S2P0T1415111B2D1O04", iou: "0M0K0P0B0Y081503", iov: "0Q0P0T031B07", ipf: "041U", ipin: "0D0X0Q05", iqu: "0L3J0M020O0F0P0W0T261Q31", ique: "0L590M030O090P100T16", "ique ": "0L5X0M030O030P0J0T0X", "iras ": "0L060O050P0M0T02110H1B061O4Q1Q57", irc: "0L050M020N020O040P040Q090S0N0T0K15041F02", "ird ": "0M080N35", irea: "0S4D1511", ireac: "0S9A", iris: "043Y0T060V0311081F0C1O3K", "iris ": "0T060V061O6U", iriz: "04F90Q061F0H", irizw: "04HK", irj: "113T1C22", irke: "03020N020Z1H121Y14031F0F", "irt ": "030W0M060R050S5V0Z05", iry: "041V1A031B02", ir\u00ED: "0O0A0S2A", "ir\xF0u ": "1359", ir\u0161: "1B1Q", "is-": "030O0L1U", isam: "0D030L060O020P0N0Q050T030V3P1B051Q0T", "isam ": "0P090T030V911B031Q0H", isang: "0B070D40", isch: "0N6G0Q090R2G0Z021Q0M", "isch ": "0N4Z0R200Z02", ische: "0N5F0R1C", isd: "0D050R04100214021B081O02", isel: "030L0B040L02111T141F1C431F08", "isen ": "030V0N0N0R030Z0F100H119G120L", "iser ": "03030L1A0N050P0E0T040Z1M121H", ises: "0L0U0M040P030Z02114J1B021C121F02", isest: "118Z1C1E", "iset ": "03051005116W", isha: "04BV1F05", "isha ": "04E5", "isin ": "030F0D070L0911C41C2X1F44", "isk ": "0M030Z2M1018122T13071A031B0M1F02", "iske ": "0Z1J121B1F02", isle: "03030V0A13061F051N7R", isle\u00FD: "1N64", isli: "03020V3T1F03", ismer: "143M", "isn'": "0M2J", "isn't": "0M3H", "isne ": "0T3J", "ison ": "0L580M0811091O07", isq: "0L080T0L1Q0F", "issa ": "0D030L060M030P020T05100B11EO130S1402", "isse ": "0L1S0N0K0P3S0Q1D0R020T2M0Z10120W1C3Y", issi: "030E0L0L0M0A0N020P030Q0U0R0B0T2Z1107130K", issim: "0L030Q0E0T2U", isso: "0L0P0P990T041106", "isso ": "0PBF", issza: "142X", iss\u00E4: "113X", "iss\xE4 ": "118G", istea: "0S87", isted: "0M040Z0A1F45", istem: "0B090D030O0A0P0J0Q060V0F150P1B041F471O0B", "isti ": "0P020Q0H0T3W0U050V18112G1B2O1O04", istiy: "0D021F63", "isto ": "0O1C0P2X0Q1N0T050V0Z110H1B0J1O3W", ist\u00E4: "1004116G", "ist\xE4 ": "11CP", isw: "03030B0A0R02", isy: "0D0D0U03110E1A021B0F1F06", isz: "142R1A2Y", "isz ": "140B1A3G", is\u00E4: "112G", "it'": "0M1H1Q06", "it's": "0M2I", "it's ": "0M3F", itab: "047Y0L070M020O080T0L1C0G1F0P1N0Y", itabu: "04BR0T08", "iten ": "030O0N2M0O030R1A100E116Y120O", itg: "010G0N040R091B04", ithe: "0M0C0S6J", "ithe ": "0SFV", "itko ": "11771B04", itme: "1F3C1N2N1Q06", iton: "042H0D0U0L03110A1B031O08", itong: "0D1K", itq: "0T101Q04", itse: "04390M020R0A116G12061C221F03", "itt ": "030J0N0D104Q126N135G145U", itta: "03050L020N0E0Q0C0T0I1025115B130K140C1Q0J", "itu ": "0BEW0O030T0C0U040V0311041B071C0S1D0Z1O03", "itur ": "0T4V130H1A021B021Q0A", itw: "0303041J", it\u00E0: "0Q4G", "it\xE0 ": "0Q70", it\u00E4: "0N0711DT1C0G", "it\xE4 ": "11GE", it\u00E4\u00E4: "114X", it\u00E9: "0L2L0O030U0B0Y0C1402", "it\xE9 ": "0L3N0O050U0F0Y0J", it\u0103: "1533", it\u0105: "1B1S", "it\u0105 ": "1B2V", "iu ": "0P360S0M0T0B0U020Y1C153Z1A1U1BBM1O6L", iud: "0O0P0Q0B0T0L150F1B04", iuj: "1A031B071O2X", "iuj ": "1O3I", iul: "0T0K151R1B081O06", iun: "0B0C0O020Q0K0T1L15251B081O2A", "iun ": "0B0K150L1O3M", iuo: "1B2O", iur: "0Q030T0J15051A0C1B081O02", iut: "0Q370T0311021403150C1B0F1O08", iuta: "0Q2M1O0B", iuv: "0T0Q1B06", "ivat ": "0T0411AM", "iver ": "0L100M0E0N020P0V0R020Z2P100E120H", ivr: "0L1P0P1V", ivy: "045H0M0211021B031F02", ivyo: "04AJ", "ivyo ": "04H7", iv\u00E4: "1005114K", iv\u00E4t: "113N", "iv\xE4t ": "118G", iwe: "035U044Y1A0M1N0E", "iwe ": "04DF1A0L", "iwen ": "037X", ixa: "0L030P1G0T021003", ixe: "030O0M020P0V0T0E", ixi: "0T2E", ixit: "0T3J", "ixit ": "0T32", ixo: "0P12", "iya ": "0302042K0D8C1F02", iyan: "0D491F0B", "iyan ": "0D40", iyang: "0D3S", iye: "031504730D0C1F4L1Q0B", "iye ": "04IF1F2I", iyi: "036D041V1F7D1Q0K", "iyi ": "032E044C1F59", iyo: "042Q0D231FIL1Q06", "iyo ": "04750D11", iyon: "0D2L1F081Q06", "iyon ": "0D3Y1F03", iyor: "1FKC", "iyor ": "1FBU", iyord: "1F42", iyoru: "1FCS", iyu: "041Q0D051Q05", izd: "03030V081B0H1D311F0V1N0U", izda: "0V051B051D2U", izdar: "1D76", izi\u0148: "1N3P", "izi\u0148 ": "1N51", izm: "03020P040V0L0Y0514071A021B031D241F091N15", izs: "140F1D3B", izw: "0309043Z", izwa: "030904B7", "izwa ": "030204I9", i\u00DF: "0N0W", "i\xDF ": "0N0S", i\u00E0: "0Q08", "i\xE0 ": "0Q0W", i\u00E1: "0P020U030Y041416", i\u00E3: "0P08", i\u00E3o: "0P0Z", i\u00E4: "11141P0F", "i\xE4 ": "113S", i\u00E6: "0T04", i\u00E7: "0P0B1F6B1N3W", "i\xE7 ": "1F351N57", i\u00E7i: "1FAF1N19", i\u00E7in: "1FBE1N0G", "i\xE7in ": "1FDZ", i\u00E8: "0L0N", i\u00E8r: "0L2F", i\u00E8re: "0L420R02", "i\xE8re ": "0L5N0R02", i\u00E9: "0L0C0O0P1416", i\u00E9n: "0O22", "i\xE9n ": "0O2V", i\u00E9r: "0O04141Z", i\u00E9rt: "144Z", "i\xE9rt ": "1458", i\u00EA: "0P04", i\u00EB: "01050R0F", "i\xEB ": "01070R0H", i\u00F0: "13CM", "i\xF0 ": "13KS", i\u00F1: "0O0G1N5S", "i\xF1 ": "1N8R", i\u00F1o: "0O15", i\u00F2: "0Q0A", "i\xF2 ": "0Q15", i\u00F3: "0O3D140K1A0H", "i\xF3 ": "0O4E140A", i\u00F3n: "0O6G0U02", "i\xF3n ": "0O9N", i\u00F6: "11041P1B", i\u00F6p: "1P2G", i\u00F8: "1202", i\u00F9: "0Q0W", "i\xF9 ": "0Q3G", i\u00FA: "0S1R1409", i\u00FC: "14021P0B", i\u00FD: "1N5X", i\u00FDa: "1N42", i\u00FDi: "1N3F", i\u00FDip: "1N4S", "i\xFDip ": "1N6A", i\u0101: "0T041D06", i\u0105: "1A371B0M", "i\u0105 ": "1A1N1B1O", i\u0107: "0V0K1A2X", "i\u0107 ": "0V051A5Y", i\u0109: "1O0V", i\u010D: "03020U170V1X0Y231B0D", "i\u010D ": "03030U040Y1W", i\u0113: "0T08", i\u0117: "1B06", i\u0119: "1ABV", "i\u0119 ": "1AH5", i\u011D: "1O38", i\u011Da: "1O1F", i\u011Das: "1O23", "i\u011Das ": "1O45", i\u011Di: "1O2W", i\u011Dis: "1O37", "i\u011Dis ": "1O69", i\u011Do: "1O0X", i\u011F: "1F3S", i\u011Fi: "1F94", i\u011Fin: "1F6M", i\u011Fini: "1F6D", i\u012B: "0T02", i\u0137: "1D08", i\u013C: "1D06", i\u0142: "1A4K", "i\u0142 ": "1A3Z", "i\u0142em ": "1A44", i\u0146: "1D7A", i\u0146a: "1DCE", "i\u0146a ": "1D9S", i\u0146am: "1D3F", "i\u0146am ": "1D8K", i\u0146i: "1D4M", "i\u0146i ": "1D4H", i\u0146u: "1D3I", "i\u0146u ": "1D42", i\u0146\u0161: "1D9N", "i\u0146\u0161 ": "1DC2", i\u0148: "0U041NCU", "i\u0148 ": "0U031NGS", i\u0148i: "1N4C", i\u0148iz: "1N4Q", i\u014D: "0T08", i\u015B: "1A24", "i\u015Bmy ": "1A4X", i\u015D: "1O06", i\u015F: "15021F3V1N4F", i\u015Fi: "1F3H1N3R", i\u015Fl: "1F0L1N2G", i\u0161: "0U0X0V4C0Y1K1B671D06", "i\u0161 ": "0U0O0V4T0Y1B1B49", "i\u0161e ": "0V3B", i\u0161iel: "0Y36", i\u0161k: "0U021B50", i\u0161ka: "0U021B4I", i\u0161kai: "1B6F", i\u0165: "0Y3H", "i\u0165 ": "0Y8L", i\u016B: "1B0X", i\u016Br: "1B1F", i\u0173: "1B24", "i\u0173 ": "1B5O", i\u017E: "0U090V060Y0A1B08", i\u0219: "150L", i\u021B: "150V", i\u021Bi: "1532", i\u0263: "034E", "i\u0263 ": "0399", i\u0307: "1F20", i\u1E0D: "032D", "j'": "0L1U1Q0R", "j'a": "0L741Q1I", "j'ai": "0L9W", "j'ai ": "0LDF", jaa: "010H0B0N0R0M111P1C15", "jaar ": "010S0R2N", jadi: "0B3Y", "jadi ": "0B76", jadz: "1D3A", jadz\u0113: "1D71", jag: "0B070V030Z0310QD1D1P1N0L1Q0F", "jag ": "10SG1D27", jah: "0B0C0N0R11041C0N1Q2J", jai: "0M02110L14091B2S1D1X", "jai ": "14051B451D2C", "jak ": "0B0X0U4W0V0C140R1A5M1N2B", jako: "0U350V0I11031A0J1O04", "jako ": "0U3P0V1B1A0M1O02", jala: "0B2Q0U020V0B110D14021C0I", jamai: "0L4M0P0D", jang: "0B3L1Q0U", "jar ": "0B2A0O1E0P0E100G130H1Q16", "jas ": "0O0X0P070R07100214061B2E1C0V1D691O061Q06", jatl: "1QDJ", jatlh: "1QKU", jau: "0B0G0L0311061B7S1D6K", "jau ": "0B041B901D29", jaun: "0L041B141D3F", jaw: "0B0G1A09", jd: "03030R140U160V090Y0L0Z0K1006140O1A0L1Q0N", "jd ": "0R151006140Q", jde: "03040R0D0U1G0V0M0Y1C0Z0T1009", jedn: "0U2Y0V2Y0Y2Q1A1E", jedno: "0U2H0V460Y1K1A0Q", jeg: "0V1I0ZEG12HR140D1A2S1N121Q07", "jeg ": "0V040ZRJ12SG", jego: "0V1B1A40", "jego ": "1A6B", jeh: "03050U1K0Y1V", jeho: "0U2J0Y37", "jeho ": "0U3H0Y3Y", jei: "0P0E11031B1H", jej: "0302040D0U130Y3710061A2C1Q06", "jej ": "0U020Y5G10021A3D", "jek ": "140J1A041N3X", jelp: "121T", "jem ": "03080U0D0V2L0Y7N0Z0T1211140L1A0G1N0F1Q09", jenn: "1103121J", jent: "030V0V050Z0C1106121N1A03", jep: "0B0K1Q04", "jer ": "0O0V0V0M0Z1K100Q120L", "jest ": "1AOV", jeste: "0V0L0Z05110S1AAS", jeu: "0L17", je\u0161: "0U2T0V0X0Y14", je\u0161t: "0U39", je\u0161t\u011B: "0U4H", jf: "0R0G14021O02", "jf ": "0R0D", jg: "0R071A02", jh: "0U020Y0D1Q08", jie: "011B11021B4J1D371P0B", "jie ": "012D1B65", jij: "040H0R0J1Q24", jik: "0B0S1F02", jis: "0O050U0Q11031BBS1D3A1F021P0U1Q14", "jis ": "1BHO1D451O02", jk: "0R2B0U020V0F0Y0A100514021A05", "jk ": "0R2B", jke: "0R0O0V061009", jkt: "0R0B", jm: "03050U0N0V070Y0D1A0I1O0F1Q1E", jn: "0R5I0U0H0V0P0Y0J0Z05140B1A0I1O7P1Q0A", "jn ": "0R7O1OBC", job: "0M0E0Z031013120T141E1502", jobb: "101H1223143L", jobbe: "100F121O", joi: "0L090M03112Q", joj: "0V11110C1B1F1O0A", jok: "0M03112J120314021B0H1P0C", joo: "11091C21", jord: "0Z1H1023121T", jorde: "0Z1D101R121N", "jos ": "0O1S0P05113T1403150R1B5S1D1L", jot: "03020V02112O1B0J1D0T1Q08", jou: "01530L560M020P060R0N1110", "jou ": "01AK0P070R150U02", jour: "0L6N0M030R030Z02", jours: "0L57", jp: "0R051A031Q0D", jr: "0Z0914061A0A1O05", jre: "0Z09", js: "0R0B0UCB0V0A0Y0A0Z08140A1A0Y1D0C", jse: "0UE30Z08", jsem: "0UKP", "jsem ": "0UPC", jsi: "0U4N", "jsi ": "0U7F", jsm: "0U2T", jsme: "0U4K", "jsme ": "0U6A", jso: "0U2V", jsou: "0U4N", "jsou ": "0U6E", jst: "0R030U1U0V0A0Y040Z021A03", jste: "0U2X0Z04", "jste ": "0U420Z04", jt: "0R080U0H0V090Y1J0Z03141E1O0B1Q0H", "jt ": "0R0A0Z0210021409", jte: "0U0Y0V0P0Y220Z02140K", "jte ": "0U1K0V0S0Y3H", "jtra ": "0Y2X", jug: "0B0M0L050N020O0T0T02100C1303", juh: "0B04110H1C151Q39", jull: "01210R4Z", julle: "0126", julli: "0R6O", jums: "1B1O1D47", "jums ": "1B3H1DAD", juo: "111F1B2E", "just ": "0M2W100K11051C26", juu: "11191C1F", jv: "0R0A0U030V050Y031Q0H", jve: "0R0E0V061Q0A", jw: "040D1A051Q0H", jwe: "041A", jy: "015S11031N0U", "jy ": "019J1N0G", jz: "0R050V021402", j\u00E0: "0L06", j\u00E1: "0P0L0U0Q1328143H", "j\xE1 ": "0P2K0U1C131E", j\u00E1l: "132L1405", j\u00E1r: "130B141Q", j\u00E1t: "13071427", j\u00E4: "101L111I1C1A1N0A", j\u00E4l: "102Y110W", j\u00E4lp: "102F", j\u00E4r: "100P110S1C1E", j\u00E4\u00E4: "11141C1T", j\u00E5: "0Z021202", j\u00E6: "0Z0H1208", j\u00E6l: "0Z0N", j\u00E6lp: "0Z1F", j\u00E6r: "120D", j\u00E9: "0O02140K", j\u00ED: "0U530Y0V", "j\xED ": "0U5L0Y0O", j\u00EDt: "0U23", "j\xEDt ": "0U3A", j\u00F3: "0O070Y02132V141X1A02", "j\xF3 ": "0O0I1307141T", j\u00F5: "1C0F", j\u00F6: "100C131R141L1P11", j\u00F6n: "100814141P1S", j\u00F8: "0Z04122I", j\u00F8p: "120Q", j\u00F8r: "0Z04122P", "j\xF8r ": "122B", j\u00F8re: "123Y", "j\xF8re ": "123H", j\u00FA: "0Y1W130J1403", "j\xFA ": "0Y3V13071402", j\u0101: "1D3F", "j\u0101 ": "1D4N", j\u0101m: "1D2Q", "j\u0101m ": "1D38", j\u0101s: "1D38", "j\u0101s ": "1D3T", j\u0105: "1A2U1B17", "j\u0105 ": "1A431B3D", j\u0119: "1A2I1B04", "j\u0119 ": "1A3A1B03", j\u012F: "1B0Q", "j\u012F ": "1B22", j\u0161: "0U0D0Y0H", j\u016B: "1B271D1X", j\u016Bs: "1B5P1D6G", "j\u016Bs ": "1B7A1D6D", j\u0173: "1B0S", "j\u0173 ": "1B26", "k'": "0104040B1F03", "k-a": "03050B0C", "ka-": "030L0D081103", kaa: "010T0B0F0D080R0J11B71C1Q", "kaa ": "119I", kaan: "0B0U0R091197", "kaan ": "0B190R0311IE", "kad ": "0D0H0V1W100E14041BF81C0Q1D57", kada: "0B0H0D060V4B100G1B5F1F7Y1O02", "kada ": "0D030VAG10041BA61F05", kadar: "1F7K", kade: "0D020Z0910251102120C1F04", "kade ": "0Z03101W", kaff: "0N0F0Z19100Z120N130H", kaffe: "0N0P0Z1J100U120N", kag: "0D080Z05", kah: "0B4G0D0T111L14041C181F0Y", "kah ": "0B88", "kai ": "0B1G1107140O1B7F1D2C", kaik: "115Y", kaikk: "11AG", kail: "0D24110C14021B02", kaila: "0D3W1402", kain: "0B0A0D17110S1B0T", "kain ": "0D1P1107", kaip: "110A1B5S", "kaip ": "1BBE", kais: "11471B0I1D38", kaj: "0U090V080Y0W14031A0G1D0N1O6Z", "kaj ": "0V030Y0O1A0A1OA8", kaka: "0B0G0D2B0V091008110814041N19", kako: "0V2Z10051103", "kako ": "0V7D", kalb: "0D031B8Z1F07", kalba: "1B65", kalb\u0117: "1B6S", "kali ": "0B5A0U0H0V060Y0C1A06", kamb: "03030D031B31", "kami ": "0BAV0D2B0U060Y0J1A0S", kamu: "0BDK0D031B081F02", "kamu ": "0BMJ", kang: "0B0E0D0Z", "kang ": "0B0J0D1R", kann: "03020B2O0N5H110W131K14021F04", "kann ": "0N6S132B", kanny: "0B57", kano: "0D0A11051O031PA8", kanob: "1P4Z", kanom: "1P3O", kanss: "118Y", kany: "046M0B080D1O14041N0K", kanya: "04470B0G0D331403", "kao ": "0V3K", kapa: "0B1E0D1H1003110E130814031F0U1O0S", kasa: "0B050D170Z03110413081F0B", katt: "0R0B0Z1B101C110C121314021F05", katte: "0R0E0Z1L100P120V", kau: "0B2M0D0B0N0Q113Q130T1B221C1I1D2K", "kau ": "0B4W1B1X", "kaut ": "1D67", kaw: "0302040O0B030D0C1A0W", kay: "0310040D0B090D2G11051F2G", "kay ": "03030D160Z02", kaya: "03060B0D0D181F0B", kayo: "0D1R", "kayo ": "0D2D", ka\u016D: "1O1I", ka\u017Ed\u00FD: "0U1U0Y2S", kbo: "0D05", kc: "03030U020V0314021A0F1B021D041O0T", kce: "03080U021A0A1O0X", kde: "0U1Z0Y3K1N2S1O09", "kde ": "0U350Y611N1G1O0C", kdo: "0U3L100412041B031O02", "kdo ": "0U5P1B02", kdy: "0U5Z0Y241B051N2Y", "kdy ": "0U4Z0Y3M1N26", kdy\u017E: "0U36", "kdy\u017E ": "0U4E", kea: "0B070V03112I", kec: "030D0B1014021F031O03", "ked ": "030K0M3K0Z0A1002143T", kede: "0Z2B1207140F1F08", "kede ": "0Z2C1F07", kedy: "0Y48", "kedy ": "0Y53", kee: "011C0M0C0R0L111V1C81", keeg: "1C22", keegi: "1C52", keel: "0R0211061C7T", keelt: "1CAL", keh: "0B0I0N060Z02110C1204", kein: "0B050N4I111P1403", keine: "0N5A1103", kej: "0B0C0U0E0Y0S100511061N091O02", kek: "0B0B110E140L1F111P0C", keli: "0B0G0R1I0Z1V110Y122Z1B2Q1F0Q1P29", kelig: "0Z29122Z", kell: "03090N030Z0B112C14B91C2G1N0O", "kell ": "148E1C31", kelle: "03050N030Z05110D143Z1C2N", "kem ": "030X0U1A1309145X1C161F02", kema: "0B290Z03110G1F021O02", kende: "0N050R0Q0Z1W120A1F03", kendi: "0D021F47", kep: "0B1E0M06100B1102120313041B0A", kerj: "0B2T1102", kerja: "0B5G", "kes ": "030B0M140N020Z07120F140K1B041C3M1F10", kez: "142W1F0U1N0C", kf: "03030M0213021O04", kg: "0N021N07", khi: "0B0U", "ki-": "03050B0G", kia: "030Q0B020D020Y07111814071B5V1O33", "kia ": "030S111R1B5X1O0H", kiam: "1B0B1O2N", "kiam ": "1O54", kib: "041K0B040Z0314061B031F09", kiedy: "1A54", kiek: "11021B3V", kiel: "113514021O3M", "kiel ": "1O70", "kiem ": "1A3S1D58", kig: "010C040P0R080Z06100914051O04", kii: "0T03113D14021C1D", kij: "040C0R0E0V07110914061B0C1D0G", kikod: "1P6S", kind: "011X04190M0K0N1L0R200Z0510021C161F081O02", kinde: "011R0N1R0R1W0Z0510021C1H1F08", kio: "0O070R02110E14021A0A1B181O3Q", kion: "11041O2Z", "kion ": "11081O5U", "kir ": "0B1R13101F0P1N3K", "kira ": "04A40B0O", kirj: "116Q1C2K", kirja: "118A1C2J", kisi: "0303110L1C0G1F0N1O051P5Q", "kisi ": "110O1B031F0N1O031P6O", "kit ": "030S0B240D1G1007110814171B021F07", kita: "0B5W0D2C110E140C1B0S1F1R1N301O0C", "kita ": "0BAJ0D3R11081B091O0I", kite: "1003110214051B4I1O02", "kite ": "1B91", kiu: "0D020T030Y0411051B1C1O3O", "kiu ": "0U020Y081B171O3H", kiy: "0304041B1F1C", ki\u00F6: "1P2G", kj: "0R040Y030Z051005122N131714031N04", kje: "0R05122A", kjen: "121H", kj\u00E6: "120C", kj\u00F8: "121J", kj\u00F8p: "121T", "kk ": "034M122913181C0G", "kkar ": "136B", "kke ": "010H0R060ZKW110212NM", kken: "03660R1Y0Z1R1102121Z140F1F07", "kken ": "03CR0R2G0Z1P121M1F09", kker: "011G03070R120Z32124K131V", "kker ": "0112030E0R170Z33123Y", kket: "0Z1412271402", "kket ": "0Z1C12261402", kki: "010O030L0R0A114H13E61A02", "kki ": "0304114R13KG", kko: "111T14161O03", kkur: "03020Z021103120H1340", "kkur ": "136Z", "kl ": "0U2P0V070Z02", klar: "0N0A0R050Z0T101N122O1B081F3C1N411O0N", klary: "1N48", klau: "0N0214021B3F1D1N", klaus: "0N0214021B6X1D3C", klig: "102J", kl\u00E6: "0Z0912081307", kmu: "0B091F05", knih: "0U2F0Y4J", kno: "0M3L0N020R020U0D0Y091A071F02", know: "0M6E", "know ": "0M73", kny: "0B0V14021A071B1S", knyg: "1B2W", "kob ": "0D021P4Z", koc: "0N040R0C0Y06140O1A161F08", "kod ": "0D060V0J14041P5E", kod\u0117: "1B3W", kod\u0117l: "1B7V", koe: "010O0R060Z03110C12031C2X", koer: "010H1C3M", "koer ": "1C5P", kof: "010F0N020R080V0312021N0D1P0U", koi: "113S1A02", koj: "0U0T0V4B0Y0K1002110C1A0R1B151C101D0E1O13", "koji ": "0U0H0V4Z", koli: "0U2T0V2L110414021A081B0I1O02", kolik: "0U320V5V1108", kome: "04420B060D020R2U0U020V0H11071A041B0I1O13", komen: "0B0B0D030R3T0V0811021A041B0C1O1Y", komm: "010S0N4H0R030Z3X106V110912561407", komme: "010T0N4Q0R030Z4K105B110B124V", "kong ": "0D7P", kons: "0B0B0D020N050Z05100M110D120F14021A041B041F091O2J", konu: "110613111A021F5J", konu\u015F: "1F5Z", koo: "011P0R0B110O1C2O", koop: "01200R0K1102", "koop ": "01240R0H", "kor ": "0B0S101E147N", kora: "04DN0B060R040V070Z02140M1O1N", "kora ": "04KT140K1O02", kosk: "114P1403", koska: "11A4", kou: "010D0R070U3L0Y0S111B", koupi: "0U2I", koz: "041J0R020U020Y0B141Z", ko\u013E: "0Y2M", ko\u013Ek: "0Y3U", ko\u013Eko: "0Y4E", kp: "0D0214041O02", kriv: "0V0J0Z18101E121H", kry: "01160U050Y0B0Z03100412031A0K1B0B", kr\u00E1: "0U1P0Y1Z13061403", ksen: "03050Z05113U120J1F02", "ksi ": "03020B0O0D040V0411DQ1B0H1C0I1D0O1F05", "ksid ": "1C4V", ksin: "111K130G1B031C321F0I", "ksin ": "11271C6X1F0J", "kte ": "010P0N0T0R1P0V040Z0C102G121T1F1G1O0O", kten: "0N090R080Z02100D120G1F3S", "kten ": "0N0E0R0B0Z02100B120C1F53", "kti ": "03050B041104130E1B4T1D1J1F0F1O0F", ktig: "101K121R", "kto ": "0D050U020Y6H1A1F1B051O11", kua: "0B0E110H", kub: "030504BH0B061A021B0D", kuba: "030404881B03", kube: "04BA0B05", kuber: "04I90B07", kubi: "04AY1B03", kuc: "0B0I0N030U070V050Y0B1A08", kug: "045G0Z021002", kuh: "0D040V0211031C0M", kui: "01070B04115J1B0C1C891O0A", "kui ": "0B05110E1B0K1C7L", kuid: "1C2H", kuida: "1C55", kuin: "118I", "kuin ": "11DU", kuka: "0B4W112Y1402", kukan: "0B9A1103", kull: "03080Z0X104F110B122H1F1D", kulle: "030I0Z14104C1105122G", kuma: "0D13110M1B031C0E1F0P", "kun ": "03020B030R0N0Z1R115D1208130C1O3M", kuna: "110O130I1C221F02", kund: "04ER0D020N070R0F0V040Z07101M12051A021B0B1F021O03", kunda: "04LU1B02", kunde: "0N090R0G0Z06101J", kung: "042D0B040D2E0N071005", "kung ": "0D4D0N071002", kunn: "0R2F0Z231015111C122H130U", kunne: "0R390Z2J110I1227", "kur ": "0B06136T1B461D2U1F03", kuri: "030204AG1108130G1B3J1D0Q1O0C", "kuri ": "049111091B0O1O06", kuru: "048X1D181F0D", "kuru ": "04B11D2Y1F041O02", kuu: "114M1C3T", kuul: "11391C3A", kuv: "042K0V061002111O1F02", kuw: "0D0E1N0Y", kuz: "041J1A021F0C1O05", kva: "0U0E0V0B0Y0X0Z05100H1204130D14021B0S1O0Z", kve: "0V080Y0Z120D13111B051O05", kvi: "0V050Y080Z0J100M120C13061B1H1O0W", kvin: "0Z1C100Q120R1O0K", kvind: "0Z1M1O06", kv\u00E4: "100X", kw: "01080302042I0D030N020R0H1A0B", "kw'": "0418", kwa: "01090306041N0R0I1A04", kwi: "044T0R041A0F", kya: "0D0A1F04", kyk: "010G11061B1Q1N21", kyl: "0Z0G100K111O120F130F1B041N0J", kyt: "0U060Y0D0Z03110712081B2X", kyti: "0Y0G1B3N", "kyti ": "1B5Y", kz: "0N021O0G", k\u00E1: "0U270Y2A1308142N", "k\xE1 ": "0U1S0Y25", k\u00E2: "1F04", k\u00E4: "0N06101511431C0X1N1B1P0L", "k\xE4 ": "113A1N0A", k\u00E4i: "110I1C1K", k\u00E4n: "1025110H1N101P0M", k\u00E4nn: "101T110B", k\u00E4y: "1130", k\u00E4\u00E4: "114O", k\u00E4\u00E4n: "114M", "k\xE4\xE4n ": "1186", k\u00E5: "10041203", k\u00E6: "0Z0I1308", k\u00E6r: "0Z0E130F", k\u00E7: "1F0K1N0F", k\u00E9: "0U1L0Y1G1452", "k\xE9 ": "0U2K0Y381404", k\u00E9p: "141K", k\u00E9r: "142Y", k\u00E9s: "141S", k\u00E9t: "141K", k\u00ED: "0Y02130D140O", k\u00F3: "0Y02130O140D1A0O1L07", k\u00F5: "1C20", k\u00F5i: "1C56", k\u00F5ik: "1C4X", "k\xF5ik ": "1CA6", k\u00F6: "0N0V100Z1117130E14441F0Y1N3B1P3V", "k\xF6 ": "113G", k\u00F6m: "14021N2D1P32", k\u00F6me: "1N3D", k\u00F6n: "0N1810051102141O1N0A1P3F", "k\xF6n ": "100214031P47", k\u00F6nyv: "1430", k\u00F6p: "101F110314021F101N38", k\u00F6z: "142A", k\u00F8: "0Z1G1202", k\u00F8b: "0Z10", k\u00F8bt: "0Z1K", k\u00F8r: "0Z0N", k\u00FA: "0Y1E13051402", k\u00FAp: "0Y1V", k\u00FC: "0N0B141G1C161F131N0D1P0R", k\u00FCl: "141R1C1G1F07", k\u00FCs: "0N0414021C1G1F02", k\u00FD: "0U130Y1N130B1N0B", "k\xFD ": "0U1L0Y24", k\u0101: "1D4Q", "k\u0101 ": "1D8I", k\u0101d: "1D4G", k\u0101p: "1D2H", k\u0101p\u0113c: "1D5Q", k\u0101r: "1D22", k\u0105: "1A0X1B2U", "k\u0105 ": "1A1D1B7L", k\u0117: "1B2I", "k\u0117 ": "1B39", k\u0119: "1A1B1B09", k\u012F: "1B05", k\u0131: "1F4K", k\u0131n: "1F41", k\u0131nda: "1F4A", k\u013C: "1D0S", k\u015F: "1F0B", k\u0161: "0V021B0X1D0N", k\u0161t: "1B1H", k\u016B: "1B071D05", k\u0173: "1B0C", "l'": "0L2V0Q2G1F041O021Q08", "l'a": "0L6D0Q3D1Q05", "l'e": "0L240Q151Q0C", "l'h": "0L1C0Q1N", "l'i": "0L1A0Q1L1F02", "l'o": "0L140Q0S1Q0C", "l'u": "0L0L0Q16", "l'\xE9": "0L1P", "l-l": "1P2G", "l-li ": "1P3L", laa: "012S0D060R1O11321C13", laat: "012J0R401111", "laat ": "012N0R3A110I", laba: "0D0Q0O0C0T0I1B6W1D0Q1F06", labai: "1BD6", labh: "0S3C", labha: "0S7Z", labi: "0D070O030T0915071B0V1D2S1F24", "labi ": "0D020T031D6P", labob: "1P46", labor: "0L050M030O070P040Q040T1N11031O4H", laca: "0O020P020Q031F481O08", lace: "0L0W0M0P0O070T3S0U06154E1O02", "lace ": "0L150M0S0U02155J", lacet: "0L020T2G", "lade ": "0L0X0N080R0A0V080Z0V101U1208", lae: "0T1M1C0E", lage: "0L0N0M040N0S0R0O0Z0I100E121V1O02", "lah ": "0BGE1F0D1Q85", laha: "0B0W0D1H140C1N0X", lahat: "0D2I1N19", lahbe: "1QDX", "lai ": "0B1P0L030Q0214031B131D5F", laik: "0B031B561D6H", laika: "1B1W1D5L", laim: "0M050S2P1B291D1C", "laim ": "0M020S9H", lais: "0L41114S1B0Z1D0S", laja: "0B2P0O03110914021F02", laka: "0B180D0U0U0B0V050Y0L110814081F05", laki: "0B1U0D1H110K1424", "laki ": "0B1G0D1P11051415", laku: "0B590U050V0211021408", lakuk: "0B9A", "lal ": "030I0R020U3H0Y0T14071C141F02", lalu: "0B451409", "lalu ": "0B7B", laman: "030L0B100D200O060P020U020Y0F1F061O04", landy: "1N4X", "lang ": "010L0B5I0D960N120R1V0Z0I1002120I", langa: "0B150D3O0L051103133J1B05", lany: "0B0H14071A041N3I", "lare ": "0Q2Q0T0N0Z0A1008120N150F1O07", lary: "0M021A041NEY", "lary ": "0M031A071N7U", laryn: "1N7E", lar\u0131: "1FBV", "lar\u0131 ": "1F6R", lar\u0131n: "1F83", laten: "0D030R3D12051O02", "lau ": "0B2D0N041B0A", lauk: "110O1B3X1D0K", lavo: "0O050P030Q4O0T040U020V060Y0A1B0I1O05", lavor: "0Q4N", law: "030I0B030D0O0M060R021Q72", "law'": "1QCK", "law' ": "1QHU", lawa: "03080B060D0V0R05", la\u00FD: "1N32", la\u016D: "1O0Y", lb\u0117: "1B2E", lch: "0N0M0Q0M0T1G1Q0O", lco: "0L060M030O040P040Q221506", lcos: "0Q33", lcosa: "0Q33", lcu: "0L020O020P020Q1G150A1F08", "ld'": "0M0C", "lder ": "0M0C0N090R090Z2110081212", ldib: "1C2K", "ldib ": "1C68", ldig: "010H0N0I0R0Z0Z0H101Q123Z1N0V", "ldig ": "0N090R0U0Z0D1009123T", ldn: "0M130Z021202", "ldn'": "0M20", "ldn't": "0M2Q", ldr: "0M0D0O020Z10101X121B131U1406", ldri: "0Z1Q101Y122I130T", "ldri ": "122H131O", ldrig: "0Z23101Y", ldt: "0Z0Q120F1403", "ldt ": "0R020Z1L120X", ldu\u011F: "1F7J", ldu\u011Fu: "1FA3", ldy: "1B0A1N5A", "ldy ": "1N4L", ld\u0131: "1F5A", leab: "0S41", leabh: "0SET", leat: "0S4W", "leat ": "0SFP1102", lebi: "0B4H0D030T041F0F", lebih: "0B8L", "lebo ": "0Y31", "led ": "03130M200U070V0B0Z041002141Y1C4Q", lede: "010P0R0X0U050V0E0Z1V1002120K14041F0K", "lede ": "010Q0Z1M12061F03", "ledi ": "1F5H1N1O", "lega ": "0O090P030R02139H1A061C1V1O06", leh: "03070B1G0N0D0T080U0A1110141V1C0H", lehe: "0T03144I", lehet: "144O", "lei ": "0N040P0F0Q850R02110312091409150B1B05", leis: "0N0L0P020R020S38110L1B1Q", "leis ": "0P030SC51B08", lej: "03030O0F0U0P0Y0M0Z0B10021104140N1A0M1O1H", "lej ": "0U0J0Y0L1A0G1O20", "lek ": "010M03030B070R080U0B0V04100D143P1A031F05", leks: "0B030D020V0410031103120F14021C2G1F021O05", "lene ": "0Z0X121W141O1F041O06", lenge: "0M03121M1405", lenn: "110D143S1C0E", "leri ": "0Z021F521N4D1O03", lerin: "0N060Z0311021F5W1N72", "lest ": "03040M020U06120F130E1C4Z", lesz: "144Q", "lesz ": "1436", "lett ": "0N031004120V1442", leur: "0L5F0R0K", "leur ": "0L520R0C", "lev ": "0Z38101U", leven: "0R2Y0Z08120D1403", lew: "010M03030B060M021A0L1N0E", le\u00FD: "1N71", le\u00FD\u00E4: "1N84", le\u00FD\u00E4r: "1N88", "lg ": "0N030Z0410021207", lgo: "0O1K0P0Y0Q02141L1B0H", "lgo ": "0O2D0P140Q021B0K", lgt: "0N020Z0812081B03", lgu: "0O1V0P350T021C0N1F03", "lh ": "1QF3", lho: "0P5X0U030Y0X14031Q4E", "lho ": "0P3I0Y1I", "li-": "030X1P6O", libr: "0D0O0L0G0M040O2K0P020Q270T3715071O1F", libro: "0D110O2P0Q1K0T0W1O2R", lich: "03020N9B0R0Z", "lich ": "0N9Z", "lide ": "0L030Z31", lief: "013W0M020N0C0R2U", "lief ": "013Q0M020N0C0R06", liel: "0Q0B0T041D3X", "lig ": "011403040D0E0N0L0R0K0Z4E102M129J140Q", "lige ": "0L020N060O020R080T040Z3L1223", ligh: "0M0N0R040Z16100L121L1Q0I", lighe: "0R050Z1E100K121L", ligt: "010H0D050N020R0M0Z2Z103D", "ligt ": "03020N020R0T0Z3K1037", lih: "0B2Y0D060V031003110K1C1G1Q04", liha: "0B540D02110U1C0K", lihat: "0B96", lijk: "0R9Y", "lijk ": "0R9C", like: "01270M540V0B0Z02110212481C0E1F0F1O02", "like ": "01270M5K0V0Q0Z0212101F021O02", liker: "1231", liko: "0D070U050V3A110M14021A041B0U1O061P3A", "liko ": "0D050V7C11111B1D1O071P12", liku: "0D060N020V0L11061A021B041C2K", linen: "117R", lingu: "0D020L060M030P070Q130T3X1002130Q", "lio ": "0O060P030Q5A0T0X0V111B1P1O0O", liom: "0S9014021B02", "liom ": "0SPI", liq: "03040L0L0P030T1I", liqu: "0L0Z0O020P030T2U", "lir ": "0B040L080O0N100W122A131E1F49", "lise ": "0L0Q1C521F09", "litt ": "0N02122F", lit\u00E0: "0Q51", "lit\xE0 ": "0Q53", "liu ": "15061B40", lius: "0T2P14021B0T", "lius ": "0T2V1B1M", "live ": "0L020M150Z1I", liver: "0M030Z1Q1O04", liw: "03060D051A1E", liy: "03081F741Q04", liyo: "1F5M", liyor: "1F7K", li\u00EB: "0R0C", li\u015Bmy: "1A4J", "lja ": "0V19101L11021317141F1C2W", lje: "03020V3R0Z04100O1110120814121C0G1N1X", ljo: "0R020V05100211291406", ljon: "1003113P140G", "ljon ": "1187140H", lju: "0B060V3W100M1305140A1C2V1O0B", "lju ": "0B0B0V0T1C33", "ll'": "0Q2L", "llar ": "0M030N0A0O070R0B0Z0B102I120913151F0A1N0N", llb: "100X", llett: "0L020Q070Z03110Q1206142U1F04", llic: "0R040T2H", llie: "0L070N030R511102", "llie ": "0R6O", llis: "03060L030Q040T0Q117F1C1N", "llo ": "0M020N030O1X0Q5Y0R050T12110X1204", llos: "0N020O2Q0T0K1106", "llos ": "0N020O350T0L", lls: "03020M090N0J10151206130D1402", llt: "0N1L1030120Q1327140K", "llt ": "0N1710271207132A140Z", llti: "101Q121N", lltid: "101J121N", llut: "1154", "llut ": "11BN", ll\u00E4: "10031191", "ll\xE4 ": "11DN", ll\u00E9: "0L1A0O021409", lment: "0O2B0P390Q1C1106140X", lme\u00FD\u00E4: "1N3Y", "lmi ": "032B0U2D1102140C1F051N3G", "lni ": "0V08148Y15061A05", lnu: "130A14051B031C2J", lnud: "1C34", "lnud ": "1C7G", lny: "0B0I0Y0514031A0O", "lob ": "1PDE", loe: "010B0R0H1C0G", lof: "0R020Z02130N1O041P1F", logob: "1P3C", loi: "0L0V0S0I112E1506", "loj ": "0O0C1O2H", lol: "0D04110414071F021P68", "lol ": "1P5W", "lom ": "0V0F0Y0P120U14391P77", long: "0B230D160L1M0M1N0O020P0Q0R020T181O1B", "long ": "0B3R0D240L0J0M1O", loo: "01150D0A0M1J0R0R11071C27", look: "0M2F0R02", loq: "0L020O020P070T2D1Q13", loqu: "0L040O030P080Q020T4H", loqui: "0T2E", "lor ": "0M040N030O180P0E0T0B1008155F1A03", loro: "0O040P030Q5V1A021O0S", "loro ": "0O020Q5W1O0I", lo\u011D: "1O0S", "lp ": "01100M110R080Z0A100K120C13091F02", lq: "03080L0F0O050P041Q09", lqu: "0L270O0G0P0I1Q0H", lre: "0M0E0O06100314091D0G1O02", "lse ": "0M0H0Q040R070Z24100O121Z1F02", lska: "0U020Z03102U1206131B1A02", lske: "0Z2G122A", lsker: "0Z1X1218", lsz: "141J1A02", ltam: "0P030T051105144E", "ltam ": "0P020T04144N", ltid: "0P020Z1E101M121R", "ltid ": "0Z1M101K121P", "lto ": "0D030O0R0P0K0Q650T0M11021B081O09", lty: "010K0M0311031B021N0D", lt\u00E4: "1135", "lt\xE4 ": "114P", "lu'": "1Q9B", lua: "0B1F0P060S150T02114M15161O09", luar: "0B2F1506", lubi: "0D021A3G", luh: "0B0L0D020U031Q0D", "lui ": "0B090L4P0P020Q6W0R030T05110415D91B03", "lum ": "0B290T77131P1F061N0E", "lun ": "0304110W13071C2N1F09", lutt: "0L030Z0J110J121D", luu: "1127", luv: "03060O070T0C0U2Q11081O0E1Q05", "lv ": "0Z0S100U120T1406", lvo: "0O060P040Z04110712031B291O0A", lv\u0113: "1D4U", lv\u0113k: "1D5Y", lv\u0113ki: "1D88", lw: "0105030C0M0B0R021A091Q08", lwa: "03050M0M", lx: "0303", lya: "031X0D0D0Z03120214291F0X1Q11", lyan: "03090D040Z071205144O1F05", "lyan ": "0303144R1F04", lyc: "0L020T041012", lye: "03020D030Z0210031206143X1F07", lyen: "1205145D", "lyen ": "12041459", lyk: "010P0Z0D10031109120I130A14021B0G1N38", lyo: "0D0E140G1F06", lys: "0L020Z0D100I1104120I130E14021B0O1N0A", lyt: "0Z09100C110A120A1305140K1B08", l\u00E0: "0L0A0Q02", "l\xE0 ": "0L190Q08", l\u00E1: "0O0A0P0E0S1E0U2N0Y1X130S146D", "l\xE1 ": "0O0C0P140S0W0U1C0Y0Y13051405", l\u00E1l: "142B", l\u00E1n: "0O020S150U0N0Y09130A141Y", l\u00E1t: "0O020S0I0U060Y07130Q1439", l\u00E2: "0P0215091F0I", l\u00E3: "0P02", l\u00E4: "0N0Q102S114R1C1F1N1V1P2I", "l\xE4 ": "100211AF", l\u00E4d: "100E1P22", l\u00E4h: "112L1C2L", l\u00E4he: "111S1C2V", l\u00E4k: "100F110N1C1H1N09", l\u00E4n: "0N0A101Y110E1N161P1G", l\u00E4ng: "0N0B101U", l\u00E4r: "0N08101E1N0H", l\u00E4s: "0N081016110F", l\u00E5: "0Z0G101F120G", "l\xE5 ": "0Z0A100D1209", l\u00E5n: "0Z05101C1206", l\u00E5t: "101F1203", l\u00E6: "0T040Z1V120T131B", l\u00E6d: "0Z0B", l\u00E6g: "0Z0G130C", l\u00E6n: "0Z0L", l\u00E6ng: "0Z1A", l\u00E6r: "0Z0X121B1310", l\u00E6re: "0Z1Y1228", l\u00E6s: "0Z0K1309", l\u00E7: "1F07", l\u00E8: "0L0D", l\u00E9: "0L0X0O0E0P030S130U1U0Y0H130A142X", "l\xE9 ": "0L230O040U0X0Y0S140F", l\u00E9i: "0S24", l\u00E9s: "0L0C0O0O1304140P", l\u00EA: "0P09", l\u00EAs: "0P0S", l\u00EC: "0Q06", "l\xEC ": "0Q0N", l\u00ED: "0O0K0P0E0S180U3E0Y201324140F", l\u00EDb: "0U1O", l\u00EDm: "0O020P020U1J0Y2D", "l\xEDm ": "0U2F0Y3X", l\u00EDn: "0O070P0Y0S230U040Y051303", l\u00F1: "1N0D", l\u00F3: "0O090P040S0I130H141Q", l\u00F5: "1C0T", l\u00F5p: "1C1E", l\u00F6: "0N09100X110I130U140P1PAX", l\u00F6d: "0N0210041P8S", "l\xF6d ": "0N021P7P", l\u00F6f: "10021P6H", l\u00F6fo: "1P6L", l\u00F6n: "10081103130D140J1P3T", "l\xF6n ": "1003110414041P4S", l\u00F8: "0Z0U120X", l\u00F8b: "0Z0E", l\u00F8p: "120E", l\u00F8s: "0Z0C120K", l\u00FA: "0S0B0Y0G13031402", l\u00FC: "0N0K140H1C051F251N0F1P0O", l\u00FD: "0U0S0Y0H130N1N4O", l\u00FDa: "13031N3C", l\u00FD\u00E4: "1N65", l\u00FD\u00E4r: "1N5S", l\u0101: "0T061D1F", l\u0103: "1526", "l\u0103 ": "154G", l\u0105: "1A0S1B0H", l\u0109: "1O03", l\u0113: "0T051D1S", l\u0117: "1B2H", "l\u0117 ": "1B1W", l\u0117j: "1B1I", l\u0119: "1A0Q1B0B", l\u011D: "1O04", l\u012B: "0T051D24", l\u012Bd: "1D53", l\u012Bdz: "1D6D", l\u012F: "1B0N", "l\u012F ": "1B1S", l\u0131: "1F7Q", "l\u0131 ": "1F50", l\u0131k: "1F2M", l\u0131y: "1F3E", l\u0131\u015F: "1F4U", l\u0148: "0Y031N0C", l\u014D: "0T05", l\u0151: "1423", l\u015D: "1O06", l\u016B: "0T051B041D0X", l\u016Bd: "0T061B041D2S", l\u016Bdz: "1D3J", l\u016Bdzu: "1D6T", l\u0173: "1B0C", l\u017E: "0U050Y041B021D08", l\u021B: "150K", "m'": "0L0N0M0C0Q020S0E1A021F4R1Q0Y", "m'a": "0L230S0I1A021F2D1Q08", "m's": "0M0O", "m'u": "1F8S", "m'un": "1F8B", "m'un ": "1FB1", "m-l": "1P2P", "m-li ": "1P3X", maa: "01420B0I0D0M0R2V11781C3W1F06", maak: "015K0R30", "maak ": "015U0R0Y", maakt: "0R34", maan: "010Y0B030D070R13117M1C0G", "maan ": "0B070D080R0A11ES", maar: "012D0D030R4M1102", "maar ": "012I0R64", mady: "1N3S1Q0E", mad\u0131: "1F5G", mae: "0O060T1Q1204", "mae ": "0T32", "mag-": "0D0Z", magis: "0R020T2B1O04", magy: "141N1N3W", "mah ": "0B2M0V0C1Q66", maha: "030X0B110D1011091C0I1F04", maher: "049T", "mai ": "0B060L020Q40140E15EE1B26", main: "0B200D0Q0L4J0M0A110M1B021D0K", mais: "0D020L820P8I111H1B0Q", "mais ": "0D030LA50PAK1B0A", mait: "0L0A0S5T110G1B041C0E", maith: "03030SJZ", "mak ": "0R020V04120414021A031F8H1N5Z", makan: "0B8X0D03", maki: "0B0F0D0T0M091F08", malf: "1O1Z", maly: "0Y091N4F", "maly ": "0Y0B1N43", "mam ": "03060P080Q020T1N0V1N14051A3B1D451F1Q", "mand ": "012A0L0H0M020N1U0R3F0Z1L", "mane ": "0L020N020Q0D0T0T15081A021B7Y1O04", "mang ": "0B0H0D25", mange: "0L3P0N050Q040Z31122T", mangi: "0D030Q2P", "mani ": "030E0Q1X0T0B110Q1DAO", manj: "0V0I1O26", manjo: "1O4A", mano: "0D060L040O280P0F0Q0S0T081B9G1O0Q", "mano ": "0D020O1Y0P090Q0S0T021BH61O0F", "mans ": "0L070M040R03100G1D67", man\u011D: "1O2G", map: "0D0B0O030P030U0211031A031Q07", marad: "0L0414321O02", maram: "0D2C0P04", marij: "0V3F1BA31DBR", "mary'": "0M0O0R061F9F", masi: "03050B2E0D030O1B0P03110K1B0B1P1Q1Q0H", masta: "03060Q03112C1C52", mas\u0131: "1F42", mau: "0B1C0D020L0O0N030P070Q0B11051B0C", maw: "030T0B030D0A1A0Y1Q0I", max: "0T0N1502", "may ": "03020D4J0M0O", maya: "03050B060D0E0L021F5W", "maya ": "0D061F4S", may\u0131: "1F3D", "may\u0131 ": "1F3T", ma\u00F0ur: "135U", ma\u00F1: "0O1C1N1P", ma\u0148: "1N36", ma\u0148a: "1N4A", "ma\u0148a ": "1N5V", ma\u0263e: "034X", ma\u0263ef: "03AK", mbere: "04AV0M02141Z", mbl: "0L190M030O0315021B03", mbre: "0D080L230M040O3D0P030Q0C0T04150I1O05", "mbre ": "0D070L260O3F0Q031505", mbw: "043K", mbwi: "046I", mbwir: "04AL", mb\u00E9: "0L0C0P100S0K", "me'ri": "1QAH", mea: "0L020M0G0O030P070S1G0T2W1107154C", "mea ": "0T3F11081563", "medi ": "0L060T021F321N4M", mee: "011G0M0C0N050R1M110K1C66", meel: "0R0411031C5S", meeld: "1CBO", meer: "01240N0A0R3A1C0Q", "meer ": "01270N0B0R43", mege: "0Z49120514191B03", meget: "0Z541205140B", megi: "141K1N5O", meh: "03070N110V07110514071Q6D", "meh ": "0V021QBF", mein: "0N7D0R03110D130J", meine: "0N7I0R02110L", mejo: "0O26", mejor: "0O2V", "mek ": "03290U03140C1A0B1F8F1N9D", melak: "0B5Y", melh: "0P2F", melho: "0P2P", "meli ": "0T0211021F0J1N4R", melih: "0B5H", mema: "0B341O03", memb: "0BAE0L060M0K0P050Q040T031403150A1O03", memba: "0B6F", membe: "0B7M0M0S1403", membu: "0B68", memi: "0B3O0T0F1F18", menc: "0B2X0L130O050P021A041O0W", meng: "03030BCT0N0A0R031205", menga: "03060B8I", menge: "0B6I0N0H0R02", meni\u00F1: "1N4G", meni\u0148: "1N9Z", menj: "0B3C0V09141M", menja: "0B5H0V0B", menne: "03020Z2C111B121Q140S", "mens ": "011L0L050N030P0H0R0L0T070Z0F120I1B061P1L", mense: "011O0L030R2L0T0N", meny: "030804970B4Y0U0214041B09", menya: "030D04AF0B2O1402", meo: "0M0A0P020T0Q0V051O02", "mere ": "0N020Q050T130Z1S1208150B1O05", merek: "0B901409", "meri ": "0T050V381107140D1N7X", merin: "0B0M0D040V0C11021N4Z", mery: "1A0L1F021N79", "mery ": "1N83", mese: "0O0B0P080Q0F0V0I140B15041C291F091N17", mesm: "03020P2G", meu: "0L0G0P590T2N152U", "meu ": "0P57154N", "meum ": "0T2B", meus: "0P190T2W", "meus ": "0P1L0T32", mey: "04171F621QBX", "mey ": "1QFT", meye: "043O1F4F", me\u00E7: "0P14", me\u00F0: "1354", "me\xF0 ": "137C", me\u00FD: "1N4O", me\u00FD\u00E4: "1N5F", me\u00FD\u00E4r: "1N4U", mfi: "042Q", mfis: "047V", mfise: "04DC", mga: "03080D4Q", "mga ": "0D8K", "mh ": "0S8X", mha: "03050S981Q09", mhai: "0S7C", mhair: "0SC5", mhait: "0SE9", "mi-": "030M0L03152Y", "mia ": "0O020P090Q3R0T06112T140215041A061O4C", "mich ": "0N7W", mida: "0L020O0U0P0M0Q020T051C7U", "mida ": "0O0Z0P0N0Q020T041CBD1O02", midag: "1C7V", miel: "0L020O030Q02113W140I1A0B1B0C1O02", mien: "0L080O2L0T060Y0C0Z0211081A181O02", mient: "0O2Q", "mig ": "0D070Z91109T135C1402", migo: "0O2F0P2H1B04", mih: "03030D040T4H110K1404", mihi: "03030D040T89110Z", "mihi ": "03050T8P", mii: "0D05110T150F", mij: "0R3R0V0A15061A031B04", "mij ": "0R3Q1A02", mijn: "0RA7", "mijn ": "0RD2", miko: "1103144L1O19", mikor: "144V", miks: "113A1A021C3P1O04", "miks ": "11041C8P", milik: "0B59", milye: "143B", "mind ": "0M0M140S1C8G", minde: "0M020N0A0R0H0Z0A1003149W1F07", mindi: "14431F02", "ming ": "010N0D3C0M180R0H", minh: "0P52", minha: "0P5T", "minn ": "137P", minna: "030310031104130T1C48", "mint ": "0305146L", "minu ": "130B1A051B031CCF", minua: "118V", minul: "0U0U0Y1611HQ", minun: "11ED150R", minus: "0T2L0Z02113D1B041C1V", min\u00E4: "11B9", "min\xE4 ": "11MG", "mio ": "0O040P030Q440T0A0V0B11041B021O0E", "mir ": "030K0L0F0N5M0O0J0P0H130F1F091Q0K", misel: "110N1C4P", misl: "0R030V441206", misli: "0V9D", mitt: "0M0C0N110T181025110J121L131H1C1P", "mitt ": "1021121J1334", mit\u00E4: "119U", "mit\xE4 ": "11GH", miy: "0D041F6I1Q0U", miyo: "1F68", miyor: "1F8E", miz: "03020P050U051F3J1N2A1O06", mi\u00E9: "141Y", mi\u00E9r: "144U", mi\u00E9rt: "1454", mj: "1005130Y14021D041Q02", "mj\xF6g ": "1364", mka: "030F0B081A021F05", mlu: "0U2Q1F0A1Q07", mluv: "0U4F", mluvi: "0U37", mluv\u00ED: "0U2G", mmel: "03170N0I0R050Z1K10051102121U140P1F0A", mmen: "03070L4I0M050N410Q0L0R0V0T080Z1I100H11241221", "mmen ": "030A0N610R130Z1D100B1104121H", mment: "0L5B0M030N040Q090R020T050Z031003112E", "mmer ": "0116031A0L030M0F0N5T0R0M0Z3U105K1246", "mmes ": "03020L4O0N030Z02", mmet: "03040L060Q090Z0U100O121N", "mmet ": "03090L060Z0V100O121L", mmo: "0L030M040Q0T0T0N100A11061Q0N", mmt: "03060N0T130P", mm\u00E4: "112K1N0H", mnes: "0T2J", "mnes ": "0T2O", mnie: "1A5S", "mnie ": "1A7V", mnogo: "0V63", mny: "0B0F1A07", "moc ": "0U2Q0Y111A0D", moe: "01420P040R2V0T02", moet: "01620R6Z", "moet ": "016D0R5Y", moete: "0R3K", mogu: "0V3D1B18", "mogu ": "0V6W", "mog\u0119 ": "1A3Q", moh: "0B030O020U320Y271Q9W", mohl: "0U3B0Y1T1Q27", "mohl ": "0U37", moi: "0L460O030P03110H1A0W1P0H", "moi ": "0L4Y11051A061P0M", moj: "0O020U1Q0V4L0Y3N11031A2L1B0F1O1T1Q0P", "moja ": "0V2H0Y34110B1A1S", "moje ": "0U300V280Y271A1P1B0O", "mok ": "140E1N4M", moky: "1B38", molt: "0Q6R1405", molto: "0Q5E", mond: "0L240M0F0N060Q0O0R0A14AY15071O0W", monda: "0M0J143P1O06", mondt: "143J", "mong ": "0B0B0D1R0M051Q0I", moo: "010O0M040R0F11081C0F", "more ": "0M370Q0U0T0F0V0B", morg: "0N180R1Q0Z23101I121I131P1O0O", morge: "0N210R2C0Z2J121H", mort: "0L150O030P0W0Q0W0T2L1O1J", "mos ": "0OB30PAV0T0I140H150Q1B0Q1O05", "most ": "0M1D0U07145I1A05", "mot ": "0D060L0J101B121E141P15031P0Y", mov: "0M0I0O080P0A0T090U3E0V0Q0Y3M1O06", movi: "0M0F0O070P060Q020T020U400V060Y2L1O04", "movi ": "0U5J0Y371O02", mo\u017C: "1A3L", mo\u017Ce: "1A42", mo\u017E: "0U0W0V3Z0Y12", mo\u017Ee: "0V44", "mpo ": "0D030O2W0P2X0Q1Y1O16", mpre: "0L1K0M070O2Z0P3L0Q2U0T050V04150Z1A0A1O1C", "mpre ": "0D020L030O2W0P2C0Q28", mps: "0L2C0T07", "mps ": "0L3W0M02", mq: "0T0X1Q07", mqu: "0T261Q0C", mque: "0T2Z", "mque ": "0T35", mse: "030S0M0L0Z021C0F1F1V", "mt ": "03AZ0N0W0R0J0Z0L1013120N130I150G1B0S", mte: "030A0N070R020Z0B1004120F140215031A061O03", mua: "0B1P11051F03", "mua ": "0B2K1107", mub: "04271Q07", muc: "0307040D0M0U0O3C0Q021A021Q0O", much: "0M1J0O541A031Q19", "much ": "0M231Q11", mucho: "0O4O", mudu: "047S1F041Q07", mudug: "04CH", mue: "0L020O100T02", muh: "0306043L0D041F121Q07", muit: "0P8E0T021109", muito: "0P91", muj: "0O0S0U021A0C1Q0S", muk: "0302042X0B0R0D0F0V030Z0G111F", "mul ": "0T091102130F152I1C5W", "mula ": "0D1X", mull: "0307110I1C5E", mulle: "110A1CCF", "mult ": "1402155P", "mum ": "03020B0B0L020M020P070T4V130D1F02", mums: "1B281D49", "mums ": "1B4L1DAH", muns: "049P", munsi: "04G3", munt: "030204AM0D0M0R040T040Z021002130F1509", muntu: "04HG", muny: "042Z1N51", "muny ": "1N6U", "muri ": "04DH150F", mus\u00ED: "0U4N0Y5E", mus\u00EDm: "0U2X0Y38", muto: "041O0U021P4Y", mutt: "0N0Y113V", mutta: "118O", muu: "0D020R02112E1C15", muy: "0303040C0O2U1F171Q04", "muy ": "0O4C", muz: "0302041O0R060U040V0F150N1A0G1B0G1F0Q1O0H", mu\u0148: "1N3Q", "mu\u0148 ": "1N57", mva: "041A1Q18", mvi: "042Q1202", mvir: "046P", mw: "044W1Q07", "mw'": "041Q", mwa: "0303045W1A02", mwan: "030204BD", mwana: "0491", mwany: "049Z", mwe: "047W0N02", "mwe ": "04IF", mwi: "042A1Q0P", mwo: "041L", mya: "030K042V1F02", myak: "047M", myaka: "04CX", myc: "102R1A03", myck: "103Q", mycke: "103Q", mye: "0302041R1216", "mye ": "0450122Y", mys: "0L020M080U380Y4J100211091A0F", mysl: "0U570Y7A", mysl\u00ED: "0U4P0Y6M", mz: "030614031F021N06", m\u00E1: "0O230P090S2P0U5H0Y6M131Z145K", "m\xE1 ": "0O070P030U3Z0Y4J130W", m\u00E1i: "0S2I1402", m\u00E1l: "0U0L0Y09132M1406", m\u00E1m: "0U4B0Y4T1403", "m\xE1m ": "0U5J0Y6O1406", m\u00E1r: "0P030S0P0Y49144Q", "m\xE1r ": "1498", m\u00E1ri: "0P030Y70141W", m\u00E1ria: "0Y5T141H", m\u00E1s: "0O5T0P0A0S4E0U02143O", "m\xE1s ": "0O8Q0P0A0S5C1440", m\u00E1\u0161: "0U1F0Y1Z", "m\xE1\u0161 ": "0U2B0Y3A", m\u00E2: "151C", m\u00E2n: "0P021540", m\u00E3: "0P0P", m\u00E3e: "0P0Y", m\u00E3o: "0P1L", m\u00E4: "0N0D0Y0K100Q113S1C0V1N2N", "m\xE4 ": "115D", m\u00E4g: "1N2N", m\u00E4ge: "1N3M", "m\xE4ge ": "1N4X", m\u00E4n: "0N051018112S1C1F1N1R", "m\xE4n ": "100B1142", m\u00E4\u00E4: "112F", "m\xE4\xE4n ": "116X", m\u00E5: "0Z16101W121W", "m\xE5 ": "0Z0O1008121N", m\u00E5l: "0Z0G100J120L", m\u00E5n: "0Z0A101W1208", m\u00E5ng: "101R", m\u00E5nga: "101Q", m\u00E5s: "0Z05102G", m\u00E5st: "103A", m\u00E5ste: "1039", m\u00E5t: "0Z031003120L", m\u00E6: "0T020Z0F130B", m\u00E7: "1N0K", m\u00E8: "0L08", m\u00E9: "0L0M0O080P080S5Y0U0S0Y0513251444", "m\xE9 ": "0L0L0O050SG80U0K", m\u00E9g: "143P", "m\xE9g ": "148H", m\u00E9r: "0L0K0O050P06134S140J", "m\xE9r ": "137O", m\u00EA: "0L0B0P03", m\u00EAm: "0L1I", m\u00ED: "0O0H0P050S0I0U270Y05131C140H", "m\xED ": "0O0Z0U0X", m\u00EDn: "0O020P040U0J0Y07132U", m\u00F3: "0O070P020S0R130G140A1A2T", m\u00F3r: "0P030S1L1A03", m\u00F3w: "1A2Y", m\u00F3wi: "1A3R", m\u00F4: "01040Y36", m\u00F4j: "0Y24", "m\xF4j ": "0Y38", m\u00F4\u017E: "0Y56", m\u00F4\u017Ee: "0Y86", m\u00F4\u017Eem: "0Y54", m\u00F5: "1C0Y", m\u00F6: "0N0O100H1102130F14081C031N041P34", m\u00F6d: "1P2Y", m\u00F6dik: "1P3L", m\u00F6n: "13051P2J", m\u00F8: "0Z0G120J", m\u00F8d: "0Z0C", m\u00F8r: "0Z07120B", m\u00F8t: "120H", m\u00FA: "0O060P050S0D0Y031303140D", m\u00FC: "0N0K14051C081F1N1N0P1P0J", m\u0101: "0T0S1D2W", "m\u0101 ": "0T031D2O", m\u0101j: "1D4W", "m\u0101ju ": "1D6P", m\u0101s: "0T1A1D0K", m\u0103: "152Y", "m\u0103 ": "157E", m\u0105: "1A081B1P", "m\u0105 ": "1A051B4H", m\u0113: "0T081D2Q", m\u0113r: "1D2T", m\u0113s: "1D63", "m\u0113s ": "1D7P", m\u0117: "1B28", m\u0117g: "1B2M", m\u0117gs: "1B3A", m\u0117gst: "1B6O", m\u0119: "1A0I1B06", m\u011B: "0U5K", "m\u011B ": "0U4M", m\u011Bl: "0U47", "m\u011Bl ": "0U4E", m\u012B: "0T061D13", m\u0131: "1F5R", "m\u0131 ": "1F5N", m\u0131y: "1F3B", m\u0131yo: "1F3F", m\u0131yor: "1F4N", m\u0131z: "1F2T", m\u014D: "0T05", m\u015F: "1F08", m\u016B: "1B0L1D0W", m\u016Bs: "1B1L1D2A", "m\u016Bs\u0173 ": "1B56", m\u016F: "0U2Y", "m\u016Fj ": "0U2R", m\u016F\u017E: "0U3D", m\u016F\u017Ee: "0U44", "m\u016F\u017Ee ": "0U2G", m\u0171: "140I", m\u0173: "1B0F", m\u017E: "0U020Y021B04", "n'a": "04280L4W0Q0N1F0Z1Q0E", "n'e": "0L370Q041F021Q0H", "n'es": "0L4L0Q02", "n'est": "0L6Z", "n'i": "04410L080Q081F041Q08", "n't": "0MBS", "n't ": "0MJF", "n'u": "04401F0D", "n'um": "048O", "n'umw": "049O", "n-n": "035Q", naa: "010Y0D0A0R2M0T04111V1C0G", naar: "010Q0R7U1104", "naar ": "010N0RA0", nach: "0N560R0Y0S6F0T030U080Y0L1A0A1Q06", "nach ": "0N560SK41A0G", "nade ": "0L060R020V071020", nae: "0T0V0V081C0Y", "nag-": "0D0Y", "nagi ": "1B061C4C", nags: "0D0Y", nagt: "0D0V", nagy: "14AD", nagyo: "1474", "nah ": "0B2Z1Q1W", "nai ": "0B070Q020T0314071B4V1D17", "nak ": "03030B2V0D0K0U050V0E0Y090Z0214GB1A081F04", nakak: "0D1J", naki: "0D1A110J1F02", nakk: "0B060Z0B1104123R1402", nakke: "0Z0D123L", nalit: "0D020L050M020Q4M0R0210021508", namh: "0S3N", "namh ": "0SDI", namin: "0D2Q", nang: "0B3D0D4D0N02", "nang ": "0B3W0D60", "nap ": "0B050D0M0R060Z05145C1N0Q1Q08", napa: "0B1A0D1C0U080V051105", nap\u00FC: "1P3H", nap\u00FCk: "1P42", "nare ": "0Q2M0T0E100G150F1O02", nasa: "0B080D1Q0V021102", "nasa ": "0D1R", natin: "03050D2H0M02", "nau ": "0B070N0B1B4X", "nav ": "150B1D7O1F021Q0S", nawa: "0B050D0V", nay: "03110D0I1F0J1Q0K", nazi: "0Q4U0V020Z021F06", nazio: "0Q4V1O02", na\u00ED: "0S33", "na\xED ": "0S32", na\u0161: "0U1L0V220Y1Z1B0I", "nc ": "0L0J0T2H140D150G", ncia: "0M020O3R0P2Q0Q1M0T05140O", "ncia ": "0O3O0P2Q0Q0T140H", ncont: "0L1N0O270P2L0Q0T1505", ncor: "0L260O040P0F0Q350T04", ncora: "0P020Q34", ncs: "0L021431", "ncs ": "0L031452", nct: "0L0C0M030T0V150C", nc\u00E9: "0L0G0O0P1404", nc\u00EA: "0P1B", nc\u00FA: "0Y1S", nc\u00FAz: "0Y32", nc\u00FAzs: "0Y2T", ndab: "048E0O02", ndag: "0120046I0Q020R0K0Z0H100I120D1B06", "ndag ": "01210R0N0Z0D100C1209", ndak: "049Y0B0H1F0K1N0L", ndaku: "04B1", "ndan ": "0D080O050V0910061104130T1F5U1N5W1O14", ndare: "0Q3X1004", ndash: "04EK", ndate: "0Q3Q", ndaz: "04901402", ndazi: "04E5", "nden ": "0N5R0O0B0R620Z4I101A1218144B1F4X1N441O04", ndere: "0M070N2Z0P080Q1H0R3N0T0O0Z0715051F03", "ndes ": "0D030L0N0N0L0O0L0P0D0T040Z2510041406", ndet: "0N0Z0Q0A0R050T080Z1T100K120W1407", "ndet ": "0N180T080Z23100I120S1406", ndh: "010703020N040R030Z091406", ndiam: "0Q3T", "ndig ": "010K0D020N0M0R0C0Z081002120L1442", ndigi: "1N8Y1O07", ndl: "0M060N0E0Z0G100J120C130C1A021C0P", ndn: "0N020Z0A1003", ndol: "0D020O080Q031440", "ndre ": "0L7T0Z171007122V", ndt: "0N030R070Z1R120K141B", "ndt ": "0N020R0O0Z2W1214", ndte: "0N040Z1C120B", "ndte ": "0N030Z1I120A", ndum: "0T4613181C0E1F031O03", "ndum ": "0T4E132L1F03", ndyg: "1N4X", ndygy: "1N6M", nd\u0131: "1F39", nd\u014D: "0T0H", nebol: "0Y2V", nebud: "0U2L0Y1I", nebyl: "0U2L", nece: "0M050O2Q0P0N0Q080T0J150M1F0P1O0P", neces: "0M070O380P0M0Q080T0J150R1O1D", nech: "0U5P0Y57", nechc: "0U3A0Y3W", "ned ": "030G0M2W0U0K0Z0Y100G121314191C0I", nede: "0R0O0V0U0Y0J0Z1H1003120H1B061F441O03", neden: "0R0A0Z0412061F58", nedo: "0O020U1E0V0B0Y0S1B041D0W1O041P50", need: "0M370R020Z021C15", "need ": "0M2P0R031C2U", neem: "01240R0V1102", "neem ": "01270R0W", neer: "011X0M020R23", "neer ": "011Z0R2H", negal: "1B8S", "neh ": "0B0B0Y081QD7", "nek ": "032N0B040U0A14D81A0L1F081O0D1P1B", neka: "0B070V0V100311051B131D3A", nekad: "0V1L1D5L", neke: "0V0D1103149R1B0R", neked: "143Y", nekem: "1465", "neki ": "0V0W142V", nemo: "0O0Z0T1I0U2Z0V1N0Y261B0I1N0I", nemoh: "0U2H0Y1D", nem\u00E1: "0U3G0Y3L", nem\u00E1m: "0U2I0Y2A", nem\u00F4\u017E: "0Y3G", nem\u011Bl: "0U2F", nem\u016F\u017E: "0U2Q", nene: "0B060U0B0Y080Z0J121G1B031F02", "nene ": "0Z0M121F1F02", neni: "0Y0B1F061O3Y", nen\u00ED: "0U4E0Y08", "nen\xED ": "0U620Y0A", nepa: "0U0A0Y0B1B571D33", nepo: "0T060U230V040Y4J150E1O02", nepr: "0U0K0V0C0Y3E1B171O07", neq: "030G0T0L1Q08", nesci: "0T2I1O03", nesk: "0U0J0V030Y1L0Z20121P130X1B0E", neske: "0Z2C121O", netur: "0T031B5B", nevar: "0O020P021B051DAO", neve: "0M230P070Q060R020U020V090Y1L142B1B0K", never: "0M2V0V0N0Y0E1B0O", nevie: "0Y4X1D3L", nex: "03050M0H0P020T071503", neza: "04AV0U1C0V060Y161O05", "neza ": "04HS1O06", nezin: "1D6G", ne\u0161to: "0V52", ne\u017E: "0U1V0V020Y0Z1B22", "ne\u017E ": "0U2P0Y15", ne\u017Ei: "0U040Y0B1B35", ne\u017Ein: "1B63", "ng-": "0B0Q0D0J", ngah: "04B70B0E", ngaha: "04G3", "ngan ": "03040BN20D450O0510021102131M1O0A1Q3V", "ngar ": "0B251025135A", ngas: "0O0A0P0310021109130D1B311O051Q13", "ngas ": "0O0D0P03110I1B671O0A1Q0U", ngat: "03020B5X0D0611051404", "ngat ": "0B900D091102", ngay: "0D1B", ngayo: "0D28", "ngen ": "0N6F0R5P0Z5110581104125C", ngg: "0B6V0D181Q09", ngga: "0B5X0D1B", nggal: "0B6X0D0H", nggu: "0B4B0D05", "ngin ": "0BAN0D1L0R05110L132H1F0F", ngk: "0B3H0D0R", ngka: "0B3M0D0G", ngn: "0B0P0D050N02100413031Q0A", ngua: "0B040M0N0O0T0P160Q0Q0T3E1002", ngv: "1002130315021B0L1O0V1Q0G", ngy: "0D081106140A", "nha ": "0P7W110S", "nho ": "0P5Y", nhv: "0Z051208130O", nh\u00E3: "0P1N", niam: "0Q060T2L1A091B051O1F", "niam ": "0T2M1A051B021O2U", nich: "0L020NHR0Q020R020U080Y0F1A0C", nicht: "0NP20R03", niek: "0R040Y4D1A0D1B751D33", nieka: "1B8D", nieko: "0Y1K1A021B56", niema: "011M0N1T0R1V1A06", niet: "010F0O030RLN0T0D1A021B04", "niet ": "0ROQ0T0B", nieuw: "0R2T", nie\u010Do: "0Y3K", nih: "0D030T1G0U1H0V0O0Y2N13031F041Q0R", nihi: "0D040T2R", nihil: "0T2X", nii: "0D050T051145152R1A0H1C2M1O03", "nii ": "0T080U021103154D1A0P1C2U", niin: "0D02115Y", "niin ": "11D6", nije: "0V6M1F02", "nije ": "0VF9", nikad: "0V4X1O02", nikd: "0U4I0Y3P", nikdo: "0U2M", nikdy: "0U3P0Y4H", nila: "0B0C0D250U090V050Y08110D", "nila ": "0D2F0U0D0V0D0Y0A", nimes: "110U1C7P", ninc: "1455", nincs: "145F", "ning ": "01150B0D0D070M3C0R1E0Z2Q102U1220131W1C1V", ninge: "0R090Z1W101K1220150F", niny: "0D2G0U0B0Y0H", ninyo: "0D4H", "nir ": "03020L290O0J0P02133X1F0D", nisam: "0V91", "nit ": "032L0B0J0D0E0L060T2Q0U111003110A1403153L", niw: "030F040I0D0B1A06", niy: "0309040T0D2S1F1I1Q06", niya: "0D4P", "niya ": "0D71", ni\u00F1: "0O1D1N5O", "ni\xF1 ": "1N7K", ni\u010D: "0U0L0V0N0Y2K", "ni\u010D ": "0Y37", ni\u0148: "1NAT", "ni\u0148 ": "1NEA", "nje ": "04K70R070V4Z0Z02", njo: "0L050M090P030V0B11031O1U", "njo ": "0P021O26", "nko ": "0U020Y0H116B1B0D1O0G", nks: "0M0C0N050R0211031B14", nkt: "0N0H0R0D0Z09100G1104120D1A051B0E1F021O07", "nku ": "0B290U0Q0V050Y131A0G1B101O03", nlar: "1F9D1N22", "nlar ": "1F5S1N0Z", nlar\u0131: "1F4T", nlig: "0Z1F100Y121W", nly: "0M0X1N0L", nmu: "0B1F1106", "nmu ": "0B2S", "nnak ": "142Z", nnar: "0Q02100F134C", "nnar ": "1009135X", nnee: "011X0R1K110J", nneer: "011R0R1Z", nnen: "0L0L0N390R5X0Z04100P11221233140H1F05", "nnen ": "0N4O0R7D0Z03100O114Q1228140I1F03", nner: "03020L160M0F0N0Z0Q030R0N0Z16102L1102123B", "nner ": "0L1G0M0I0N0G0R0C0Z1D102I1234", "nnes ": "037T0L1V0N0X0T0N0Z031014110N121G", nnesk: "0Z2C121O1314", "nnet ": "03030L020Z0510021109121E", nnh: "1208", nnl: "120C130C", "nno ": "0QA80T0Y1A05", nns: "0N0J101Z120T131F", "nns ": "102N1306", nnt: "0N1J0S0N1202130I", nnya: "0B6Y1405", "nnya ": "0BCY", nnyi: "1105144K", nn\u00E4: "1120", nn\u00E5: "1208", nn\u00E9: "0L1E0S0W0U020Y05140O", "nob ": "1PBF1Q27", "nobs ": "1P3E", noch: "0N3P0O1U0R0B", "noch ": "0N5Z0R08", nodi: "01270R2K", nodig: "012C0R3G", noe: "010H0R0E0T05122Z1F08", "noe ": "0T061249", noen: "1102123C", "noen ": "11051238", nof: "0Q031P4U", "nof ": "1P4Y", "nog ": "011S0D070R440V11100F", noge: "0V060Z3Z", nogen: "0Z1Y", noget: "0Z2Z", "nogo ": "0V61", noi: "0L0J0M030P1B0Q2M0S1S112V1524", "noi ": "0Q3T111J153B", "nois ": "0L0F0S8M", noj: "0O050V0H110B1B1C1D111O2K1Q09", "noj ": "0V0K1O2Y1Q06", "nok ": "0D040Y0F0Z0Y121D140N1B021N3N", "nol ": "0L051P7S", nolob: "1P7A", noms: "0L0310021B021P3W", "noms ": "0L051B051P4G", nong: "0D1P0T08", "nong ": "0D32", noo: "010U0D0M0M060R0R110B1C13", nooit: "011A0R30", noon: "0D0Z0M0A", nori: "0M020N020Q020T0415071B7X1O06", "nori ": "15051B7J1O02", noriu: "1B78", "nors ": "1B4Y", nor\u0117: "1B2U", nosc: "0P090Q2N0T0T151M", "not ": "03030M5E0N02110915061D0U1F041Q3J", nou: "010Z0L990M0F0P0S0R020U390Y13110N151O", "nou ": "01250P0S0R090U3S0Y1W151B", nous: "0LCN110U", "nous ": "0LJE0M02", now: "0M4J1A2D", "now ": "0M6W", npa: "0B0I1002110O1O041Q04", nq: "03030L0A0O060P070Q060T0R1Q07", nqu: "0L160O0L0P0X0Q0P0T1T1Q0L", nsc: "0L080M020N1L0O040P070R060T0815031O07", nsch: "0N3W0R0M", nseg: "0O0G0P1F0Q2T", nsegn: "0Q2S", "nsen ": "033F0N030R2T0Z071006120A", "nseo ": "0S920T03", nsh: "04850M04", nsha: "049A", nshak: "04ET", nshi: "049Y0M06", "nshi ": "04EF", nshob: "04A4", "nsi ": "032A04AY0B060L0G0Q0N0T0511151B051O07", "nsk ": "0Z20100D121O1308", nska: "010J0U040V050Y0D0Z08103C1146120P130L", "nska ": "0U060V0D0Y0G102G110H130Z", nske: "0V040Y080Z34100J1248", "nske ": "0V0B0Z15100I1229", nsker: "0Z1T120W", "nso ": "0N020O0J0P0C0Q3J1B021O05", nss: "112L", nssa: "113Y", nsy: "0D020Z05100212071A03", ns\u00E4: "112C1P0V", "ns\xE4 ": "1144", "nt-": "03580L0P", "ntar ": "0B1M0O1C0P2P100J1204130K1505", nta\u016D: "1O2D", nted: "0M200P020Z0A140D1O02", "nted ": "0M2Q140E", "ntem ": "0P1I0T2U0U06141Q151R1A0E", "ntes ": "0L1K0N040O5H0P470R020T2Q0Z0712061404", nth: "0L020M0A0N030R020T04140B", ntia: "0B040M040P040Q030T34111A", nting: "0B180D0B0M0C0T030Z05101Q12191B0L", ntl: "010D0M0B0N0C0Z05100D12071F02", "ntos ": "0O2P0P2J0T04140S1B0D1O0D", ntru: "0N020R050Z0215AC1A031B031O03", "ntru ": "15CQ1O06", "nts ": "0L5C0M2B0N020R0214021D18", ntuk: "0B7R", "ntuk ": "0BDJ", "ntum ": "0N020T311B04", "ntur ": "0T31130F", ntw: "010E040C0N0F0R0C", nt\u00E4: "1002112T1N0A", nt\u00E9: "0L1G0O0A0P04140N", nt\u00F3: "0O0U130314071A07", "nu-": "03021536", "nua ": "0P040Q050S160T08116415051O0G", "nud ": "03021CDN1Q08", nue: "0L0Q0M040O2O0P030T051B051O05", nuest: "0O2R", nug: "03030N0613041B0E1C191Q0F", nuh: "0B0K0D021Q08", "nul ": "0L040R030U0Q0Y0A0Z03140Q155O", null: "0L050N020Q1D0T1D11B41403", nulla: "0Q1C0T0L11D91402", nulle: "0L0811DP", "num ": "03050B0Y0P0J0T8A13DP1F0B", "nun ": "03070N0A11AZ1F891O1H", nunc: "0O2D0P2O0Q0A0T2N1504", "nunc ": "0T2P", nunca: "0O2Q0P35", nuo: "0P040Q1T0T020V0G110S1A021B451O03", "nur ": "0N2P13231F021O26", nusi: "0B0K1B2Z", nust: "0T0311291B0X1C29", nuw: "010H03020R02", nu\u0148: "1N30", "nu\u0148 ": "1N4A", nu\u015F: "1F3V", nw: "031I04050N080R051Q0E", nx: "0T02", "nya ": "030704GG0BPJ0D0T100P140R1F0P", nyak: "0B3V140I", "nyak ": "0B6I", nyan: "030204190B0Q0D1B140F1F07", nyang: "0B0B0D28", nye: "047N0B1C0Z09120B143A", "nye ": "04C60Z0O120R140C", nyene: "049I", nyg: "10021B1S", nyi: "030304210B0P1103142M", nym: "0M0B0Y051A1Q1N1C", nyo: "042T0B070D1U0M0A141U1F0A", "nyo ": "042H0D2Q1F03", nyt: "0M0M0Z071008115X120A140T1B02", "nyt ": "0Z0911A6141M", nyu: "030H043T0B0P140S", nyw: "041H0M031A02", ny\u0148: "1N4F", "ny\u0148 ": "1N5R", "nza ": "0303042Z0O0P0Q5D1504", "nze ": "049D0L050N0J0P050Q0Q0R1B0U021407", "nzi ": "030404CQ0Q04150D", nzo: "043Y0M020O030Q0K1O03", nzu: "030B042C0N0C1507", "nzu ": "0307046F", n\u00E1: "0P050S230U5B0Y50130P143E", "n\xE1 ": "0S2U0U3M0Y4X13091407", n\u00E1i: "0S1N", n\u00E1l: "0U060Y0413071449", n\u00E1m: "0S0V0U2B0Y1O13071408", "n\xE1m ": "0U2K0Y28140L", n\u00E2: "1509", n\u00E3: "0P64", n\u00E3o: "0PLP", "n\xE3o ": "0POH", n\u00E4: "0N0B101N11611C1K1N5P1P0R", "n\xE4 ": "11DF", n\u00E4e: "110F1C15", n\u00E4g: "1C1G", n\u00E4m: "1003110I1N6J", n\u00E4me: "1N8X", "n\xE4me ": "1NBK", n\u00E4r: "102Q", "n\xE4r ": "102T", n\u00E4s: "10121103", n\u00E4\u00E4: "112G", n\u00E5: "0Z0L101P121N", "n\xE5 ": "0Z0210021217", n\u00E5g: "104E", n\u00E5go: "1052", n\u00E5gon: "103I", n\u00E5got: "101O", n\u00E5r: "0Z0S1003121E", "n\xE5r ": "0Z23123J", n\u00E6: "0T030Z0M1209130X", n\u00E6r: "0Z0B120E130V", n\u00E6s: "0Z0G130P", n\u00E7: "0L070P0S1F0N1N1T", n\u00E7a: "03020L0Z0P2N1N0L", n\u00E9: "0L0U0O070P020S0F0U2E0Y2V1303143W", "n\xE9 ": "0L1N0O050P030Q040S0P0U3W0Y6713031405", n\u00E9e: "0L1J", n\u00E9z: "141N", n\u00EA: "0L030P03", n\u00ED: "0O0E0P030S730U790Y2C13071408", "n\xED ": "0SA00UAL0Y2M", n\u00EDa: "0O15", n\u00EDl: "0S87", "n\xEDl ": "0S99", n\u00EDo: "0S3S", n\u00F2: "0Q02", n\u00F3: "0O080P0Q0S0W130F14041A0B", "n\xF3 ": "0O0L0S1B1402", n\u00F3s: "0P321A04", "n\xF3s ": "0P3Q", n\u00F5: "1C0D", n\u00F6: "0N03100A1104140R1P4Q", n\u00F6n: "10021P7L", "n\xF6n ": "100311021P9F", n\u00F8: "0Z0D120I", n\u00F8d: "0Z0B1209", n\u00FA: "0O050P040S090Y11130U1403", n\u00FC: "0N06140H1C0D1F321N0L1P0N", n\u00FCy: "1F3P", n\u00FCyo: "1F46", n\u00FCyor: "1F5O", n\u00FC\u00FC: "1C19", n\u00FD: "0U2M0Y3B130N1N2D", "n\xFD ": "0U4L0Y711304", n\u00FD\u00E4: "1N2X", n\u0101: "0T071D4X", "n\u0101 ": "0T021D3J", n\u0101j: "1D4G", n\u0101ja: "1D2Y", "n\u0101ja ": "1D5Y", n\u0101k: "1D2H", n\u0101s: "1D2F", "n\u0101s ": "0T021D2S", n\u0101t: "0T081D4I", "n\u0101t ": "1D3F", n\u0103: "152E", "n\u0103 ": "157B", n\u0105: "1A1P1B1L", "n\u0105 ": "1A271B4D", n\u0109: "1O09", n\u010D: "0U0E0V030Y0F1B0H1D05", n\u0113: "0T071D0O", n\u0117: "1B2A", "n\u0117 ": "1B1W", n\u0117r: "1B1K", "n\u0117ra ": "1B54", n\u0117s: "1B1N", n\u0119: "1A0U1B0W", n\u0119s: "1B1G", n\u011B: "0U73", "n\u011B ": "0U6X", "n\u011Bco ": "0U34", n\u011Bk: "0U26", n\u011D: "1O1G", n\u011Di: "1O0X", n\u012B: "0T031D1A", n\u012F: "1B0P", "n\u012F ": "1B1X", n\u0131: "1F9X", "n\u0131 ": "1FBV", n\u0131n: "1F5F", "n\u0131n ": "1F4P", n\u0131z: "1F32", n\u014D: "0T0L", n\u014Dn: "0T0S", n\u0151: "1410", n\u015D: "1O03", n\u0163: "1509", n\u016B: "1B021D04", n\u0173: "1B0H", n\u021B: "151S", "o'": "0D070M040Q0A0R051F051Q63", "o' ": "0Q151QED", "o'y": "0D071F05", "o-l": "0P041P1J", "oa ": "0P1C1003113Y", oar: "0M040P071004159D", oare: "155E", "oare ": "154S", oart: "156Q", oarte: "157Y", oas: "0M020P1I110B153I1C0B", oat: "0M070P020Q021102154R1O02", oate: "1560", "oate ": "157I", obai: "0S2W", obair: "0SAC", obbe: "0M020Q040Z07100G121T1Q0B", obh: "0S2H1Q06", "obi ": "0B050T020V071A0O1P3I", obie: "0N040O0A0Q050R0515081A3E", obik: "0B051P8K", "obik ": "1P9S", "obil ": "0B2P0U0C0V0T0Y3I0Z0410021507", obis: "0T2R1A0D1B021P11", "obis ": "0T2G1B051P17", "obi\u0107 ": "1A3T", obi\u0165: "0Y3R", "obi\u0165 ": "0Y4N", obor: "04LG0O020T021508", obora: "04S6", obre: "0D020L030O270P2R0Q030T020V070Y281A0I", "obre ": "0D030L040O2C0P2Z0Q030V0G0Y2R1A0J", "obs ": "0M031PAQ", "oc ": "0L020T350U1X0Y12151L1A0I", occ: "0L0R0M050O020Q2U0T0R", "och ": "0N590R110S1E0U020Y1I108N1A031QBL", oche: "0L0W0N1H0O310P020Q040R02150E", "oche ": "0L0U0N0R0O3H0Q02", ocht: "0N0G0R2O0S3X", oct: "0L060M0A0O0A0T160U0E150I", ocu: "0L060M030O1E0P1P0Q040T2J0V02152R1F25", oc\u00EA: "0PH6", "oc\xEA ": "0PHX", oc\u00EAs: "0P3C", "oc\xEAs ": "0P48", odd: "0M020Q060U02100R120G14021A0G1Q0D", odell: "0N020Q0211831402", odie: "0L020N020R020T1U1D35", odien: "1D6K", odig: "01280R2L0V030Z081006120B", "odig ": "01270R340Z0410041206", odn: "0U280V130Y1D0Z021002140B1A1J1Q1G", "odn\u011B ": "0U2Y", "odo ": "0O3Z0P1R0Q0S0T1T0Y081A021B1R1O051P0M", odos: "0O2Y0P2F11051B04", "odos ": "0O3V0P331B07", odp: "0U1H0Y201A141Q0F", odt: "0U020Y080Z0Z120M140C1Q04", "odt ": "0Z2C121D1405", ody: "0M0O0U0E0Y0U1A0W1B0Q", odz: "0U030Y051A58", odzi: "0U051A67", od\u0117: "1B34", od\u0117l: "1B47", "od\u0117l ": "1B8F", oed: "011E0P040R1Y0T0B0Z0B", "oed ": "01210R3S", oede: "0R2S0T0B0Z0T", oef: "010C0R09", oeg: "010R0R0X1C0F", oei: "01110P030R0I", oek: "012S0R1A", "oek ": "013V0R2U", oekom: "011U0R0B", oem: "01070O030P050R0E0T041O02", "oen ": "01660R610Z0H1107123L", oep: "010B0R070T0B", oer: "010Y0R0J0Z0312031C2X", "oer ": "011A0R100Z0612071C2C", oes: "010I0M250O040P040Q040R0D1102", oesn: "0M29", "oesn'": "0M33", "oet ": "016A0R5P0Z09", oete: "0R2W", oeten: "0R3S", oev: "010B0R0G", ofd: "0R0E", "ogen ": "0N0X0R1J0Z1W100A1207", oget: "0M0J0Q080Z2W120G", "oget ": "0Z3I120G", ogg: "01070Q1G10061402", ogh: "0Q0F0S2A0Z021QD8", "ogh ": "1QI6", oghla: "0S8M", ogla: "0V0L141A1N3H", oglan: "1N4R", ogli: "0Q5F0V071A08", oglio: "0Q3Y", ogs: "0M030R020Z0G1003120G140C1P0D", "ogu ": "0V2X1A031B031C0R", ogy: "0M0314C3", "ogy ": "0M050U0214NQ", ohl: "0N0G0U3U0Y151Q1Y", ohle: "0N080U2R", "ohle ": "0U3G", "oho ": "0U3K0Y3J1102", oht: "0Y04111G1C1U1Q2J", oik: "112X", oil: "0B020L0F0M050S3W0Z0211151503", "oil ": "0M050S36", oim: "0S0Y111R1A181C0D", "oin ": "0L2L0M040S1G115E", oing: "0L020M4X", "oing ": "0L020M6O", oir: "0L5X0S4J1112", "oir ": "0L750S22", "ois ": "0L730O050P2G0S3C1113", oisa: "0P2F1105", oisi: "0L0U1141", oista: "0Q02116Z", "oit ": "011D03020L3J0R33111F", oitt: "115P", oitta: "118E", "oj ": "0O080U0H0V670Y1K1B141OCV1Q2L", "ojau ": "1B59", "oje ": "0P240U3V0V3K0Y3Y1A2P1B5N1F021O0W", "oji ": "0U1V0V360Y0K1B1E1F02", ojn: "0U020V080Y0M1A0E1O7D1Q0A", "ojn ": "1OB8", ojo: "0O0Q0U030V0O0Y0I1A021B231D0K1O0N", "ojo ": "0O0G1B2U1O0H", oju: "0V1D0Y1B1A0N1B1N1C161D2M", okat: "0Z0410041102144Q1A031B0B1O04", "okat ": "0Z041003144U", okku: "1102133J", okkur: "1369", "ol-": "1P2G", "ol-li": "1P3L", "olar ": "0B0G0M030O0B0P0915051F0D1N8F", "olas ": "0O080P070S2T0T031B081O7Z", "old ": "0M490N030Z18120J140J", olde: "0M0A0N020R020Z23121H", oldu: "14021FAA1N0N", oldu\u011F: "1F9X", oled: "0Q050U0E0Z021C41", "oled ": "1C9J", oleh: "0B2T0U051107", olek: "0U0211091A021B021C291O06", oleks: "1C521F02", olem: "0T0B0U0A113O1A021C1Y1O03", "olen ": "0M040N0D0R0H0U020Z0Z100F11HU121J1CDW", "olet ": "0L030T0L119A1A02", olgo: "0Q02143Z", olh: "0P2214041Q03", "olik ": "0U3D1A021F021P57", oliko: "0D030V7611121B06", "olim ": "0T060V52", olisi: "0B0U118C1F051N0J", "olla ": "0O040Q04100511BY1C42", ollu: "0L020T04113Q1306", ollut: "118S", olma: "11091F6T1N59", olna: "144T150I1A02", "olna ": "14351A02", olnu: "14021C29", olnud: "1C5I", olob: "1P7A", "olob ": "1P7E", olol: "1P3J", olp: "0O050P020Q0J0R02", "olt ": "0N030Z061006120A14BO1C0G", olta: "0O020P170Q2K110Q130G144Y1507", olto: "0P0A0Q5P11031409", "olto ": "0P030Q5R", olya: "0D021458", olyan: "144Y", ol\u00F6: "1PA9", ol\u00F6d: "1P7Q", "ol\xF6d ": "1P8W", ol\u00F6n: "1P3V", "ol\xF6n ": "1P4I", "om'": "0M0O0Q0711021A041FBW1Q0B", "om'u": "1F9Y", "om'un": "1FB2", "om-": "1P2P", "om-li": "1P3X", "omae ": "0T2M", omam: "0O020P020T0N1D3R", "omam ": "0T0O1D9D", ombr: "0D030L150O360P080Q0B15051O0E", ombre: "03030D060L1T0O3P0Q0A1O09", "omem ": "0P1L0U2O1A0X", "omen ": "0M0A0N020O070R4R0T1Y1002110G", omh: "0S6R0U020Z02100212041402", omha: "0S4H", omhai: "0SCC", omil: "0U0A0V090Y08113R1C34", omill: "1185", "omin ": "0D0211A61313", omine: "0T2E110C", ominu: "0T2S", omma: "0L0K0M030N020Q03101T1108140S1Q09", "omme ": "0L800N0K0R060Z1N110R12161C3B", ommen: "0L690M070N4V0Q090R070T070Z0H100B1108120M", ommer: "010X0L0A0N0G0Q030R040Z36104Z123P", omne: "0L030T3B", omnes: "0T2O", omni: "0T5B1A0T", omnia: "0T2E1A0O", omov: "0P030U590V0S0Y5P", omovi: "0P020U5J0V0A0Y34", ompr: "0L1O0M020O2I0P2L0Q2K0T031O17", "oms ": "0L030M050N0S0R180Z1R1015120Q1B091DHJ1PAK", "omui ": "1B4V", "omum ": "0P080T2C", omu\u0148: "1N5B", "omu\u0148 ": "1N72", omy: "040D0M030U080Y081A0O1N33", om\u00E1: "0O0N0P090S5A0U0L0Y0X140J", om\u00E1s: "0O0U0P090S52140S", "om\xE1s ": "0O140P0B0SI11405", om\u0101: "1D3Q", om\u0101j: "1D2S", om\u0101ju: "1D5L", "on'": "0M3X1F231Q04", "on't": "0M6Y", "on't ": "0M9C", "onas ": "0M050O1G0P020S4R1B2A1O4G", "ond ": "011Y0L0F0M0C0N040R470Z02140O1C0E", "onde ": "010I0L3U0O120P3M0Q040R0L0T030Z0310031O03", onder: "014204590L020M110N1G0O0C0P0F0Q0F0R560T0E", ondol: "1448", ondta: "1433", onem: "0T2N0U061A02", "onem ": "0T2S0U031A03", "onen ": "0N0V0O040R150Z16101G110S121G", "ongo ": "049C0O0A0P080Q020T04", onh: "0L050P2H1102", onko: "114F1A021O02", "onko ": "11A3", onla: "0R0411021F5P1Q06", onlar: "1F7M", "onn ": "0S4Y", "onne ": "0L6D0N0I0Q0H0T1J110M", "onom ": "0V0A10351405", onosc: "0P0B0Q2O", onum: "0T1V133T1B061F08", "onum ": "0T1V137S1F04", onun: "0O030P030Q030T05130E1F7R", "onun ": "1F80", onu\u0148: "1N3T", "onu\u0148 ": "1N55", onu\u015F: "1F4E", onz: "0L020N030O030P030Q020R0D1404", oob: "0D0A0Y061C0F", oof: "010F0M020R0M", ooi: "011A0R17", ooit: "011D0R33", "ooit ": "011G0R45", oon: "011W0D170M0M0R1A111F1C1S", "oon ": "012S0D1H0M0Z0R2O11241C0Q", "oop ": "013Z0R1G", "oor ": "017H0M0V0RB71C0G", oord: "011X0R4J", oorde: "010Y0R2Q", oos: "010Q0M030R0D11081C1Q", oot: "010N0L040M090R0J110I1C1U", oov: "1C1K", open: "0M0M0R310U0C", "open ": "0M0I0R3D0U0D1103", opg: "010I0R0A0Z03", "ople ": "0M24", "opp ": "100E122W", oprav: "0Q050U2R0V0I0Y0R", oq: "0L030O030P030T1G1Q2C", oqu: "03020L0G0O0A0P0C0T3F", oque: "0L0I0O090P0D0T2Y", oqui: "0O030T2I", orang: "0BFQ0L090M030N050P020Z02", "orde ": "0L090O020P030R0N0T060Z0Z102U121E1O02", orden: "0N150O0M0P060R4W0Z0S100D120I", ordu: "0L05140L1F6P1Q0S", "ordu ": "0L051F63", orem: "0P020T2L0U0411081A0O1O03", "orem ": "0T2Q0U061A12", "ores ": "0L040M030O2Q0P2S0T2V0Z1T", orfo: "0Z24122J", orfor: "0Z2L122K", orgen: "0N2L0R330Z2D1003121E", orh: "0N040Z061208", oriu: "0T1E15061B3X", "oriu ": "1B78", "orm ": "0M090N050R0B0S4D0Z0610071206150D", orq: "0O0Y0P0W0T02", orsk: "0U020V040Z0P1006121N1A03", orst: "0M020N080R0S0Z1C10061102121T1A02", orst\u00E5: "0Z15121G", orsu: "0T0811021A021F4I", orsun: "1F64", orts: "0L0D0M070N050R050Z0D100F121C", orum: "0N020T4N130E15051B021FE3", "orum ": "0N030T4V130T1FHO", orun: "14021F4D", orund: "1F3T", ory: "0D030M0C0T040U090Y0C1A0I", or\u00E6: "0Z09", or\u00ED: "0O0C0Y3X1406", "or\xED ": "0Y34", or\u00F0: "132I", or\u0117: "1B1V", "os'": "0Q0I1Q07", oska: "114G14051A051C16", oskaa: "117K", "oss ": "0M0E0N0B102A123N", ossa: "0P1D0Q0U0T0F100411531404", "ossa ": "0P1B0Q0H0T04100211B41402", ossi: "0L0Y0M0H0P060Q2R0R060T0R", osso: "0P370Q32", "osso ": "0P3M0Q2Q", ossu: "0P080T2J1103", "osti ": "0Q060T030U2T0V3F0Y3R112L130K", ostru: "0QBV0T0I1511", osz: "140Z1A3C", os\u00EC: "0Q1Z", "os\xEC ": "0Q35", os\u00ED: "0U1A0Y2A1407", os\u00EDm: "0U1T0Y3M", "os\xEDm ": "0U2H0Y4G", os\u0165: "0Y2F", "os\u0165 ": "0Y3X", oth: "0L060M2B0N030R030S0R0T07", othe: "0M2V0N060R0A0T09", other: "0M3M", "oti ": "0B080Q060T020U0J0Y0J11041B5W1D5M", otie: "0R020T0511021B031D2Z", oties: "0T031B051D5L", otre: "0L4I0Q1G0U060V0Y0Y3K", "otre ": "0L7I", otreb: "0Q0N0V270Y4D", otro: "0O2M0T040U030V051004", "ott ": "0N0D100U1208130S14CP", otta: "0L020Q0J1008115W14471Q0G", ot\u0159: "0U27", ot\u0159e: "0U3L", ot\u0159eb: "0U4W", "ou'": "0M1D", oub: "0L0S0M0B0P0G0U060V02", ouc: "0L150M050P1J0U0S", oud: "010Q0L0S0M060R1U0U0A110C", oude: "0L020R3R1104", ouden: "0R2P", oue: "010N0L14", oug: "0L0G0M2F", ough: "0M4F", ought: "0M45", ouj: "0L1B", ould: "0M8L", "ould ": "0M8H", ouldn: "0M2Q", ound: "0M24", "ound ": "0M2E", oup: "0L2O0M070P0C0U21", "our ": "0LCD0M5E", ourqu: "0L4P", ours: "0L4C0M13", "ours ": "0L6K0M0N", "ous ": "0LQP0M1L1107", "out ": "010T0L610M6G0R0P0U1N", oute: "0L410M030R0D", ouv: "0L670P1A0U071103", ouve: "0L6O0P0A", ouw: "0R18", "ouw ": "0R2Q", "ov'": "0Q0D1Q0K", oval: "0Q030U4E0V0A0Y4611031F02", "oval ": "0U440Y2R", ovas: "0P07110K1B041O4X", "ovas ": "0P091B081O9G", "ovat ": "0U5E11D21402150G", ova\u0165: "0Y49", "ova\u0165 ": "0Y59", "ovde ": "0V5T", "ove ": "0M1I0P080Q4H0T040V1L0Y0B0Z0E120A1B021O0E", oved: "0M0I0Q040U090V040YA90Z1312091507", oveda: "0Y9X", "over ": "0M1K0N030O0C0P0B0R4X0Z32100C122F", "ovi ": "0Q090T0O0U4I0V1A0Y3C110E1B0B1O0I", "ovo ": "0P1M0Q180T040U0R0V420Y131O05", ovor: "0U040V2S0Y95", ovori: "0V4O0Y3S", ovor\u00ED: "0Y74", ovr: "0Q1N0U020V0N0Y050Z0310021O09", ovu: "0Q0L0T0E0U0G0V0W0Y0B11051B021F041O0K", ov\u011B: "0U1Q", "ow ": "0M6K0P02", owa: "0M041A7Z1N24", "owa\u0107 ": "1A45", owa\u0142: "1A3K", owi: "0M061A8I", owie: "0N021A7H", owied: "1A7Q", owy: "1A1Z1N54", "owy ": "1A1Q1N6U", "ox ": "0M040T0H", oxi: "0L020M020O040P070T0H1505", "oy ": "0D0G0M0C0O5L1F081P0B1Q2I", oye: "041C0B020L110M060O09", oze: "041K0M020N020P040R050U0M0Y0F15031A031O05", ozn: "0U0J0V150Y2N14121A0G", o\u00DF: "0N0I", o\u00E3: "0P02", o\u00E7: "0P05", o\u00EB: "010G0L02", o\u00EBl: "010K0L0C", o\u00ED: "0O060S09", o\u00F1: "0O021N0R", o\u00F9: "0L0D", "o\xF9 ": "0L1T", o\u00FB: "0L03", o\u00FD: "1N2C", o\u0109: "1O07", o\u010D: "0U2R0V110Y2P1B03", "o\u010D ": "0U2J", o\u011D: "1O0G", o\u011F: "1F1I", o\u013E: "0Y1M", o\u013Ek: "0Y2H", o\u013Eko: "0Y3T", "o\u013Eko ": "0Y4F", o\u0142: "1A19", o\u0144: "1A10", o\u0146: "1D06", o\u0148: "0U030Y041N1K", o\u0159: "0U0P", o\u015B: "1A37", "o\u015Bci ": "1A3R", o\u015D: "1O07", o\u015F: "1F0Z1N0N", o\u0161: "0U0E0V1O0Y0C1B0E1D0W", o\u017C: "1A2L", o\u017Ce: "1A36", o\u017E: "0U1R0V1Z0Y1W1B07", o\u017Ee: "0U0W0V3V0Y1D", o\u0219: "150B", o\u021B: "150X", o\u021Bi: "153D", "p'": "1Q06", "p-": "1N05", "pa-": "0B0D", paa: "010B0D0H0N070R0E11231B0D1C0O", "pada ": "0BAS0D040O0C0P0D0Q020V1A150F1A0H", padar: "1B8J1D1D", pae: "0Q0D0T0D", pagk: "0D1E", pagka: "0D2C", pah: "0B0A0D07111S15051F091Q0A", paka: "0B680D0U11071A031B151D0X1O02", pakah: "0B9S0D04", palj: "11411C3E", paljo: "1195", palju: "1C7Y", palu: "0T0211021C2V", palun: "1C6B", pal\u012B: "1D2U", pal\u012Bd: "1D6X", pang: "0B1N0D1N", "para ": "0B1D0D3U0OAX0PFL0Q040T030V0I10031A021F1F", parec: "0O380P2V0Q04", parla: "0L0F0N020O030P020Q3Q1103140215051F091O05", parle: "0L5N0Q040R02", paro: "0L0B0O050P090Q0Y1B0P1O32", parol: "0L0H0Q0V1O5H", pasa: "0B0A0D0E0O2P0V0415041A041B6E1D211F031O04", pasak: "1BAH", pasi: "0B080D050O06110X1204140415041B7T1F021O0X", "pat ": "0B5M0D190U04100611031404151M1B1H1D201F02", patei: "1B0C1D6G", pater: "0T2N", patin: "0D020L020O021B5P1O02", pat\u012B: "1D3O", pat\u012Bk: "1D8O", pay: "0B060D0B0L0Z0M081F0A1Q0I", paz: "0N030O0D0P0K0Q0O0V0A15021D1M1F0P", pa\u00ED: "0O0N0P0Q", pa\u00F1: "0O0X", pa\u017E: "0V091B1Z", pb: "14031Q0M", pee: "010G0M050R09110H", peng: "0B1N0R020Z1O1018121I", penge: "0B0S0R020Z21121J", pensa: "0L1A0O1J0P1R0Q2U0T0311031O21", pense: "0L5F0M020P0O0Q021O03", penso: "0L020P0D0Q3B1O0D", pentr: "15CC1O0D", peo: "0M0V0O0A0P020V0B", peopl: "0M27", perc: "0B140L050M030O040P0F0Q5K0T0G140Y1505", perch: "0Q5J", perg: "0B5S0P1M0T0I1B05", pergi: "0BAO0T04", perna: "0B5Q0P081B04", "pero ": "0D140O5G0P0Z0Q0O0T0S0U090Y0L1O0I", perti: "0B590L020Q040T0C1O05", pess: "0P2L0Q0Z0T0511031408", pesso: "0P370Q0S", "pet ": "0B040D020M020V0V0Z0G100P121U140R", pett: "0Q2K112I140C", peu: "0L5A0P031105", pev: "0Q0Q0V0D0Y0A", pfu: "042K", pg: "010A0R070Z02120313021B05", pge: "010H0R0A", piac: "0Q6B1405", piace: "0Q53", pii: "0T02110U150Y1C16", piki: "0B2011051N60", pikir: "0B3X11061N85", pille: "0L040R030Z1N1105121G", pinag: "0D1J", pise: "0Z1V1103121S", pit\u00E4: "115I", piu: "0Q0D0T0A1B0B", pi\u00F9: "0Q3C", "pi\xF9 ": "0Q5B", pj: "0R031302140G1B031D061Q06", pka: "0B091A021B051F08", plac: "0L0T0M0O0O070P020T420U05155A", place: "0L160M0W0O080T3V0U05155K", plej: "0O040Z0E1O25", "plej ": "1O3Z", "pli ": "0L050Q0H130714021O44", plus: "0L7P0T0L0Z0311071505", "plus ": "0LBY0R020T0M0U020Z03110H1506", pma: "1F651N0D1Q07", "po'": "0Q151Q0O", poa: "1108152O", poate: "154W", pode: "0O120P5S0U0B0V0315041A0C", "pode ": "0P3O", poh: "0B090U0K0Y0Y110A14051Q1I", poi: "0L150M0A0P160Q09112E150D1A021C0P", "pole ": "0U021A031CAZ", pomo: "0Q020U2K0V1Q0Y1O11081A161O09", pomoc: "0U2E0Y171A15", "pon ": "0B0K0D0U0L0F0M060O03140C1F081O171Q1G", pong: "0D0Z0O0D0Q031Q3A", "pong ": "0D1S1Q19", "por ": "0B090OCD0P9G0Z02100414021F0E1O65", poss: "0L100M0G0P390Q4A0T431102", posso: "0P2L0Q2O", possu: "0P0A0T2P1106", potes: "0Q050T3J", potr: "0Q1J0U0C0V170Y3T150Z1A2C", potre: "0Q1G0U080V2C0Y4F", pot\u0159: "0U3K", pot\u0159e: "0U4W", pou: "0LAH0M030P1L0U0X0V030Y0E1102", pour: "0LDN0M03", "pour ": "0LFW", pourq: "0L4P", pov: "0P080Q060U1R0V140Y84150G1O3Z1Q0I", pova: "0U0J0V030Y0L1O4L", povas: "1O8R", pove: "0Q0A0U030V0C0YB7150Q", poved: "0U030YCD", pow: "0M051A70", powi: "1A7U", powie: "1A8U", poz: "0U1P0V1Z0Y451403150S1A1I1F031O0D", pozn: "0U0F0V150Y3N1A0G", pozn\u00E1: "0U090Y2V", po\u010D: "0U180V110Y3H", ppf: "100A1208", ppr: "0L1H0M060Q0C0T06100812031303", ppy: "0M0E", praa: "013P0R0S", praat: "013F0R0P", prant: "1B2G1C4C", prat: "0L080P0E0Q160R0X0V0D101S1B101F03", prata: "0P03101Q1B0S", prav: "0Q050T030U5E0V320Y6O15071B061O0D", pravd: "0U4A0Y3F", praw: "1A62", prawd: "1A5D", pra\u0161: "0U021B3C", "pre ": "0L0G0O280P1V0Q2A0V150Y2S140315381O08", preci: "0M070O0U0P500Q040R0F100I150E1O0L", pred: "0M020O040Q020V1R0Y4A0Z03150E1O02", prend: "0L6D0O2L0P1V0Q261B1P", pre\u010D: "0V030Y79", pre\u010Do: "0Y7V", "pri ": "0Q060V050Y1215051B031O4L", priat: "0M020Y38", prie: "0L0G0P030Q050R020Y0J152M1B461D35", priek: "1B0F1D58", "pro ": "0N020P020Q0H0T120U311B041O1K", pros\u00ED: "0U2H0Y4H", pro\u010D: "0U430V0F1B03", "pro\u010D ": "0U5M", prz: "1AD2", prze: "1AAN", przy: "1A8S", przyj: "1A5C", pr\u00E1: "0O030P030U3E0Y4R", pr\u00E1c: "0O040U2K0Y1E", pr\u00E1v: "0U2F0Y5C", pr\u00E5: "100S120N", pr\u00E5k: "1011121N", pr\u00E6: "0T0Q0Z07", pr\u00E8: "0L18", pr\u00E9: "0L2J0O070P05", pr\u00ED: "0P020S0R0Y45", pr\u00F3: "0O0H0P10130E140Y1A0X", pr\u00F8: "0Z08120O", pr\u00F8v: "0Z0I121K", pr\u0101: "1D27", "pt ": "0L050M0F0N070R0I100H120A13081514", pt\u0131: "1F3A", "pu'": "1QKI", "pu' ": "1QPW", pua: "0B0L0D03110I1F02", pue: "0O6S0T2D", pued: "0O7I", puede: "0O68", puedo: "0O3E", puer: "0O110T2U", puh: "11451C0P1Q1Q", puhu: "115N", pui: "0L1N0T05110P150S1B0D", puk: "0B0H110D14031A02", pulc: "0T2U", pulch: "0T2W", "pun ": "03040B2Q0V031107151M", punt: "0D0T0O0R0Q0N0R0B", puny: "0B3N", punya: "0B70", puo: "0Q0J11161B0I", puu: "111E1C1E", puw: "0D0K", puwe: "0D11", puwed: "0D1Q", pu\u00E9: "0O0P", pu\u00F2: "0Q1A", pv: "0104120214031Q04", pw: "0D021Q0M", "py ": "0M0I0U040Y081A0D1N09", pys: "111X1A02", pz: "1406", p\u00E1: "0O070P040S0W0U0S0Y141308141D", p\u00E1i: "0S28", p\u00E2: "150C", p\u00E3: "0P04", p\u00E4: "0N080Y0C1003112D1C1G1P0P", p\u00E4e: "1C2C", p\u00E4ev: "1C2W", p\u00E4eva: "1C48", p\u00E4i: "113A1C0E", p\u00E4iv: "114Q", p\u00E4iv\u00E4: "11AC", p\u00E4r: "1003110S1C20", p\u00E4\u00E4: "113T1C0D", p\u00E5: "0Z3N104U124S", "p\xE5 ": "0Z5G10CI127D", p\u00E6: "0Z041302", p\u00E8: "0L09", p\u00E8r: "0L16", p\u00E9: "0L0I0O020P060S0A1418", p\u00EA: "0L03", p\u00ED: "0O020U130Y171306140A", p\u00F3: "0O070P040S0A130414061A11", p\u00F4: "0P030Y0G", p\u00F5: "1C0D", p\u00F6: "1108130514021P14", p\u00F8: "0Z0A120F", p\u00F8r: "0Z0E120K", p\u00FA: "0O020P020Y021302", p\u00FC: "0N02140C1C0B1F051N071P65", p\u00FCk: "1PAX", p\u00FCki: "1P6N", "p\xFCki ": "1P7D", p\u0101: "1D1S", p\u0101r: "1D5B", p\u0103: "1523", p\u0103r: "153Q", p\u0113: "1D2E", p\u0113c: "1D37", "p\u0113c ": "1D3T", p\u0113j: "1D2P", p\u0117: "1B0K", p\u011B: "0U0W", p\u012B: "1D09", p\u0131: "1F10", p\u0142: "1A0Z", p\u0146: "1D0G", p\u0159: "0U6K", p\u0159e: "0U5P", p\u0159ed: "0U39", p\u0159es: "0U2R", p\u0159i: "0U4F", p\u0159\u00ED: "0U31", p\u0161: "0U0E0V060Y0L1B04", p\u016F: "0U0N", "q ": "030K0L021QA4", qa: "030W1L051Q9G", qatlh: "1QCA", qd: "03041Q11", qe: "031T1Q25", qi: "030Q1Q1G", ql: "030V1Q0P", qm: "1Q0X", qo: "1Q46", qq: "03221Q0I", qs: "03051L05", "qu'": "0L7B1QBP", "qu' ": "1QEH", "qu'i": "0L56", "qu'il": "0L8G", qua: "0L2G0M080N030P8N0Q8V0TC1", quae: "0T4X", "quae ": "0T2K", qual: "0L060M050N030P280Q760T0M", qualc: "0Q5I", quam: "0TAD", "quam ": "0TAG", quan: "0L2V0P680Q4L0T3I", quand: "0L4A0P4B0Q2L0T2N", quant: "0L0M0P3S0Q270T11", "que ": "0LOQ0M060ORC0PRK0Q0W0TEP", qued: "0O290P05", quel: "0L710N020O0X0P1W0Q5C", quell: "0L300N040O0O0Q4C", quelq: "0L65", quem: "0L0A0N020O080P2X0T1N", "quem ": "0N020P3N0T1J", quer: "0L0V0N030O280P880T1G", "quer ": "0L170P3V", quero: "0O050P3C", ques: "0L340M0L0O0E0P0D0QBK0T04", quest: "0L1O0M0T0P0B0QBO0T02", "qui ": "0L7H0P3L0Q350T5Z", quid: "0L030O020P020T8S", "quid ": "0T80", quie: "0L060M060O7G0P040Q020T0G", quier: "0L030O8S", quis: "0L050O0O0P100Q060T3Z", "quis ": "0L040P0B0T3G", quo: "03020L2K0Q020T75", quod: "0T4I", "quod ": "0T4N", quoi: "03020L46", "quoi ": "0L6W", quot: "0L030Q020T3J", "quot ": "0T2P", quu: "0T0P", qu\u00E6: "0T17", qu\u00E9: "0L0P0O5C", "qu\xE9 ": "0L0R0O7Y", qu\u00ED: "0O210P06", "qu\xED ": "0O2V", "r'": "0M041F041Q0Q", "r-b": "0B0I1N0D", raa: "01320B060D040R1Y111Q1C3F", raag: "01120R3M", "raag ": "01100R3V", raam: "0R0A11061C3B", raama: "11091C7Y", raat: "013F0R0X1105", "raat ": "013N0R131102", "raba ": "049O0O0N1F151O02", rabaj: "0O49", rabal: "0P3F1F0B", "rade ": "0L030M040N1I0Q100V0L0Y0U1025", "rah ": "0B2I", "rai ": "0B0B0L340P020Q1O0T02140415071B4B", raib: "0S3L", raibh: "0SDI", raid: "0L020M0H0S361B09", raidh: "0SBR", rais: "0L5O0M070O020P070Z0211051B03", "rais ": "0L6P0O020P091B05", rait: "0L3L11061B02", "rait ": "0L4Z", rakst: "1D6P", rali\u00FD: "1N3Y", ramin: "0D1W0T041B0D", ranc\u00FA: "0Y3R", randa: "0P030T031B0G1F061O3M", "rano ": "0O150Q4B0V0N1A0Y1O08", ransk: "0Z1V1016119J120T", rants: "0L050M021C4C", rapa: "0B430D0D0L020O050P0910021A021O04", "rapa ": "0B6D", "rar ": "030T0O390P4G103D120I131915081F251N0F", rare: "030H0L080M030O020P060Q3X0R080T1D100X1514", "rare ": "0L030M020Q3Z0R030T19100R150S1O02", rasa: "0B2J0D020O050P0C10021O02", rash: "04D10M03", rasho: "04DM", "rato ": "0D060O0N0P0H0Q330T031B0F1O16", ravai: "0L4S", ravd: "0U330Y2R1003", ravdu: "0U2V0Y1R", raw: "031Q0B060D0Y0M051A4G1N09", "raw ": "030T0D1D0M031A05", rawd: "1A3E", "raz ": "03040P030U060V030Y3414031A2Q1F251N1B", "razi ": "049Z", ra\u00E7: "0P1K1F04", ra\u00ED: "0O050P040S1U", ra\u0161: "0U080V1A0Y0F1B41", ra\u016D: "1O1Z", "ra\u016D ": "1O2N", rbei: "0N2I0R03121N", rbeid: "0R04121M", rbej: "0Z2A1Q06", rbejd: "0Z2S", rbet: "0R06101R1N0T1O02", rch\u00E9: "0L0I0Q5H", "rch\xE9 ": "0L0R0Q5J", "rdan ": "030V0O020Z1I12201F1B1N1I1O05", "rden ": "03090M080N5S0O070R5G0Z1O100I12191F121N2V", rdie: "018J0L030N090O040R0G1B09", "rdie ": "018T", rds: "0L070M0D0Z05100412021C0K1D0U", rdt: "0R0G0Z031207", "rdu ": "0L0P1B051D0O1F5F1O08", rdy: "1B021N4V", "rdy ": "1N4A", rdz: "1A33", rdzo: "1A3E", "rdzo ": "1A5C", rd\u0131: "1F73", rd\u0131m: "1F3U", "rd\u0131m ": "1F42", "re'": "0M0H1F06", reac: "0M090O040R030S3C150A", reach: "0M090SCK", read: "0M260O050S11", reall: "0M2U", reba: "0O020P030T0C0V3S0Y0G151E", "reba ": "0V5S0Y0K1508", rebb: "030Q0Q45", rebbe: "03020Q47", rebu: "0T0B0Y2T15AD", rebui: "15CT", rebuj: "0Y3F", reci: "0M060O260P4N0Q0M0R0B0T080V0N100I150R1F021O0D", recis: "0O060P4U0Q03100I", "rede ": "010N0N0C0P080Q060R090Z451212150V1F1Z1N2C1O02", redz: "1D3X", redz\u0113: "1D6C", "reg ": "012H03040D050Z02140J", regn: "0M020N0B0Q0D0T0J0Z1G100L120Z130C", regt: "01250N02", "rei ": "0N190P340Q320T07131F1402153U1B0K1O02", reik: "0R09110B130D1B5V", reiki: "1B78", reiz: "0L020N050R07150C1D42", "rek ": "011103030R0E0U0D1004142Y1A0E1F131N3O", reka: "044X0B4Q0V1B130H1F021O03", "reka ": "047X0B8Y0V0A1O02", rels: "0Z1J1004120M1309", relse: "0Z1I10041208", rendr: "0L56", "rene ": "0N020Q0H0V0B0Z0M121D1F04", renge: "0N050R0P0Z0N122D140A", "rer ": "0L2U0M020N1U0O090P0O0T050Z4Q1008124O1F06", retn\u00E9: "142X", rew: "030I041P0M081A091Q05", rex: "0T0I", rey: "040V0D020O08132X1F0W", re\u00EB: "010E", re\u010D: "0U050V190Y4H1B07", re\u010Do: "0Y6G", "re\u010Do ": "0Y7V", rfor: "0M030N040Z2I122V1F021O04", "rfor ": "0Z2Z122S", rf\u00F6: "101Y", rf\u00F6r: "102M", "rf\xF6r ": "102M", rgee: "01230R0G", rgeet: "01260R0G", "rgen ": "03020N2F0O020R300Z1V1005121A", "rgi ": "0B5M0Z0310021205130G150S1B0O1C0Y1F031O03", rgs: "0Z091B021D0E", riam: "0O040P0P0Q0I0S0M0T2Y0Y091B0C", "riam ": "0P0P0T2U1B06", riate: "0M020Y3A1B03", riau: "1B3P", "rien ": "0L4E0N0C0Z0B1003110A120L", riend: "01260M200O0H0R3A0T05", "rig ": "010S03040N0J0R0N0Z2Q102G120B1402150A", rih: "041S0D020V0B0Z02100412041F08", rii: "0T0E0U070Y0Y111515281A091B061C211O05", rija: "0V2W0Y081B491D6D", "rija ": "0V351B791D9D", rikk: "0R080Z171111121A", "rile ": "0Q02155A", "ring ": "011R0B270D0L0M2D0N090R1H0Z1C100Q121H130H", ringe: "0N1G0R0I0T030Z1O100I121G", "rini ": "0D020Q020T03110G1F311N5W", "rink ": "011M0M0J0N020R0C0Z0410021B09", rinn: "0N0M0R0I0S1T100711061207135H", "rinn ": "13AA", "rir ": "03030L110O0N0P0N138L1F0I", rira: "047Y0L030P050Q020V041O03", "rira ": "04AF0L02", "riu ": "0P0H0Y0U150M1B73", riy: "030804280D041F1I1Q3M", "riza ": "049O1O06", rizw: "04AS", rizwa: "04HK", ri\u00F0: "132K", "ri\xF0 ": "133N", ri\u00F3: "0O0V", rje: "0B0A0O03100N110X140G1N0M", rjo: "11241402", rju: "0B061103132614041C1Y", rkan: "030E0B2Q0N050R0410051F02", rkeli: "0R090Z1B121D", rkl: "010D0N0M0R030Z07101D120D1B091F0H", rkt: "0N070R0D0Z04100B12051B0O1D0N1F09", rld: "0M0C100G", rlig: "0Z261012122X", "rlig ": "0Z0V100C1222", "rlo ": "0O2A0Q3M0V0G", rlu: "0B0W10051F0A1Q0A", rly: "0M0F1B021N0S", rmast: "1004110Z1C5S", rm\u00E3: "0P17", rnah: "0B2Y", "rnah ": "0B5A", "rnar ": "0P08136G", rny: "0B1A0Y05140J1A071B02", rnya: "0B2J1405", rn\u00E5: "0Z0B", robil: "0Y4W1A0B", robi\u0107: "1A3T", robi\u0165: "0Y4H", "rog ": "0V040Z16100512041404152U", roh: "0N050O040T020U08110614041C1A", "roj ": "0U060V0B1O3A1Q06", rojn: "1O25", "rojn ": "1O47", rongo: "049I", roon: "0D0Y1108", "roon ": "0D1M110I", "ror ": "0M040O0E0P020T180Z2G102K122L150K", ros\u00ED: "0U1S0Y3M", ros\u00EDm: "0U2G0Y4E", "rou ": "01210L030P2D0U0X150E", rouw: "0R2P", rova: "0P0S0Q350U0N0V0S0Y161004110D14031O0F", ro\u010D: "0U2M0V0E0Y0A1B02", "ro\u010D ": "0U42", rq: "03040L0E0O0E0P0A0T041Q07", rqu: "0L1Z0O1A0P1A0T0A1Q0I", rquoi: "0L4P", "rr ": "030E0N050S36100I1204130D", rrai: "0L180Q020S3A", rraid: "0SB5", "rro ": "0O1H0P2P0Q070T08110K", rsc: "0N150R0H", rsi\u0148: "1N4K", rsm: "1005120D", rsona: "0D030M060O2N0P040Q0T0T041002150H1O05", rsonn: "0L4G", rste: "011E0N240R1U0U020V030Z1A1003121G1D0O", rst\u00E5: "0Z0Y1015121H", rsun: "1F4M", "rsun ": "1F5F", rsz: "141X1A0L", rs\u00F6: "0N021014", rtf: "100V1A03", rts: "0L0D0M080N090R050Z07100F120J1407", "rtu ": "0B060T040U040V09133W1A051B0N1O05", rt\u00E6: "0Z0A1307", rt\u00E9: "0L0G0O03141L", "rud ": "03050S410Z03", "rug ": "01250M020N060R1E0Z1G", ruh: "04270B0D0N080U0H0Y0P140H1F06", ruir: "0L040O050P040QBL", ruire: "0L060QBQ", "ruka ": "030204970U02", "rul ": "140B156U", ruma: "0B3J0O020P0311041F091O03", rumah: "0B6T", runda: "10031F3U", runt: "03020B0A0L060N050T5G100E15081O09", "runt ": "03050T5E100D", run\u0101: "1D4J", rvu: "0L020T0M0U020V021B031C0F", rwa: "010C030L04520B070M030N0A0R071A0I1Q0F", "rwa ": "030304821A05", rwy: "010F1A02", "ry'": "040O0M0A1F66", "ry'n": "1F3X", "ry'ni": "1F5B", rya: "0304045U0B020D0511041F071Q0E", ryd: "0Z0B100212031B021N0C", ryf: "010I", ryg: "0Z0F1008120613071A04", ryh: "010D1106", ryi: "040T0M0D", ryk: "01090Z061003120E13041A0E1B0K1N09", ryn: "1002110G14031A051B021N8P", "ryn ": "1002110O1N5D", ryny: "1N63", "ryny ": "1N5N", ryo: "041V0D070M0C", rys: "01070U020Z0B100H110512041A0B1B1B1N0W", ryt: "0M0H0U030Y081006120414041A0G1B45", ryti: "1B3O", "ryti ": "1B7G", rzy: "0U0I1AAE", rzyj: "1A3F", r\u00E0: "0Q0V", "r\xE0 ": "0Q3D", r\u00E1: "0O1G0P170S1S0U6F0Y6F13201448", "r\xE1 ": "0O2B0P2V0S210U0O0Y1Y131F140T", r\u00E1c: "0O050U1R0Y15140B", r\u00E1d: "0P040U3J0Y2G140C", "r\xE1d ": "0U3S0Y42140N", r\u00E1n: "0O0N0S1E0U170Y1813041411", r\u00E1s: "0O0W0P0L0U0K0Y111304140J", r\u00E1t: "0P050S0P0U250Y1Z130I141K", r\u00E1v: "0P080U230Y3W1403", r\u00E2: "150P", r\u00E3: "0P09", r\u00E3o: "0P12", r\u00E4: "0N0M102I110U1C1Z1N1T1P09", r\u00E4d: "101B", r\u00E4f: "0N02100X", r\u00E4n: "0N07100U110E1N2D", r\u00E4t: "0N031022110G", r\u00E4tt: "102O110C", r\u00E4\u00E4: "110M1C6Q", r\u00E4\u00E4g: "1C5O", r\u00E4\u00E4gi: "1CD3", r\u00E4\u00E4k: "1C2U", r\u00E4\u00E4ki: "1C6U", r\u00E5: "0Z0E101V120X", r\u00E5d: "0Z0C100I120J", r\u00E5g: "1012", r\u00E5k: "1015120P", r\u00E5n: "1025", "r\xE5n ": "102Q", r\u00E5t: "100G1207", r\u00E6: "0T0I0Z1Q1202131H", "r\xE6 ": "0T0G0Z07", r\u00E6k: "0Z0D1305", r\u00E6l: "0Z0A", r\u00E6n: "0Z0E130M", r\u00E6s: "0T040Z09", r\u00E7: "0L030P051F1Q1N08", r\u00E7e: "1F3F", r\u00E7ek: "1F3J", r\u00E7ekt: "1F3U", r\u00E8: "0L0U", r\u00E8s: "0L3C", "r\xE8s ": "0L5A", r\u00E9: "0L1Y0O0U0P040S0Z0U0Q0Y0S1315141F", "r\xE9 ": "0L1J0O280U140Y1K", r\u00E9i: "0O060S2B", r\u00E9p: "0L1C1402", r\u00E9s: "0L1N0O08140W", r\u00EA: "0L0E0P0A", r\u00EAs: "0P11", r\u00EAt: "0L1L", r\u00EC: "0Q02", r\u00ED: "0O2E0P080S3J0Y3S1319140C", "r\xED ": "0O030S2I0Y2B", r\u00EDa: "0O6M0P0D", "r\xEDa ": "0O7S", r\u00EDo: "0O0M0P030S66", r\u00EDobh: "0S9P", r\u00EDom: "0S36", r\u00EDomh: "0SC5", r\u00F0: "137B", r\u00F0a: "132R", r\u00F0i: "1349", r\u00F0u: "137B", "r\xF0u ": "137C", "r\xF0ur ": "1366", r\u00F2: "0Q0U", "r\xF2 ": "0Q38", r\u00F3: "0O0N0P0A0S0R0Y04130V14211A29", "r\xF3 ": "0O1C1303140A", r\u00F3l: "141O1A07", r\u00F4: "0L02", r\u00F6: "0N0910191102130G140T", r\u00F8: "0Z17121H", r\u00F8d: "0Z0M120F", r\u00F8m: "0Z0D120D", r\u00F8t: "1208", r\u00F8v: "0Z0B120N", r\u00F8y: "1208", r\u00FA: "0S0G0Y0G130X140B", r\u00FC: "0N1814131F2J1N1I1P0A", r\u00FCc: "0N0R1F04", r\u00FCl: "141U1F0J", r\u00FCn: "0N0514051F2Y1N1K1P0C", r\u00FD: "0U100Y1D13041N2H", "r\xFD ": "0U1E0Y1X", r\u00FD\u00E4: "1N34", r\u0101: "0T0E1D3G", r\u0101d: "1D2H", r\u0101k: "1D31", "r\u0101k ": "1D38", r\u0101mat: "1D58", r\u0101t: "0T0A1D2K", r\u0103: "154A", "r\u0103 ": "1582", r\u0105: "1A0J1B0N", "r\u0105 ": "1A0I1B1G", r\u0109: "1O08", r\u010D: "0U090V060Y0D1B05", r\u0113: "0T0A1D17", r\u0113t: "1D2O", "r\u0113tu ": "1D5L", r\u0117: "1B2S", "r\u0117 ": "1B26", r\u0117j: "1B2F", r\u0119: "1A0T1B08", r\u011D: "1O06", r\u012B: "0T0F1D3Y", "r\u012B ": "0T0B1D29", r\u012Bg: "1D20", r\u012Bt: "1D55", "r\u012Bt ": "1D4V", r\u012F: "1B0U", r\u0131: "1F7Z", "r\u0131 ": "1F5U", r\u0131m: "1F48", "r\u0131m ": "1F3F", r\u0131n: "1F72", "r\u0131n ": "1F3R", r\u014D: "0T06", r\u0151: "1413", r\u015D: "1O08", r\u015F: "1F0J1N0B", r\u0161: "0U0H0V0E0Y0E1B0U1D0W", r\u016B: "1B0L1D0J", r\u0171: "140G", r\u0173: "1B0G", r\u017E: "0U0B0V0F0Y071B04", r\u021B: "150F", "s'e": "0L1Z1F021Q0A", "s'i": "0L17", "s-a": "031H1550", "s-a ": "031F156K", "s-l": "0L0A1P20", "s-t": "030W0L3G", "s-tu": "0L5L", "s-tu ": "0L97", "saa ": "0D03113T1C20", saan: "0B0K0D0Z112S1C1J", "saan ": "0B0W0D1N114K1C26", sabe: "03050M040O350P3N0T03", sabi: "0D1P0L030O0C0P160Q07150F", "sabi ": "0D1X", sadec: "1F43", sae: "0T0W", sagd: "0Z1N", sagde: "0Z20", sago: "0D051P7V", sagom: "1P42", said: "0M511403", "said ": "0M6T1402", sais: "0L3F110M1B03", "sais ": "0D020L4X0P021B06", saj: "0B110O09140Y15071C0G1F091O071Q05", "sak ": "0B0L0D070V03100A14961F06", saky: "0D0F1B4E", "sak\u0117 ": "1B5E", salah: "0B6H", samm: "0L060N0V0Z1G1016110M121W130D", samme: "0L0A0N1C0Z1S110V121W", samo: "0O070P0N0U0F0V2X0Y0R11031A2M1O04", "samo ": "0V6H1A0I1O02", "sana ": "0B2D0D0J0O02110O1A021F3Z1O0F", "sang ": "0B0M0D4N0L0B0M020N030Z0B1209", sanga: "041V0B7G0D021O03", sano: "0O030Q0A11681O0C", sao: "0L020S2I0V1G1102", sasa: "0D16", satt: "0N030Q0B0Z0K1010110T121W130M1F04", "satt ": "0N03100H121G131C", satu: "0B2G0M020T0D110C", saul: "1B1W1D2Y", savo: "0L100Q0O1B8N", "savo ": "0Q0O1BGC", savu: "11041D3M1F05", "savu ": "1D83", saw: "033K0B0E0D070M0G1Q0I", saya: "0BGV0D0J0L051F0K", "saya ": "0BQ10D0J0L041F04", "sc ": "0S19155N", "sch ": "0N4D0R1H0Z021002", scha: "0N3A0R240Z02100A1Q06", schen: "0N7C0R091003", schi: "0N2R0Q0T0R38152H", schl: "0N50", scho: "0M120N2N0R350T190U0T0Y0X1A091Q0O", scia: "0Q250T0B1O2E", scias: "0T021O4J", "scio ": "0Q030T2D1O09", scr: "0L060M090O1C0P1X0Q1D0S230T241527", scri: "0L070M060O1Z0P0Q0Q220T3P153H", scr\u00EDo: "0S9A", scu: "0L0E0M050O270P1G0Q1U0T1G153K1A06", sde: "03060O0P0P0E0R020T031B0F1O02", sebe: "0B2K0U0Q0V0E0Y0H140C1F0A", sebl: "012E1O02", sebli: "012I", sebu: "0B38", "sed ": "030P0M3U0O030T3A140A1C581O2P", seda: "0B3N0O020U040V09100V1C7R1O07", "seda ": "0O020U021CH2", sedan: "0B70100O1O03", "see ": "010J0M1L0N050O0211191CET", seen: "0M0I1003114D", "seen ": "0M0O119B", "sefk ": "037V", "seg ": "035S124S", segn: "030F0Q331O03", segna: "030W0Q2V1O02", segu: "0O2J0P380Q0M", segz: "03A5", segza: "03JW", seg\u00EDt: "143F", seh: "03040B0Q0N2A0U02110214041Q05", "sei ": "0N0V0P2T0Q3X11071404150C1B03", sein: "0L030N7P111D131C14021B04", "sein ": "0L030N5X112L130J", seine: "0N741103", sej: "0B0K0O090P160U050Z03110614031O02", seka: "0B3M0Z0311081B0I1O04", seker: "011O", "seks ": "0R020Z0F120D1B071C4P1F02", sela: "0B3X0D020U041F05", "sele ": "150H1C6R1F02", self: "012D03020M23", "self ": "011E0M2Q", sell: "030C0L080M070N080O030T0H112X1C7G1F02", selle: "030D0L0D0N0211221CFI", selt: "03040N0F110P14091C37", "selt ": "03080N0414061C7P", selv: "0M0H0P030Z201112122A", "selv ": "0Z1X121P", semb: "0B0J0L1X0O020P020Q2M14021F02", sembr: "0O020Q2M", "semi ": "0B071N52", semm: "030P111B144J", semmi: "030F111B144R", semp: "0B0G0O020P1U0Q2T0T1Q0Z06110D12091F02", semu: "0B320T031103", semua: "0B5U", senh: "0N040P2I1O03", senho: "0P301O02", senin: "0B0H1F4W1O02", seni\u0148: "1N5D", "seo ": "0O0F0Q020SCR0T040V021O02", seor: "0B3E1506", seora: "0B6L", sepe: "0B3B0T09", seq: "030J0P070T0I", "sere ": "0N130Q480T060Z0A120C1F02", "sest ": "1C4L", "sett ": "030A100R121H1410", "seu ": "0P4F", sez: "0L1G0U0615061F03", se\u00F1: "0O0U1N0P", se\u0263: "035V", "se\u0263 ": "035O", "sha ": "04GG", shaka: "04S2", "she ": "04650M6Z", shik: "047I", shika: "04AL", shob: "04MQ", shobo: "04SG", shou: "0M2T", shoul: "0M3S", siad: "0O1B0P030S2Y1A0M", "siad ": "0SBD1A02", siam: "0Q360T0E11051B03", siamo: "0Q37", "sian ": "0M06110O1O3V", siap: "0B2G", sich: "0N8M0T031B021Q0B", "sich ": "0NB8", "sid ": "030214021C7E1Q06", siem: "0O270Q0K11031A051B0C1D0M", siemp: "0O2V", sien: "013O0L050O190Z02110G12051A091B0R", "sien ": "013L0L030N020Z02110S", sier: "0L070M030N120O0K0Q050R050T04121E1A031B031O02", "sig ": "011A0N040Z3I104N13161403", sige: "0N050Q020Z201B04", sih: "03050B1V11031F02", "sih ": "0B36", sii: "0Q020T05114W1B0B1C4O1O02", siin: "113D1C36", "siin ": "114N1C7G", sikk: "0Z13110K121C1402", sila: "0B0J0D1J0U050V050Y0911031B0B1F0C1O02", "sila ": "0D240U060V0E0Y0B", sime: "0Q020T0A110B1B2K1C291O08", "sind ": "0N7S0Z0A1C6B", sins: "048O0L091102131U", sinsh: "04EA", "sinu ": "131I1C68", sinul: "0D05119P", sinun: "0D0D11C7", sinz: "048U", sinzi: "04CC", sin\u00E1: "144X", sin\u00E1l: "1457", sin\u00E4: "117L", "sin\xE4 ": "11G2", sitik: "1B5R", sitt: "0M080T05101W112T121H130K", sit\u00E4: "0N041141", "sit\xE4 ": "119G", "siu ": "1B5C", siy: "03050D3G1F1G1Q05", siya: "0D5M1F0B", "siya ": "0D7S", siyan: "0D2D", siz: "03050M020Q041F391N5Q", "siz ": "1F1K1N4L", si\u00F3: "0O121A04", si\u00FA: "0S2A", si\u0119: "1AF3", "si\u0119 ": "1AJI", si\u0148: "1N43", sja: "0V02120713061A031C0N1Q0B", sje: "0R0K120M", sjo: "0Z02121B", sjon: "12341A02", sjone: "121J", sju: "101911021202", sj\u00E4: "10101102", skaa: "010Q1162", "skaa ": "116W", skaan: "117S", skai: "11021B2P1D36", "skal ": "0U020Z3I12451329", skap: "011G100M121S130L1O04", skar: "0D020N020Z05102C1102130J1A091B03", "skar ": "0Z031027130X", "ske ": "0V0I0Y0G0Z4E100L1107124O14031C0Y1F02", "sker ": "03040Z5U1002123I1F02", skj: "0Z05100C121O130S", skje: "123B", skol: "0Z1710161106121A141O1B0J1D1R1O02", skriv: "0Z1H101E121H", skul: "0Z11104I1103122J130M1O0J", skull: "0Z14104D1102122G", skura: "037N0L050M0Z0O030Q030R031103", slaa: "01210R14", slaap: "011L0R0W", sle\u00FD: "1N4H", sle\u00FD\u00E4: "1N5Z", slut: "0Z0T10241216", sl\u00ED: "0U2C0Y38130A", sl\u00EDm: "0U200Y3T", "sl\xEDm ": "0U2S0Y4N", sl\u0113: "1D23", "sme ": "0B060L0F0R070U4L0V050Y6K0Z0512061F02", "smo ": "0D090O1M0P260Q0D0V3F1A021B0A1O0A", "smu ": "0B0D0V071D85", smuk: "0Z17", sm\u00E5: "0Z0F100A120I", "sn'": "0M3H", "sn't": "0M6B", "sn't ": "0M8H", snak: "03050M020Z0C123Q1419", snakk: "0Z0C123Q", "sne ": "0T6J0V0L0Y1E0Z0C1A08", sny: "0B0R0Y0710031A08", sn\u00F8: "1209", soa: "0B030P251106151S", sobr: "0D0B0O200P2J0T0E", sobre: "0D020O2E0P31", soe: "010W0R02", "soek ": "011O", sog: "0N030P030Q1O14031O08", sogn: "0Q2L", soi: "0L370O0311251O02", "sok ": "0B170D0E0V02144N1A02", solo: "0O2B0P020Q2D0T021403", "solo ": "0O2Y0P030Q2E", "som ": "0P040V070YRE0Z5E107912AT140R1P0E", some: "0M3X0P051O09", "some ": "0M2B", sonn: "0L340N0P0Q0A", sonne: "0L4O0N0T", sono: "0P070QFS1O0U", "sono ": "0P080QFY1O0W", sont: "0L661405", "sont ": "0L9T1402", soo: "010X0M0C0R0811061C1I", sora: "0O070P0A1407150H1F071N3U", "sou ": "01230P310U4P", soy: "0L0B0O1A1F081Q0C", spil: "0L020R040Z1O121T130X1D0M", spill: "0L040R030Z1M121L", spis: "0U030Z2T122P", spise: "0Z29121S", sprog: "0Z1N1B09", spr\u00E5: "1012121N", spr\u00E5k: "1011121N", spun: "0V040Z051205155T", spus: "0V061559", "spus ": "156G", sp\u00F8: "0Z0F120N", sp\u00F8r: "0Z12121G", sp\u0113: "1D4N", sp\u0113j: "1D33", sq: "03040L0D0M030O050P0B0Q020T0X1Q0F", squ: "0L1S0M050O0G0P1F0Q080T261Q0U", sque: "0L1P0M050O0D0P1D0T3Q", "sque ": "0L2G0M060O090P030T3X", sri: "03521B06", sseb: "012E030A", ssebl: "012K", ssefk: "037I", "ssen ": "010N032Q0NA00R2Z0T030Z11100K12171408", sser: "030K0L1Z0M030N220P0D0Q560R060T0J0Z14100E120V", ssere: "0N090Q490R030Z0H", ssim: "0L030P1F0Q1K0T301105", "sso ": "0PC70Q7N0T02", ssoa: "0P2J", sst: "0N1I0Z031019120I130C", ssz: "144N", ssza: "143Y", ssze: "143L", ss\u00E4: "1002116O", "ss\xE4 ": "11AI", ss\u00E9: "0L1T140P", "st-": "030S0L2X", "st-c": "0L3Y", "st-ce": "0L6L", staa: "012D0N0A0R2U115R", "staa ": "1171", staan: "01220R1O116E", staba: "0O540T051B03", "stas ": "0O1P0P1E0T0G1B321C311OSG", stato: "0Q2S0Y0E1B061O09", stava: "0P650Q180V0D100411221C1A", sted: "0M0U0O1Y0R050Z1R120X1F38", stedi: "1F4A", "sten ": "03020M090N490O080R1T0Z1Z1012113E122J140N1F08", ste\u015B: "1A3I", "ste\u015B ": "1A41", "stis ": "0T3E1B0R1C2D1OCD", stiy: "1F4I", stiyo: "1F62", stj: "0R030Z0A10061206130O", stn: "0T120U1P0Y2E0Z03100912031A0A1O05", stou: "0P4O0U0V", "stou ": "0P5U0U0D", stoy: "0O3H", "stoy ": "0O4K", strui: "0L0H0O0B0P0B0QBU0R030T03150D1O1O", stus: "0R020T0P110V1B071C2H1O0P", stv: "0U0O0V2W0Y1Q1408", stvar: "0V4K", st\u00E1: "0O7L0P8X0S150U2E0Y2P140A", "st\xE1 ": "0O810PA50U0C0Y0T", st\u00E3: "0P27", st\u00E3o: "0P2O", "st\xE3o ": "0P3C", st\u00E4: "0N0E102N119I", "st\xE4 ": "11B6", st\u00E4ll: "101M", st\u00E5: "0Z0U101V1215", st\u00E5r: "0Z19101H121L", "st\xE5r ": "0Z1I101H121K", st\u00E6: "0Z0A130Q", st\u00F8: "0Z0D120E", st\u0101: "1D4E", st\u0103: "155G", "st\u0103 ": "156Z", st\u012B: "0T161D2M", "sua ": "0P3Y0Q3N0T0P110L", suda: "03020B580O020Q0G1B0C1F021O02", sudah: "0B9W", suis: "0L710T0L1103", "suis ": "0LB70T0K", suka: "0B420D0811071B09", "suka ": "0B6U1B03", "sul ": "0D030P060Q130T021404152C1C2V", sull: "03030Q1411091C2V", sulle: "0Q0511091C6X", "sum ": "030B0N030R020TAG100213121F031Q0G", "sun ": "0M060Q05111215051F6L1N0I", sunt: "0O0A0P090Q040TBG110815EJ", "sunt ": "03020TBT15G3", suo: "0D040Q3Y0T0N111J1B0S", "suo ": "0Q3X0T0T1B0C", "sur ": "0L4Z0O040Z041B051F031O24", suse: "03050V030Y0C1C24", "suse ": "1C4V", suu: "0T0P11421C3R", suur: "112A1C2Y", svar: "0Z0Y101A121P13131B191D0X1Q08", "svo ": "133J1B02", svoj: "0U1T0V2Y0Y6H", svoje: "0U0X0V2I0Y31", sv\u00E6: "0Z0B12071306", sv\u00E9: "0U281403", sv\u00F8: "0Z091208", swe: "010H03090B020M0E0N060R031A08", swi: "030K0M0A1Q1Z", "sy ": "014X0M0H0U0M0Y0U110C1A0N1N2J", sya: "03080B050D0K1F0A1Q0B", syg: "0Z0B", syk: "1108120J1A021B0E1N0I", syo: "0D0W1F0P", syon: "0D1C1F0S", "syon ": "0D251F08", sy\u00F6: "1123", sz: "0N0614ND1AFB", "sz ": "147G1A8Z", sza: "144K1A2O", szc: "1A3G", szcz: "1A4T", sze: "0N0314D41A4V", szem: "14671A04", szer: "14FS1A06", szere: "14AZ", szi: "0N02142K", "szik ": "1438", szo: "144B1A0K", szt: "144H1A0Q", szy: "1A64", szys: "1A3Y", szyst: "1A4E", sz\u00E1: "1446", sz\u00E1m: "143O", sz\u00E9: "144E", sz\u00E9l: "146S", sz\u00ED: "1422", sz\u00F3: "141Q1A04", sz\u00FC: "142G", "sz\u0119 ": "1A3N", s\u00E1: "0O030P070S0N0U0O0Y0I130M142S", s\u00E1g: "142Q", s\u00E3: "0P10", s\u00E3o: "0P4D", "s\xE3o ": "0P59", s\u00E4: "0N07101R113S1C031N0I1P1Q", "s\xE4 ": "118R", s\u00E4g: "101P", s\u00E4k: "1012110F1P1P", s\u00E4t: "0N0410121105", s\u00E4\u00E4: "1122", s\u00E5: "0Z1Q10241224", "s\xE5 ": "0Z2C10411235", s\u00E5g: "1017", s\u00E6: "0T050Z0O1202130H", s\u00E6t: "0Z0N130F", s\u00E8: "0L02", s\u00E9: "0L0X0O0K0P050S3E131I143U", "s\xE9 ": "0L2K0O1O0P040Q030S9P13171404", s\u00E9g: "144N", s\u00E9ge: "1469", s\u00EA: "010S", "s\xEA ": "011D", s\u00EC: "0Q0K", "s\xEC ": "0Q26", s\u00ED: "0O0I0P070S1R0U2J0Y2C131C140Q", "s\xED ": "0O1I0S3W0U150Y0Q1304", s\u00EDm: "0P030U2J0Y3S130F", "s\xEDm ": "0U390Y5I", s\u00F2: "0Q02", s\u00F3: "0O0F0P0D130D140J1A0E", "s\xF3 ": "0O0R0P1E140D", s\u00F3l: "0O0M130E", s\u00F5: "0P021C1G", s\u00F5b: "1C1S", s\u00F5n: "1C16", s\u00F6: "100W1106130Q140N1C0I1F421N1O1P11", s\u00F6k: "101O130G1405", s\u00F6y: "1F9A", s\u00F6yl: "1FAI", s\u00F6yle: "1FCU", s\u00F6\u00F6: "1C1S", s\u00F8: "0Z10120T", s\u00F8g: "0Z0J", s\u00F8k: "120H", s\u00F8n: "0Z0D120B", s\u00F8s: "0Z0A1208", s\u00FA: "0S0J0Y2B1309140B", "s\xFA ": "0Y4W13031403", s\u00FB: "0L04", s\u00FC: "0N05140N1C0V1F1C1N0W1P0Q", s\u00FC\u00FC: "1C18", s\u0101: "0T021D13", s\u0103: "15A3", "s\u0103 ": "15P5", "s\u0103-": "153V", s\u0105: "1A1I1B0W", "s\u0105 ": "1A2G1B1V", s\u010D: "1B0A", s\u0113: "0T081D0Q", s\u0117: "1B0T", s\u0119: "1A031B04", s\u012B: "0T031D0V", s\u012F: "1B06", s\u0131: "1F84", "s\u0131 ": "1F45", s\u0131l: "1F2M", s\u0131n: "1F92", "s\u0131n ": "1F3H", s\u0131n\u0131: "1F43", s\u0131z: "1F2X", s\u0142: "1A26", s\u014D: "0T02", s\u0151: "140R", s\u0153: "0L03", s\u0165: "0U020Y2T", "s\u0165 ": "0Y6C", s\u016B: "1B081D08", s\u0173: "1B17", "s\u0173 ": "1B3D", s\u025B: "031N", s\u0263: "032Y", s\u0263e: "035T", "t'": "0L0E0M1F0N020Q031F021Q04", "t'a": "0L140Q091Q05", "t's": "0M2O0N03", "t's ": "0M4U0N07", "t-c": "0L2F", "t-ce": "0L40", "t-ce ": "0L6O", "t-i": "03530D020L23", "t-il": "03030L3H", "t-il ": "0L4W", "t-n": "035A", "t-t": "035S", "ta'": "1QAG", "ta' ": "1QDH", taa: "01220B0C0D050N040R1D11BN1C0M1F02", "taa ": "11D1", taal: "011X0R1U11041C0K", "taal ": "011U0R1P", taan: "01230B0N0D020R1A1163", "taan ": "011Z0B0W0D030R1J11D8", "tab ": "1C41", "taba ": "0D030O4S", tabu: "030304750P020T0J0U020Z021B061O03", "tabu ": "04C20Z021B06", tada: "030I0O0J0P0N0V061B0E1C2U1F0B1O02", "tada ": "0O0J0P0M0V0F1B0T1C6U1F0A", tade: "03030L020O040P0J0Z03103Q", "tade ": "0L020P0N1034", tado: "0D040O3X0P2U1O0F", "tado ": "0D030O3J0P211O0L", tady: "0U2U", "tady ": "0U3X", tae: "0T1B1108", tagas: "1C4F", tage: "030E0L0U0M060N0V0P040Z3S100R1C0E1O0C", "tage ": "0L150M070N0O0R020Z1R1C101O0O", tager: "030B0L040Z1U", "tah ": "0B0K0U041QJ1", taha: "0305042D0B0Q0D0C110R1C7K", tahan: "0B0U0D0L111K1C6X", tahu: "03060B8Z0U06", "tahu ": "0B9H0U04", tahun: "0B5W", tahvi: "1QEQ", "tai ": "0B120L020Q11111G1406150T1BHJ", taip: "11041B47", "taip ": "1B8F", tait: "0L630S1A110M1403", "tait ": "0L9W1403", "taj ": "0V0Y0Y0M15041A171O3T1Q0I", "tak ": "0B1I0D030R050U3P0V0L0Y2X0Z0R120814491A371F08", "tako ": "0V4Z110Z1O02", "tale ": "0L0G0O030Q0X0R020T030Z1T120F150Y1A021O03", taler: "0R020Z2512071A04", talle: "030G0L030M040O060R040Z0B1002110812051C4L", talt: "0N040Z1K100411031216140B", tal\u00E1: "146F", tal\u00E1l: "144T", tam\u00E1s: "143A", "tang ": "0B850D2G0L03", tanul: "1435", tao: "0D120V12", "tao ": "0D0Z0V17", taon: "0D0Y", "tare ": "0L080Q4V0T210V08100F151X1A041O02", "tato ": "0P050Q680U161B051O0O", "tau ": "0B1H150L1B66", tava: "0P580Q1J0T020V071003116G140H1B041C1X1D1A1F03", "tava ": "0P5N0Q140V08113B1D2T", "tave ": "1B58", tavo: "0Q110R020U03110B1B4R1D1H", "tavo ": "0Q0N1B9E", taw: "031V0B0C0D0G1A151Q0C", tay: "03180D1Q0M0M1F0S1Q0B", "tay ": "03070D190M0R", tayo: "0D1M", "tayo ": "0D2B", taz: "031I040I0O070Q0H0U03140E1F03", ta\u00ED: "0S1W", ta\u0142: "1A2U", ta\u016D: "1O1S", tda: "030A0R0212031N2X1Q0D", tdi: "1D0O1N5A", "tdi ": "1N3Q", tdy: "1N6A", "tdy ": "1N6J", "tea ": "0M060O030T0A1103140315891C1Q", teac: "0M0R0S5E", teach: "0M110SIY", tead: "0M040P041C33", tede: "0O0L0Q0D0R050V050Z2N120L14041F08", "tede ": "0Z2S12071F07", tedi: "0P020V0614031F3C", teger: "04E00O050P05", tego: "1A4A1O02", "tego ": "1A6P1O02", teha: "11021C21", "teha ": "1C4P", tehd\u00E4: "1170", teic: "1D55", teica: "1D90", teik: "11021B0S1D33", "tek ": "0U0Q0V080Z031003148F1A0M1F1H", telah: "0B71", "tell ": "0M2I0N041002120A", "tema ": "0D020O0F0P090Q051B081C701O08", tempo: "0L030O050P3L0Q1X0T131O36", temps: "0L6G", "tene ": "0N020Q040T030Z06121O140315051O0R", teng: "0B0P0D0A0O3U0Q070R0212061307140O1B0B", tengo: "0O4H0Q05", tenh: "03030P3T0U0K", tenho: "0P3Y", tenk: "03050U07110N121V1B0Q", tento: "0D050O0D0P0G0Q060T020U1Z0Y2Y1O0A", teraz: "0Y321A26", terra: "03150L080O0B0P100Q0R0T3O", teru: "012Q0B0O0N020R1O0T0S15031O0A", terug: "012W0R27", "tet ": "0N2X0T100V040Z3I10281109125W142C1A03", tett: "037K0Q06112X148T", "tett ": "030I143G", tette: "033L11031451", teu: "0L1J0N070P100R030T071105", "tev ": "0U021D6E", tevi: "03020Q0F0R021D3H", "tevi ": "0Q0F1D7I", te\u013E: "0Y2S", tge: "010D031L0N080R0C1N0V1P0H", thai: "0B030Q020R020S56", thair: "0SET", than: "0M24110A", "than ": "0M2E110N", that: "0MKN141A", "that ": "0MOJ1405", thea: "0M030N030R020S3A0T0A", their: "0M28", them: "0M1Z0N090T07", "them ": "0M28", ther: "0L020M8H0N030R020T0A", "ther ": "0M611102", there: "0M53", they: "03020M6H", "they ": "0M7H", thin: "0M9L0N050S0Q", thing: "0M6T", think: "0M6P", this: "0M6S", "this ": "0M93", thou: "0L020M350R06", thoug: "0M39", thr: "0M150S150T03", th\u00E1: "0S1Q", th\u014D: "0T1T", th\u014Dm: "0T3G", th\u014Dm\u0101: "0T2O", "tia ": "0O020P0C0Q0F0T2X0Y0N1129150U1A021O0E", tiam: "0Q100T2Q150H1O0J", "tiam ": "0T2Q150M1O0W", "tibi ": "0T5T", "tid ": "030A0D0G0Z2N102T1232", tida: "03040BJU0D020O0F0P0K1B0T1P0I", tidak: "03030BS5", tied: "0M02114C14031P1D", tied\u00E4: "1194", tiem: "0O2U0R021B051D1U", tiemp: "0O3N", tiene: "0O970Q090R02", ties: "010N0L040M0E0R0D0T04110M1B3W1DBP1O04", "ties ": "010I0L080M0J0R0G0T0411071B2J1DMK1O07", tiet: "0Y170Z0F113P120G", "tig ": "012P0D020N1Y0R2A0Z0Z1013121O140A", tih: "03030B0B0U040V0911041C0H1F041Q04", tii: "0D020Q020T0G112Q15191C0E", tiin: "113Q150I", "tiin ": "0D02118G", tij: "03040O020R1F0V0A11041B0D1N0A1Q0A", tijd: "0R4W", "tijd ": "0R5H", "tik ": "0B120D060N0C0Z0F1009140P1B3D1D2N1F0W1P55", "tika ": "0B2Q0D070U070V0B100214071B0C1D5Y1F021O0A", tikai: "14091B0E1D5L", tiko: "0D04110G1B1H1O0M1P6V", tikob: "1P3Z", tikr: "1B48", tikra: "1B56", tilb: "0Z1G121K130M", "till ": "0M250N06108T", tingg: "0B66", tink: "0N020R050Z02100211031B3O", tinka: "1B6G", "tio ": "0O0B0P080T2C0V13100S11091O5G", tione: "0M040N0F0Q060R040T3D0Z101011", "tir ": "03020B0D0L1G0O0S0P180S0T137B1F1B1N181Q17", tisk: "0U040Y0I0Z0Y10151106121O1D1C", tiu: "0P0H0T1A110215281B021O4Q", "tiu ": "0P0J15321O4O", "tiun ": "1O3L", tiy: "030904150D061F5T", tiyo: "1F4O", tiyor: "1F69", ti\u011D: "1O0S", tje: "03080R0R0Z0G1006120C14021N1U", tji: "0110", tjie: "0125", "tjie ": "011Y", "tko ": "0U050V070Y3P117S1A1I1B02", tku: "030A0B0F0U0B0V050Y0F110S1A071F021O02", tlar: "130M1F0S1N3Z", tles: "0M041C2C", tlh: "1QQV", "tlh ": "1QNX", tlo: "0D0B0N020R020U070V060Y07", tly: "0M0K1B031N1M", tme: "03280M070N0214031B041F831N8L1Q0N", tmek: "1F2R1N3S", "tmek ": "1F3E1N49", tmeli: "1F0P1N4B", tmu: "031F0B0J1F02", "tne ": "0T4D0V060Y0X0Z0310021204140J1A081C0Q", "tni ": "030G0U020V091308143G1A0A", tnin: "0Z1H100L121C1312", tning: "0Z1T100L121C1323", tny: "0B0Z1A0D", toda: "0M170O2Y0P1K14051B02", tode: "0N040T030Z02113Q12061504", todel: "1183", todo: "0O6C0P3T1O04", "todo ": "0O4S0P1V1O03", todos: "0O3R0P32", "toe ": "013U0R13", "tog ": "0D040V0C0Z20101E", tohl: "0N040U2G", tohle: "0N070U3E", tois: "113R", toj: "0U0F0V150Y0R110H14061A031B3I1D0K1O451Q07", "toj ": "0V051B1J1O4G", tojn: "1A021O27", "tojn ": "1O4B", told: "0M2W1402", "told ": "0M3Y1402", "tom'": "0M1711031A051FDE", "tom'u": "1FD5", "toma ": "0O0A0P050U870V3O0Y3K1A3B1D2A1N59", tomam: "0O020P021D9D", tomas: "0D0H0O06110M1A0A1BSG1O1F1PP0", tomem: "0U2H1A0Q", "tomi ": "100311M6145R1B021C61", tomil: "0U03118T1C7J", tomin: "11A51410", "tomo ": "0O050P021B561OFI", tomov: "0U6Y0V1T0Y4O", toms: "0N0S0R0W0Z1R1015120R1DHH1P0P", "toms ": "0M020N1B0R170Z241015120Q1B031DSG1P0R", tomu: "0U140V170Y0L110K1B3A1D1R1N69", tomui: "1B4V", tomu\u0148: "1N78", tomy: "1N4G", tom\u00E1: "0O0W0P090S4P0U050Y0E", tom\u00E1s: "0O130P0B0SGW", tong: "0B0I0D1K0M020R03", "tong ": "0B0Q0D2S0R04", too: "01090D050M1C0R08110N1C1D1P0M", tosi: "0Q02111V1B061F031PCX", "tosi ": "0Q0211311B091PEQ", "tot ": "011X0D020N050R1J0T06110314231526", toto: "0D0E0R020T040U0O0Y43", "toto ": "0T040U0V0Y4Y", tott: "1112146G", "tott ": "1438", tou: "0L8F0M070P5U0U0X0Y061106", "tou ": "0P6U0U0Q0Y0A", "tous ": "0L4A", tout: "0L7P1105", "tout ": "0L9F", tow: "0M0B1A1Y", "toy ": "0O3H", tq: "030C0T0V1Q04", tqu: "03030T231Q05", tque: "0T3P", "tque ": "0T3X", trab: "0D0U0O3C0P2Q0T08", traba: "0D1J0O4D0P3F0T03", trava: "0L4U0P04", treb: "03070N030Q0N0V4F0Y3Y15C81O02", treba: "0V980Y0K151T1O02", trebu: "0Y3F15CX", treng: "0M030N0A0R040Z04122S", tror: "0T060Z1O101R122C", "tror ": "0T030Z21101R122C", "tros ": "0O370P120T080V0B1B051O03", trouv: "0L4K", "tru ": "03040U080V0B0Z0415BG1A021D151O03", trui: "0L0G0O090P080QBP0R050T04150B1O0X", truir: "0L070O060P050QBQ", trz: "1A4Y", trze: "1A3E", tr\u00E1: "0O0F0P130S0W0U140Y1O130I140B", tr\u00E4: "0N0D101V", tr\u00E6: "0T020Z101203130B", tr\u00E8: "0L24", tr\u00E8s: "0L3J", "tr\xE8s ": "0L5X", tr\u00EA: "0L030P12", tr\u00F8: "0Z04120D", tr\u0101: "0T051D2F", tr\u0103: "153H", tsc: "0N0Z0R02", "tse ": "04B40D0F0R06111L14061C0R", tso: "0D051116", tsus: "03021C30", tsz: "14251A02", ttaa: "117Z", "ttaa ": "11GQ", ttad: "03030Q04101O140P", ttade: "0302101L", "ttam ": "0T06143I", ttel: "010J03040N0J0R070Z0F1004113P120E140J", ttem: "030D0M020Q021002145G", "ttem ": "0304145S", "tten ": "03080M0I0N230R2C0Z1P101O114C121T140K1F0D", ttl: "03080M0L0N02100413071Q03", "tto ": "0QEA0T021002110B", ttr: "030X0L1A0M020Q0J100X1204", tt\u00E0: "0Q0H", tt\u00E4: "0N0211CR", "tt\xE4 ": "11DI", tt\u00E4\u00E4: "114I", "tt\xE4\xE4 ": "11A2", "tud ": "0O0E0T0G0U02141L1C3M", tudo: "0P2H0T080U0A0Y0B147C1O031P16", "tudo ": "0P2Y0T081O02", tudom: "143V1P0I", tuh: "0B1G0D050N020U09110I1F061Q06", tuj: "040J0B0H0U0W0V0B0Y0P11081A0L1O0E1Q0Y", "tuk ": "0B7D0R0A14101F06", "tul ": "03021404159J1C0L1Q1A", tule: "03020T07100311511C2Y", "tum ": "03040N060R020TB90Z02100313351B1P1F0H", "tunk ": "1437", tuo: "0O020P020Q1H0T0Z115B1B26", "ture ": "0L4X0M160Q040T030V090Z021O03", "turi ": "046A0T05110715161BB91O05", turiu: "1B6N", tutt: "03090Q6A110Q130R1F07", tutti: "0Q2M110A", tutto: "0Q2P", tuu: "010I0R0B0T23112B1C0I", tuv: "040L0O1F110F1B131D0T1F031P1X1Q05", tuw: "030E0D08", tuz: "030A041W15031A021F0G1O02", tvi: "0Z04100K120C13061B0G1D0O", tvo: "0U0X0V3N0Y4P13091B02", tvoj: "0U140V2B0Y42", tv\u00E5: "1016", twa: "032W043Y0D020N0Z0R051A0Y", twe: "010S030L041N0M080N050R0L1A08", "twee ": "011O0R28", two: "010B0M0G0N0B0R0A1A2W", tyc: "102O1A16", tyck: "103N", tycke: "1031", tyd: "011B0U050Z06100F12051A0A1B04", "tyd ": "012H1A02", tyn: "0Z021002111612021A071B0E1N2G", tyr: "0T040Y0B0Z0810061102120D1B061N1B", tys: "0Z0D100M110T120C1A0C1B0J", tyt: "01070U08111G1A021B1G", tyy: "112A", ty\u00F6: "111S", tze: "033A0N150R051502", tzt: "0N1J", t\u00E0: "0Q1H", "t\xE0 ": "0Q5K", t\u00E1: "0O2I0P2D0SC00U230Y2R1304145A", "t\xE1 ": "0O5C0P8H0SP00U0J0Y1Q", t\u00E1i: "0O060S4J", t\u00E1im: "0S4H", "t\xE1im ": "0SE2", t\u00E1l: "0P040U150Y18142E", "t\xE1l ": "0U05143U", t\u00E1n: "0O1E0S0I0U081305141T", t\u00E1s: "0O140P0B141O", t\u00E2: "0P031518", t\u00E3: "0P11", t\u00E3o: "0P4G", "t\xE3o ": "0P5D", t\u00E4: "0N0I101G11F41C1F1N121P0I", "t\xE4 ": "11NT", t\u00E4h: "110X1C19", t\u00E4i: "111W1C14", t\u00E4l: "1018110Q", t\u00E4m: "100I1161", t\u00E4m\u00E4: "119W", "t\xE4m\xE4 ": "11EK", t\u00E4n: "0N0A101U114E1C2E1P0K", t\u00E4na: "1C2N1P0E", "t\xE4na ": "1C4F", t\u00E4s: "11211N0B", t\u00E4v: "1004113I", t\u00E4v\u00E4: "1156", t\u00E4y: "112Y", t\u00E4yty: "117I", t\u00E4\u00E4: "11A5", "t\xE4\xE4 ": "119V", t\u00E4\u00E4n: "115Z", "t\xE4\xE4n ": "11DD", t\u00E5: "0Z0O100X120U", "t\xE5 ": "0Z08100G120C", t\u00E5r: "0Z0K1018120Q", "t\xE5r ": "0Z1B101I121K", t\u00E6: "0T050Z0S130M", t\u00E6l: "0Z0B", t\u00E6n: "0Z0K", t\u00E7: "1F061N0B", t\u00E8: "0L020Q02", t\u00E9: "0L210O0E0P0E0S0B0U0Z0Y0G144Z", "t\xE9 ": "0L730O0U0P190U120Y0Z", t\u00E9k: "0U02141I", t\u00E9n: "0O05141U", t\u00E9s: "0L0O0O04141L", t\u00EA: "0L030P0A", t\u00EAm: "0P0V", t\u00ED: "0O0D0P060S120U2E0Y11131O140E", "t\xED ": "0O060S230U280Y1F", t\u00EDm: "0O030P040U1Q0Y071329", "t\xEDm ": "0U2H0Y09", t\u00F2: "0Q05", "t\xF2 ": "0Q0J", t\u00F3: "0O0Q0P0A0S0B131K142H1A1I", "t\xF3 ": "0O1S130B1416", t\u00F3r: "0P12130U14031A2A", t\u00F4: "0L060Y06", t\u00F5: "1C0Y", t\u00F5e: "0P041C1A", t\u00F6: "0N05100C110W131214381C0X1F031N0E1P0T", t\u00F6b: "141I", t\u00F6bb: "143T", t\u00F6r: "0N04100M110414221F08", t\u00F6rt: "0N051003143H", t\u00F6rt\u00E9: "1433", t\u00F6\u00F6: "11041C39", t\u00F6\u00F6ta: "1C4C", t\u00F8: "0Z0K120F", t\u00F8r: "0Z0E120E", t\u00FA: "0O0E0S3Q0Y0S130A140P", "t\xFA ": "0O120S9P0Y0T", t\u00FC: "0N0G14181C0Q1F2G1N0S1P0I", "t\xFCnk ": "1432", t\u00FD: "0U0U0Y1C13041N0I", t\u0101: "0T0B1D4B", "t\u0101 ": "0T041D5G", t\u0101j: "1D3B", t\u0101s: "0T041D2P", t\u0103: "1568", "t\u0103 ": "15G5", t\u0105: "1A0L1B37", "t\u0105 ": "1A0V1B8K", t\u0113: "0T091D19", t\u0117: "1B2G", "t\u0117 ": "1B2V", t\u0117v: "1B1G", t\u0119: "1A151B0K", t\u011B: "0U53", "t\u011B ": "0U5V", t\u011Bl: "0U1W", t\u012B: "0T0N1D2T", "t\u012B ": "0T1C", t\u012Bg: "1D23", t\u012Bk: "1D2P", "t\u012Bk ": "1D3A", t\u012Bt: "0T031D20", t\u012F: "1B0V", "t\u012F ": "1B2G", t\u0131: "1F71", "t\u0131 ": "1F5P", t\u0131r: "1F30", t\u014D: "0T04", t\u0151: "141T", t\u0159: "0U2N", t\u0159e: "0U3C", t\u0159eb: "0U3U", t\u0159ebu: "0U3V", t\u0161: "0U08", t\u016B: "0T071B091D07", t\u0171: "140N", t\u0173: "1B1G", "t\u0173 ": "1B3Z", "u'": "0L1I0M0O1QFJ", "u' ": "1QQV", "u'e": "0L1S1Q05", "u'i": "0L331Q08", "u'il": "0L53", "u'il ": "0L76", "u'r": "0M0T1Q06", "u'u": "0L15", uac: "0B070O0B0S1G0U070V081A061B051O05", uad: "0L020M020O0C0P0E0Q0D0T0B1O02", uae: "0T33", "uae ": "0T3C", uag: "0L030M0C0P040Q030T07", uah: "0B1G", "uah ": "0B2Q", uai: "0B040L080P0E0Q070S7N110U", uair: "0S45", "uair ": "0SCC", ualc: "0Q5F", ualco: "0Q35", uam: "0B050O020P020T7N1104", "uam ": "0P020TD7", uand: "0L2J0O3C0P3G0Q2K0T2I", "uand ": "0L4A", uando: "0O4D0P4C0Q2H0T1Q", uang: "0B2T0D02", uant: "0L0F0O0O0P300Q280T1111041O02", uanto: "0O0N0P3A0Q1D0T03", uay: "0Q0H1F04", ubb: "03040M020Q0D100B12021Q0F", ubera: "04I5", "ubi ": "0Q020T5Y0V071A11", "ubu ": "046M0U031A041F06", ubw: "043Y1Q04", ubwi: "046V1Q07", ubwir: "04A4", "uc ": "030H0L030T0P150U1D0N", ucc: "030J0L050M050O090Q1O0R020T050Z0214021508", "uch ": "0M230N4M0U040Y0B1A061Q74", ucha: "0L030O2H0U0L1A101Q06", ucho: "0L040O3O0U060Y0B1A051Q07", "ucho ": "0O3J0U020Y0A1A02", uco: "0B020L1H0O020P1J0Q020T03", ucoup: "0L47", uct: "03070L0D0M080O0B0R020T0P1506", udah: "0B5R", "udah ": "0BAM", "uden ": "030B0N030R2O0Z1910021141", udik: "14051P6C", "udik ": "14051P3U", "udo ": "0O130P2E0Q030T0J0V031B091O08", udom: "143N1B021P0K", "udom ": "143K1P0J", uds: "03040V060Y0C0Z0D1007140H", udt: "0R0D0Z081418", udug: "047F", uduga: "04CM", udz: "0Y071A1L1D4J", "udz ": "1D3K", ud\u011B: "0U3W", ud\u011Bl: "0U68", ud\u011Bla: "0U73", uec: "03020O050P0R", ued: "0M040O6C0P041502", uede: "0O4W", "uede ": "0O3Q", uedo: "0O2N0P03", "uedo ": "0O3G0P02", ueg: "0O0W0P02", uei: "0L050P190Q031B05", uell: "0L2A0N060O0N0Q4A0T1P0Z021004", uelq: "0L3O", uelqu: "0L65", uem: "0L060O060P2L0T0V1102", "uem ": "0N020P330T1H", "uer ": "0L1Z0N0U0P330T170Z0A1206", uero: "0O0P0P2N0T0E", "uero ": "0O070P3B0T07", uert: "0N090O2M", "ues ": "0L3D0M050N090O0K0P050T05", uest: "0L110M0N0O4B0P090QBJ0T0211021C0G", uesta: "0O190Q401104", uesto: "0O0Y0Q6O", uestr: "0O3F0P02", uet: "0L0D0O0A0P060T070Z0511071207", uev: "0O1S", ue\u00F1: "0O0Y", "uf ": "030B0B030L090N33", ufa: "033B041G0N020Q020U041A0A1F02", ufe: "030A0N0S0T0315071O05", ufi: "030V041X0N020O0D0P0C15081O0F1P12", ufise: "048W", uft: "03090N0I0Z0910061205", uf\u00F6: "1P2F", "uf\xF6n ": "1P3K", ugen: "030904970N110R0A0Z06", ugend: "04B10N0D", ugh: "0M2V0N0215051O021Q7X", ught: "0M3L", "ught ": "0M4G", ugira: "049O", ugl: "03050L030Q030V090Z0B1206130C1B02", ugt: "03030D020N030Z0913051405", "uh ": "0B2Q0U030V021F031Q3V", uhe: "0303041A0N0711101Q04", uhi: "042V0B060D040N040V021103", uhk: "0B0H110A1C0N", uho: "04170D060U0U0V030Y0511091Q08", uht: "110B1C1B1F0Y", uhu: "030D042K0B030D020U020Y05113G1C0S1F021Q04", uia: "0O030P0D0T0Q150R", "uid ": "0R0A0S1Y0T7K1C0S", uida: "0O0Y0P0Z0Q0J0T0511091C24", uidas: "0O021C4Z", uie: "0L0H0M030O5P0P030T081559", "uie ": "0L0L156X", uier: "0L020O6U", uiere: "0O3O", uiero: "0O3S", uig: "0R060S1Z1C0B1O02", uik: "010O0R0H11061B0F", "uil ": "01110L040R050SB8", "uile ": "0L050S9A", "uin ": "0D040L040R0J0T0P116Y", uine: "0L040M020R030S5V0T0C110A", "uine ": "0L030R020SK90T06", uire: "0L0S0M050P020QBP1O05", "uire ": "0L1B0QBU", "uit ": "012H0L2G0M0B0R580S2J0T631107152J", uito: "0O060P7B0Q0A1506", "uito ": "0O050P880Q0A", uiu: "0P0E0T0R", ui\u00E9: "0L030O16", "uj ": "03030U0B0V050Y0B1A0J1D0E1O2K1Q37", "uje ": "041D0U470V180Y461A311B0N", ujem: "0U0P0V1C0Y6P1A0J", "ujem ": "0V2Q0Y7C", ujo: "0L260O050P0411031B0K1O0L1Q03", ujou: "0L3N", ujour: "0L63", uju: "040G0B0V0U0F0V0R11081B0D1C10", ukan: "0305042R0B980D0D110V1A02", "ukan ": "03080BDS0D0M110F1B03", ukh: "0D0D1005", ukk: "010M030V0B0C0R0B0Z0R112N120H131514031C0G1F04", ukke: "010H03070R0C0Z22110412121F04", ukse: "0B050Z071141120E1C0Z", ulch: "0T2Q1Q0D", "uld ": "0M6A0N0A0R0E0Z0U10051402", uldn: "0M20", "uldn'": "0M2Q", ulh: "0P1C0Y0B1402", ulla: "03030O020Q220T0P100B1181140D1F1I1N0F", "ulla ": "0Q1Z0T0G100511H41402", "ulle ": "018B0L080Q050Z15104B11EK122M1CHI", ulli: "030F0M020O020R500T0B110O1306", ullie: "0R6O", "ult ": "030L0M0J0R0E0T150Z05141C154L1C2R", "ului ": "1109155Y", ulum: "0T3D11031F03", "ulum ": "0T3K", umah: "03190B3J0D03", umal: "03040D0U110Y1C0G1F03", "umba ": "04970D030O020T061402", umq: "0T1I1Q08", umqu: "0T2U1Q09", ums: "03040N06130I15021B2F1D7O1F02", "ums ": "0N051B3V1D9M", "umu ": "03020B0U0V041B071D3F1F0Z1O03", umudu: "04911F03", umun: "04CQ0D0O0T0311021F0A", umunt: "04CX0D120T03", umv: "043Z", umvi: "047Y", umvir: "04BH", umw: "04701Q05", umwa: "04BM", umwan: "030204G8", umwe: "04790N03", "umwe ": "04BX", "un'": "0Q191Q0B", "unc ": "0T3F", unca: "0B040O230P2I0T040V02150I1F0N", "unca ": "0O2Q0P350T020V06150F1F0Q", "unda ": "04KW0B070O0B0P0E0T0O1008130I1B021F3W1N0Q1O06", "unde ": "0N1O0R0E0T0M0Z0Q101F15511O0A", under: "0M1L0N190Z29101L121L", "une ": "0LFQ0M040N040Q0E0T060Z02153S1C0Q1O0B", ungu: "0303048O0B040D050T050U08131D1506", "ungu ": "0302049O", unj: "0B0I0V09", "unk ": "0M08149F1B03", unne: "0M030N020Q040R2H0Z251008111Q12381C15", "unne ": "0Q040Z2I11101228", unnen: "0N030R3A1005110X1209", unq: "0O090Q0A0T0S1Q07", unsi: "049V0N0311081O03", "unsi ": "04FZ110A", "unta ": "0D240O0P0P0I0Q03111L", untu: "04B40B7Q0O030Q020T10110J", "untu ": "04I1", untuk: "0BDK", "unu ": "1102130815061B031D0J1FC21O1R", "unut ": "1174", uny: "0304042F0B3514031B061N4V", "uny ": "1N6N", unya: "030204110B5P", "unya ": "03050B9Y", un\u00F6: "1P4Q", un\u00F6n: "1P5T", "un\xF6n ": "1P6Q", un\u0101: "1D3U", "uo ": "0O050P030Q3H0T2B0V0P111V1B461O0A", uod: "0T2K110T1B11", "uod ": "0T4E", uoi: "03020L2I0Q2Q1103", "uoi ": "0L440Q4A", uoj: "11071B2I1O07", uoja: "11071B2T", uok: "111X1B1W", uol: "0Q2K113R1B17", uom: "0Q0Q0T0L113G1B14", uon: "0D060L020Q1I0T0611371B0J1O0D", uoq: "0T0K", uor: "0Q0P0T0X111M", uos: "0O040P030T0X11161B3W1O02", uot: "0D050L020Q0J0T1V112O1B31", "uot ": "0D090T2K11021B02", uoti: "0L030Q020T0O110N1B2X", "uoti ": "11041B5L", uov: "0Q1N11091B02", "upp ": "102D131P", uq: "030I1Q4E", urab: "04720T031F07", urada: "0O020P041F4E", uradi: "0V6V", urash: "04E0", uraz: "046F0U030Y0B", urazi: "049C0U040Y0C", urinn: "137W", uriu: "0T0B1B3N", "uriu ": "1B6O", urob: "0Y70", urobi: "0Y7B", urq: "0L1O1Q0A", urquo: "0L4P", "urs ": "0L770M0I0N020R0310031307150A1A02", urw: "041K1A02", ury: "042D0M031A0A1B071F021N0O", ur\u00F0: "132M", "ur\xF0u ": "135L", ur\u0117: "1B1R", usap: "0D0W", uset: "03040N020U0C0Z0O100Z1106121A", usha: "04A40N030R021Q3A", ushak: "04AQ", usq: "0L0K0T0X1Q0D", "usto ": "0D4A0O0M0P0A0Q0H11041O06", us\u00ED: "0U300Y36", "utem ": "0T2H0U091516", uth: "0M0E0T07", utk: "0B090U020V03110O1A041F02", "utse ": "0491", utta: "0Q0Y1007119614021Q0I", "utta ": "0Q0S11BY", utte: "0L050M040N110Q0V0R020Z141002110O121N", utti: "0M030Q2P0R03111N", "utti ": "0Q2P112H", utto: "0M030Q3H1002110A", "utto ": "0Q2Y", utv: "100312071B031Q09", utw: "041B1Q06", "uu ": "112Z1C0Z1O02", uud: "11241C22", uude: "113P", uul: "0D03113H1C30", uum: "0T20110R1C0G", "uum ": "0T3R", uun: "0D020T08112Q1C0E", uur: "011H0R12112N1C3A", "uur ": "012H0R2H1C1B", uus: "01090D020T1K11271C1K", "uus ": "010H0T2Y11121C0V", uut: "0R0211461C0U", "uvek ": "0V4Z", "uvo ": "0O0Y1B8N1O06", uvu: "042D0U02100K11071B041D0E1Q05", uvuga: "049T", uvy: "04181B05", uw: "010H030C040J0D200R1Z1A0Q1N1I1Q03", "uw ": "0R1M1N0P", uwa: "0307040G0D171A121N0R", uwag: "0D141A0C", "uwag ": "0D20", uwe: "010T03090D0X0R0U", uwed: "0D0X", uwede: "0D1Q", uwi: "030J0D080R021A0G1Q03", uxo: "0P020T0W", "uy ": "030D0M0K0O2U1Q08", uya: "0307040G0D050L040O071F1H1Q05", uye: "030B042X0L040O07", "uye ": "048I0O05", uyo: "040O0D020O071F3M1Q04", uyor: "1F44", uyu: "030204361F2E1Q03", "uyu ": "04901F0M", "uz ": "03080O0A0P0D0V07150B1D681F4B1N0T", "uza ": "04AY15101F071O05", uzo: "042T1O06", u\u00DF: "0N0B", u\u00E1: "0O0M0Y031402", u\u00E1l: "0O0M0U021402", u\u00E1n: "0O1F", u\u00E6: "0T0L", "u\xE6 ": "0T17", u\u00E7: "0P051F0L1N0K", u\u00E9: "0L0D0O200P0H", "u\xE9 ": "0L150O5F", u\u00E9m: "0P1Z", "u\xE9m ": "0P2F", u\u00E9s: "0L060O0U", u\u00EA: "0P06", u\u00ED: "0O0O0P060S0E", "u\xED ": "0O1X0S0P", u\u00F0: "1328", u\u00F1: "0O031N1G", "u\xF1 ": "1N2O", u\u00F2: "0Q0C", "u\xF2 ": "0Q1C", u\u00FD: "1N0Q", u\u0101: "0T051D06", u\u0103: "150O", u\u010D: "03040U1E0V1T0Y1F1B0G", u\u010Di: "0U1Q0V2J0Y1R1B18", u\u011D: "1O0A", u\u011F: "1F3G", u\u011Fu: "1F8G", u\u011Fun: "1F6U", u\u011Funu: "1F7J", u\u012B: "0T03", u\u013C: "1D09", u\u0146: "1D06", u\u0148: "1N3W", "u\u0148 ": "1N7D", u\u014D: "0T06", u\u015D: "1O0C", u\u015F: "15041F271N1H", u\u0161: "0U0X0V100Y0N1B0E1D0M", u\u017C: "1A22", u\u017E: "0U2D0V0N0Y1V1B2S", "u\u017E ": "0U3C0V040Y2Y1B21", u\u0219: "150N", u\u021B: "150K", u\u0263: "032U", u\u1E25: "0314", "v'": "0Q041Q0C", "v-": "1502", vaa: "010F0R0G113E1C221F05", vab: "0O060T061B031C2R1F061P0F1Q0A", vaba: "0O090T021C32", "vad ": "0Z5Q106Y14031C7D1QD2", vado: "0O0E0P0E0Q3J140A1B081O05", "vado ": "0O0B0P090Q3K1O06", vagy: "14DS1B02", "vagy ": "1471", vagyo: "146T", vah: "0U040Y06110J1C1K1F021Q04", vai: "0L6E0M020O030P2Q0Q2B116714031B5U1C0U1DF0", "vai ": "0P370Q3O111614021B1I1DDS", vaik: "113D1B3I", vain: "0L0I113Z1D2C", "vain ": "0L08118A", vair: "1B0R1D3H", vair\u0101: "1D5C", vais: "0L490O040P04110N1B0U", "vais ": "0L660O050P051B0A", vait: "0L3411041B0Y", "vait ": "0L56", vaja: "0V0314021C2B1D5C", vajad: "1D88", vajag: "1D5L", vaka: "0R0B0V06110J1309140A1B2X1D27", vakar: "14021B5Z1D5H", valam: "144R", vald: "0T2M100713081B081C0G", valde: "0T2S1005", valg: "0Z0I120H1B3B1C0K", valik: "11021C1H1P4P", valod: "1D9T", "vam ": "0P1B0T0Q0V100Y1N14021D0M1F0N1QFR", vanda: "011O0R2C0T05131R", vann: "0Q3E0R041009110G121D13081424", vanno: "0Q3F110A", "var ": "0O0K0P0R0V090Z9M10CE12AI13AC14061D4E1F721O07", "vara ": "0V0M10321104130L150N1F021O05", varf: "102I", varf\u00F6: "102I", varu: "0T05110A1B031D2W", "varu ": "1D7A", var\u0113: "1D3T", var\u0113t: "1D6C", vast: "0L030M020O020P030Q020R0K0T06114U140P15041C2N1O06", "vat ": "010N0R060T0F0U5O100411CV1405150V1C0N1F05", vau: "0L0B110G1B1K", va\u00F0: "1350", "va\xF0 ": "136M", va\u0165: "0Y3O", "va\u0165 ": "0Y68", vb: "100314041Q0N", vde: "0V210Y0D0Z14100E120B1F0T", "vde ": "0V2G0Z2W100G120Q1F0Q", "vec ": "0L5P0U030Y0I", "ved ": "0M1N0Z55121C140K", veda: "0O020Y8K1B041F031O02", vedal: "0Y84", vede: "0Q280U0C0V070Y310Z18110C140D151H", vedel: "0Y3111071402", vee: "010S0R1K11091C2X", veel: "011I0R5B11051C2O", "veel ": "011L0R6U1C61", veik: "110413121B301D1W", vej: "0O030P0P0U0P0Y0C0Z0T1B0C", vek: "0U020V2E0Y170Z0210031103120D1304140G1O06", veld: "0R071249130P", veldi: "123H130I", vele: "0M020Q040R0E0Z02110G145415061F02", velmi: "0U3A", "vem ": "0P1G0T0Q0U060V040Z1R101Q1221140T151I", vemo: "0O040P0J1P4B", "vemo ": "1P4Y", venit: "0Q050T2F152Y", venn: "0Q0B0Z0V11021227141D", veoma: "0V4G", "vera ": "0L090O080P070Q0B0T0A137M1O0N", verge: "012D0L020N150R1Y", verj: "0R0A133P1403", verju: "136Y", "vero ": "0Q550T0P11021O0R", very: "0M5A1Q0I", "very ": "0M4U", ver\u00F0: "135Y", ver\u00F0u: "137N", vesel: "0U0315081D5H", "vet ": "0T080V0Q0Y0G0Z3U103T1105125J142C1F0L", "vete ": "0O050P040Q3V0T060Y0S10061205", vetlh: "1QD4", vett: "0Q081007110U14431C0I1F02", veu: "0L3M0P0G0R02", veux: "0L3X", "veux ": "0L5U", vev: "0Q1P0U020Y09", vez: "0L350O1T0P2A0Q090U0B0V0N0Y0G1417150C", "vez ": "0L320O2J0P1Y1402", ve\u013E: "0Y6D", ve\u013Ea: "0Y39", "ve\u013Ea ": "0Y42", ve\u013Em: "0Y5R", ve\u013Emi: "0Y73", vf: "0Z0210021203", vg: "100212031F05", vh: "12031Q02", vida: "0O2N0P2G0T0310061B021O0S1Q0Z", videl: "0U050V150Y5K", vid\u00ED: "0U1N0Y3A1402", vid\u00EDm: "0U190Y2V", vid\u011B: "0U39", vid\u011Bl: "0U3I", "vie ": "0L260M080Y3D1104", viel: "0N3X0R0F112H", viem: "0Y5F1B031D0O", "viem ": "0Y6B1B061D1R", vien: "0L2W0O1J0Q0T110D1B621DA2", viena: "1B651D3G", viens: "0L1P11021D5Y", vih: "0V0E0Y0G111914041C1N1Q2C", vii: "0T04113915151C2C", "vil ": "0M040O060P020U1R0Y190Z5X127M13101Q0U", vilk: "0U050Z10101S110412101B0G", "vill ": "104Y130K", ville: "0L1L0Z2L1016110Q1226", vilo: "0U030V041O021PDZ1Q1L", vilob: "1P7P", vilol: "1P3E", vilom: "1P5R", vind: "011A0P0G0R2C0T030Z2G1007120O130C150A1F0C1O04", vinde: "0R160Z281004150A1F0A1O06", vineh: "1QDN", "vir ": "01AC0L040O0N0P0W0T0W", virk: "0Z1B1106121V130S1B05", virke: "0Z1G121T", vissz: "142W", "vit ": "0L0H0T780U2L100Q11061207150Q1Q0V", vi\u00F0: "13A2", "vi\xF0 ": "13ER", vi\u0146: "1DMJ", vi\u0146a: "1DEB", "vi\u0146a ": "1DKR", vi\u0146am: "1D8K", vi\u0146i: "1D5J", "vi\u0146i ": "1DAD", vi\u0146u: "1D3M", "vi\u0146u ": "1D8G", vi\u0146\u0161: "1DBT", "vi\u0146\u0161 ": "1DOC", "vi\u0161e ": "0V6N", vj: "14051Q08", vk: "0U0G0V020Y0F1F03", vle: "01090R050U020Z051F0W", vm: "1F0C1Q0D", "vn ": "0Z0H1205", vne: "0V050Y0J0Z0C120H", vob: "0T0H0U081P4S", voc: "0L050O0E0PH90Q0D0R020T1L0U040Y0H150D", voc\u00EA: "0PJX", "voc\xEA ": "0PLA", voc\u00EAs: "0P48", vod: "0U150V180Y261402", voe: "01150R0Q", "voel ": "011J0R0R", vog: "0N020P050Q2L0R040V0Z0Z041B081Q03", vogl: "0Q45", vogli: "0Q46", voi: "0L5I0M060Q2D117O1550", "voi ": "0Q3S114A154L", voir: "0L5Q", "voir ": "0L90", voj: "0U1Z0V5H0Y6F11081B281D1L1O17", voje: "0U1J0V1N0Y3C11021B0D1O03", volas: "1O6C", vole: "0L0F0Q3H0T0E0U0N0V0S0Y0K1O07", volna: "1434", volt: "0P1K0Q210R020U0314DF1508", "volt ": "14B0", "von ": "0L020N5L110R14041O15", vons: "0L3J1103", "vons ": "0L5M", voo: "01190P040R3411021C0F", voor: "012W0RB7", "voor ": "010S0RBH", vorb: "0N0D155O", vorbe: "0N0K154P", vord: "0R020Z191220", vorda: "0Z1I1220", vore: "0P0H0Q1C0R030V0R0Y0L0Z1L10091O02", vores: "0P070Z1T", vorf: "0N020Z25122J", vorfo: "0Z2L122K", voril: "0V0P0Y2S", vor\u00ED: "0Y5V", "vor\xED ": "0Y2Z", vost: "0Q320U0D0V030Y08110D1403", vostr: "0Q33", votre: "0L50", vou: "01070LE50M040P2L0R020U120Y0B", "vou ": "0P340U1L0Y0I", vous: "0LJG0M05", "vous ": "0LQO0M07", voy: "0L0X0O131Q06", vo\u00EB: "010K", vp: "0Y021Q0D", vrai: "0L3T0Q04", vrea: "155L", vreme: "0V5Z1525", vri: "010W0L0N0R0X0Y0410031F061O06", vrie: "01210L0D0R2H", vrien: "01260R3A", vro: "010M0L020P1L0R0T0U040V051F021O02", vry: "010O", "vs ": "10041D2M", vt: "0U040Y0D0Z041004120614081Q07", "vu ": "0L0W0U1E0V1V0Y24110213031B071D3Z1O0D", vue: "0L0D0O0Y", vug: "045B", vuga: "04DK", "vuga ": "04IP", vum: "0T0R1Q1H", vuo: "0Q23112S1B051O02", vus: "0L020T0S11061B091C161D0R1F0J1O0R", vut: "0Q17110E15141F021Q1A", vv: "0Q0G14031Q06", vve: "0Q1514051F021Q03", vvi: "0Q0I", vya: "0302043D1F021Q05", vye: "043P1F02", "vye ": "046P", vyi: "043V", vyk: "0U0W0Y0M1B2L", vyo: "046T", "vyo ": "04CH", vyose: "04A4", vz: "0U0X0Y0I", v\u00E1: "0P070U3V0Y2W143Y", "v\xE1 ": "0P0C0U1U0Y1J140A", v\u00E1l: "0U0F1429", v\u00E1m: "0U1P0Y1R", v\u00E1r: "0P0E0U040Y0I1424", v\u00E1s: "0U0Z0Y1Y140L", "v\xE1s ": "0U1L0Y3C1405", v\u00E2: "150E", v\u00E3: "0P04", v\u00E4: "0Y0E103E11461C2O1P06", "v\xE4 ": "112Y", v\u00E4g: "101C1C3P", v\u00E4ga: "10031C4I", "v\xE4ga ": "1CAL", v\u00E4l: "102E11231C2S", v\u00E4lj: "10071C2R", v\u00E4lja: "10041C6B", v\u00E4n: "103B1123", v\u00E4r: "101K11091C0I", v\u00E4t: "100C113H", "v\xE4t ": "115Y", v\u00E4\u00E4: "11271C0M", v\u00E5: "0Z051015120L", "v\xE5 ": "1013", v\u00E5r: "101P120Q", v\u00E6: "0Z2A121T1310", v\u00E6k: "0Z0C", v\u00E6r: "0Z2R122W1312", v\u00E6re: "0Z571245", "v\xE6re ": "0Z3I123Q", v\u00E6rt: "0Z0E122C", "v\xE6rt ": "0Z0E122C", v\u00E9: "0L0K0O030P020U270Y0N1309142Z", "v\xE9 ": "0L160O050U2V0Y1E1406", v\u00EA: "0L020P04", v\u00ED: "0O0D0P030U420Y0P131Q140G", "v\xED ": "0O030U2I0Y0F132L", v\u00EDa: "0O0Z", v\u00EDm: "0U260Y08", "v\xEDm ": "0U340Y0D", v\u00F2: "0Q02", v\u00F3: "0O020P031402", v\u00F4: "0P020Y0B", v\u00F5: "1C2C", v\u00F5i: "1C55", "v\xF5i ": "1C2B", v\u00F5t: "1C28", v\u00F6: "0N05130Z140A1P17", v\u00F8: "0Z071206", v\u00F8m: "0Z091208", v\u00FC: "14071F031P0N", v\u00FD: "0U1Q0Y1I", "v\xFD ": "0U1F0Y1U", v\u0101: "0T021D1E", v\u0101r: "0T021D1Z", v\u0103: "151N", v\u0105: "1B0B", v\u010D: "0U0K0Y0X", v\u0113: "0T081D3Y", v\u0113k: "1D4N", v\u0113ki: "1D3A", "v\u0113ki ": "1D5C", v\u0113l: "1D5X", v\u0113r: "0T031D2D", v\u0117: "1B1I", v\u0117l: "1B1I", v\u0119: "1B0K", v\u011B: "0U56", v\u011Bd: "0U32", v\u011Bd\u011B: "0U3D", v\u011Bd\u011Bl: "0U39", v\u011Bt: "0U2F", v\u012B: "0T0D1D0N", v\u014D: "0T02", v\u0161: "0U1Z0Y2C", v\u0161e: "0U2D0Y4L", v\u0161ec: "0U2W", v\u0161ech: "0U40", v\u0161et: "0Y7K", v\u0161etk: "0Y6Y", v\u016F: "0U13", "w'": "04171Q2V", "w'i": "0445", "w-": "03070D03", waa: "01320D020R2P", waar: "01620R93", "waar ": "013O0R5F", waaro: "010X0R4E", wab: "0305041C0B0F1Q0K", wac: "030W041E0N090R0I1A07", "wag ": "011A03020D1E", wagt: "1N6Q", "wagt ": "1N55", wah: "0303040J0B0D0D020N0P1A021Q0B", wak: "0316041A0B1C0D080M040R051A06", "wal ": "03BZ0B0H0D05", wala: "03100B090D3O1A05", "wala ": "030Y0D3U1A03", walan: "03070D2N", wam: "030U04150R0D1A0F1N0G1Q07", "wan ": "030V0B0T0D0T", "wana ": "04970D021A0K", wanj: "0490", wanje: "04F3", wanne: "011R0N020R1Z", want: "030G0M5S0R0B", "want ": "030O0M4X0R0D", wany: "0302047M1A101N0G", wanya: "030404A4", "war ": "030D0B070M070N580R03", "was ": "018S03040B030D020MBP0N7S0R9D1A0A", "wat ": "019F030C0B100D080R931A03", water: "011O0M0U0R1U", waw: "030O041L0B030D02", way: "032V04110D030M1R", "way ": "03080D040M23", "wa\u0107 ": "1A3T", wa\u0142: "1A3J", wb: "1Q03", wc: "1A1G", wd: "03020R061A181N0D1Q05", "we ": "011M04KV0M350R301A1J1N6O", "we'": "0M0V", wea: "0M0L", wed: "030H0D0K0M0F0N040R031A041Q03", wede: "0D110N090R03", wees: "01560R1C", "wees ": "015G0R0P", weet: "01450M040R3T", "weet ": "014D0M040R53", weg: "010F03070N0R0R0N1A0P", wei: "0M050N3A0R050Z021002", "wen ": "037E0N060R1B1Q07", wenn: "030B0N3X", "wenn ": "0N6F", werd: "03020N3S0R29", "werd ": "0R2N", werde: "0N690R0F", were: "0M3E0N050R0Y1N0G", "were ": "0M430N03", werk: "01460N0B0R3P", "werk ": "013R0N070R23", "wese ": "049O", wet: "010B03210N060R0G1A0I", wg: "1N05", wha: "03020M3G0P02", what: "0M680P02", "what ": "0M7E", whe: "03020M2L", when: "0M2H", "when ": "0M3A", wher: "0M1U", where: "0M2J", who: "0M1M", "who ": "0M2B", why: "0M1A", "why ": "0M2D", "wi ": "031O041D0D041A2L", "wi'": "1QFE", "wi' ": "1QK6", wia: "1A3Y", wie: "010U0N370R0P1AE2", "wie ": "011X0N5J0R2G1A2Z", wied: "0N1G1A6X", wiedz: "1AA1", wig: "01070302041I0N021Q0O", wij: "0307040C0R121A021Q7G", "wil ": "016Q03020R4N", will: "0L020M3M0N2O0R1I", "will ": "0M4J0N2V", wir: "0306045H0N4U1A021Q04", "wir ": "03030N6T", wird: "0N35", "wird ": "0N57", wiri: "04C31Q06", wiriz: "04GQ", wis: "030V040G0B030M0F0N0U0R0F1A0P1Q0U", with: "0M6O", "with ": "0M85", wiw: "0418", wiy: "0309041P", wiz: "030J041J1A0H1N0D", wj: "0302", wk: "1A0I", wl: "030P0M031N0C1Q03", wm: "1N041Q04", "wo ": "04330M0F0N0O1A1R", woh: "0N0V", woj: "1A38", wol: "0N0T0R021A1P", wom: "0M0B1A021Q03", won: "010G040D0M150N020R0F1A0T", woon: "011J0R2N", woord: "011A0R3H", word: "013M0M0L0N0L0Q020R48", "word ": "013U0M0G0Q020R0C", worde: "0N0Z0R39", work: "0M2B", wou: "010B0M1Z0R05", woul: "0M3J", would: "0M4U", wp: "1A081N051Q03", wri: "03020M0D", wro: "0M0D1A0A", wstra: "1N41", wsz: "1A4N", wszy: "1A4H", wszys: "1A64", wu: "0314040S0N0X1A0E1N0N1Q0B", wur: "03120N0V", wv: "1Q02", ww: "0311", wy: "010J03031A6E1N2T", "wy ": "1A2B1N53", wys: "010E1A1K", w\u00E4: "0N0N", w\u00EA: "0106", w\u00EAr: "010A", w\u00F6: "0N07", w\u00FC: "0N0N1N0B", "x-": "0L05", xc: "0L040M050O040P030T071503", xer: "03060L040M020P080T0U10031505", xim: "0L020O0D0P0R0T0Y1506", xis: "03020L090M030N020O0D0P0K0T0J0U091514", xit: "03020O070T2Q", "xit ": "03020T4C1403", xl: "0302", xor: "0T0Y1007", xpe: "0M0J0O0A0P0B0T0H1002150C", xs: "03030T0B", xsp: "0T0J", "xt ": "03040M0H0U021002", xtr: "0L060M040O0S0P090T0B10031509", xu: "03030T041502", "y'": "04170M0H1F2E1Q3G", "y' ": "1Q82", "y'i": "042D", "y'n": "1F3G1Q03", "y'ni": "1F3Y", "y'nin": "1F5C", "y'r": "0M0B", "y's": "0M0F0R02", "y'u": "041J", "y-": "03080D071402", yaa: "0B0E0D03", yab: "041Y0L0314021F121Q03", yac: "040W1F41", yad: "03080B050D0D14031F0E", yag: "0308041S0D050L0F14071P0B1Q03", yah: "040O0B0V0D070O041F0G1Q0K", yai: "0B0G0L081404", yak: "0306043K0B2I0D07140T1F2U", "yak ": "03020B3H0D0914021F0A", yaka: "0303047V0B0E0D0214041F0L", "yaka ": "04CX", yal: "03130B0A0D04140D1F2O", "yan ": "03090B080D3S0O0314651F0W1Q08", yang: "042O0BJ30D401F07", "yang ": "0BRN0D76", yanje: "04AA", yap: "0B0314051FDO1P0D1Q0L", yapa: "0D021F4E", yapm: "1F76", yapma: "1F9B", yapt: "1F3K", yapt\u0131: "1F4U", yard: "0M031F3G", yard\u0131: "1F4O", yari: "04850D0G", "yari ": "04CM0D0P", yat: "0305040V0B0C0D0614061F2G1Q03", yaw: "030E041U0D0E", "yawe ": "049I", yay: "0D051F0J1Q07", ya\u015F: "1F3O", ybo: "0M0C0U021A051B041F07", ych: "0M020U4D0Y0K1A3T1Q0F", "ych ": "0U4Z0Y0L1A47", yck: "0U0H0Y05106T", ycke: "106Q", ycker: "1030", ycket: "103R", "yd ": "01130Z0212051407", yde: "030G0Z0O1009110M12081A051F0B", ydi: "030S11031B061F2Z1Q05", "ye ": "010804M10D030L030M040O050Z09121L140S1F7Z", yea: "0M0S", yeb: "032C0B07120514061F0Q", yec: "030I0O061F2Y", yed: "031S0B020M0E140U1F0U", yel: "038U0B0D0D030M03141W1F0I1P0X", yell: "037U0M051404", yella: "03E5", yem: "0324040P0B040D02140C1F37", "yene ": "049C12061F03", yere: "042K120814411F0N", yerek: "043514321F08", yes: "039W040T0B020M0K0O04110214111F0G", yess: "036U11021402", yesse: "03AT", yet: "035X0B030M0C0Z021207141H1F2P", yett: "0360140G1F03", yf: "010H1003130U14021F02", "yf ": "010N", yge: "0Z0C10041203", ygg: "0Z08100M120H130T", ygy: "1N85", ygyn: "1B021N78", ygyny: "1N8O", yhe: "010D0Z02100511041202", yht: "111U", "yi ": "032C043F0B0E1116140U1F9T", yin: "031M04250B030D040M14110D1F1I1P0E1Q2W", ying: "0M211Q1J", "ying ": "0M2T", yiw: "034E041J1Q06", yiwe: "034J044M", yje: "0U031A0X1B1P", "yk ": "01140D030U0B0Y0E0Z0512051A0C1B1V1N4Q", yka: "0U031A0Z1B0C1N2S", yke: "01090U030Z0A10071105120B14021F0B", ykk: "0Z0M1116120X1310", ykke: "0Z1O121Y", ykl: "0U0M0Y070Z061004120213051A0C1B181N2O", yks: "11301B111N09", yksi: "113P1B09", ykt: "1005120913061B0G", "yl ": "0U451A021N14", ylar: "1F071N4O", "ylar ": "1F031N5F", yld: "0Z0J100A120E130F1N1J", yled: "1F59", yledi: "1F74", yll: "0T020Z04100F111S120713051N0L", "ym ": "0Y0610041A7Z1N87", ymm: "10041124", ymo: "0M0B0T071B0A1Q06", ymu: "0T231A051B081F05", ymus: "0T3N1B05", "ymus ": "0T3V1B0C", ymy: "0U02110N1A0B1N4G", "ymy ": "1A091N3M", "yna ": "0U090Y08130A1A0V1B031F031N5D", ynan: "1N3Q", ynd: "0U020Z0P100A1208132Q1N5E", ynda: "0U02100813171N75", "ynda ": "1005130V1N5R", yng: "0Z0810051207130F", ynn: "0U021002110M120B13091A05", ynt: "0Z031004110V120D1303", yny: "111B1A0C1NEO", "yny ": "0U021A0E1NGR", "yny\u0148 ": "1N46", "yok ": "146R1F2M", yon: "041B0D3Q0L0B0M0N142I1F1H1Q09", "yon ": "0D4D0L0414641F0L1Q08", yong: "0D2K", "yong ": "0D4O", "yor ": "0O0J1FH0", yord: "1F5W1Q06", yordu: "1F7X", yors: "141E1F4X", yorsu: "1F63", yoru: "03021FF8", yorum: "1FHQ", yos: "042Z0D0B0O03140E", yose: "047Y", "yose ": "04DH", "you ": "0MHL", "you'": "0M2J", your: "0M42", "your ": "0M4X", "yp ": "100212021N5Q", ypt: "0M020T0Q0Z0210021202130N", "yr ": "0Y070Z0E100F120I13031N3L", "yra ": "0T04100G130S140B1BHF", yre: "0Z0A1003120C140B1A021B091F05", yrir: "138B", "yrir ": "13EQ", yro: "0D080U070Y051A041B03", ysa: "030J0D0A0L02100213031F04", ysl: "0U3C0Y4I", ysl\u00ED: "0U3G0Y5D", ysl\u00EDm: "0U2S0Y4N", yss: "0T020Z06100V1109120513091N0D", yst\u00E4: "113M", ysy: "111R1A021N1C", yszer: "142Y", yte: "0U041004110I120B14051A0A1B05", yth: "0L020M12", ythi: "0M1X", ythin: "0M2N", yti: "0U030Y0E1108130B1B7P", "yti ": "1BB1", yto: "0U0A0Y07140C1A061B27", ytoj: "1B3B", ytt: "0Z0H100O114H120Q130T", ytte: "0Z171009110H121A", ytt\u00E4: "114W", yty: "11261A08", yt\u00E4: "111U", "yu ": "0308044I0B0314031F0U", yud: "03050D040O191F071Q0A", yuf: "032J1P5O", yuf\u00F6n: "1P3I", yumv: "046P", yumvi: "049T", yun: "030J040G0B060D060O08140N1F1H1P0R", yv: "0U040Y030Z0E1002111D1204140U1B1K1F071Q0E", yve: "0Z0G11021203140Y1B331F051Q0F", yven: "0Z0A14061B4Z", yvi: "111X1B05", "yvin ": "116W", yv\u00E4: "1004113C", yw: "040D0M021A1K1Q07", ywa: "04181A23", yy: "030K111C", "yy ": "111W", yz: "03050T020U050Y0K140E1A0L1B021F031L051N5O", "yz ": "1N4K", yzy: "1A051N44", y\u00E1: "141H", y\u00E4: "110C1P0B", y\u00E9: "0L05140S", y\u00F1: "1N47", "y\xF1 ": "1N6N", y\u00F3: "0O04140G", y\u00F6: "111V140A1F06", y\u00FC: "140J1F27", y\u00FD: "1N0F", y\u0107: "1A1W", "y\u0107 ": "1A3W", y\u010D: "0U070Y0A1B08", y\u0131: "1F4L", "y\u0131 ": "1F57", y\u0142: "1A4H", "y\u0142 ": "1A3I", y\u0148: "0Y021N6Q", "y\u0148 ": "1N9G", y\u0148y: "1N32", y\u015B: "1A1Z", y\u015F: "1N33", y\u0161: "0U0N0Y0G1B02", y\u0165: "0Y0Q", "y\u0165 ": "0U020Y1V", y\u017E: "0U100Y071B04", "y\u017E ": "0U1Y", "z'": "0403", "z-": "03050L0S", "z-v": "0L3A", "z-vo": "0L5G", "z-vou": "0L90", zad: "03040O0M0P0I0U070V0O0Y0714091A161F051N2V", zady: "1N3M", zaj: "0U0T0V0P0Y2N14091A1T1O05", zajtr: "0Y34", "zal ": "031D0R4E0U0X0Y0J140Q1N0E", zama: "04110V0514021A031F5V", zaman: "1F7V", "zat ": "0R0H0U07141C15131N4A", zaw: "039Q1A1L", zawa: "03A41A04", zawal: "03JV1A02", zc: "0O070U021A1V1F0W", zcz: "1A3F", zd: "03080U1T0V0E0Y1F14171A1L1B0B1D0T1F1I1N1N", zda: "03030U090V0C0Y0F140D1A111B051D2A1F0Q1N0N", zdar: "0U031A0A1D2W", zdar\u012B: "1D6T", zee: "0R0A", zeg: "030H0R0X140G1A2V1F03", "zego ": "1A4I", zei: "0N1L0P030R0J14031503", zek: "030M0R0B0U06141N1A221F061N17", "zem ": "03070N020P0K0U050Y0R14421A181N10", zemre: "039J1402", "zen ": "030U0M030N2I0R2S0U08141V1F0F", zeni: "0U0C14051A3J1F03", "zer ": "03020N080P6T0R06141X1F05", zere: "044C0P0214AG1F0A", zeret: "148K1F02", zet: "0R0A0U050V0I143G1A0E1F0E1N0A1O04", zia: "0N020P0A0Q291402150R1A461O03", zia\u0142: "1A5B", zic: "0R0V0U020V04150Z1A0G1O02", zich: "0N020R3A1402", "zich ": "0R32", "zie ": "0Q1C0R0O0U020Y09150H1A6C", zien: "0Q0M0R351A0W", "zien ": "0R43", zif: "03071P1J", zij: "0R5P0V0B1B0C", "zij ": "0R39", zijn: "0RGG", "zijn ": "0RKM", zik: "030Q040M0U030V18142O1A031B0I1D0Y1F0I1O0A", "zik ": "030Q0V0K146E1A021F0E", zinu: "15071D2Z", "zinu ": "1D7I", zin\u0101: "1D3Y", zio: "0P020Q7O0V061A0E1O06", zion: "0QAL1A08", ziona: "0Q5H", zione: "0Q4P", zi\u0148: "1N2M", "zi\u0148 ": "1N3Q", zj: "0U040Y081A0O", zk: "0U130Y0M140J1A1T1D06", zn: "030A0U1X0V2G0Y1Z142F15031A3V1D0C", zna: "030I0U100V5O0Y1Q140D1A3V", zni: "03020U090V080Y0J142F15071A1P1D0G1F02", "zni ": "0V03145W1A03", zn\u00E1: "0U1K0Y1W140N", zob: "041U0Y0T140Q1A0S", zoe: "0R0F", zog: "041O0N070Q021402", zok: "04180Y0A141C1A021N0G", zost: "0Y2F1A3E", zosta: "0Y2K1A5D", "zott ": "142X", zou: "0P030R1B0U02", "zou ": "0P040R48", zp: "0U150Y0I14051A0K1D06", zq: "0O02", zr: "030F0U0F0V070Y0S14091A1S1D0C", zro: "0U050V021A37", zrob: "1A3X", zrobi: "1A64", zs: "0U0C0Y0L14141A051D121F0C", zskat: "1D5C", zt: "03040N160U0K0Y09148E1A0J1D0F", "zt ": "030B0N180U031470", zta: "0U03142E1A05", zte: "0N0M0U020Y0L142E1A0A", zum: "03030N0T0O020U0O0V0Y0Y151A0W1F02", zv: "0U180V0Y0Y18140715021D0V", zw: "030I041I0N0R0R0E1A1Z", zwa: "030W04570N060R091A0I", "zwa ": "04EE", zwe: "0303040U0N0Q0R0A1A02", zy: "0M020U0O0Y0M1AEP1F061N2Y", "zy ": "0M040U0N0Y0C1AA51N1D", zys: "1A4Q", zyst: "1A3J", zystk: "1A4D", zze: "030G0D020Q0E140P1F04", zzi: "030M0Q0L", zzo: "0Q111403", z\u00E1: "0O020U0Z0Y16143U", z\u00E1m: "0U030Y06141N", z\u00E3: "0P02", z\u00E4: "0N071N08", z\u00E7: "1N0N", z\u00E9: "143I", z\u00E9l: "142Q", z\u00ED: "0U130Y0G1417", z\u00F3: "0O0D14191A05", z\u00F3n: "0O0M1402", z\u00F6: "0N081419", z\u00FA: "0Y031409", z\u00FC: "0N03141N1F0P1N2D", z\u00FCn: "140G1F0N1N2Y", z\u0101: "1D0C", z\u0103: "151E", "z\u0103 ": "154L", z\u0105: "1A1E", z\u0113: "1D1W", z\u0113j: "1D23", z\u0113t: "1D3F", "z\u0113tu ": "1D5C", z\u0119: "1A32", "z\u0119 ": "1A401B02", z\u012B: "1D2E", z\u012Bv: "1D5D", z\u012Bvo: "1D42", z\u0131: "1F1U", z\u0142: "1A1S", z\u0146: "1D0B", z\u0151: "140P", z\u0173: "1B05", "\xB7": "0604", \u00DF: "0N0P", "\xDF ": "0N0Y", \u00DFe: "0N10", \u00DFt: "0N0C", \u00E0: "0L1S0P0E0Q13", "\xE0 ": "0L3T0P0Q0Q2N", "\xE0-": "0L02", \u00E0s: "0P08", "\xE0s ": "0P0Y", "\xE1 ": "0O2N0P460SDA0U7W0Y74138U1411", "\xE1-": "0P09", "\xE1-l": "0P14", \u00E1b: "0O050P030S0F0U070Y0E1307142U", \u00E1ba: "0O0B0P040U040Y0E142Z", \u00E1ban: "0O02144T", "\xE1ban ": "1453", \u00E1c: "0O080P050S080U1G0Y10140J", \u00E1d: "0S060U3M0Y1U13031418", "\xE1d ": "0U2T0Y2D1413", \u00E1f: "0O020P02130C", \u00E1g: "0O030P0A0S0713051437", \u00E1go: "141K", \u00E1gu: "0P0X1403", \u00E1h: "0U0J0Y0J130K1405", \u00E1i: "0O050S7G1308140B", \u00E1id: "0S281402", \u00E1il: "0S3Z", "\xE1il ": "0S43", \u00E1im: "0S3U1402", "\xE1im ": "0S3R1403", \u00E1in: "0S4W1303", "\xE1in ": "0S2T", \u00E1ir: "0S491306", \u00E1is: "0O0F0S3K", \u00E1it: "0S1L1402", \u00E1j: "0O020U060Y0F1417", \u00E1k: "0U0L0Y0F130O1420", "\xE1k ": "0U0D0Y09142T", \u00E1l: "0O090P070S0O0U2B0Y1D132P149K", "\xE1l ": "0O0K0U100Y0A130X1431", \u00E1la: "0S1N0U090Y05130O141O", \u00E1ll: "143O", \u00E1lt: "143A", \u00E1lta: "144C", \u00E1m: "0O050S0G0U5G0Y4E1305142N", "\xE1m ": "0U8L0Y991428", \u00E1n: "0D030O1A0S250U280Y1A130X1466", "\xE1n ": "0O230S580U0P0Y0J130N143N", \u00E1nd: "0O0W140H", \u00E1nt: "0O0Y140K", \u00E1ny: "0U090Y06143L", \u00E1p: "0O060P050U0G0Y0B13021405", \u00E1pi: "0O0L0P0K", \u00E1r: "0O080P0O0S0Y0U0N0Y32131F148U", "\xE1r ": "0S1I0U0A0Y14130Z1455", \u00E1ra: "0O040P030S120Y0E130S142C", "\xE1ra ": "0Y0G130R143L", \u00E1ri: "0P290Y4H130L140Z", \u00E1ria: "0P0N0Y4P141E", "\xE1ria ": "0P0F0Y5T141H", \u00E1ro: "0U070Y0Z142R", \u00E1s: "0O2H0P0E0S230U1R0Y28130J145X", "\xE1s ": "0O7N0P160S5G0U200Y2Q143G", \u00E1t: "0O060P060S1A0U320Y2613231477", "\xE1t ": "0U2R0Y0R1305146B", \u00E1te: "0U1S0Y1T", "\xE1te ": "0U1P0Y32", \u00E1th: "0S3H1408", \u00E1to: "0U030Y1E1424", \u00E1tt: "13351412", \u00E1v: "0P0C0U2O0Y3E1308140U", \u00E1va: "0P0A0U130Y4D130C140Q", \u00E1ve: "0P140U0A0Y0O", \u00E1x: "0P02", \u00E1z: "0U1E0Y161425", \u00E1\u00F0: "131A", \u00E1\u010D: "0U070Y0Z", \u00E1\u0161: "0U1W0Y1N", "\xE1\u0161 ": "0U380Y3M", \u00E1\u017E: "0U0O0Y0K", \u00E2: "0L060P0415341F0B", "\xE2 ": "1F0I", \u00E2c: "0L03", \u00E2g: "0L02", \u00E2i: "150N", \u00E2l: "15081F0J", \u00E2m: "0P02150F", \u00E2n: "0P09153Z", \u00E2nd: "0P041569", "\xE2nd ": "156X", \u00E2r: "150L", \u00E2t: "0L05151I", "\xE2t ": "154R", \u00E3: "0P4L", "\xE3 ": "0P0I", \u00E3e: "0P09", "\xE3e ": "0P0X", \u00E3o: "0PA3", "\xE3o ": "0PS0", \u00E3s: "0P02", \u00E4: "0N1M0Y0H10DY11MG1C6F1N961P68", "\xE4 ": "100211KQ1N1E1P09", \u00E4b: "1C0A1N0C1P29", \u00E4bi: "1C0P1N0J1P3K", \u00E4bin: "1P4A", \u00E4bino: "1P4Z", \u00E4c: "0N0G100E", \u00E4ck: "0N021016", \u00E4d: "0N070Y04100S11051C0F1N0R1P3E", \u00E4da: "10071C171P0I", \u00E4dd: "100V", \u00E4de: "100N11091N091P1T", \u00E4e: "11071C1B", \u00E4ev: "1C2E", \u00E4f: "0N08100C1P0U", \u00E4ff: "100V", \u00E4g: "0N07101J1C2S1N1H1P0Z", "\xE4g ": "100W", \u00E4ga: "100V1C3N", "\xE4ga ": "100Z1C4I", \u00E4ge: "0N04101G1C0J1N2P1P0D", "\xE4ge ": "0N041N3P", \u00E4gg: "100V", \u00E4gi: "1C5I1P0Y", \u00E4h: "0N0S111S1C1E1N1I", \u00E4he: "0N0511171C3D1N0K", \u00E4h\u00E4: "111W", "\xE4h\xE4n ": "1175", \u00E4i: "112M1C1M", \u00E4in: "112D1C13", \u00E4is: "112X1C0O", \u00E4iv: "112O", \u00E4iv\u00E4: "114G", \u00E4j: "1105", \u00E4k: "100O111G1C131N0V1P21", \u00E4ki: "110Z1C2A1N0H1P0I", \u00E4ko: "11031P1H", \u00E4ks: "111B1C1K", \u00E4l: "0N0I103O112M1C171N4L1P3P", "\xE4l ": "100L1N47", \u00E4ld: "101L1N1W1P0G", \u00E4lj: "100F11061C2H", \u00E4lja: "10091C2Y", "\xE4lja ": "10081C58", \u00E4ll: "0N0B10341148", \u00E4ll\u00E4: "1152", "\xE4ll\xE4 ": "11B6", \u00E4lm: "1N2G", \u00E4lmi: "1N3J", "\xE4lmi ": "1N4O", \u00E4lo: "11021P2A", \u00E4lp: "101S", \u00E4ls: "101S", \u00E4lsk: "101Z", \u00E4lska: "101W", \u00E4lv: "100Y", \u00E4l\u00E4: "111W", \u00E4m: "0N05100Z112C1C041N4J1P0G", \u00E4me: "0N0211051N6C", "\xE4me ": "0N021N8O", \u00E4mn: "100U", \u00E4m\u00E4: "116Z1N0A", "\xE4m\xE4 ": "117E", \u00E4n: "0N0Z105F11BF1C1A1N6O1P4O", "\xE4n ": "102N11NO1N6C1P20", \u00E4na: "100A1C251P3B", \u00E4nap\u00FC: "1P3X", \u00E4nd: "0N0P103P1N48", \u00E4nde: "0N15102U", \u00E4ndi: "0N0F100C11021N60", \u00E4ndig: "0N0L100C1N62", \u00E4ne: "0N0311671N0U1P0S", \u00E4nen: "0N04115L", "\xE4nen ": "0N0711CR", \u00E4ng: "0N0H102X11061C1G", \u00E4ni: "1002112L1N191P12", "\xE4ni ": "114B1N0L1P0I", \u00E4nk: "0N021018110E", \u00E4nn: "0N051033111F", \u00E4nne: "0N0A10241119", \u00E4nner: "0N0H1021", \u00E4no: "1N0J1P1R", \u00E4nt: "101G111Z", \u00E4n\u00E4: "1129", \u00E4o: "11021C04", \u00E4p: "1009110A1C031N0S1P0N", \u00E4r: "0N0Q10FX111K1C2X1NAO1P0I", "\xE4r ": "10RU11031N74", \u00E4ra: "101B1C5A", "\xE4ra ": "10151C4K", \u00E4rd: "10101N32", \u00E4rg: "0N0310091C1J", \u00E4ri: "100F111N1C171N8C", \u00E4rin: "1003110Q1N9I", "\xE4rin ": "11181NCL", \u00E4rl: "100V1N1C", \u00E4s: "0N0B0Y05101A112E1C0N1N0F1P28", \u00E4sa: "100F1P1J", \u00E4si: "0N02112D1C0V1N0M", \u00E4ss: "0N081002112K", \u00E4ss\u00E4: "114I", "\xE4ss\xE4 ": "11A7", \u00E4st: "0N03102A112U1C1A1P0B", \u00E4sta: "101N", \u00E4t: "0N0Y0Y0E102F112Y1C0E1P17", "\xE4t ": "0N0B100F1156", \u00E4ti: "0N021008110D1P1O", \u00E4tt: "0N0M104N11231C0D", "\xE4tt ": "1023", \u00E4tta: "1022", \u00E4u: "0N0I", \u00E4v: "100B111F1P1S", \u00E4vi: "111A1P2O", \u00E4vilo: "1P3L", \u00E4v\u00E4: "113A", \u00E4x: "1006", \u00E4y: "11201P09", \u00E4yt: "115C", \u00E4ytt: "114D", \u00E4ytt\u00E4: "117D", \u00E4z: "0Y031N1C", \u00E4\u00E4: "117Z1C2X", "\xE4\xE4 ": "11B6", \u00E4\u00E4g: "1C4O", \u00E4\u00E4gi: "1C5O", "\xE4\xE4gi ": "1C48", \u00E4\u00E4k: "111A1C2E", \u00E4\u00E4ki: "11031C2U", \u00E4\u00E4l: "112A1C0E", \u00E4\u00E4ll\u00E4: "1175", \u00E4\u00E4n: "11BF1C0M", "\xE4\xE4n ": "11GF", \u00E4\u00E7: "1N0Y", \u00E4\u00F1: "1N0F", \u00E4\u00FD: "1N0F", \u00E4\u0148: "1N0L", \u00E5: "0Z3E108X125K", "\xE5 ": "0Z6C107P12DU", \u00E5b: "0Z0H", \u00E5be: "0Z0E", \u00E5bn: "0Z0A", \u00E5d: "0Z0L100K120G", \u00E5de: "0Z0G100C1209", \u00E5di: "1209", \u00E5e: "0Z0F1204", \u00E5et: "0Z0J", "\xE5et ": "0Z1G", \u00E5g: "0Z04102T", "\xE5g ": "101R", \u00E5ga: "100Y", \u00E5go: "1041", \u00E5gon: "103I", "\xE5gon ": "101Z", \u00E5got: "101O", "\xE5got ": "101O", \u00E5h: "1002", \u00E5k: "100S120I", "\xE5k ": "100M120H", \u00E5l: "0Z0G1017120J", "\xE5l ": "0Z0C100G120C", \u00E5le: "0Z091003120C", \u00E5ll: "101M", \u00E5n: "0Z0J102P120I", "\xE5n ": "1024", \u00E5nd: "0Z0F100D120A", \u00E5ne: "0Z0D1004120C", \u00E5ng: "1043", \u00E5nga: "1029", "\xE5nga ": "101Y", \u00E5p: "1002120F", \u00E5pe: "1003120G", \u00E5r: "0Z2X1033123Q", "\xE5r ": "0Z3H1069124L", \u00E5re: "0Z0C100I120L", \u00E5rl: "0Z08120D", \u00E5rt: "100X1206", \u00E5s: "0Z0810151205", \u00E5st: "0Z02102K1203", \u00E5ste: "103B", "\xE5ste ": "103B", \u00E5t: "0Z03101M120Z", "\xE5t ": "10271205", \u00E5te: "100U120J", \u00E5tt: "0Z03100Z120V", \u00E5v: "10021202", \u00E6: "0T0R0Z32120V134H", "\xE6 ": "0T1C0Z051307", \u00E6b: "0Z0M", \u00E6bl: "0Z0N", \u00E6ble: "0Z1R", \u00E6c: "0T0A", \u00E6d: "0T030Z0I130E", \u00E6de: "0Z0H", \u00E6e: "0Z06", \u00E6f: "0Z031307", \u00E6g: "0Z0P130P", \u00E6ge: "0Z0D", \u00E6i: "1302", \u00E6k: "0Z0M1311", "\xE6k ": "0Z0E", \u00E6kk: "0Z0G1306", \u00E6kke: "0Z17", \u00E6l: "0T030Z1E130G", \u00E6ld: "0Z0N", \u00E6ll: "0Z0B1306", \u00E6lp: "0Z0J", \u00E6m: "0Z04130E", \u00E6n: "0Z1L130J", \u00E6nd: "0Z0W1307", \u00E6ng: "0Z0U", \u00E6nge: "0Z1L", \u00E6nk: "0Z0F1303", \u00E6p: "0T021303", \u00E6q: "0T04", \u00E6r: "0T030Z3H123E132Z", "\xE6r ": "0Z0I120R132M", \u00E6rd: "0Z0F", \u00E6re: "0T030Z33122U", "\xE6re ": "0Z3X124U", \u00E6rer: "0Z1C121D", \u00E6ret: "0Z19120C", "\xE6ret ": "0Z1I120C", \u00E6rk: "0Z0E1305", \u00E6rl: "0Z08120D", \u00E6rt: "0Z0C12131307", "\xE6rt ": "0Z0K122K130C", \u00E6s: "0T050Z0Z130I", \u00E6se: "0T030Z0H", \u00E6st: "0T030Z0P130Y", \u00E6ste: "0Z1G", \u00E6t: "0T040Z0P132Y", "\xE6t ": "0Z0D1303", \u00E6tn: "0Z0A", \u00E6tt: "0Z0G1339", \u00E6tte: "0Z17", \u00E6v: "0T020Z06", \u00E6\u00F0: "1312", \u00E7: "0L0I0P1H1F611N5S", "\xE7 ": "1F3F1N4B", \u00E7a: "0L0W0P1G1F3B1N4D", "\xE7a ": "0L3I0P3G1F1F1N20", \u00E7al: "03021F4S1N19", \u00E7al\u0131: "1F4J", \u00E7al\u0131\u015F: "1F5V", \u00E7ar: "0P0U1F0F1N0Q", \u00E7as: "0P131F06", \u00E7b: "1F0J", \u00E7d: "1N0L", \u00E7e: "1F351N3J", "\xE7e ": "1F0C1N3X", \u00E7ek: "1F4G1N0W", \u00E7ekte: "1F3U", \u00E7i: "1F5A1N55", \u00E7in: "1FAH1N76", "\xE7in ": "1FAR1N9L", \u00E7k: "1F041N09", \u00E7l: "1F0O1N0I", \u00E7m: "1F0K1N0K", \u00E7o: "0L060P0O1F4H", "\xE7o ": "0P1V", \u00E7ok: "1F95", "\xE7ok ": "1FA9", \u00E7t: "1F0M", \u00E7u: "0L031F051N04", \u00E7y: "1N2S", \u00E7\u00E3: "0P18", \u00E7\u00E3o: "0P55", "\xE7\xE3o ": "0P67", \u00E7\u00F5: "0P0A", \u00E7\u00F5e: "0P1B", \u00E7\u00F6: "1F091N0F", \u00E7\u00FC: "1F0I1N0A", \u00E7\u0131: "1F1Y", \u00E7\u0131k: "1F3G", \u00E8: "0L1A0Q2O", "\xE8 ": "0Q6A", \u00E8c: "0L04", \u00E8g: "0L03", \u00E8m: "0L08", \u00E8me: "0L15", \u00E8n: "0L02", \u00E8r: "0L19", \u00E8re: "0L64", "\xE8re ": "0L87", \u00E8s: "0L0R", "\xE8s ": "0L3I", \u00E8t: "0L06", \u00E8v: "0L04", \u00E9a: "0L060S5I", \u00E9ad: "0S26", \u00E9al: "0L0B0S1N", \u00E9an: "0L060O020S6V", \u00E9ana: "0S4N", \u00E9anam: "0SCK", \u00E9ar: "0S3F", \u00E9b: "0L050U02140Q", \u00E9c: "0L180O030P040U021402", \u00E9ci: "0L160P08", \u00E9co: "0L1S", \u00E9cr: "0L13", \u00E9d: "0L0A0O040P070U03140Z", \u00E9di: "0L0M0O0C0P0U1403", \u00E9e: "0L1I", "\xE9e ": "0L5J", \u00E9es: "0L1R", \u00E9f: "0L090O030U021308", \u00E9g: "0L0B13AV146T", "\xE9g ": "13L11455", \u00E9ge: "0L05143V", \u00E9h: "0U1D0Y0O140K", \u00E9ho: "0U2N0Y1R", "\xE9ho ": "0U4A0Y30", \u00E9i: "0O090S5G1402", \u00E9id: "0S4G", \u00E9idi: "0S45", \u00E9idir: "0SF6", \u00E9ig: "0S1Z1402", \u00E9in: "0S2T", \u00E9ir: "0S3D", \u00E9is: "0L020O0T0P030S1J", \u00E9j: "0L0A0O02140D", \u00E9k: "0U0E130A1432", "\xE9k ": "0U031304142O", \u00E9l: "0L0I0O1W0U02130N146U", "\xE9l ": "0O5Y1306143F", \u00E9le: "0L0D0U031434", \u00E9let: "143Q", \u00E9m: "0L0A0O020P0S0U1A0Y0D1414", "\xE9m ": "0P3D0U1M0Y09140U", "\xE9n ": "0O200R080S2W0Z07100412051440", \u00E9ny: "1436", \u00E9o: "0L02", \u00E9p: "0L0P0U05142H", \u00E9q: "0L03", \u00E9r: "0L140O080P0A0U030Y080Z02134Z1481", "\xE9r ": "0U020Z03139V140R", \u00E9ra: "0L150O040P020Y07", \u00E9rd: "0O03141X", \u00E9rde: "143I", \u00E9re: "0L180P03142E", \u00E9ri: "0L2A0O060P0V13031409", \u00E9rt: "1304145V", "\xE9rt ": "1307148P", \u00E9rte: "144L", \u00E9s: "0L110O130P070U031303147V", "\xE9s ": "0L2R0O340P0M146O", \u00E9sz: "143Z", \u00E9t: "0L280O030P030U0B0Y030Z0213101445", "\xE9t ": "0Z0313091440", \u00E9ta: "0L5G0U031402", \u00E9tai: "0L7P", \u00E9tait: "0L8V", \u00E9te: "0L10141V", \u00E9t\u00E9: "0L2C", "\xE9t\xE9 ": "0L3R", \u00E9u: "0L030P031302", \u00E9v: "0L0B0U03141N", \u00E9x: "0O03", \u00E9z: "0U02141F", \u00E9\u00E9: "0R05", \u00EA: "010H0L0W0P2M", "\xEA ": "01160P43", "\xEA-": "0P06", \u00EAc: "0L02", \u00EAm: "0L0B0P08", "\xEAm ": "0P0X", \u00EAme: "0L1M0P02", \u00EAn: "0P0I", \u00EAnc: "0P1L", \u00EAr: "010G", \u00EAre: "010M", \u00EAs: "0P1J", "\xEAs ": "0P6H", \u00EAt: "0L1I", \u00EAte: "0L3P", \u00EAtes: "0L33", \u00EAtr: "0L31", \u00EAtre: "0L52", "\xEAtre ": "0L84", \u00EAv: "0L02", \u00EB: "010B0R05", "\xEB ": "010A0R0B", \u00EBl: "010J0L02", "\xEBl ": "010B0L0D", \u00EBls: "010L", \u00EBn: "01040R04", \u00EBr: "0R02", \u00EC: "0Q0F", "\xEC ": "0Q10", "\xED ": "0O1Z0P030SAX0UFG0Y5P138Z", \u00EDa: "0O4P0P051304", "\xEDa ": "0OBL0P021304", \u00EDan: "0O0S1304", \u00EDas: "0O23", "\xEDas ": "0O37", \u00EDb: "0O020U0Y0Y051303", \u00EDc: "0O0D0P0F0S0B0U1R0Y0D", \u00EDci: "0O0I0P1J0U0C0Y081402", \u00EDcu: "0O0L0P04", \u00EDd: "0O070P060S090U0Y0Y0L13031402", \u00EDf: "0O03130O", \u00EDg: "0O031304140Q", \u00EDk: "0U1K0Y0V131E", \u00EDl: "0P050S2Y0U0T0Y0K130V1404", "\xEDl ": "0S7V0U05130L", \u00EDm: "0O030P040S0I0U6R0Y5813191405", "\xEDm ": "0S130UAS0YAM", \u00EDma: "0U0J0Y0R1326", "\xEDme ": "0U2F0Y2P1404", \u00EDn: "0O090P0C0S180U0T0Y0R1335140J", "\xEDn ": "0O0H0S2F0U040Y0H13201402", \u00EDng: "0P0X", \u00EDnu: "0U031327", \u00EDo: "0O0D0S5T", "\xEDo ": "0O13", \u00EDob: "0S26", "\xEDobh ": "0S7Z", \u00EDoc: "0S35", \u00EDoch: "0S3P", \u00EDom: "0S3D", \u00EDomh: "0S3P", \u00EDomha: "0SAR", \u00EDon: "0S4Y", \u00EDonn: "0S4B", "\xEDonn ": "0SFI", \u00EDos: "0O040S2H", \u00EDp: "0U040Y041402", \u00EDr: "0O050P030S0P0U0M0Y081306141H", \u00EDs: "0O0F0P0A0S0G0U130Y1R130O1404", "\xEDs ": "0O0Q0P0L0S131304", \u00EDs\u0165: "0Y2F", "\xEDs\u0165 ": "0Y45", \u00EDt: "0O050P040S0D0U460Y26130Y143K", "\xEDt ": "0U3V140H", \u00EDta: "0O020U0E0Y2B130M140N", \u00EDte: "0S0W0U1U0Y2F141F", "\xEDte ": "0U1X0Y44", \u00EDv: "0P0B0U1K0Y0H141E", \u00EDve: "0P180U0J140M", \u00EDz: "0U0N0Y08140U", \u00ED\u0161: "0U240Y1V", "\xED\u0161 ": "0U3K0Y3J", \u00ED\u017E: "0U0I0Y06", \u00EE: "0L071550", \u00EEi: "150G", \u00EEl: "150A", \u00EEm: "1519", \u00EEmi: "152Y", \u00EEn: "0L03159M", "\xEEn ": "15FS", \u00EEnc: "156O", \u00EEnce: "155G", \u00EEnt: "157W", \u00EEntr: "1566", \u00EEntre: "154Y", \u00EEt: "0L0B", \u00EE\u021B: "150A", \u00EFn: "0R03", \u00F0: "13KK", "\xF0 ": "13QH", \u00F0a: "134Q", "\xF0a ": "1357", \u00F0i: "137T", "\xF0i ": "138W", \u00F0in: "133X", \u00F0ir: "132I", "\xF0ir ": "133H", \u00F0u: "1386", "\xF0u ": "137M", "\xF0um ": "133C", \u00F0ur: "1384", "\xF0ur ": "13B8", \u00F1: "0O0X1N4D", "\xF1 ": "1NAD", \u00F1a: "0O131N1U", "\xF1a ": "0O141N3B", \u00F1an: "0O1E", \u00F1d: "1N0D", \u00F1e: "0O031N0A", \u00F1i: "1N0T", \u00F1l: "1N0F", \u00F1m: "1N0P", \u00F1o: "0O1H1N05", "\xF1o ": "0O28", \u00F1os: "0O25", "\xF1os ": "0O39", \u00F1y: "1N0U", \u00F1\u00ED: "0O02", \u00F1\u00F3: "0O02", \u00F2: "0Q0T", "\xF2 ": "0Q1Z", "\xF3 ": "0O410P0F0S1G130O143D", \u00F3b: "130214101A0R", \u00F3c: "0P030S0E14041A0Q", \u00F3d: "0O020S071303140M1A0P", \u00F3g: "0O020P030S0L130B140E1A0J", \u00F3i: "0P020S1W13031403", \u00F3ir: "0S24", \u00F3j: "140A1A1P", "\xF3j ": "1A2V", \u00F3k: "131I140Q1A02", \u00F3l: "0O0A0P040S0M131W143B1A0G", "\xF3l ": "0S10130A144S1A0C", \u00F3lo: "0O0N0P021A02", \u00F3m: "0O0J130J1407", \u00F3mo: "0O1G", \u00F3n: "0O330S180U020Y07130X140I", "\xF3n ": "0O8F0S150Y04130B1407", \u00F3na: "0S2R130D140I", "\xF3na\xED ": "0S9A", \u00F3nd: "0O18", \u00F3p: "0P050Y0413071406", \u00F3r: "0O020P0B0S0U0Y02131G140X1A1O1L07", \u00F3ri: "0O020P1813071404", \u00F3s: "0O030P0V0S0J130T140O1A08", "\xF3s ": "0O020P3J0S0V13081409", \u00F3t: "0P020S0A0Y02131F141A1A07", "\xF3t ": "1307141I", \u00F3v: "0O021305140B", \u00F3w: "1A3R", "\xF3w ": "1A46", \u00F3x: "0O030P04", \u00F3\u00F0: "131R", \u00F4: "0L070P060Y1V", "\xF4 ": "0P03", \u00F4j: "0Y13", "\xF4j ": "0Y1W", \u00F4l: "0L020Y0H", \u00F4m: "0P02", \u00F4n: "0P06", \u00F4r: "01040Y09", \u00F4t: "0L0B", \u00F4\u017E: "0Y23", \u00F4\u017Ee: "0Y4V", \u00F4\u017Eem: "0Y45", "\xF4\u017Eem ": "0Y3Z", \u00F5: "0P071C4G", \u00F5b: "1C0L", \u00F5d: "1C09", \u00F5e: "0P0I1C0I", \u00F5es: "0P251C0R", "\xF5es ": "0P2L", \u00F5g: "1C03", \u00F5h: "1C0O", \u00F5ht: "1C14", \u00F5i: "1C4E", "\xF5i ": "1C2A", \u00F5ig: "1C45", \u00F5igu: "1C34", \u00F5igus: "1C7J", \u00F5ik: "1C4G", "\xF5ik ": "1C4B", \u00F5it: "1C15", \u00F5l: "1C0I", \u00F5n: "1C10", \u00F5nn: "1C18", \u00F5p: "1C1K", \u00F5pe: "1C1O", \u00F5peta: "1C4V", \u00F5pi: "1C15", \u00F5pp: "1C1R", \u00F5r: "1C0M", \u00F5s: "1C06", \u00F5t: "1C11", \u00F5tt: "1C1E", \u00F5u: "1C0Y", \u00F5us: "1C15", \u00F5v: "1C04", \u00F5\u00F5: "1C03", \u00F6: "0N15107K112B133T144T1C1E1F3Z1N661P9F", "\xF6 ": "1006111A13091C081P28", \u00F6a: "1002", \u00F6b: "140U", \u00F6bb: "141J", \u00F6c: "0N0G10061404", \u00F6d: "0N02100T11061302140E1C0C1F0H1P7O", "\xF6d ": "100K14061C0U1P82", \u00F6di: "100214061P2X", \u00F6do: "1P2N", \u00F6e: "1C08", \u00F6f: "0N07130S1F021P3Y", \u00F6fi: "1P1E", \u00F6fo: "1P5B", \u00F6g: "0N0B100O131R140E1C061P0O", \u00F6h: "0N07110A1403", \u00F6i: "110L", \u00F6j: "100C11031403", \u00F6k: "100V1107130R14171C031F061N0N1P0C", \u00F6l: "0N05100O1106131N14201C041F101N111P14", \u00F6m: "100J1108130C140J1F051N191P29", \u00F6me: "14041F021N2D", \u00F6mo: "1P2C", \u00F6n: "0N15100O110L1315143M1C031F2G1N0R1PF8", "\xF6n ": "0N07100G11111303141M1F051PN4", \u00F6ni: "0N0411031P1T", \u00F6nn: "0N141102130E1417", \u00F6p: "0N02100Q1105130214031F0K1N1Q1P1P", "\xF6p ": "10021F021N2A1P2E", \u00F6r: "0N0W10981108131K142S1F3B1N611P09", "\xF6r ": "0N0310BI1307140E1F091N0C", \u00F6ra: "1038", "\xF6ra ": "1042", \u00F6rd: "0N02101714041F1H1N2E", \u00F6re: "0N0E100Z140D1F191N1P", \u00F6rj: "1012", \u00F6rr: "101B", \u00F6rs: "0N02103R", \u00F6rst: "0N03102L", \u00F6rt: "0N0N100K1304141O1F0G1N09", \u00F6rt\u00E9n: "1432", \u00F6r\u00E4: "100M110J1N2E", "\xF6r\xE4n ": "110A1N4D", \u00F6r\u00FC: "140L1F3S1N1X", \u00F6s: "0N0H100L110H1307141F1C031F0B1N051P0N", \u00F6ssze: "1432", \u00F6t: "0N07100R110B130J142B1C0G1F0N1N061P09", \u00F6ta: "10031C1G", \u00F6tt: "10121105130F142S", "\xF6tt ": "100Y144F", \u00F6v: "101Q110214121F041P0L", \u00F6ve: "10471411", \u00F6ver: "105N", "\xF6ver ": "103Q", \u00F6w: "1N23", \u00F6y: "110I1F43", \u00F6yl: "1FAC", \u00F6yle: "1FAX", \u00F6yled: "1F73", \u00F6z: "141P1F1G1N6O", "\xF6z ": "14041F0O1N4Y", \u00F6zl: "14041F181N2X", \u00F6zle: "14071F0W1N3M", \u00F6z\u00FC: "14081F0V1N49", \u00F6z\u00FCn: "1F081N41", \u00F6z\u00FCni: "1N43", \u00F6\u00DF: "0N05", \u00F6\u00E4: "1103", \u00F6\u00F1: "1N0H", \u00F6\u00F6: "11021C1S", \u00F6\u00F6d: "1C17", \u00F6\u00F6t: "1C1K", \u00F6\u00FD: "1N2Z", \u00F6\u011F: "1F1E", \u00F6\u011Fr: "1F2Y", \u00F6\u011Fre: "1F3D", \u00F6\u0148: "1N0O", \u00F8: "0Z371233", "\xF8 ": "0Z051207", \u00F8b: "0Z0X", \u00F8be: "0Z0M", \u00F8bt: "0Z0L", \u00F8d: "0Z1Q120Z", "\xF8d ": "0Z0Q120B", \u00F8de: "0Z0V120L", "\xF8de ": "0Z18120Y", \u00F8dt: "0Z0O1209", "\xF8dt ": "0Z1F120L", \u00F8e: "0Z041203", \u00F8f: "0Z031204", \u00F8g: "0Z0T1203", \u00F8ge: "0Z0N", \u00F8j: "0Z0W", "\xF8j ": "0Z0C", \u00F8je: "0Z0K", \u00F8k: "0Z05120S", \u00F8ke: "120M", \u00F8l: "0Z0K120S", \u00F8le: "0Z0A120K", \u00F8lg: "0Z09120E", \u00F8m: "0Z0H120G", \u00F8mm: "0Z0E120G", \u00F8n: "0Z151211", "\xF8n ": "0Z0B", \u00F8nn: "0Z07120M", \u00F8ns: "0Z0W120V", \u00F8nsk: "0Z251227", \u00F8nske: "0Z2L1227", \u00F8p: "120P", \u00F8pe: "120L", \u00F8pt: "120C", \u00F8r: "0Z3P124D", "\xF8r ": "0Z1C1227", \u00F8re: "0Z1Z122H", "\xF8re ": "0Z2O1243", \u00F8rer: "0Z191213", \u00F8rg: "0Z0F1202", \u00F8rk: "0Z061209", \u00F8rn: "0Z0M1202", \u00F8rr: "0Z05120A", \u00F8rs: "0Z0M1213", \u00F8rst: "0Z1I121Q", \u00F8rt: "0Z0J120L", \u00F8s: "0Z0J120R", \u00F8se: "0Z051208", \u00F8st: "0Z0F120N", \u00F8t: "0Z02120Q", \u00F8te: "120C", \u00F8tt: "0Z02120N", \u00F8v: "0Z0I120M", \u00F8vd: "1209", \u00F8ve: "0Z0G120G", \u00F8y: "1212", "\xF8y ": "1209", \u00F8ye: "120K", \u00F8yk: "1207", \u00F8yn: "120A", \u00F9: "0L060Q0E", "\xF9 ": "0L0D0Q0X", \u00FA: "0O0K0P0C0S3A0U0C0Y46135N141I", "\xFA ": "0O0C0S4O0Y56134Z140L", \u00FAa: "130E", \u00FAb: "0O020P020Y0H", \u00FAc: "0S060Y0P1402", \u00FAd: "0P020Y05", \u00FAg: "13031415", \u00FAgy: "141S", "\xFAgy ": "144A", \u00FAi: "0S2C130S", \u00FAil: "0S21", \u00FAin: "0S2I1311", \u00FAir: "0S1U1308", \u00FAj: "1415", \u00FAl: "0O070P050S0I0Y06130A1410", \u00FAlt: "0O0L0P0J140F", \u00FAm: "0O040P040U031308", \u00FAn: "0O0K0P050S0Y133K1404", "\xFAn ": "0O1C0S171372", \u00FAp: "0O020U040Y171304", \u00FApi: "0O050P050Y1T", \u00FAr: "0S0O0Y06130U1409", \u00FAs: "0O070P060S0J0U060Y0G130Z140I", \u00FAt: "0O030P020U030Y0O131L140H", \u00FAz: "0Y0S140A", \u00FB: "0L06", "\xFB ": "0L03", \u00FBr: "0L04", \u00FBt: "0L04", "\xFC ": "1F3A1P0P", \u00FCa: "1C0A", \u00FCb: "0N1H1F031N07", \u00FCbe: "0N261F03", \u00FCber: "0N53", \u00FCc: "0N151F0C", \u00FCck: "0N1E", \u00FCd: "0N0514071C101F0A1P0L", "\xFCd ": "1C17", \u00FCe: "0O02", \u00FCg: "0N0A140E1C041N07", \u00FCh: "0N0V14021C0W", \u00FChe: "0N091C1A1F02", \u00FChi: "1C16", \u00FCk: "141E1C0N1F1T1N0H1P6Z", "\xFCk ": "141E1F2T1N0D1P1J", \u00FCki: "1P5C", "\xFCki ": "1P6C", \u00FCko: "1P41", \u00FCks: "140V1C1Y1F0K", \u00FCk\u00F6: "14021P28", \u00FCl: "0N08144U1C1F1F181N0X1P1C", "\xFCl ": "142M1F061P0W", \u00FCle: "0N04141A1C241F0P1N0F", \u00FClt: "141O1F0A", \u00FCm: "0N0314041C0E1F291N2E1P06", "\xFCm ": "1F341N23", \u00FCn: "0N0L142G1C091F7P1N7W1P19", "\xFCn ": "1F6M1N2V1P1M", \u00FCnd: "0N071C0E1F311N35", \u00FCni: "1F0C1N3L1P0D", \u00FCnk: "14411F0B", "\xFCnk ": "1497", \u00FCn\u00FC: "1F6F1N0G", \u00FCn\u00FCy: "1F45", \u00FCn\u00FCyo: "1F5L", \u00FCp: "1C061F0C1N0I1P0L", \u00FCr: "0N26140C1C0B1F3B1N2Z1P0A", "\xFCr ": "0N211F1Y1P0E", \u00FCrl: "0N031F0I1N2G", \u00FCr\u00FC: "1F2M1N0F", \u00FCs: "0N0K14071C0K1F0P1N0J", \u00FCsi: "1C1H", \u00FCss: "0N0R1402", \u00FCt: "0N0A140K1C121F1B1N0C1P0B", \u00FCtl: "1C2X1F02", \u00FCtle: "1C3M", \u00FCtles: "1C58", \u00FCv: "14091F0F", \u00FCy: "1F3E", \u00FCyo: "1F64", \u00FCyor: "1F6Y", "\xFCyor ": "1F4V", \u00FCz: "14091F2U1N0Q", \u00FCze: "14071F2Z1N0B", \u00FC\u00DF: "0N04", \u00FC\u00E7: "1F131N46", \u00FC\u00E7i: "1N6X", \u00FC\u00E7in: "1N9O", "\xFC\xE7in ": "1NCP", \u00FC\u00FC: "1C12", \u00FC\u00FCd: "1C23", \u00FC\u00FD: "1N1T", \u00FC\u011F: "1F0S", \u00FC\u0148: "1N0U", \u00FC\u015F: "1F2M1N23", \u00FC\u015F\u00FC: "1F581N2J", \u00FC\u015F\u00FCn: "1F5E1N3F", \u00FD: "0U3V0Y4713171NG9", "\xFD ": "0U5W0Y6P13051N1F", \u00FDa: "13021NIG", "\xFDa ": "1N31", \u00FDad: "1N2J", \u00FDal: "1N6I", \u00FDaly: "1N5O", "\xFDaly ": "1N6I", \u00FDan: "13031N62", \u00FDandy: "1N3Y", \u00FDar: "1NCY", "\xFDar ": "1N90", \u00FDary: "1N4P", \u00FDaryn: "1N4P", \u00FDa\u015F: "1N3H", \u00FDc: "0U0Q0Y1C", \u00FDch: "0U1E0Y3G", "\xFDch ": "0U1Y0Y3N", \u00FDd: "0U0B1N42", \u00FDdy: "1N2Q", \u00FDe: "1N6H", \u00FDer: "1N5S", \u00FDerd: "1N3I", \u00FDerde: "1N4O", \u00FDet: "1N2C", \u00FDg: "1N0D", \u00FDi: "1N31", \u00FDip: "1N3D", "\xFDip ": "1N4O", \u00FDj: "130C1N0F", \u00FDl: "0U070Y0813031N36", \u00FDla: "1N2T", \u00FDle: "0U0713041N32", \u00FDm: "0U130Y1E1N0V", "\xFDm ": "0U1P0Y2W", \u00FDn: "0U020Y03130D1N1J", \u00FDo: "1N26", \u00FDok: "1N32", \u00FDr: "0U04130P1N0D", \u00FDs: "0U040Y04130H1N0M", \u00FDt: "0U0W0Y0F130K1N54", "\xFDt ": "0U1P1N0U", \u00FDtd: "1N5R", \u00FDtdy: "1N7T", "\xFDtdy ": "1N7R", \u00FDtm: "1N2A", \u00FDu: "1N1G", \u00FDv: "0U0F0Y0K", \u00FDy: "1N31", \u00FDyl: "1N2D", \u00FD\u00E4: "1NDC", \u00FD\u00E4n: "1N71", "\xFD\xE4n ": "1N42", \u00FD\u00E4nd: "1N4U", \u00FD\u00E4ndi: "1N6L", \u00FD\u00E4r: "1NHB", "\xFD\xE4r ": "1N9M", \u00FD\u00E4rdi: "1N3W", \u00FD\u00E4ri: "1NAE", \u00FD\u00E4rin: "1NCN", \u00FD\u00E4rsi: "1N43", \u00FD\u00F6: "1N0U", \u00FD\u00FC: "1N1C", \u00FD\u00FD: "1N1I", \u00FE: "13AC", \u00FEa: "137O", \u00FEar: "132G", \u00FEa\u00F0: "13C2", "\xFEa\xF0 ": "13I7", \u00FEe: "1361", \u00FEegar: "135G", \u00FEes: "134S", \u00FEess: "137O", \u00FEessi: "135G", \u00FEet: "134Q", \u00FEett: "137M", \u00FEetta: "13EW", \u00FEi: "1326", \u00FEig: "1328", "\xFEig ": "133M", \u00FEr: "1310", \u00FEv: "1317", \u00FEv\u00ED: "132G", "\xFEv\xED ": "133Y", \u00FE\u00E9: "131N", \u00FE\u00E9r: "133O", "\xFE\xE9r ": "135X", \u00FE\u00FA: "134M", "\xFE\xFA ": "139R", \u0101: "0T0U1DEC", "\u0101 ": "0T0C1D8O", \u0101b: "0T031D0E", \u0101c: "1D13", \u0101d: "1D2G", \u0101da: "1D2D", \u0101d\u0101: "1D27", \u0101j: "1D40", \u0101ja: "1D5V", "\u0101ja ": "1D5J", \u0101ji: "1D1Z", \u0101ju: "1D5Y", "\u0101ju ": "1D52", \u0101k: "1D3D", "\u0101k ": "1D5M", \u0101ka: "1D3E", \u0101l: "0T061D10", \u0101m: "0T031D2E", "\u0101m ": "1D79", \u0101n: "0T061D0W", \u0101p: "1D0Z", "\u0101p\u0113c ": "1D5U", \u0101r: "0T081D2W", \u0101rd: "1D2E", \u0101s: "0T0X1D37", "\u0101s ": "0T241DAS", \u0101t: "0T0F1D3B", "\u0101t ": "1D5I", \u0101v: "0T091D0O", \u0101vi: "0T0H", \u0101z: "1D07", \u0101\u0161: "1D0C", \u0103: "15GA", "\u0103 ": "15N9", "\u0103-": "151H", \u0103b: "1507", \u0103c: "151I", \u0103cu: "153E", \u0103cut: "155F", "\u0103cut ": "155V", \u0103d: "150C", \u0103i: "150P", \u0103l: "150O", \u0103m: "1515", \u0103n: "150L", \u0103p: "150H", \u0103r: "1536", \u0103ri: "152O", \u0103s: "151E", \u0103t: "151W", \u0103u: "150V", \u0103z: "150U", \u0103\u021B: "150J", \u0105: "1A5Z1B41", "\u0105 ": "1A821BCX", \u0105c: "1A1J", \u0105d: "1A20", \u0105s: "1A051B08", \u0105\u017C: "1A0Z", \u0107: "0V341A55", "\u0107 ": "0V0O1AC4", \u0107e: "0V35", "\u0107e ": "0V5E", \u0109: "1O3V", "\u0109 ": "1O0B", \u0109a: "1O1M", \u0109ar: "1O0R", \u0109e: "1O1R", "\u0109e ": "1O13", \u0109i: "1O4T", "\u0109i ": "1O2P", \u0109ia: "1O0X", \u0109io: "1O0W", \u0109iu: "1O2A", \u0109iuj: "1O1Z", \u0109j: "1O03", \u0109o: "1O0G", \u0109u: "1O3B", "\u0109u ": "1O5J", \u010D: "030V0U5C0V3X0Y7S1B1F1D08", "\u010D ": "030E0U1Q0V0A0Y1E1B02", \u010Da: "03080U1S0V1Q0Y38", \u010Dak: "0V0Q0Y1O", \u010Das: "0U2K0V070Y33", \u010De: "03070U3G0V2B0Y241D04", \u010Der: "03030U1S0V0H0Y2S", \u010Di: "030L0U290V2Q0Y3M1B4W1D03", "\u010Di ": "03160U0H0V1K0Y1Z", \u010Dia: "0Y151B8R", "\u010Dia ": "0Y0V1B5J", \u010Diau: "1B6K", "\u010Diau ": "1BBV", \u010Dit: "03060U200V1S0Y1E", \u010Diu: "1B1W", \u010Dk: "0U120V0R0Y1R", \u010Dka: "0U0W0V0I0Y1Y", \u010Dn: "0U150V100Y13", \u010Do: "0U080V0B0Y5X", "\u010Do ": "0YCO", \u010Dt: "0U0K0Y0D", \u010Du: "03040U040V0O0Y0U1D08", \u010D\u00ED: "0U1P0Y20", \u010D\u00EDt: "0U0L0Y2H", \u010D\u00EDta: "0U0K0Y3Y", \u010D\u010D: "0319", \u010F: "0U0I0Y0Z", "\u010F ": "0U100Y1H", \u010Fa: "0U040Y0T", \u0111: "0V0W", \u0113: "0T0U1D8M", "\u0113 ": "0T0R1D14", \u0113b: "0T06", \u0113c: "0T051D0T", "\u0113c ": "1D2Z", \u0113d: "0T051D11", \u0113g: "0T021D09", \u0113j: "1D39", \u0113ja: "1D5T", "\u0113ja ": "1D5J", \u0113ji: "1D1Z", \u0113ju: "1D3J", "\u0113ju ": "1D42", \u0113k: "1D1B", \u0113ki: "1D2L", \u0113l: "0T031D25", \u0113la: "1D24", \u0113m: "0T071D0X", \u0113n: "0T0B1D0F", \u0113p: "1D08", \u0113r: "0T081D26", \u0113s: "0T0I1D26", "\u0113s ": "0T101D72", \u0113t: "0T031D3H", "\u0113t ": "1D4Z", \u0113tu: "0T021D3Y", "\u0113tu ": "1D52", \u0113v: "1D0D", \u0113\u0123: "1D0A", \u0113\u013C: "1D0C", \u0113\u0161: "1D0D", \u0117: "1B6P", "\u0117 ": "1B6F", \u0117d: "1B0L", \u0117g: "1B18", \u0117gs: "1B21", \u0117gst: "1B3A", \u0117j: "1B4U", \u0117ja: "1B3Y", \u0117jau: "1B3S", "\u0117jau ": "1B7G", \u0117je: "1B1E", \u0117jo: "1B6J", "\u0117jo ": "1B91", \u0117k: "1B0Z", \u0117l: "1B2K", "\u0117l ": "1B46", \u0117m: "1B0T", \u0117n: "1B08", \u0117p: "1B06", \u0117r: "1B0S", \u0117ra: "1B1N", \u0117s: "1B36", "\u0117s ": "1B60", \u0117si: "1B1V", \u0117t: "1B2M", \u0117ti: "1B4H", "\u0117ti ": "1B69", \u0117v: "1B0K", \u0117\u010D: "1B0E", \u0117\u017E: "1B05", \u0119: "1AAM1B11", "\u0119 ": "1AHC1B1W", \u0119c: "1A1N", \u0119d: "1A27", \u0119dz: "1A3B", \u0119dzie: "1A4M", \u0119k: "1A10", \u0119s: "1A0J1B1X", "\u0119s ": "1B4Q", \u011B: "0UBD", "\u011B ": "0U9I", \u011Bc: "0U18", \u011Bd: "0U1U", \u011Bd\u011B: "0U24", "\u011Bd\u011Bl ": "0U2N", \u011Bj: "0U1M", \u011Bk: "0U1O", \u011Bl: "0U89", "\u011Bl ": "0U6S", \u011Bla: "0U5Y", \u011Blal: "0U3W", "\u011Blal ": "0U41", \u011Blat: "0U3X", "\u011Blat ": "0U5E", \u011Bli: "0U1Q", "\u011Bli ": "0U2F", \u011Bl\u00E1: "0U1S", \u011Bn: "0U0X", \u011Bs: "0U0W", \u011Bt: "0U2U", "\u011Bt ": "0U26", \u011Bz: "0U0I", \u011B\u0159: "0U0Q", \u011B\u017E: "0U0P", \u011D: "1O36", \u011Da: "1O23", \u011Das: "1O27", "\u011Das ": "1O3G", \u011De: "1O0P", \u011Di: "1O4M", "\u011Di ": "1O2W", \u011Din: "1O1M", "\u011Din ": "1O26", \u011Dis: "1O37", "\u011Dis ": "1O4V", \u011Do: "1O20", "\u011Do ": "1O1I", \u011Don: "1O0Q", \u011Du: "1O0N", \u011F: "1F63", \u011Fa: "1F0P", \u011Fd: "1F06", \u011Fe: "1F0R", \u011Fi: "1F95", "\u011Fi ": "1F39", \u011Fil: "1F7Q", "\u011Fil ": "1F5I", \u011Fim: "1F4O", \u011Fin: "1F8G", \u011Fini: "1F6U", "\u011Fini ": "1F8J", \u011Fl: "1F1A", \u011Fm: "1F0E", \u011Fr: "1F1X", \u011Fre: "1F30", \u011Fu: "1F3T", \u011Fun: "1F6A", \u011Funu: "1F5O", "\u011Funu ": "1F7C", \u011F\u00FC: "1F0S", \u011F\u0131: "1F5K", \u011F\u0131m: "1F45", \u011F\u0131n: "1F7C", \u011F\u0131n\u0131: "1F61", "\u011F\u0131n\u0131 ": "1F7M", \u0123: "1D0D", \u0123i: "1D0L", \u012B: "0T0W1D8D", "\u012B ": "0T131D17", \u012Ba: "0T05", \u012Bb: "0T031D1X", \u012Bba: "1D49", "\u012Bba ": "1D2W", "\u012Bbas ": "1D5Q", \u012Bbu: "1D2V", "\u012Bbu ": "1D3O", \u012Bc: "0T0D1D0D", \u012Bd: "0T041D1N", \u012Bdz: "1D50", \u012Bg: "1D2Y", \u012Bga: "1D38", \u012Bgi: "1D3O", "\u012Bgi ": "1D4A", \u012Bgs: "1D3M", "\u012Bgs ": "1D4M", \u012Bj: "1D1L", \u012Bja: "1D2E", "\u012Bja ": "1D33", \u012Bk: "1D0S", "\u012Bk ": "1D2K", \u012Bl: "0T021D0J", \u012Bm: "0T041D0L", \u012Bn: "0T041D0Z", \u012Bp: "1D05", \u012Br: "0T041D0M", \u012Bs: "0T0B1D1A", "\u012Bs ": "0T0F1D1Z", \u012Bst: "0T031D29", \u012Bt: "0T041D32", "\u012Bt ": "1D6N", \u012Bti: "0T021D2F", \u012Bties: "1D6K", \u012Bv: "0T051D1S", \u012Bvo: "1D3C", \u012Bx: "0T03", \u012Bz: "1D0C", \u012B\u0161: "1D0D", \u012F: "1B2H", "\u012F ": "1B68", \u012Fd: "1B08", \u012Fp: "1B04", \u012Fs: "1B0S", \u012Ft: "1B06", \u012Fv: "1B0B", \u012F\u0161: "1B04", \u012F\u017E: "1B0D", \u0131: "1FIA1L05", "\u0131 ": "1FJR", \u0131c: "1F0J", \u0131d: "1F121L06", \u0131f: "1F08", \u0131k: "1F4Q", "\u0131k ": "1F65", \u0131l: "1F4N", "\u0131l ": "1F3M", \u0131la: "1F33", \u0131m: "1F8D", "\u0131m ": "1FEZ", \u0131m\u0131: "1F49", \u0131n: "1FFG", "\u0131n ": "1FFK", \u0131na: "1F4R", "\u0131na ": "1F4X", \u0131nd: "1F9C", \u0131nda: "1FA4", "\u0131nda ": "1F9I", \u0131n\u0131: "1FD9", "\u0131n\u0131 ": "1FB3", \u0131p: "1F0A", \u0131r: "1F6S", "\u0131r ": "1F6Z", \u0131r\u0131: "1F3D", \u0131s: "1F1N", \u0131s\u0131: "1F3F", \u0131t: "1F0C", \u0131y: "1F5K", \u0131yo: "1FAH", \u0131yor: "1FBU", "\u0131yor ": "1F73", \u0131yoru: "1F64", \u0131z: "1F4Y", "\u0131z ": "1F79", \u0131\u00E7: "1F05", \u0131\u011F: "1F2W", \u0131\u011F\u0131: "1F7C", \u0131\u011F\u0131n: "1F5B", \u0131\u011F\u0131n\u0131: "1F4Z", \u0131\u015F: "1F42", \u0131\u015F\u0131: "1F2S", \u0135: "1O0J", \u0135a: "1O02", \u0135e: "1O04", \u0135o: "1O1A", "\u0135o ": "1O0U", \u0135oj: "1O0U", \u0135u: "1O07", \u0137: "1D0P", \u0137e: "1D07", \u0137i: "1D0V", \u0137\u012B: "1D08", \u013C: "1D21", "\u013C ": "1D0E", \u013Ca: "1D0U", \u013Ci: "1D0G", \u013Co: "1D19", \u013Cot: "1D4A", \u013Coti: "1D5C", "\u013Coti ": "1DCW", \u013Cu: "1D0P", \u013C\u0101: "1D0C", \u013C\u016B: "1D0D", \u013E: "0Y33", "\u013E ": "0Y0P", \u013Ea: "0Y26", "\u013Ea ": "0Y2T", \u013Ek: "0Y1O", \u013Eko: "0Y2D", "\u013Eko ": "0Y3K", \u013Em: "0Y1C", \u013Emi: "0Y3G", "\u013Emi ": "0Y5U", \u013Eo: "0Y0H", \u013Eu: "0Y13", \u013Eud: "0Y1Q", \u013E\u00FA: "0Y0N", \u0142: "1AD6", "\u0142 ": "1A9M", \u0142a: "1A7F", "\u0142a ": "1A7U", \u0142b: "1A10", \u0142e: "1A66", \u0142em: "1A8V", "\u0142em ": "1ACC", "\u0142e\u015B ": "1A3N", \u0142o: "1A5O", "\u0142o ": "1A4S", \u0142u: "1A1Q", \u0142y: "1A2O", "\u0142y ": "1A31", \u0144: "1A111L03", \u0144c: "1A0Z", \u0146: "1D47", \u0146a: "1D3A", "\u0146a ": "1D80", \u0146am: "1D2O", "\u0146am ": "1D3F", \u0146e: "1D0G", \u0146i: "1D1K", "\u0146i ": "1D50", "\u0146iem ": "1D58", \u0146o: "1D0D", \u0146u: "1D16", "\u0146u ": "1D3V", \u0146\u0101: "1D07", \u0146\u0161: "1D2D", "\u0146\u0161 ": "1D9L", \u0148: "0U0B0Y131N7Z", "\u0148 ": "0U0J0Y151NH4", \u0148a: "0Y111N31", "\u0148a ": "0Y1J1N5Q", \u0148d: "1N0F", \u0148e: "1N0W", \u0148i: "1N2O", \u0148iz: "1N3Y", \u0148k: "1N0M", \u0148l: "1N16", \u0148m: "1N11", \u0148y: "1N2A", \u0148yz: "1N2L", \u014D: "0T11", "\u014D ": "0T11", \u014Db: "0T02", \u014Dl: "0T03", \u014Dm: "0T0S", \u014Dma: "0T0J", \u014Dm\u0101: "0T1C", "\u014Dm\u0101s ": "0T2G", \u014Dn: "0T0H", "\u014Dn ": "0T0L", \u014Dr: "0T08", \u014Ds: "0T0I", "\u014Ds ": "0T10", \u014Dt: "0T02", \u0151: "143H", "\u0151 ": "1436", \u0151b: "140J", \u0151d: "140K", \u0151k: "140U", \u0151l: "1425", "\u0151l ": "142V", \u0151n: "140J", \u0151r: "140S", \u0151s: "1418", \u0151t: "141O", "\u0151t ": "141L", \u0151z: "140I", \u0153: "0L040T02", \u0153l: "0T02", \u0153n: "0T02", \u0153u: "0L07", \u0155: "0Y02", \u0159: "0U6R", \u0159e: "0U85", "\u0159e ": "0U22", \u0159eb: "0U2F", \u0159ebu: "0U2S", \u0159ebuj: "0U3T", \u0159ed: "0U29", \u0159ek: "0U4L", \u0159ekl: "0U5D", "\u0159ekl ": "0U5F", \u0159es: "0U1T", \u0159i: "0U3Z", "\u0159i ": "0U1U", \u0159\u00E1: "0U0T", \u0159\u00ED: "0U4B", \u015B: "1A5Z", "\u015B ": "1A4S", \u015Bc: "1A2J", \u015Bci: "1A58", \u015Bl: "1A20", \u015Bm: "1A1Z", \u015Bmy: "1A2Y", "\u015Bmy ": "1A48", \u015Bn: "1A15", \u015B\u0107: "1A21", "\u015B\u0107 ": "1A45", \u015D: "1O2C", \u015Da: "1O27", \u015Daj: "1O0S", \u015Dat: "1O1S", \u015Datas: "1O3F", \u015De: "1O05", \u015Di: "1O3P", "\u015Di ": "1O4D", \u015Din: "1O0Q", \u015Dl: "1O04", \u015Do: "1O0D", \u015Dp: "1O03", \u015Dt: "1O0I", \u015Du: "1O08", \u015Dv: "1O02", \u015F: "150H1F731N72", "\u015F ": "15031F2W1N2Q", \u015Fa: "15031F3L1N40", \u015Far: "1F311N1W", \u015Fd: "1N1R", \u015Fe: "15031F4F1N2O", \u015Fey: "1F7G", "\u015Fey ": "1F55", \u015Fe\u00FDle: "1N43", \u015Fg: "1F081N11", \u015Fi: "150I1F351N32", \u015Fim: "1F2W1N0K", \u015Fk: "1F171N05", \u015Fl: "1F251N2Y", \u015Fla: "1F3R1N2H", \u015Fm: "1F211N1F", \u015Fma: "1F4D1N1J", \u015Fo: "1F021N1R", \u015Ft: "150C1F2Q1N08", \u015Ft\u0131: "1F33", \u015Fu: "1F131N25", "\u015Fu ": "1F0Z1N2C", \u015Fv: "1F05", \u015Fy: "1F021N2S", \u015F\u00E7: "1F04", \u015F\u00FC: "1F251N1J", \u015F\u00FCn: "1F4Q1N2E", \u015F\u00FD: "1N0M", \u015F\u0131: "1F3O", \u0161: "0U6T0V7E0Y6X1B821C031D5E", "\u0161 ": "0U5D0V610Y5Q1BCG1D2X", \u0161a: "0U080V1Q0Y121B1Q1D25", \u0161al: "0V0E0Y0C1B1O", \u0161an: "0U060V0J0Y051B041D4Y", \u0161ana: "1D3M", \u0161au: "1B231D15", \u0161b: "1B04", \u0161e: "0U3U0V240Y341B0Q1D0G", \u0161ec: "0U1S", \u0161ech: "0U2V", \u0161echn: "0U3P", "\u0161eit ": "1D58", \u0161el: "0U2U1B02", "\u0161el ": "0U48", \u0161et: "0U0H0V070Y4L", \u0161etk: "0Y5N", \u0161etko: "0Y42", \u0161g: "1B0A", \u0161i: "0U1C0V180Y351B4Q1D1N", "\u0161i ": "0U0J0V0R0Y0G1B0H1D3Z", \u0161ia: "0Y151B24", \u0161ie: "0Y5B1B0E1D13", "\u0161ie ": "0Y3E1B03", \u0161iel: "0Y4S", "\u0161iel ": "0Y5W", \u0161im: "0U060V0E0Y071B1K", \u0161it: "0U0B0V0B1B4R", \u0161ita: "1B3I", \u0161k: "0U100V100Y151B2E", \u0161ka: "0U080V0L0Y0Q1B30", \u0161kai: "1B39", "\u0161kai ": "1B6L", \u0161l: "0U0T0V0P0Y0Y1B0B", \u0161m: "1B0E", \u0161n: "0U090V0J0Y0D1B07", \u0161o: "0U030V060Y0A1B0L1D1L", "\u0161o ": "1B0G1D30", \u0161od: "1D1Z", \u0161odie: "1D6G", \u0161p: "0U0H0V020Y081B04", \u0161r: "1B041D04", \u0161s: "0Y031B0G1D06", \u0161t: "0U2J0V500Y221B20", \u0161ta: "0V600Y041B1T", "\u0161ta ": "0U020V6H1B0P", \u0161te: "0U030V150Y2D1B0I", "\u0161te ": "0U040V0M0Y3I1B04", \u0161to: "0V6B1B0F", "\u0161to ": "0V7E1B0G", \u0161t\u011B: "0U2Y", "\u0161t\u011B ": "0U3L", \u0161u: "0U050V090Y091B0M1D18", "\u0161u ": "0U020V0E0Y0E1B051D4U", \u0161v: "0U020V030Y041B0U", \u0161y: "1B0I", \u0161\u00ED: "0U250Y0X", "\u0161\xED ": "0U3B0Y1H", \u0161\u0101: "1D0K", \u0161\u010D: "1B0F", \u0161\u0117: "1B0I", \u0161\u0119: "1B06", \u0161\u012B: "1D0U", \u0161\u012F: "1B09", \u0161\u0137: "1D0I", \u0161\u0165: "0U0D0Y0O", \u0161\u0165a: "0U0K0Y1Q", \u0161\u0165ast: "0U160Y38", \u0163: "150J", \u0163i: "150V", \u0165: "0U0B0Y5N", "\u0165 ": "0U0G0YCA", \u0165a: "0U0A0Y2H", "\u0165a ": "0Y33", \u016B: "0T091B211D39", "\u016B ": "1B04", \u016Bc: "0T02", \u016Bd: "0T031B0D1D15", \u016Bdz: "1D30", "\u016Bdzu ": "1D6T", \u016Bk: "1B0O1D0A", \u016Bl: "1B06", \u016Bm: "0T021B02", \u016Bn: "0T031B0H", \u016Bp: "1B061D08", \u016Br: "0T0B1B0U1D0A", \u016Bs: "0T031B321D2M", "\u016Bs ": "0T021B561D6L", \u016Bsu: "1D34", "\u016Bsu ": "1D3Y", \u016Bs\u0173: "1B2S", "\u016Bs\u0173 ": "1B4G", \u016Bt: "0T021B0Y1D20", "\u016Bt ": "1B0H1D38", \u016Bti: "1B1J1D14", \u016Btu: "1B041D1Z", \u016Bz: "1B0E1D0B", \u016D: "1O26", "\u016D ": "1O3X", \u016Da: "1O07", \u016Dd: "1O0H", \u016De: "1O07", \u016Dg: "1O04", \u016Di: "1O03", \u016Dl: "1O03", \u016Dr: "1O0I", \u016Ds: "1O0A", \u016Dt: "1O0M", \u016Dto: "1O0R", \u016Dv: "1O02", \u016Dz: "1O06", \u016F: "0U2T", "\u016F ": "0U17", \u016Fj: "0U1R", "\u016Fj ": "0U2W", \u016Fl: "0U0J", \u016Fm: "0U0I", \u016Fs: "0U0N", \u016F\u017E: "0U1T", \u016F\u017Ee: "0U2N", \u0171: "140Q", "\u0171 ": "140N", \u0171n: "140K", \u0173: "1B2D", "\u0173 ": "1B7Z", \u0173j: "1B08", \u017A: "1A0Q", \u017C: "1A6C", "\u017C ": "1A2I", \u017Ca: "1A16", \u017Ce: "1A6F", "\u017Ce ": "1A97", \u017Cn: "1A10", \u017Cy: "1A2D", \u017E: "0U7Q0V3A0Y6B1B3T1D0X1N03", "\u017E ": "0U4B0V050Y1Y1B0R", \u017Ea: "0U060V0V0Y0K1B1A1D07", \u017Eai: "1B1H", \u017Ed: "0U190V080Y1D1B0E", \u017Ee: "0U8M0V3Q0Y811B0L", "\u017Ee ": "0UCX0V2I0YDM1B02", \u017Eem: "0U0J0V1C0Y2J1B0M", "\u017Eem ": "0U030V0U0Y3B", \u017Een: "0U1N0V150Y1T1B09", \u017Ei: "0U2A0V280Y3D1B5Q1D0F", \u017Eia: "0Y1T1B30", \u017Ein: "0V041B6T", \u017Eina: "1B45", \u017Einau: "1B5U", \u017Eino: "1B5G", \u017Eiu: "1B22", \u017Eivot: "0U2D0V4I0Y22", \u017Ei\u016B: "1B1F", \u017Ek: "0U0G0Y0D1B0L", \u017Em: "1B1A", \u017Emo: "1B2P", \u017En: "0U0R0V0F0Y0P1B0A", \u017Eo: "0U0A0V030Y061B0O1D05", \u017Es: "0U020Y051B0G1D04", \u017Et: "0U020Y051B0B", \u017Eu: "0U0O0V0C0Y091B0K1D0B", \u017Ev: "1B0B", \u017Ey: "1B08", \u017E\u00E1: "0U0W", \u017E\u00ED: "0U140Y0N", \u017E\u0101: "1D0B", \u017E\u0117: "1B07", \u017E\u012B: "1D0A", \u017E\u012F: "1B08", \u01E7: "030J", \u01F5: "1L02", \u0219: "154G", "\u0219 ": "150K", \u0219a: "150X", \u0219c: "150F", \u0219e: "150H", \u0219i: "153U", "\u0219i ": "159Z", \u0219o: "1509", \u0219t: "154E", \u0219te: "1566", "\u0219te ": "156P", \u0219ti: "15AL", "\u0219ti ": "157U", \u021B: "1547", "\u021B ": "1507", \u021Ba: "1511", "\u021Ba ": "152P", \u021Be: "150S", \u021Bi: "1578", "\u021Bi ": "15DV", \u021Bii: "152O", \u021Bu: "150D", \u021B\u0103: "150S", "\u021B\u0103 ": "152S", \u025B: "031N", \u025Ba: "031H", \u025Be: "0318", \u0263: "03AS", "\u0263 ": "03BZ", "\u0263-": "031S", \u0263a: "033S", \u0263e: "03BR", \u0263ef: "03CF", "\u0263ef ": "03CZ", \u0263en: "0390", "\u0263en ": "034R", "\u0263ent ": "038J", \u0263er: "03B3", "\u0263er ": "038I", \u0263i: "031W", \u0263s: "0318", "\u0307": "1F0I", "\u0307k": "1F07", "\u0307l": "1F05", "\u0307n": "1F0L", "\u0307s": "1F0E", "\u0307y": "1F05", "\u0307\u015F": "1F0A", \u03B5: "030B", \u0430: "0VSG0XSG16SG17SG18PL19RD1LSG1MSG1N02", "\u0430 ": "0VSG0XSG16SG17SG18QP19QH1LOC1MHW", \u0430\u0430: "0X2C170919021MH9", "\u0430\u0430 ": "0X4R1MGF", \u0430\u0430\u0433\u04AF: "1M30", \u0430\u0430\u0433\u04AF\u0439: "1M5Z", "\u0430\u0430\u0434 ": "1M3H", \u0430\u0430\u043D: "1M4Y", "\u0430\u0430\u043D\u0430 ": "1M3M", \u0430\u0430\u0440: "19041M8N", "\u0430\u0430\u0440 ": "1M6G", \u0430\u0430\u0440\u0430: "1M2S", \u0430\u0430\u0440\u0430\u0439: "1M3I", \u0430\u0430\u0441: "1M4V", "\u0430\u0430\u0441 ": "1M4X", \u0430\u0430\u0442: "0X3T1M0J", "\u0430\u0430\u0442 ": "0X4X", \u0430\u0431: "0V0U0X1V161K17951831191X1L3F", \u0430\u0431\u0430: "0V0J0X16160Q1773180B190N1L30", \u0430\u0431\u0430\u0435\u0446: "174D", "\u0430\u0431\u0435 ": "0X021775", \u0430\u0431\u043E: "0V0L0X4K163O173X183O190E", \u0430\u0431\u043E\u0442: "0X4O163X1719184G", \u0430\u0431\u043E\u0442\u0430: "0X2F1642184J", \u0430\u0431\u043E\u0442\u0438: "0X1W162P180D", \u0430\u0431\u0456: "176G19051L0D", \u0430\u0431\u0456\u0446\u044C: "175L", \u0430\u0432: "0V4X0X6V165A17A6187V19DG1L0P1M3R", "\u0430\u0432 ": "0V0V0X4S160L180G19CV1M23", \u0430\u0432\u0430: "0V3C0X5Z167417H31831192E1M2C", "\u0430\u0432\u0430 ": "0V1C0X2V163J1743180F190L", \u0430\u0432\u0430\u043B: "0V0A0X05160E1765180H1907", \u0430\u0432\u0430\u043B\u0430: "0V0E175H18041902", \u0430\u0432\u0430\u043C: "0V0K0X2V1617", "\u0430\u0432\u0430\u043C ": "0V170X2X1625", \u0430\u0432\u0430\u0446: "175U", \u0430\u0432\u0430\u0446\u044C: "177C", "\u0430\u0432\u0430\u045E ": "175X", \u0430\u0432\u0438: "0V4K0X8L167R185G1932", "\u0430\u0432\u0438 ": "0V1E0X4A163I190N", \u0430\u0432\u0438\u0441\u0442: "0X1P1805", "\u0430\u0432\u0438\u0448 ": "0V0H0X1F162E", "\u0430\u0432\u043C\u0435 ": "0X1F", \u0430\u0433: "0V0O0X0T1613176F181719321L0J1MA2", "\u0430\u0433 ": "18061MAO", \u0430\u0433\u0430: "0V0N0X10161S17AR180Z194U1L0F1M5Y", "\u0430\u0433\u0430 ": "0V050X0E160R17C8180519021M0P", \u0430\u0433\u0430\u0430: "1M46", \u0430\u0433\u0430\u0442: "0X031605170N1802193K", \u0430\u0433\u0430\u0442\u043E: "1942", \u0430\u0433\u04AF\u0439: "1M3H", "\u0430\u0433\u04AF\u0439 ": "1M6P", \u0430\u0434: "0V6I0X3G162H17CQ184Y194B1L9V1M9X", "\u0430\u0434 ": "0V2U0X0Q1616176D181D190K1M9U", \u0430\u0434\u0430: "0V5I0X1H161V17A7181G192A1LA11MAO", "\u0430\u0434\u0430 ": "0V5B0X0F160Z171Z180B190D1L3Z", \u0430\u0434\u0430\u0431\u0430: "1766", \u0430\u0434\u0430\u0434: "16041M5U", "\u0430\u0434\u0430\u0434 ": "1MB9", \u0430\u0434\u0430\u043C: "0V0G0X0V1606170J18021LBH", "\u0430\u0434\u0430\u043C ": "0V0Z0X0X160D170O18021L8S", \u0430\u0434\u0430\u0445: "1M3L", \u0430\u0434\u0430\u0445\u0433: "1M55", \u0430\u0434\u0435: "0V0M0X54161Y181R1905", "\u0430\u0434\u0435 ": "0V0H0X42160Z1803", \u0430\u0434\u0437: "179D1908", \u0430\u0434\u0437\u0456: "179B", \u0430\u0434\u0437\u0456\u043D: "1772", \u0430\u0434\u0438: "0V7E0X1E161M180X19131M12", "\u0430\u0434\u0438 ": "0V2W0X0Y160V180D190G", "\u0430\u0434\u0438\u043C ": "0V4K1804", \u0430\u0434\u044B: "173C18091LF6", "\u0430\u0434\u044B ": "173I18051LM0", \u0430\u0435: "0V030X1916141775186B19021L0A", "\u0430\u0435 ": "0X19161617EH1807", \u0430\u0435\u0442: "1615189N", "\u0430\u0435\u0442 ": "160M188F", \u0430\u0435\u0442\u0441\u044F: "1853", \u0430\u0435\u0446: "0X02175Y", \u0430\u0435\u0446\u0446: "1781", \u0430\u0435\u0446\u0446\u0430: "17BM", "\u0430\u0435\u0448 ": "0X1C160Y1753", "\u0430\u0435\u0448\u044C ": "186B", \u0430\u0436: "0V1L0X1Q1611171W1832192N1L141M3G", "\u0430\u0436 ": "0V020X07160B1707180419051M5S", \u0430\u0437: "0V270X1K1654176N1879194W1L741M0M", "\u0430\u0437 ": "0V0A0X0B165C174D181K191Y1L0T", \u0430\u0437\u0430: "0V0R0X0P163S1765187K195H1LBW1M0Q", \u0430\u0437\u0430\u0432: "193P", "\u0430\u0437\u0430\u0432 ": "18021959", \u0430\u0437\u0430\u043B: "0V04160N172I186C191K1L0Q", "\u0430\u0437\u0430\u043B ": "160N187H", \u0430\u0437\u0430\u049B: "1LC5", \u0430\u0437\u0430\u049B\u0441: "1LDT", "\u0430\u0437\u0438 ": "0V0V0X0I164C1904", \u0430\u0437\u043C\u0430\u045E: "175U", \u0430\u0437\u0443\u043C\u0435: "0V2D0X02175L1805", \u0430\u0439: "162D1785183C19531LF61MNI", "\u0430\u0439 ": "164D17G5182V192G1LA31MG7", \u0430\u0439\u0433: "171E19031M93", "\u0430\u0439\u0433 ": "1M5F", \u0430\u0439\u0433\u0430: "1M5M", \u0430\u0439\u0433\u0430\u0430: "1MAS", \u0430\u0439\u0434: "160N170N180G190L1L9W1M39", \u0430\u0439\u0434\u0430: "17091L8C1M3L", "\u0430\u0439\u0434\u0430 ": "1L6Q", \u0430\u0439\u0434\u0430\u0433: "1M6A", \u0430\u0439\u0434\u044B: "1LAB", "\u0430\u0439\u0434\u044B ": "1LDB", \u0430\u0439\u043D: "160I171P180K191L1L1P1ML4", "\u0430\u0439\u043D ": "1M4G", \u0430\u0439\u043D\u0430: "1609171S18021L2X1MKY", "\u0430\u0439\u043D\u0430 ": "160G1726180219021MSG", \u0430\u0439\u0441: "160C1727180K190M1L0Z1M8Y", \u0430\u0439\u0441\u0430: "1MA3", \u0430\u0439\u0441\u0430\u043D: "1MI9", \u0430\u0439\u0442: "161F1708182L19211L7C", \u0430\u0439\u0445: "1M6F", \u0430\u0439\u0445\u0430: "1M36", \u0430\u0439\u0445\u0430\u043D: "1M4A", \u0430\u0439\u044B: "1L6Y", \u0430\u043A: "0V4Q0X5R164V1783189Q19521L0I1M07", "\u0430\u043A ": "0V2R0X1H1639177F18AD193L", \u0430\u043A\u0430: "0V1L0XA0163V177K1829191O", "\u0430\u043A\u0430 ": "0V0S0X4C1623171R180O1919", "\u0430\u043A\u0430\u043B ": "0X1E1808", \u0430\u043A\u0430\u043C: "0X41160H170H1802", "\u0430\u043A\u0430\u043C ": "0X3W160M", \u0430\u043A\u0430\u0448: "0V050X2M1606", "\u0430\u043A\u0430\u0448 ": "0X1S160B", \u0430\u043A\u0432: "0V0N0X171677", \u0430\u043A\u0432\u043E: "0V080X0F1659", "\u0430\u043A\u0432\u043E ": "0V090X0F169U", \u0430\u043A\u043E: "0V690X6T1632173X185D191A", "\u0430\u043A\u043E ": "0V6L0X7P162W1804", \u0430\u043B: "0V5A0X3R164O17EI18FF19941LKN1M8B", "\u0430\u043B ": "0V090X40164Y170J18EI19091L2Q1M47", \u0430\u043B\u0430: "0V570X1B163917GH1853196K1LIV1M3F", "\u0430\u043B\u0430 ": "0V5M0X0Z162T17EA185N196B1L3M", \u0430\u043B\u0430\u0432: "1773", \u0430\u043B\u0430\u0432\u0435: "176F", \u0430\u043B\u0430\u0440: "0X021L88", \u0430\u043B\u0430\u0441: "174K180Y190W1L6T", \u0430\u043B\u0430\u0441\u044B: "170L1L7B", \u0430\u043B\u0430\u0441\u044F: "175N1914", \u0430\u043B\u0434: "1L911M2N", \u0430\u043B\u0434\u044B: "1LCZ", "\u0430\u043B\u0434\u044B ": "1LB7", \u0430\u043B\u0435: "0V110X1H161I176Y181O192E", "\u0430\u043B\u0435 ": "0V0R0X0O176E1809191E", \u0430\u043B\u0436\u044B: "1756", \u0430\u043B\u0436\u044B\u0440: "177M", \u0430\u043B\u0438: "0V550X30163Y186H19501L0R1M0X", "\u0430\u043B\u0438 ": "0V4H0X2W1636185Z193P", "\u0430\u043B\u043A\u043E ": "164U1803", "\u0430\u043B\u043A\u0443 ": "0X291808", \u0430\u043B\u043C\u0430: "1L8V", "\u0430\u043B\u043E ": "0V320X1B160M181H190V", "\u0430\u043B\u0441\u044F ": "185C", \u0430\u043B\u0442\u0430\u0439: "1M3I", \u0430\u043B\u044B: "170H18071LFB", \u0430\u043B\u044B\u049B: "1LD4", "\u0430\u043B\u044B\u049B ": "1LCY", \u0430\u043B\u044C: "17611835191Q1L0E1M0X", \u0430\u043B\u044C\u043D: "175H1829191D", \u0430\u043B\u0456: "17FS192N1L0D", "\u0430\u043B\u0456 ": "17HX190T", \u0430\u043B\u0493\u0430: "1L8X", \u0430\u043B\u0493\u0430\u043D: "1L9N", \u0430\u043C: "0VCG0XC1166817AV187I196E1LA81M76", "\u0430\u043C ": "0VMU0XPH16G317DT1885195M1L5J1M10", \u0430\u043C\u0430: "0V1T0X0R1617177H180U191S1L951M66", \u0430\u043C\u0430\u0439: "1L1W1M56", \u0430\u043C\u0430\u0439\u0433: "1MA1", "\u0430\u043C\u0434 ": "1M2Y", \u0430\u043C\u0435: "0V1A0X53164S172G181Q191B1L0U", "\u0430\u043C\u0435 ": "0V050X51163B170B1805190Q", "\u0430\u043C\u0438 ": "0V050X0C160A18481927", \u0430\u043C\u043E: "0V4S0X3Y161X172I181J1914", "\u0430\u043C\u043E ": "0V560X3S161N18021908", "\u0430\u043C\u0443 ": "0V050X1P177318031906", "\u0430\u043C\u044B\u043D ": "1L6Z", \u0430\u043C\u044C\u0434: "1M3P", \u0430\u043C\u044C\u0434\u0430: "1M46", \u0430\u043C\u0456: "176Z191E", "\u0430\u043C\u0456 ": "1785190X", \u0430\u043D: "0V6D0X3S164J17A7188S19871LN71MGQ", "\u0430\u043D ": "0V5W0X2M161U171V181K190W1LQM1MKY", \u0430\u043D\u0430: "0V350X2I163X1773181D191X1L8B1M76", "\u0430\u043D\u0430\u0439 ": "170P1M46", \u0430\u043D\u0434: "0V060X08160H171D180T190N1LCS1M4L", "\u0430\u043D\u0434 ": "1M3L", \u0430\u043D\u0434\u0430: "0X051603170I180D19051LB81M1R", "\u0430\u043D\u0434\u0430 ": "180819051L6D", \u0430\u043D\u0434\u0430\u0440: "18021L5Y", \u0430\u043D\u0434\u044B: "170F18031LBM", "\u0430\u043D\u0434\u044B ": "18061L5P", \u0430\u043D\u0434\u044B\u049B: "1L6Q", \u0430\u043D\u043D: "160B176V181J192P1L2L", \u0430\u043D\u043D\u0435: "175R", "\u0430\u043D\u043D\u0435 ": "177H", "\u0430\u043D\u043D\u044F ": "173M1935", \u0430\u043D\u0446\u0443\u0437: "1720182V19381L1G", \u0430\u043D\u044B: "173B180R1LBK1M2M", \u0430\u043E: "0V5L0X04160318021902", "\u0430\u043E ": "0VE3", \u0430\u043F: "0V1K0X1X162B1746181U192V1L4R", \u0430\u043F\u0440: "0V0R0X371644173J180P190O", \u0430\u043F\u0440\u0430: "0V0N0X3T164A1751180C1902", \u0430\u043F\u0440\u0430\u0432: "0V1N0X3Z168O180H1902", \u0430\u043F\u0440\u0430\u045E: "174E", \u0430\u0440: "0V3R0X34163M17B4185B19641LOM1MDB", "\u0430\u0440 ": "0V2P0X1U160W173H180C190G1LI91MAA", \u0430\u0440\u0430: "0V2C0X38163T17BH181R19381LEP1M7L", \u0430\u0440\u0430\u0430: "0X081M3J", "\u0430\u0440\u0430\u0430 ": "0X021M3Q", "\u0430\u0440\u0430\u0439 ": "160A1L1J1M3U", \u0430\u0440\u0433\u0430: "170S1M3H", \u0430\u0440\u0434: "0V050X051607170K180519031LAB1M22", \u0430\u0440\u0434\u044B: "1LE5", "\u0430\u0440\u0434\u044B ": "1L9W", \u0430\u0440\u0434\u044B\u04A3: "1LAZ", \u0430\u0440\u043B\u044B\u049B: "1L5P", \u0430\u0440\u0441\u0430\u043D: "1M4E", \u0430\u0440\u044B: "1785180D1LHM1M0O", "\u0430\u0440\u044B ": "172K18071LBM", \u0430\u0440\u044B\u043D: "170V1LDA", "\u0430\u0440\u044B\u043D ": "1L6T", \u0430\u0440\u044B\u043D\u044B: "1L67", "\u0430\u0440\u0493\u0430 ": "1L6T", \u0430\u0441: "0V3K0X2V162D17BT189N197Y1LF21M54", "\u0430\u0441 ": "0V3Z0X31161S175Q186Q19521L451M6Q", \u0430\u0441\u043A\u0430: "0X0G1603175C18031928", "\u0430\u0441\u043A\u0430 ": "0X02175K1933", \u0430\u0441\u0442: "0V1V0X1K16321772184R192Y1LBI1M0O", \u0430\u0441\u0442\u0430: "0V1A0X0M1604176U180T19051LCP1M0R", \u0430\u0441\u0442\u044B: "170L18021L8J", \u0430\u0441\u0443\u0443: "1M2Y", \u0430\u0441\u0446: "177D", "\u0430\u0441\u0446\u044C ": "175R", "\u0430\u0441\u0446\u0456 ": "175U", \u0430\u0441\u044B: "170J180C1LG0", "\u0430\u0441\u044B ": "170N180C1L7E", \u0430\u0441\u044B\u043D: "1LEM", \u0430\u0441\u044B\u043D\u0434: "1L96", \u0430\u0441\u044B\u043D\u044B: "1L5Y", \u0430\u0441\u044F: "160D176O191X", "\u0430\u0441\u044F ": "160717A61929", \u0430\u0441\u049B\u0430: "1L6T", \u0430\u0442: "0V4J0X8Y168Z175U18CY19BG1LCI1M16", "\u0430\u0442 ": "0V0V0X7U165W17461818190T1L4Q", \u0430\u0442\u0430: "0V1P0XEY16HY173Y181B190X1L501M1E", "\u0430\u0442\u0430 ": "0V1H0XHE16J6171X180R190O", "\u0430\u0442\u0435 ": "0V250X0I162T180P", \u0430\u0442\u0438: "0V4M0X36161S182A19F71L0M", "\u0430\u0442\u0438 ": "0V350X1Z160O180I19DF", \u0430\u0442\u0438\u0441\u044F: "193G", \u0430\u0442\u043E: "0V0K0X1L165E171N181F19351L0K", "\u0430\u0442\u043E ": "0V0B0X0F164Y1803192X", \u0430\u0442\u0440\u044D\u0431: "1750", \u0430\u0442\u0442\u044B: "1L6T", "\u0430\u0442\u0442\u044B ": "1L61", \u0430\u0442\u044B: "173R180W1LD7", \u0430\u0442\u044B\u043D: "1LB0", "\u0430\u0442\u044B\u043D ": "1L8G", \u0430\u0442\u044C: "18HM191R", "\u0430\u0442\u044C ": "18JY1907", \u0430\u0442\u044C\u0441\u044F: "186K1902", \u0430\u0443: "0V0Y0X071607180E19061L8Z", \u0430\u0445: "0V0M0X02161S172Z181K191Q1L0Q1M6Y", "\u0430\u0445 ": "0V0Z0X02164B1733181U19171M7U", \u0430\u0445\u0433\u04AF: "1M4A", \u0430\u0445\u0433\u04AF\u0439: "1M8E", \u0430\u0446: "0V100X0A160B178V180I191G1L0G1M0I", \u0430\u0446\u0446\u0430: "175F", "\u0430\u0446\u0446\u0430 ": "176A", \u0430\u0446\u044C: "17F11902", "\u0430\u0446\u044C ": "17KX", \u0430\u0447: "0V1H0X0Z160R174Q182219341M0C", \u0430\u0447\u044B: "176P", \u0430\u0448: "0V380X5K162Y17341831192G1L2Y1M2I", "\u0430\u0448 ": "0V410XAT16741738180R190Q1L0J1M4A", \u0430\u0448\u0435: "0V0Z0X5C163M181E190A", "\u0430\u0448\u0435 ": "0V0O0X6L163P180F1909", "\u0430\u0448\u0442\u043E ": "0V4F0X09", \u0430\u044E: "173G184N1953", "\u0430\u044E ": "177K186P197F", "\u0430\u044E\u0446\u044C ": "176E", \u0430\u044F: "160J1759183319021L191M23", "\u0430\u044F ": "161G17G6186B1M17", \u0430\u0453: "0X0G", \u0430\u0454: "198J", "\u0430\u0454 ": "1985", \u0430\u0454\u0442: "196C", "\u0430\u0454\u0442\u0435 ": "1932", \u0430\u0454\u0442\u044C: "1959", \u0430\u0454\u0442\u044C\u0441: "197I", "\u0430\u0454\u0448 ": "193I", \u0430\u0458: "0V4V0X3B", "\u0430\u0458 ": "0V4G0X5C", \u0430\u0458\u0434: "0V0C0X38", \u0430\u0458\u0434\u0435: "0V0C0X2N", "\u0430\u0458\u0434\u0435 ": "0V0P0X1V", "\u0430\u0458\u0442\u0435 ": "0V4N0X0B", \u0430\u045A: "0V180X0O", \u0430\u045E: "178X", "\u0430\u045E ": "17EZ", \u0430\u045E\u043B\u044F: "1756", "\u0430\u045E\u0441\u044F ": "175G", \u0430\u0493: "1L9D", \u0430\u0493\u0430: "1LCF", \u0430\u0493\u0430\u043D: "1LD6", "\u0430\u0493\u0430\u043D ": "1LEM", \u0430\u0493\u044B: "1LAJ", "\u0430\u0493\u044B ": "1LB4", \u0430\u049B: "1LBK", "\u0430\u049B ": "1L7D", \u0430\u049B\u0441: "1L9I", \u0430\u049B\u0441\u0442: "1LA0", \u0430\u049B\u0441\u0442\u0430: "1LDT", "\u0430\u049B\u0441\u044B ": "1L75", \u0430\u049B\u0442\u0430: "1L7Y", \u0430\u04A3: "1L44", \u0431: "0V6X0X7G167D176W188X19BU1LAR1MFH", \u0431\u0430: "0V330X3W1618175U181W197M1LDK1MI1", "\u0431\u0430 ": "0V2V0X581614173Q180Q192U1L2C", \u0431\u0430\u0433\u0430: "0X021604170Z1803193E1M0P", \u0431\u0430\u0433\u0430\u0442: "170Z194T", \u0431\u0430\u0435\u0446\u0446: "174D", \u0431\u0430\u0439: "1709190A1L3L1MRT", \u0431\u0430\u0439\u0433: "1M58", \u0431\u0430\u0439\u0433\u0430: "1M9Y", \u0431\u0430\u0439\u0434: "190A1M3C", \u0431\u0430\u0439\u0434\u0430: "1M6E", \u0431\u0430\u0439\u043D: "1MKZ", \u0431\u0430\u0439\u043D\u0430: "1MSG", \u0431\u0430\u0439\u0441: "1MAD", \u0431\u0430\u0439\u0441\u0430: "1MIB", \u0431\u0430\u0439\u0445: "1M4E", "\u0431\u0430\u0439\u0445 ": "1M4E", \u0431\u0430\u0440: "0V0S0X2616061728180719061LB01M27", "\u0431\u0430\u0440 ": "0V0S0X0X170J1L9M", \u0431\u0430\u0441: "0X031606170B180619071LAX1M1E", \u0431\u0430\u0441\u0442: "1L78", \u0431\u0430\u0441\u0442\u0430: "1L7Q", \u0431\u0430\u0441\u049B\u0430: "1L6Z", \u0431\u0430\u0447\u0438: "1802193S", \u0431\u0430\u0447\u044B: "175L", \u0431\u0430\u0454\u0442\u044C: "193J", \u0431\u0432: "161S17021805", \u0431\u0432\u0430: "1679", "\u0431\u0432\u0430 ": "1678", \u0431\u0435: "0V1V0X3V162P173R185S19381L6Y", "\u0431\u0435 ": "0V160X2D1614178T185R19441L1P", \u0431\u0435\u0440: "0V090X0J160Y170J180W190R1L72", \u0431\u0435\u0448: "0V020X53164M", \u0431\u0435\u0448\u0435: "0X6N1655", "\u0431\u0435\u0448\u0435 ": "0X7016AH", \u0431\u0438: "0V590X40162S182O197I1L191MFG", "\u0431\u0438 ": "0V2P0X62161T1804193Q1L0F1MO1", "\u0431\u0438\u0432 ": "0X0F192X", \u0431\u0438\u0434: "0X3M1603180519081M5A", "\u0431\u0438\u0434 ": "1M48", \u0431\u0438\u0434\u0435: "0X321804", "\u0431\u0438\u0434\u0435 ": "0X29", "\u0431\u0438\u043B\u043E ": "0V4L0X0V160M1802", "\u0431\u0438\u043E ": "0V33", \u0431\u0438\u0442: "0V160X0D160I181N19771M12", \u0431\u0438\u0442\u0438: "0V171604196B", "\u0431\u0438\u0442\u0438 ": "0V32198B", "\u0431\u0438\u0445 ": "0V2W161P", \u0431\u0438\u0447\u0430: "0V030X02162Y", "\u0431\u0438\u0448 ": "0X031603190K1M3F", \u0431\u043B: "0V0K0X0O160Y171Y1823192H1L1L", \u0431\u043B\u0438\u043A\u0430: "160718031L6G", \u0431\u043E: "0V2F0X3G161Z172Y187G194B1L8B1M9G", \u0431\u043E\u0439\u044B\u043D: "1L6Z", \u0431\u043E\u043B: "0V0Y0X19161N173M185E19131LFM1MHQ", "\u0431\u043E\u043B ": "0V05160C170N1809190I1L0T1MAW", \u0431\u043E\u043B\u0430: "0X021L80", \u0431\u043E\u043B\u0430\u0434: "1L5P", \u0431\u043E\u043B\u0434\u044B: "1L8S", \u0431\u043E\u043B\u043D: "0V060X0A160J1M2S", \u0431\u043E\u043B\u043D\u043E: "0X021M5K", \u0431\u043E\u043B\u043E: "0X0319021M6H", \u0431\u043E\u043B\u043E\u0445: "1M5Z", \u0431\u043E\u043B\u044B\u043F: "1L5Y", \u0431\u043E\u043B\u044C: "173K185I1904", \u0431\u043E\u043B\u044C\u0448: "174U188J", \u0431\u043E\u043B\u0493\u0430: "1L67", \u0431\u043E\u0440: "0V0U0X3R160J170F180T190K1L0K1M0Z", \u0431\u043E\u0440\u0443: "0X2U1903", \u0431\u043E\u0440\u0443\u0432: "0X30", \u0431\u043E\u0441\u0442: "0V0Y0X2P160R170L181X192A1L2V", \u0431\u043E\u0441\u0442\u043E: "0V2F0X2U183H193B", \u0431\u043E\u0442: "0V030X3S163J170Z183H191L", \u0431\u043E\u0442\u0430: "0X2B161Z170B182I190C", "\u0431\u043E\u0442\u0430 ": "0X1K1634170F180Q190H", "\u0431\u043E\u0442\u0438 ": "0X1B161S190J", \u0431\u0440: "0V260X1S161X172I1828192P1L09", "\u0431\u0440\u0435 ": "0V040X0316351804191X", "\u0431\u0440\u043E ": "0V1Q0X2U160A1803", \u0431\u0443: "0V1V0X0H160L172P1847199H1L0L1M1A", \u0431\u0443\u0432: "0X07160F18031951", "\u0431\u0443\u0432 ": "194B", \u0431\u0443\u0434: "0V2X0X0L160C176I186Y196U", \u0431\u0443\u0434\u0435: "0V1Q0X091604184B192J", "\u0431\u0443\u0434\u0435 ": "0V1T192S", \u0431\u0443\u0434\u0435\u0442: "0V0D185X1909", \u0431\u0443\u0434\u0437: "176T", \u0431\u0443\u0434\u0437\u0435: "176K", \u0431\u0443\u0434\u044C: "183C193I", "\u0431\u0443\u0434\u044C ": "185L1949", \u0431\u0443\u043B: "1603170P1802195J", "\u0431\u0443\u043B\u0430 ": "193D", \u0431\u0443\u043B\u043E: "1932", "\u0431\u0443\u043B\u043E ": "194E", "\u0431\u0443\u0442\u0438 ": "192W", \u0431\u044B: "174C189W1L2A", "\u0431\u044B ": "1726188P1L0F", \u0431\u044B\u043B: "1773189Z1L2M", "\u0431\u044B\u043B ": "185O", "\u0431\u044B\u043B\u0430 ": "176O184P", \u0431\u044B\u043B\u043E: "175O184J", "\u0431\u044B\u043B\u043E ": "17851888", "\u0431\u044B\u0442\u044C ": "184V", "\u0431\u044B\u0446\u044C ": "174L", "\u0431\u044B\u045E ": "175I", \u0431\u044D: "17041M2G", "\u0431\u044D ": "1M4I", \u0431\u0456: "173E194P1L8G", \u0431\u0456\u043B\u044C: "170L1930", \u0431\u0456\u043B\u044C\u0448: "193V", \u0431\u0456\u0440: "171219061LAJ", "\u0431\u0456\u0440 ": "19051L6R", \u0431\u0456\u0446\u044C: "176B", "\u0431\u0456\u0446\u044C ": "1797", \u0431\u04AF: "1L141M2B", \u0431\u04B1: "1L4H", \u0431\u04B1\u043B: "1L8Z", "\u0431\u04B1\u043B ": "1LF2", \u0432: "0VCU0XDV16G3179J18GE19LY1L0S1M4N", "\u0432 ": "0V0X0X4G163Q18C019I31L0N1M2P", \u0432\u0430: "0V7R0X8U16C917FF18D219CZ1L0J1M2R", "\u0432\u0430 ": "0V4K0XCP16NR179C183F193F", "\u0432\u0430\u0430\u0442 ": "0X1O", "\u0432\u0430\u0432 ": "0X0Y193A", "\u0432\u0430\u0435 ": "1750", \u0432\u0430\u043B: "0V230X0T162O1773184K19311M0Q", \u0432\u0430\u043B\u0430: "0V1H160D175T180Y191L", "\u0432\u0430\u043B\u0430 ": "0V3M160S175B181E1921", \u0432\u0430\u043C: "0V1U0X6N166L17211843192X", "\u0432\u0430\u043C ": "0V1T0X7G165W172M184L192O", "\u0432\u0430\u043C\u0435 ": "0X1B162X", "\u0432\u0430\u0441 ": "0V1R0X05160N172R1841192R", \u0432\u0430\u0442: "0V1W0X1L1645171T18551956", "\u0432\u0430\u0442\u0430 ": "0V070X1L16311803", \u0432\u0430\u0442\u0438: "0V13180P195T", "\u0432\u0430\u0442\u0438 ": "0V1I1806196K", \u0432\u0430\u0442\u044C: "185B", "\u0432\u0430\u0442\u044C ": "187V", \u0432\u0430\u0446\u044C: "1776", "\u0432\u0430\u0446\u044C ": "17AE", \u0432\u0430\u0448: "0V160X3D1644171F181R191W", "\u0432\u0430\u0448 ": "0V0N0X2S162M170U180J190J", "\u0432\u0430\u0448\u0435 ": "0V0I0X1P1635180J190B", "\u0432\u0430\u045E ": "175Q", \u0432\u0435: "0V670X4E1644177I189D194E1L0W", "\u0432\u0435 ": "0V4G0X12161E173118171912", \u0432\u0435\u0434: "0V0E0X11161K177N181I190M", \u0432\u0435\u0434\u0430: "0X05160417B8", \u0432\u0435\u0434\u0430\u0435: "176A", \u0432\u0435\u0434\u0430\u044E: "1760", \u0432\u0435\u043B\u044C: "176Q1902", \u0432\u0435\u043B\u044C\u043C: "179U1902", \u0432\u0435\u0440: "0V1Z0X2G161O174L186R192T1L11", \u0432\u0435\u0440\u0443\u0432: "0X1K", \u0432\u0435\u0447\u0435: "0V0W0X0Y1641181F190Z", "\u0432\u0435\u0447\u0435 ": "0V0K165S", \u0432\u0435\u045C\u0435: "0X3N", "\u0432\u0435\u045C\u0435 ": "0X3P", "\u0432\u0436\u0435 ": "192T", \u0432\u0438: "0V6H0X571660187419DD1L0B1M0C", "\u0432\u0438 ": "0V5A0X5D168C180C19A7", \u0432\u0438\u0434\u0435\u043B: "0V110X0M184L1902", \u0432\u0438\u0436\u0434\u0430: "165B", \u0432\u0438\u0441\u0442: "0X2C1806190B", \u0432\u0438\u0441\u0442\u0438: "0X2G1803", "\u0432\u0438\u0448\u0435 ": "0V5L", \u0432\u043B: "0V040X0E160G181I19121L091M0F", \u0432\u043C: "0X0O1602180A190E", "\u0432\u043C\u0435 ": "0X39", \u0432\u043D: "0V0O0X0T160O181R191T", \u0432\u043E: "0V7L0X7L164W173Q18DH19BY1L081M09", "\u0432\u043E ": "0V5Y0XDV16741708183C193P", \u0432\u043E\u043B\u0438: "0V3B0X0C160E180G190G", \u0432\u043E\u043D: "0V030X0A170R181F198M", \u0432\u043E\u043D\u0430: "0X02195X", "\u0432\u043E\u043D\u0430 ": "198G", \u0432\u043E\u043D\u0438: "0X04181G193Z", "\u0432\u043E\u043D\u0438 ": "0X03180A195E", \u0432\u043E\u0440: "0V340X2N166H171Z186H194D", \u0432\u043E\u0440\u0438: "0V2G0X11164B186H193C", "\u0432\u043E\u0440\u0438 ": "0V250X0T1656180L1906", \u0432\u043E\u0440\u0438\u0442: "0V18160N187C1934", "\u0432\u043E\u0442\u043E ": "0X0Z163Y", \u0432\u043E\u0458: "0V3V0X32", \u0432\u0440: "0V2A0X2816141824190L1M07", \u0432\u0440\u0430\u0442: "0V1R0X2J16181809", \u0432\u0440\u0435: "0V2M0X35162M182Y1906", \u0432\u0440\u0435\u043C: "0V2E0X2W162V183Q", \u0432\u0440\u0435\u043C\u0435: "0V5Z0X31165Y182X", \u0432\u0441: "0X0E161P1863194Y1M0S", \u0432\u0441\u0435: "0X0216291860192S", "\u0432\u0441\u0435 ": "160R18341932", \u0432\u0441\u0438\u0447: "163U", \u0432\u0441\u0438\u0447\u043A: "167W", \u0432\u0441\u044F: "160N180B194I", "\u0432\u0441\u044F ": "18051958", "\u0432\u0441\u0451 ": "1851", \u0432\u0443: "0V0Z0X0K16031729181I191T1M09", \u0432\u044A: "1628", \u0432\u044A\u0440: "164Y", \u0432\u044B: "1774188V", "\u0432\u044B ": "17AT18AI", \u0432\u044D: "17021M3J", "\u0432\u044D ": "1M6F", \u0432\u0456: "173G19DE", \u0432\u0456\u0434: "171D198V", \u0432\u0456\u043D: "172D198S", "\u0432\u0456\u043D ": "19A2", \u0433: "0V5Z0X7S166U176O187J19781L4M1MJ7", "\u0433 ": "0V1M0X09160A170O181Y191D1L051MIH", \u0433\u0430: "0V2V0X32163F177V182J194V1L0T1MB0", "\u0433\u0430 ": "0V4S0X5B168U17CG181A19151M2R", \u0433\u0430\u0430: "0X021MC3", "\u0433\u0430\u0430 ": "1M4N", "\u0433\u0430\u0430\u0434 ": "1M46", \u0433\u0430\u0430\u0440: "1M2U", "\u0433\u0430\u0430\u0440 ": "1M3Q", \u0433\u0430\u0442\u043E: "161S170Z1802192U", "\u0433\u0430\u0442\u043E ": "163S193Z", \u0433\u0430\u0448: "0X3A1606", "\u0433\u0430\u0448 ": "0X491605", \u0433\u0433\u04AF\u0439: "1M3A", "\u0433\u0433\u04AF\u0439 ": "1M6I", \u0433\u0434: "0V0G183Z1M2D", \u0433\u0434\u0430: "186T1M1G", "\u0433\u0434\u0430 ": "188F", \u0433\u0435: "0V0D0X051605170L180K190K1L9X", "\u0433\u0435 ": "0V0T180E190E1LCT", \u0433\u0435\u043D: "0V050X051607170I180819071L9C", "\u0433\u0435\u043D ": "1LCN", \u0433\u0438: "0V0F0X1W160Y181Q190I1L0T1M2I", "\u0433\u0438 ": "0V0D0X611631181N190N", \u0433\u0438\u0439: "180219041M57", "\u0433\u0438\u0439\u0433 ": "1M55", "\u0433\u0438\u0439\u043D ": "1M4X", \u0433\u043B: "0V260X1U161M1721182H191P1M1Y", \u0433\u043B\u0435: "0V3C0X47163P170F", \u0433\u043B\u0435\u0434: "0V3F0X5G1628170M", \u0433\u043B\u0435\u0434\u0430: "0V7S0X4Q163L", \u0433\u043B\u0435\u0436\u0434: "1645", \u0433\u043B\u044F\u0434: "176618131916", \u0433\u043B\u044F\u0434\u0437: "175R", \u0433\u043D: "0V0H0X19160U170P180D190G1M0K", "\u0433\u043D\u0430\u043C ": "0X1E", \u0433\u043E: "0V3Y0X7E1663175618FL19BQ1L051M2F", "\u0433\u043E ": "0V3W0XIF16DF17A918IF19DZ", \u0433\u043E\u0432: "0V3T0X2A166A186K1939", \u0433\u043E\u0432\u043E: "0V2T0X1L1660187T193K", \u0433\u043E\u0432\u043E\u0440: "0V640X1J16BO18DN1954", \u0433\u043E\u0434\u0438\u043D: "0V3F0X15163N191S", \u0433\u043E\u0434\u043D\u044F: "184X", \u0433\u043E\u0434\u043D\u0456: "1939", \u0433\u0440: "0V1E0X191616171H182D192J1L0E", \u0433\u0442: "190N1M3U", \u0433\u0442\u044D: "1M5E", \u0433\u0442\u044D\u0439: "1M5Z", "\u0433\u0442\u044D\u0439 ": "1MAB", \u0433\u0443: "0V1L0X24160Q172I182319151L0C1M17", "\u0433\u0443 ": "0V2F0X57173P183H1914", \u0433\u044D: "17781M8W", \u0433\u044D\u0434\u044D\u0433: "1M4P", \u0433\u044D\u0436: "1M67", "\u0433\u044D\u0436 ": "1M73", \u0433\u044D\u0442: "17M5", \u0433\u044D\u0442\u0430: "17P6", "\u0433\u044D\u0442\u0430 ": "17RA", \u0433\u044D\u0442\u044B: "179H", "\u0433\u044D\u0442\u044B ": "177U", \u0433\u0456: "171D190O1L6V", \u0433\u04AF: "1L081M9A", \u0433\u04AF\u0439: "1MJI", "\u0433\u04AF\u0439 ": "1MLE", \u0433\u04E9: "1M2N", \u0434: "0VGS0XF616EI179X18DR19EV1LHC1MGV", "\u0434 ": "0V2S0X2Q1616172M182B192T1L0B1MGA", \u0434\u0430: "0VIC0XDX16DM17BY18B8195X1LM31ME7", "\u0434\u0430 ": "0VSE0XRE16SG177J18BW191Z1LLJ", \u0434\u0430\u0430: "0X081M7L", "\u0434\u0430\u0430 ": "0X031M5H", \u0434\u0430\u0431\u0430\u0435: "174H", \u0434\u0430\u0433: "170S1M9M", "\u0434\u0430\u0433 ": "1M92", \u0434\u0430\u0434: "0X1L161F170O18031L0S1M59", "\u0434\u0430\u0434 ": "1M65", \u0434\u0430\u0439: "161B171J180T19111L7A", \u0434\u0430\u043B\u0438: "0V060X2C160R180O190A", "\u0434\u0430\u043B\u0438 ": "0V0G0X2G161J1811190A", \u0434\u0430\u043C: "0V100X4R1616171R180C19081L8V", "\u0434\u0430\u043C ": "0V0Y0X5V1614171A180A19051L6C", \u0434\u0430\u043D: "0V3U0X1B160V171X1814190M1L741M1W", "\u0434\u0430\u043D ": "0V290X1M160618051L8C1M1B", \u0434\u0430\u0440: "0V0D0X0P161C174Y1818190P1LBW1M3X", \u0434\u0430\u0440\u044B: "171O1L82", \u0434\u0430\u0440\u044B\u043D: "1L6M", \u0434\u0430\u0445: "0V061605170M180219041M59", \u0434\u0430\u0445\u0433: "1M3D", \u0434\u0430\u0445\u0433\u04AF: "1M6P", "\u0434\u0430\u0446\u044C ": "174E", \u0434\u0430\u0493\u044B: "1L8L", "\u0434\u0430\u0493\u044B ": "1LAW", \u0434\u0432: "0V0I0X0P1612170Y181N191L1M0C", \u0434\u0435: "0V6C0X8C164Q18EC19531LFN", "\u0434\u0435 ": "0V6N0X7Q167G1835194T1LG1", \u0434\u0435\u043A: "0X9O1603180219051L0G", \u0434\u0435\u043A\u0430: "0XCF", "\u0434\u0435\u043A\u0430 ": "0XD0", \u0434\u0435\u043B: "0V110X2C161118BG19041L1Y", \u0434\u0435\u043B\u0430: "0V0F0X0O18AA", \u0434\u0435\u043B\u0430\u043B: "185E", \u0434\u0435\u043B\u0430\u0442: "1885", "\u0434\u0435\u043C\u0435 ": "0X1C", \u0434\u0435\u043D: "0V0F0X4G164P184K19221L6D", "\u0434\u0435\u043D ": "0X3I162R180D19091L4S", "\u0434\u0435\u0441\u044C ": "185J1908", \u0434\u0437: "17AK190A", \u0434\u0437\u0435: "17GJ1902", "\u0434\u0437\u0435 ": "17CY", \u0434\u0437\u0435\u043D\u044C: "174M", \u0434\u0437\u0456: "17DF", \u0434\u0437\u0456\u043D: "175B", \u0434\u0437\u0456\u0446: "176O", \u0434\u0437\u0456\u0446\u044C: "174Y", \u0434\u0438: "0V690X2X1637186L197I1L0W1M1A", "\u0434\u0438 ": "0V5G0X4E164A1824194K", "\u0434\u0438\u043C ": "0V2V160H180F1902", "\u0434\u0438\u043C\u0435 ": "0X1K", \u0434\u0438\u0442: "0V240X0H1612185O1932", \u0434\u043D: "0V1M0X241623172V184D193V1M1E", \u0434\u043D\u0430: "0V0L0X2Z163M174V180X19121M1C", "\u0434\u043D\u0430 ": "0V0N0X28162K1739180R190Z1M1H", "\u0434\u043D\u043E ": "0V1J0X2X162K170R182C1915", \u0434\u043E: "0V4G0X5O16491731189J19BM1L121M3N", "\u0434\u043E ": "0V1C0X1F162T1844195Q", \u0434\u043E\u0431: "0V3C0X4D165S1740181G195S", \u0434\u043E\u0431\u0430: "0V0R0X0U16061809193J", \u0434\u043E\u0431\u0430\u0454: "193Q", \u0434\u043E\u0431\u0440: "0V2L0X43164R1764180T193A", \u0434\u043E\u0431\u0440\u0430: "0V0X0X0L1611176P180H190J", \u0434\u043E\u0431\u0440\u0435: "0V080X03166N1802192S", \u0434\u043E\u0431\u0440\u043E: "0V4U0X35160V180I190F", \u0434\u043E\u043B\u0436: "0X0N184E", "\u0434\u043E\u043C\u0430 ": "0X1O1606171R182H1917", "\u0434\u043E\u043E ": "1M2Q", \u0434\u043E\u043F\u043E: "1804193F", \u0434\u043E\u043F\u043E\u043C: "194U", \u0434\u043E\u0458\u0434: "0X29", \u0434\u043E\u0458\u0434\u0435: "0X1I", \u0434\u0440: "0V1L0X191610171B1825191T1L0F1M12", \u0434\u0443: "0V1B0X0S160J172Z185N19661L071M3M", \u0434\u0443\u0436: "0V09170A194P", \u0434\u0443\u0436\u0435: "0V04195E", "\u0434\u0443\u0436\u0435 ": "0V0A197Q", \u0434\u0443\u043C: "0X0F160V173F184U194D", \u0434\u0443\u043C\u0430: "160O1748186F194E", \u0434\u0443\u043C\u0430\u044E: "171R184P192M", \u0434\u0443\u0440: "0X0A170E180C190F1M56", \u0434\u0443\u0440\u0442: "1M4L", \u0434\u0443\u0440\u0442\u0430: "1M8Z", \u0434\u044B: "1736181C1LKG1M0H", "\u0434\u044B ": "177E181I1LRY", "\u0434\u044B\u049B ": "1L73", \u0434\u044B\u04A3: "1L8B", "\u0434\u044B\u04A3 ": "1LDK", \u0434\u044D: "170R1M7X", \u0434\u044D\u0433: "1M5W", "\u0434\u044D\u0433 ": "1M56", \u0434\u044D\u0445\u0433\u04AF: "1M42", \u0434\u044D\u044D: "1M5S", "\u0434\u044D\u044D\u0440 ": "1M4A", \u0434\u0456: "194G1LEV", "\u0434\u0456 ": "192A1LLC", \u0434\u0456\u04A3: "1L8O", "\u0434\u0456\u04A3 ": "1LE8", \u0434\u04E9: "1M2Q", \u0434\u04E9\u0440: "1M4V", "\u0434\u04E9\u0440 ": "1M5B", \u0435: "0VQW0XR216QS17DX18QR19MU1LOW1M13", "\u0435 ": "0VSB0XRU16RH17NL18SG19SC1LL51M0O", \u0435\u0430: "0V020X0Y1602170618091905", \u0435\u0431: "0V230X2V160R170J185J19311L0N", \u0435\u0431\u0430: "0V3I0X5S1609170I18051916", "\u0435\u0431\u0430 ": "0V2P0X5K1605170G18051916", \u0435\u0431\u0435: "0V100X2Q161C1706185N194F1L0Y", "\u0435\u0431\u0435 ": "0V0Y0X2Y1610170A187E194T", "\u0435\u0431\u044F ": "186X", \u0435\u0432: "0V1K0X2D160O170G182V191U1L0L", "\u0435\u0432 ": "0V030X351602180K1L0W", \u0435\u0433: "0V1G0X1L1613170F187O190N1L4U", "\u0435\u0433\u0430 ": "0V0O0X32161U1805", \u0435\u0433\u043E: "0V240X25161N18D01906", "\u0435\u0433\u043E ": "0V0X0X1T161018EP", \u0435\u0433\u043E\u0434\u043D: "184Y", \u0435\u0434: "0V510X4V164U1738186L191W1L5A1M0D", \u0435\u0434\u0430: "0V420X4D162C17821817190F", "\u0435\u0434\u0430\u044E ": "17541802", "\u0435\u0434\u0435\u043D ": "0X1O160H1804", \u0435\u0434\u0438: "0V2G0X2J16501828190F1L0P", \u0435\u0434\u0438\u043D: "0V0F0X0N162Z18111904", "\u0435\u0434\u0438\u043D ": "164Q", \u0435\u0434\u043D: "0V2D0X4B1653170F18191908", \u0435\u0434\u043D\u0430: "0V0D0X2M162Z17091803", "\u0435\u0434\u043D\u0430 ": "0V0S0X1F1647", \u0435\u0434\u043D\u043E: "0V1N0X2D161S1805", "\u0435\u0434\u043D\u043E ": "0V1R0X1Y163C1803", \u0435\u0434\u0456: "190U1L9O", "\u0435\u0434\u0456 ": "19051LES", \u0435\u0435: "0X0K160F170D181U", \u0435\u0437: "0V140X0Z161I170P182T191E1L2R", \u0435\u0439: "160P1729185E19241L6A", "\u0435\u0439 ": "160I175G188A193B1L3B", \u0435\u0439\u0434\u0456: "1L6P", "\u0435\u0439\u0434\u0456 ": "1L96", \u0435\u043A: "0V3R0X5T161N171I182P192D1L9V", "\u0435\u043A ": "0V1S0X0Z161B171I181A19031L77", \u0435\u043A\u0430: "0V3L0XC616211725180Y191T1L0F", "\u0435\u043A\u0430 ": "0V0O0XD5160W1712180N1903", "\u0435\u043A\u0430\u043E ": "0V4X", \u0435\u043A\u0435: "0V0B0X0218081L8V", \u0435\u043A\u0435\u0442: "1L86", \u0435\u043A\u0435\u0442\u0442: "1L72", \u0435\u043A\u043E: "0V280X4Y16081811190X", \u0435\u043A\u043E\u0433\u0430: "0V0C0X1V", "\u0435\u043A\u043E\u0458 ": "0X1T", \u0435\u043B: "0V3D0X35162S173618CF192U1LAI", "\u0435\u043B ": "0V040X38161P185519021L2C", \u0435\u043B\u0430: "0V1X0X1J16131746188V1906", \u0435\u043B\u0430\u0442: "0X0B1604184J", \u0435\u043B\u0430\u0442\u044C: "1886", \u0435\u043B\u0435: "0V270X1Y1620170B182T192A1L9W", \u0435\u043B\u0435\u0434\u0456: "1L5S", \u0435\u043B\u0438: "0V460X2L162S18351919", "\u0435\u043B\u0438 ": "0V210X29161E182T1903", \u0435\u043B\u044C\u043C: "176Q1902", \u0435\u043B\u044C\u043C\u0456: "179U", \u0435\u043B\u044C\u043D: "170M183X1903", \u0435\u043C: "0V5Q0X4P162N171T189S193D1L88", "\u0435\u043C ": "0V7N0X1S164L1740188G190T1L1Y", \u0435\u043C\u0430: "0V2C0X66161C170W180L19241L11", "\u0435\u043C\u0430 ": "0V1G0X5C160X170N180H190O", \u0435\u043C\u0435: "0V240X6I163P181Y19031L8K", "\u0435\u043C\u0435 ": "0V1K0X70162I18031L0O", \u0435\u043C\u0435\u0441: "16061LB2", "\u0435\u043C\u0435\u0441 ": "1L8S", \u0435\u043C\u043B\u0435: "180819021L71", \u0435\u043C\u043B\u0435\u043A: "1L9W", \u0435\u043C\u0443: "0V0H186E1909", "\u0435\u043C\u0443 ": "0V0L188J190B", "\u0435\u043C\u0456\u043D ": "1L5Y", \u0435\u043D: "0V4Z0X6D167W174118FZ19CO1LMO1M0H", "\u0435\u043D ": "0V1V0XAK16AV1711184K191Y1LSG", "\u0435\u043D\u0430 ": "0V2S0X27162D171C181M1915", \u0435\u043D\u0435: "0V1T0X2Z161X170F181D196J1L27", "\u0435\u043D\u0435 ": "0V1U0X2B16191809197D", \u0435\u043D\u0438: "0V320X3B167A1892192A1L11", \u0435\u043D\u0438\u0435: "0X0D163B184P1L1B", "\u0435\u043D\u0438\u0435 ": "0X0A164S187O", "\u0435\u043D\u0438\u0439 ": "180Y192S", "\u0435\u043D\u0438\u044F ": "161Z185Z", "\u0435\u043D\u043D\u044F ": "1721193P", "\u0435\u043D\u043E ": "0V1F0X291628180L190J", \u0435\u043D\u0441: "0V060X08165R1706180A190A1L11", \u0435\u043D\u0441\u043A: "0V040X0916691805", \u0435\u043D\u0441\u043A\u0438: "0X0516CC1805", \u0435\u043D\u044C: "172V186Z191R", "\u0435\u043D\u044C ": "173W1873191O", \u0435\u043D\u044F: "160M170A187M1904", "\u0435\u043D\u044F ": "1607170D189Q1903", \u0435\u043D\u0456: "170Q199W1LAV", "\u0435\u043D\u0456 ": "170J19AZ1L5T", \u0435\u043D\u0456\u04A3: "1L9U", "\u0435\u043D\u0456\u04A3 ": "1LCT", \u0435\u043E: "0V250X051605180H19091L06", "\u0435\u043E ": "0V4418021902", \u0435\u043F: "0V0U0X0M160C1711181B19141L2P", \u0435\u0440: "0V3F0X3W163D175818BH19BW1LHO1M0U", "\u0435\u0440 ": "0V1C0X12161B1728181I191O1L8X1M0N", \u0435\u0440\u0430: "0V1J0X2A162517841823190M1L0O", \u0435\u0440\u0434: "180K190J1L7J", \u0435\u0440\u0434\u0456: "1L8T", "\u0435\u0440\u0434\u0456 ": "1L7B", \u0435\u0440\u0435: "0V0R0X13161S187F196M1L7H", \u0435\u0440\u0435\u043A: "1806190Z1L8H", "\u0435\u0440\u0435\u043A ": "1L87", \u0435\u0440\u0438: "0V310X62165B182I190O1L1B", "\u0435\u0440\u0438 ": "0V2H0X6Y164A180Q19091L10", \u0435\u0440\u0443\u0432\u0430: "0X1L1904", \u0435\u0440\u0456: "19A21LBW", "\u0435\u0440\u0456 ": "19B81L7M", \u0435\u0440\u0456\u043D: "1L75", \u0435\u0441: "0V3Q0X2W1634172A18AI192L1L9P", "\u0435\u0441\u043B\u0438 ": "186O", \u0435\u0441\u043F\u0443\u0431: "18041L6G", \u0435\u0441\u0442: "0V4I0X3R1652170H18A5191G1L4C", "\u0435\u0441\u0442\u043E ": "0V350X1C161Z1815", \u0435\u0441\u0442\u044C: "185E", "\u0435\u0441\u0442\u044C ": "189J1902", "\u0435\u0441\u044C ": "17101852190T", \u0435\u0441\u0456: "1709190A1L6Y", \u0435\u0442: "0V3V0X3R165X171G18EY192M1LBV", "\u0435\u0442 ": "0V2B0X1W162U170Y18H9190H1L6M", \u0435\u0442\u0435: "0V2W0X23166D184V19291L2K", "\u0435\u0442\u0435 ": "0V360X1W166C18501928", \u0435\u0442\u043E: "0V0G0X4Y169K180U1905", "\u0435\u0442\u043E ": "0V070X5P16AB1806", \u0435\u0442\u0441\u044F: "1858", "\u0435\u0442\u0441\u044F ": "189F", \u0435\u0442\u0442: "0X03160518021L9P", \u0435\u0442\u0442\u0456: "1L94", "\u0435\u0442\u0442\u0456 ": "1L6Z", \u0435\u0442\u0456: "190F1L7X", \u0435\u0442\u0456\u043D: "1L7Q", "\u0435\u0442\u0456\u043D ": "1L5S", \u0435\u0446: "0V0J0X0J160L173R180W190W", \u0435\u0446\u0446: "176V", \u0435\u0446\u0446\u0430: "17B3", "\u0435\u0446\u0446\u0430 ": "17FP", \u0435\u0447: "0V100X19161G170S1824191L", "\u0435\u0447\u0435 ": "0V0D0X1K163718031903", \u0435\u0448: "0V300X56163K1723184A19251L2P", "\u0435\u0448 ": "0V4A0X5X1666175F193C1L0F", \u0435\u0448\u0435: "0V090X8B166T180T190A1L1Y", "\u0435\u0448\u0435 ": "0V050XAH167019041L28", \u0435\u0448\u0442\u043E: "0V1W0X2Q1902", "\u0435\u0448\u0442\u043E ": "0V4R0X2V", \u0435\u0448\u044C: "186M", "\u0435\u0448\u044C ": "188B", "\u0435\u0449\u043E ": "163A1902", "\u0435\u0449\u0451 ": "183Y", \u0435\u0458: "0V0J0X0F", \u0435\u045B: "0V2F", \u0435\u045C: "0X17", \u0435\u045C\u0435: "0X3A", "\u0435\u045C\u0435 ": "0X3I", \u0435\u04A3: "1L3X", \u0436: "0V2V0X31163M17301855195I1L7B1M5E", "\u0436 ": "0V040X04160B1712180I191P1L051MBG", \u0436\u0430: "0V0N0X1X1617173G182W191H1LBK1M0G", \u0436\u0430\u043C: "0X391603170N1L0O", "\u0436\u0430\u043C ": "0X491711", \u0436\u0430\u0441\u0430: "1L6L", \u0436\u0430\u049B\u0441\u044B: "1L7Q", \u0436\u0434: "0V090X02161G1709182K190T1L09", \u0436\u0434\u0430: "0V0O165B181K19051L0D", \u0436\u0435: "0V3A0X2X162Y188B196Z1L4Y", "\u0436\u0435 ": "0V2K0X351655187219A9", "\u0436\u0435\u0431\u0438 ": "0X1W", "\u0436\u0435\u0448 ": "0V140X291621191G", \u0436\u0438: "0V1X0X1F161B1847192N1L0S1M2C", \u0436\u0438\u043B: "0V0A0X0216061817190B1M44", "\u0436\u043D\u043E ": "0V0C0X14160Y185O1907", \u0436\u043E: "0X031605171I1808190U1L3X1M0C", "\u0436\u043E\u049B ": "1L71", \u0436\u044B: "173M1L30", \u0436\u04B1\u043C\u044B: "1L8A", \u0436\u04B1\u043C\u044B\u0441: "1LB9", \u0436\u04D9: "1L3K", \u0436\u04D9\u043D: "1L97", \u0436\u04D9\u043D\u0435: "1LFS", "\u0436\u04D9\u043D\u0435 ": "1LKU", \u0437: "0V6T0X6H1694178V187K19BQ1L891M3C", "\u0437 ": "0V0Z0X0D161Q1751182W195X1LBA1M0M", \u0437\u0430: "0V5R0X5S167F179C18BE19D41L711M36", "\u0437\u0430 ": "0V4A0X8M16CA1767184V193R1L0Y", \u0437\u0430\u0432: "0V130X0V161717161821195Y1M0X", "\u0437\u0430\u0432 ": "193P", "\u0437\u0430\u043B ": "160E184A1902", \u0437\u0430\u0440\u0430\u0437: "0X02173O1803192L", \u0437\u0430\u0448\u0442\u043E: "0V4F", "\u0437\u0430\u0449\u043E ": "164L", \u0437\u0430\u049B: "1L7E", \u0437\u0430\u049B\u0441: "1LA0", \u0437\u0430\u049B\u0441\u0442: "1LDT", \u0437\u0431: "0V0N0X1E160P170L180E190Q1L0P", \u0437\u0431\u043E: "0V0Y0X33160F170818021904", \u0437\u0431\u043E\u0440: "0V050X3W16081902", \u0437\u0431\u043E\u0440\u0443: "0X30", \u0437\u0432: "0V100X0Q161G171Q18241921", \u0437\u0433: "0V0U0X0Y160L170I180K190C1L1M", \u0437\u0433\u043B\u0435: "0V1E0X2B1620", \u0437\u0433\u043B\u0435\u0434: "0V3L0X2F1606", \u0437\u0433\u043B\u0435\u0436: "1641", \u0437\u0434: "0V0F0X0E160D171L182R191R1L68", \u0437\u0434\u0435\u0441\u044C: "185J", \u0437\u0434\u0456: "19061L6Y", \u0437\u0434\u0456\u04A3: "1L6X", "\u0437\u0434\u0456\u04A3 ": "1L9Q", \u0437\u0435: "0V0Q0X0W160W175F180R190I1L1S", "\u0437\u0435 ": "0V0C0X0H160O178P1802", "\u0437\u0435\u043D\u044C ": "174K", \u0437\u0438: "0V1P0X0U162M180X19161L15", "\u0437\u0438 ": "0V190X0R167M18051909", \u0437\u043B: "0V0E0X0F160I170P180F190K", \u0437\u043C\u0430\u045E\u043B: "175U", \u0437\u043D: "0V340X2G161V172U185O1966", \u0437\u043D\u0430: "0V790X7K166D1765189I199Z", \u0437\u043D\u0430\u0435: "0X4K162G170F183Q", "\u0437\u043D\u0430\u0435 ": "0X1J161X", \u0437\u043D\u0430\u0435\u0448: "0X1Y16201824", \u0437\u043D\u0430\u043C: "0V2L0X2M162118041904", "\u0437\u043D\u0430\u043C ": "0V5Y0X2P1643", \u0437\u043D\u0430\u044E: "170A183E192V", "\u0437\u043D\u0430\u044E ": "170E185N193S", \u0437\u043D\u0430\u0454: "1939", \u0437\u043E: "0V0T0X16160L170E181O190W1L081M0Q", \u0437\u043E\u0448\u0442: "0X3Q", \u0437\u043E\u0448\u0442\u043E: "0X3X", \u0437\u0440: "0V040X04160D171G180P193X", \u0437\u0440\u0430\u0431: "1606174Z1803", \u0437\u0440\u0430\u0431\u0456: "176U", \u0437\u0440\u043E: "170R1805197H", \u0437\u0440\u043E\u0431: "170T197Y", \u0437\u0440\u043E\u0431\u0438: "19AG", \u0437\u0456: "174C191F1L3V", "\u0437\u0456\u0446\u044C ": "1750", \u0437\u04AF\u0439\u043B: "1M3D", "\u0437\u04AF\u0439\u043B ": "1M58", \u0438: "0VPY0XM316PA18LO19OV1L581MHZ", "\u0438 ": "0VO40XMM16O118OL19SG1L1T1MFS", \u0438\u0431\u0443\u0434\u044C: "184M", \u0438\u0432: "0V2K0X34161S184C19991L0L1M08", "\u0438\u0432 ": "0V0K0X54161C180V198X", "\u0438\u0432\u0441\u044F ": "193V", \u0438\u0433: "0V1K0X16161M1829191A1L0B1M25", \u0438\u0433\u0434\u04E9\u0440: "1M3I", \u0438\u0434: "0V2B0X28161M1849191O1L1C1M38", "\u0438\u0434 ": "0V030X06160D180919031M4G", "\u0438\u0434\u0430\u043C ": "0X1F", \u0438\u0434\u0435: "0V490X3Y1621184319061L1P", "\u0438\u0434\u0435 ": "0V160X32160M1803", \u0438\u0435: "0X15162518491L1L1M09", "\u0438\u0435 ": "0X2M1668187C1L11", "\u0438\u0435\u0442\u043E ": "0X08163Z", \u0438\u0436\u0434\u0430\u043B: "164C", \u0438\u0437: "0V2X0X2B163O184H190M1L0D", \u0438\u0437\u0433\u043B: "0V1D0X28161Y", \u0438\u0437\u0433\u043B\u0435: "0V3I0X2C163Z", \u0438\u0439: "160D182P198J1MGL", "\u0438\u0439 ": "1606184S19EV1MDT", \u0438\u0439\u0433: "1MDT", "\u0438\u0439\u0433 ": "1MF6", \u0438\u0439\u043D: "190B1M7L", "\u0438\u0439\u043D ": "1M7E", \u0438\u043A: "0V3P0X271626184P19321L281M0B", \u0438\u043A\u043E: "0V400X3H1636183I190S", "\u0438\u043A\u043E ": "0V431802", \u0438\u043A\u043E\u0433: "0V070X2B162E1832", \u0438\u043A\u043E\u0433\u0430: "0V080X27164E", \u0438\u043A\u043E\u0433\u0434: "184Z", "\u0438\u043A\u043E\u0458 ": "0X1A", \u0438\u043B: "0V480X2A162G18A5195K1L0P1M3Q", "\u0438\u043B ": "0V0A0X36162X188J19031M28", \u0438\u043B\u0430: "0V4V0X0T161G183F1951", "\u0438\u043B\u0430 ": "0V5M0X0T161C183D194N", "\u0438\u043B\u0438 ": "0V3E0X0X1624185H192U", "\u0438\u043B\u043E ": "0V2X0X1K160R180T190I", "\u0438\u043B\u0441\u044F ": "185A", \u0438\u043C: "0V8J0X40163O186B19511L0Q1M0K", "\u0438\u043C ": "0VDF0X2C163K186819541M0O", \u0438\u043C\u0430: "0V720X7O169S182Q19171L0E", "\u0438\u043C\u0430 ": "0V4R0X4E164618071905", \u0438\u043C\u0430\u043C: "0V1K0X2I162M", "\u0438\u043C\u0430\u043C ": "0V320X1W164K", "\u0438\u043C\u0430\u0448 ": "0V130X1D162A", \u0438\u043C\u0435: "0V120X47160S181V1915", "\u0438\u043C\u0435 ": "0V0K0X5116041802190U", \u0438\u043D: "0V3E0X38164C187B197N1L2K1M6U", "\u0438\u043D ": "0V0U0X0W163C1820191N1L0J1M47", \u0438\u043D\u0430: "0V260X52166Z182V193J1L2I", "\u0438\u043D\u0430 ": "0V260X47163V181Y193A1L0O", \u0438\u043D\u0430\u0442\u0430: "0X1H162C", \u0438\u043D\u0438: "0V1X0X1S162M181K192R1L0N1M7I", \u0438\u043D\u0438\u0439: "180319081M8Q", "\u0438\u043D\u0438\u0439 ": "1805190B1MFN", \u0438\u043E: "0V480X0Y160D180P1L0G1M0P", "\u0438\u043E ": "0VAK0X0216091808", "\u0438\u043E\u0442 ": "0X3C1802", \u0438\u0440: "0V1M0X1M161A182E191E1L0M1M2X", \u0438\u0440\u0430: "0V280X3M163Z181V190T1L0F", \u0438\u0440\u0441\u044D\u043D: "1M3I", \u0438\u0441: "0V5S0X3W16581853195V1L101M0K", \u0438\u0441\u0430: "0V430X0C1611181C190Z", \u0438\u0441\u0430\u043C: "0V3P", "\u0438\u0441\u0430\u043C ": "0V90", \u0438\u0441\u043A: "0V0R0X1L167G1813190D", \u0438\u0441\u043A\u0430: "0V030X0B167Z180G1902", \u0438\u0441\u043A\u0430\u043C: "165K", \u0438\u0441\u043A\u0430\u0448: "1651", \u0438\u0441\u043B: "0V4F0X4Z167G180F190D", \u0438\u0441\u043B\u0430: "0V030X3418061903", \u0438\u0441\u043B\u0430\u043C: "0X301802", \u0438\u0441\u043B\u0438: "0V530X1T161Q1902", \u0438\u0441\u043B\u0438\u043C: "0V6O0X03", \u0438\u0441\u043B\u044F: "1660", "\u0438\u0441\u043B\u044F ": "16BQ", \u0438\u0441\u0442: "0V3L0X4G163Y182K192I1L1J", \u0438\u0441\u0442\u0438: "0V1P0X3C162S180M190H", \u0438\u0441\u0442\u0438\u043D: "0V1R0X2G1645180A", \u0438\u0441\u044F: "1802195Z", "\u0438\u0441\u044F ": "196S", \u0438\u0442: "0V5B0X3L164V18EI19C41L1H1M1I", "\u0438\u0442 ": "0V070X09160D18751906", \u0438\u0442\u0435: "0V730XA016DE1889191I1L13", "\u0438\u0442\u0435 ": "0V7L0XBX16BV186K190Y", \u0438\u0442\u0435\u043B: "0X0W162X1846190L", \u0438\u0442\u0435\u043B\u044C: "1852190J", \u0438\u0442\u0438: "0V400X0I160Q180J19DX", "\u0438\u0442\u0438 ": "0V4B0X07160619D6", \u0438\u0442\u0438\u0441\u044F: "192V", \u0438\u0442\u0441\u044F: "184R", "\u0438\u0442\u0441\u044F ": "188M", \u0438\u0442\u044C: "18BZ196E", "\u0438\u0442\u044C ": "18DO1964", \u0438\u0442\u044C\u0441\u044F: "18541924", \u0438\u0445: "0V1X161N182U191Q1L0R1M30", "\u0438\u0445 ": "0V4W164O1858192K1L0F1M47", \u0438\u0446: "0V1V0X11160Z181N190V1L0J", \u0438\u0447: "0V1K0X0Y162E182D191C1M0U", \u0438\u0447\u0435\u0433\u043E: "184M", "\u0438\u0447\u043A\u0438 ": "0V0J0X09163Y18021903", "\u0438\u0447\u043D\u043E ": "0V2I0X1B1613180M1907", \u0438\u0448: "0V3M0X2M161M182F192B1M18", "\u0438\u0448 ": "0V3C0X5G165H191G1M2X", \u0438\u0448\u0442\u043E: "0V040X29", "\u0438\u0448\u0442\u043E ": "0X27", \u0438\u044F: "163D183119041L4I", "\u0438\u044F ": "167Y185U19021L3F", \u0438\u044F\u043B\u044B\u049B: "1L6Q", \u0438\u044F\u0442: "1665180D", "\u0438\u044F\u0442 ": "1631", "\u0438\u044F\u0442\u0430 ": "164I", \u0438\u0458: "0V4N0X1W", \u0438\u0458\u0430: "0V3L0X6M", "\u0438\u0458\u0430 ": "0V1Z0X4D", \u0438\u0458\u0430\u0442: "0V1A0X2P", \u0438\u0458\u0430\u0442\u0430: "0X1D", \u0438\u0458\u0435: "0V6X", "\u0438\u0458\u0435 ": "0V73", \u0439: "1637173Z185A196V1L6Y1MIQ", "\u0439 ": "163T17A118FB19CY1L5L1MMF", \u0439\u0433: "170F19021L0B1M9O", "\u0439\u0433 ": "1MGW", \u0439\u0433\u0430: "1M4V", \u0439\u0433\u0430\u0430: "1M5M", "\u0439\u0433\u0430\u0430 ": "1M6E", \u0439\u0434: "160L170J180T190Z1L671M23", \u0439\u0434\u0430\u0433: "1M36", "\u0439\u0434\u0430\u0433 ": "1M5C", \u0439\u0434\u044B: "1L6O", "\u0439\u0434\u044B ": "1LAJ", "\u0439\u0434\u0456 ": "1L6T", \u0439\u043B: "1603170N180319071L311M2C", \u0439\u043D: "160F170W180M191O1L141MCT", "\u0439\u043D ": "160D1705180519041MAA", \u0439\u043D\u0430: "160P171W180719091L2K1MIN", "\u0439\u043D\u0430 ": "160E171R1807190A1MKW", \u0439\u043E\u0433\u043E: "1948", "\u0439\u043E\u0433\u043E ": "1963", \u0439\u0441: "160J171A1821191C1L121M49", \u0439\u0441\u0430: "1M8P", \u0439\u0441\u0430\u043D: "1MA1", "\u0439\u0441\u0430\u043D ": "1MHZ", \u0439\u0442: "160P17021825191R1L351M0L", \u0439\u0445: "1M3U", "\u0439\u0445 ": "1M47", "\u0439\u0445\u0430\u043D ": "1M46", "\u0439\u0448\u043E\u045E ": "174C", \u0439\u044B: "1L5A", \u0439\u044B\u043D: "1L71", \u0439\u044B\u043D\u0448\u0430: "1L6T", \u043A: "0VBB0XC416E017B618CN19DU1LBT1M0O", "\u043A ": "0V2E0X1E162I1768188U196G1L7H1M0A", \u043A\u0430: "0V7L0XCK16AU17HV18DZ19BY1L2S1M08", "\u043A\u0430 ": "0V4K0XIW16BF17DY1865199C1L14", "\u043A\u0430\u0431 ": "1768", \u043A\u0430\u0434: "0V490X29170P18021L0M", \u043A\u0430\u0434\u0430: "0V2W0X03170I", "\u043A\u0430\u0434\u0430 ": "0V75170M", \u043A\u0430\u0434\u0435: "0X2V", "\u043A\u0430\u0434\u0435 ": "0X2Z", \u043A\u0430\u0436: "0V1T0X4D162G172Y183O192K", \u043A\u0430\u0436\u0430: "0X38160X171E", "\u043A\u0430\u0436\u0430 ": "0X1B161Y1716", \u043A\u0430\u0437: "0V0M0X0M1656176U187F195K", \u043A\u0430\u0437\u0430: "0V0G163O1782188T1967", "\u043A\u0430\u0437\u0430 ": "163X", \u043A\u0430\u0437\u0430\u0432: "18021959", \u043A\u0430\u0437\u0430\u043B: "0V0A161D173O18BA1929", \u043A\u0430\u0437\u0432\u0430: "164L171P", "\u043A\u0430\u0439 ": "160C176X18021909", \u043A\u0430\u043A: "0V2T0X5K169N189D", "\u043A\u0430\u043A ": "162K188Q", \u043A\u0430\u043A\u0432: "0V0F0X0Z167I", \u043A\u0430\u043A\u0432\u043E: "0V0A0X0516AM", \u043A\u0430\u043A\u043E: "0V2R0X6F182C", "\u043A\u0430\u043A\u043E ": "0V6W0X6F", \u043A\u0430\u043B: "0V0E0X1K161O17BL180U190Q1L1W", \u043A\u0430\u043B\u0456: "17DZ", "\u043A\u0430\u043B\u0456 ": "17HZ", \u043A\u0430\u043C: "0V0R0X4A1636174Z180X190K", "\u043A\u0430\u043C ": "0V0B0X4C162V173B180A1906", "\u043A\u0430\u043E ": "0V3Z", \u043A\u0430\u0442: "0V090X2F16711713180Z191E", \u043A\u0430\u0442\u0430: "0X2W1643170E180C1908", "\u043A\u0430\u0442\u0430 ": "0X30168B18031902", \u043A\u0430\u0442\u043E: "0X021630170T18031903", "\u043A\u0430\u0442\u043E ": "1667", "\u043A\u0430\u044F ": "1767181U", \u043A\u0432: "0V0C0X0E161U170G180B190I", "\u043A\u0432\u043E ": "0V030X0E164T", \u043A\u0435: "0V160X05160B170C181J190W1LGM", \u043A\u0435\u043B: "0X0216021LAH", \u043A\u0435\u043B\u0435: "1L7M", \u043A\u0435\u043D: "0V060X07160K170E180319051L82", "\u043A\u0435\u043D ": "0X03160E180219021L8R", \u043A\u0435\u0440\u0435\u043A: "1L8A", \u043A\u0435\u0442: "0V050X05160D1706180819091L8E", \u043A\u0435\u0442\u0442: "1L8N", \u043A\u0435\u0442\u0442\u0456: "1L87", \u043A\u0438: "0V1Y0X1N163R185G195N1L0S1M0M", "\u043A\u0438 ": "0V2L0X3L16BG185O197A", "\u043A\u0438\u0439 ": "182U192X", \u043A\u043B: "0V0U0X0H160S1722181A191U1L09", \u043A\u043D: "0V040X0L160K17141814191B", \u043A\u043E: "0V980X83168B174S18FV19AZ1L2C1M0I", "\u043A\u043E ": "0VC40X7Z16911706186M192Q", "\u043A\u043E\u0432\u0430 ": "165R171O18061903", \u043A\u043E\u0433: "0V190X5G165I1715186X191C", \u043A\u043E\u0433\u0430: "0V0I0X6F165F171Y", "\u043A\u043E\u0433\u0430 ": "0V1A0X2Y167T172V", \u043A\u043E\u0433\u0430\u0442: "163R", \u043A\u043E\u0433\u0430\u0448: "0X40", \u043A\u043E\u0433\u0434: "186W", \u043A\u043E\u0433\u0434\u0430: "18C7", \u043A\u043E\u0435\u0442\u043E: "1655", "\u043A\u043E\u0439 ": "1636172H183S", \u043A\u043E\u043B: "0V380X4K165C1754184K196S1L13", \u043A\u043E\u043B\u0438: "0V2N0X0616051806196J", "\u043A\u043E\u043B\u0438 ": "0V0H0X02197L", \u043A\u043E\u043B\u0438\u043A: "0V5Z", \u043A\u043E\u043B\u043A: "0X35163H", \u043A\u043E\u043B\u043A\u043E: "1678", \u043A\u043E\u043B\u043A\u0443: "0X37", \u043A\u043E\u043B\u044C\u043A: "173O186A", "\u043A\u043E\u043B\u0456 ": "174T190H", \u043A\u043E\u043C: "0V1U0X0W160R170Q1867192T1L1Z1M0J", "\u043A\u043E\u043C ": "0V1G170I183Y190Z", "\u043A\u043E\u0442 ": "0X29170L1807", \u043A\u043E\u0442\u043E\u0440: "1858", "\u043A\u043E\u044E ": "1933", \u043A\u043E\u0458: "0V3F0X4E", "\u043A\u043E\u0458 ": "0V0D0X4T", \u043A\u0440: "0V1J0X171610172B1838192A1L07", \u043A\u0442: "0V0C0X09160F170W182G190L1L4S", \u043A\u0442\u0435: "0V030X021603180519021L78", "\u043A\u0442\u043E ": "160M1843", \u043A\u0443: "0V3C0X371615175H184S196U1L0B", "\u043A\u0443 ": "0V2Z0X67179Z1843198Q", \u043A\u044A: "1623", \u043A\u044A\u0434\u0435: "1630", "\u043A\u044A\u0434\u0435 ": "165H", \u043A\u0456: "177K193V1L79", "\u043A\u0456 ": "17GE191G1L3X", \u043A\u0456\u043B\u044C\u043A: "193M", \u043A\u04AF: "1L3E", \u043A\u04E9: "1L6P", \u043A\u04E9\u0440: "1L72", \u043B: "0VCJ0XAM16CJ17C618H719E71LI71ME0", "\u043B ": "0V0E0X30162P170P18FG190M1LB81M9X", \u043B\u0430: "0V840X4N164217EB18CI19BS1LG91M5P", "\u043B\u0430 ": "0VCK0X3A166617L318BG19E51L2X", \u043B\u0430\u0430: "0X021M6C", "\u043B\u0430\u0430 ": "1M3T", \u043B\u0430\u0432\u0435\u043A: "175H", \u043B\u0430\u0434\u044B: "170O18051LAF", "\u043B\u0430\u0434\u044B ": "170R1LDV", \u043B\u0430\u043C: "0V050X3R16061718180C190E1L2W", "\u043B\u0430\u043C ": "0X4S170V18051902", \u043B\u0430\u0440: "0V0D0X0F160B171G180A190B1LDU", "\u043B\u0430\u0440 ": "1LA6", \u043B\u0430\u0440\u0434: "1L7Q", \u043B\u0430\u0440\u0434\u044B: "1L9I", \u043B\u0430\u0441: "0V0T0X11160Z17AO1838194R1L47", \u043B\u0430\u0441\u043A\u0430: "0X0217611937", "\u043B\u0430\u0441\u044C ": "184X190D", \u043B\u0430\u0441\u044F: "17A31928", "\u043B\u0430\u0441\u044F ": "17EE1939", "\u043B\u0430\u0442\u0430 ": "0X1C164X170I1806", \u043B\u0430\u0442\u044C: "184S", "\u043B\u0430\u0442\u044C ": "1887", \u043B\u0433: "0X0616081702180F1L2G1M2H", \u043B\u0433\u0435\u043D: "1L6X", "\u043B\u0433\u0435\u043D ": "1L84", \u043B\u0434: "18031LAN1M32", \u043B\u0434\u0430: "180319021L6V1M28", \u043B\u0434\u044B: "1LD9", "\u043B\u0434\u044B ": "1LFX", \u043B\u0435: "0V530X51164G175Z187V194E1LB11M09", \u043B\u0435\u0434: "0V3Y0X5E164Y1711182D19081L4G", \u043B\u0435\u0434\u0430: "0V370X4L161X170D1905", "\u043B\u0435\u0434\u0430 ": "0V2J0X1U1612", "\u043B\u0435\u0434\u0456 ": "1L8M", \u043B\u0435\u0436\u0434\u0430: "1645", \u043B\u0435\u043A\u0435: "1L73", \u043B\u0435\u043A\u0435\u0442: "1L9W", \u043B\u0436\u044B\u0440: "1756", "\u043B\u0436\u044B\u0440 ": "175B", \u043B\u0438: "0VCU0X6L167S18D319BS1L1Z1M1Q", "\u043B\u0438 ": "0VIN0XDL16I418FU19CA1M0T", \u043B\u0438\u043A: "0V420X0X160I180N191A1L2M", \u043B\u0438\u043A\u043E: "0V370X04180A1906", "\u043B\u0438\u043A\u043E ": "0V7I", \u043B\u0438\u043C: "0V690X0F160H18071906", "\u043B\u0438\u043C ": "0V70160D1904", "\u043B\u0438\u0441\u044C ": "1853191L", \u043B\u043A: "0V020X1S1623170I180L190J1L0Q", \u043B\u043A\u043E: "0V030X08167718091908", "\u043B\u043A\u043E ": "0X03164O1802", \u043B\u043A\u043E\u0432\u0430: "165B", \u043B\u043A\u0443: "0X5H170B180C190E", "\u043B\u043A\u0443 ": "0X73170J180H190C", \u043B\u043C: "0V030X0216041L4J", \u043B\u043C\u0430: "16031L7T", \u043B\u043D: "0V0B0X0U1617180Q1M1G", \u043B\u043E: "0V3S0X27161W173918A2196P1L121M4L", "\u043B\u043E ": "0V650X3B162E17421874194U", "\u043B\u043E\u0441\u044C ": "18641907", \u043B\u0441: "0X041605182E1L0R1M25", \u043B\u0441\u044D\u043D: "1M38", "\u043B\u0441\u044D\u043D ": "1M5V", "\u043B\u0441\u044F ": "186V", \u043B\u0442: "0V040X061609170218051L2K1M36", "\u043B\u0442\u0430\u0439 ": "1M3I", \u043B\u0443: "0V1L0X231614171H183Y191F1L2L1M12", \u043B\u044B: "171A181D1LE61M0M", "\u043B\u044B ": "171R180J1L8J", "\u043B\u044B\u043F ": "1L84", \u043B\u044B\u049B: "1LFD", "\u043B\u044B\u049B ": "1LJM", \u043B\u044C: "17781899195L1L0L1M10", "\u043B\u044C\u043A\u0438 ": "193J", \u043B\u044C\u043A\u043E: "186E1904", "\u043B\u044C\u043A\u043E ": "18BD", \u043B\u044C\u043A\u0456: "178E1903", "\u043B\u044C\u043A\u0456 ": "17C0", \u043B\u044C\u043C\u0456: "176Q", "\u043B\u044C\u043C\u0456 ": "179U", \u043B\u044C\u043D: "1778186L193P", \u043B\u044C\u043D\u043E: "184U191A", "\u043B\u044C\u043D\u043E ": "186B191C", "\u043B\u044C\u0448\u0435 ": "18681930", \u043B\u044D: "1M48", \u043B\u044E: "160M1735183N193Z1L05", \u043B\u044F: "162W175B1833193Z", "\u043B\u044F ": "167U175H182R1933", \u043B\u0456: "17BC19551L73", "\u043B\u0456 ": "17IP19281L40", "\u043B\u0456\u0441\u044F ": "176J", \u043B\u0493: "1L4C", \u043B\u0493\u0430: "1LA0", \u043B\u0493\u0430\u043D: "1LE5", "\u043B\u0493\u0430\u043D ": "1LFM", \u043C: "0VJM0XJ716G517B118GY19JY1LFJ1M9M", "\u043C ": "0VKV0XIP16CE17AS18LY19JG1LAP1M64", \u043C\u0430: "0V7C0X62166717CI189U19D01LCX1M7N", "\u043C\u0430 ": "0VAP0X8R16A31788186Y198V1L3M", \u043C\u0430\u0439: "161A171H180A19131L501M4L", \u043C\u0430\u0439\u0433: "170Q1M56", "\u043C\u0430\u0439\u0433 ": "1MA1", \u043C\u0430\u0439\u0434\u044B: "1L61", \u043C\u0430\u043B\u043A\u043E: "164Q", \u043C\u0430\u043B\u043A\u0443: "0X2A", \u043C\u0430\u043C: "0V1W0X33163O170S180K190I1L12", "\u043C\u0430\u043C ": "0V1N0X31163F170U1803", \u043C\u0430\u0440: "0V0N0X0J160U17371813190R1L181M5F", \u043C\u0430\u0448: "0V0P0X2K162D171N181L191Q1L0S1M4D", "\u043C\u0430\u0448 ": "0V0J0X1J16191M3P", "\u043C\u0430\u0448\u0435 ": "0X1I16241802", "\u043C\u0430\u044E ": "172Q18321935", \u043C\u0430\u0454: "195T", "\u043C\u0430\u0454 ": "1942", \u043C\u0430\u045E\u043B\u044F: "176E", \u043C\u0430\u0493\u0430: "1L75", \u043C\u0430\u0493\u0430\u043D: "1L9T", \u043C\u0434: "1L561M1K", \u043C\u0435: "0V5P0X8Z165O1741189P19D51LJD1M08", "\u043C\u0435 ": "0V5V0XHC16AI170N1814192C1L1J", \u043C\u0435\u043C\u043B: "1L71", \u043C\u0435\u043C\u043B\u0435: "1L9W", \u043C\u0435\u043D: "0V350X3R163V172X18B119ET1LPG", "\u043C\u0435\u043D ": "0V030X0S161O180B19071LSG", \u043C\u0435\u043D\u0435: "0V120X2A160R170C180E1978", "\u043C\u0435\u043D\u0435 ": "0V2P0X2B161F180319A7", \u043C\u0435\u043D\u044F: "160918A4", "\u043C\u0435\u043D\u044F ": "18GN", \u043C\u0435\u043D\u0456: "170E19AA1L9K", "\u043C\u0435\u043D\u0456 ": "19E81L2U", \u043C\u0435\u043D\u0456\u04A3: "1LAD", \u043C\u0435\u0440: "0V2Q0X5O16551726182M19A71L1Z", \u043C\u0435\u0440\u0438: "0V2O0X6S164N180L190E", "\u043C\u0435\u0440\u0438 ": "0V5D0X6Y1684", \u043C\u0435\u0440\u0456: "19AA", "\u043C\u0435\u0440\u0456 ": "19EA", \u043C\u0438: "0V520X5D1663184K196H1L1X1M2C", "\u043C\u0438 ": "0V6H0XAL16BU185X19AB1L0X", \u043C\u0438\u043D: "0V0J0X1I162M1815190L1L181M5E", \u043C\u0438\u043D\u0438: "0V030X02160O18071L0X1M5U", \u043C\u0438\u043D\u0438\u0439: "1MB9", \u043C\u0438\u0441: "0V4J0X53167L18081909", \u043C\u0438\u0441\u043B: "0V5B0X6G168A1902", \u043C\u0438\u0441\u043B\u0430: "0V070X39", \u043C\u0438\u0441\u043B\u0435: "0V0F0X1Q161W", \u043C\u0438\u0441\u043B\u0438: "0VC70X1W163N1902", \u043C\u0438\u0441\u043B\u044F: "16C1", \u043C\u043B\u0435\u043A: "0V070X071L71", \u043C\u043B\u0435\u043A\u0435: "1L9W", \u043C\u043D: "0V130X1R161S1735187J191E1L1F1M0J", \u043C\u043D\u0435: "0X09160D178518AE1902", "\u043C\u043D\u0435 ": "17CY18D21902", \u043C\u043D\u043E: "0V2Q0X5F1665171418491917", \u043C\u043D\u043E\u0433: "0V2R0X6V166F170T1843", \u043C\u043D\u043E\u0433\u043E: "0V6616CU186L", \u043C\u043D\u043E\u0433\u0443: "0X77", "\u043C\u043D\u044B\u04A3 ": "1L6A", \u043C\u043E: "0V9T0X6S1650174C18C519CA1L0I1M0Q", "\u043C\u043E ": "0VAL0X3416241709180Z194Q", \u043C\u043E\u0433: "0V4B0X2X163Y1721185N193I", "\u043C\u043E\u0433\u0430 ": "0V0A164W170L190I", \u043C\u043E\u0433\u043D: "0V0T0X3V161H", \u043C\u043E\u0433\u043D\u0430: "0X1U161N", \u043C\u043E\u0433\u043D\u0435: "0V200X26161H", "\u043C\u043E\u0433\u0443 ": "0V4V185T190F", \u043C\u043E\u0436: "0V300X9F167S174S186G1989", \u043C\u043E\u0436\u0430: "0X2R160F175M", "\u043C\u043E\u0436\u0430 ": "160G174E", \u043C\u043E\u0436\u0430\u043C: "0X2Q170W", \u043C\u043E\u0436\u0435: "0V2V0X9B167U186B1952", "\u043C\u043E\u0436\u0435 ": "0V3A0X3L169U193K", \u043C\u043E\u0436\u0435\u0431: "0X1W", \u043C\u043E\u0436\u0435\u0442: "0V1B0X03161218791915", \u043C\u043E\u0436\u0435\u0448: "0V240X29163H1834191W", \u043C\u043E\u0436\u043D\u043E: "0X0S161A184T", "\u043C\u043E\u0436\u0443 ": "193H", \u043C\u043E\u043B\u0430\u043C: "0X1O", "\u043C\u043E\u043B\u044F ": "163W", \u043C\u043E\u0440: "0V2W0X3F160T170E180O190L", \u043C\u043E\u0440\u0430: "0V2T0X3K170B1804", \u043C\u043E\u0440\u0430\u043C: "0V2E0X1M", \u043C\u0440: "0V0J0X0J16091708180219061M07", \u043C\u0443: "0V1Z0X2H160Z17391869197N1L0F1M0T", "\u043C\u0443 ": "0V4A0X7Z162W177Q18B919D6", \u043C\u044B: "172D184E1L7L1M0O", "\u043C\u044B ": "176T187O1L0N", \u043C\u044B\u043D: "1L741M0Q", "\u043C\u044B\u043D ": "1LAL1M0V", \u043C\u044C\u0434\u0430\u0440: "1M46", \u043C\u044D: "170H182J1L0C1M4D", \u043C\u044D\u0433\u0442\u044D: "1M4A", \u043C\u044D\u0434: "1M6L", \u043C\u044D\u0434\u044D: "1M4T", \u043C\u044D\u0434\u044D\u0445: "1M6L", \u043C\u044D\u0440: "1716185L1L0X1M0L", \u043C\u044D\u0440\u0438: "187J1L1L", "\u043C\u044D\u0440\u0438 ": "18D71L1C", \u043C\u044F: "160B172U1816", \u043C\u044F\u043D: "17701803", \u043C\u044F\u043D\u0435: "17A4", "\u043C\u044F\u043D\u0435 ": "17EE", \u043C\u0456: "1754195M1L4S", "\u043C\u0456 ": "17BE19181L17", "\u043C\u0456\u043D ": "1L8H", \u043C\u04E9\u043D\u0433\u04E9: "1M3I", \u043D: "0VHV0XIL16KR17HU18NA19NQ1LMO1MNF", "\u043D ": "0V4T0X4S164F175A189D196S1LSG1MNA", \u043D\u0430: "0VCU0XEQ16FM17LY18M819LE1LCA1MFX", "\u043D\u0430 ": "0VGF0XM816QH17RS18L519LP1LBB1MKV", \u043D\u0430\u0432: "0V0E0X3Q161J1768181H1946", \u043D\u0430\u0432\u0430: "0V030X0U1611175718041902", \u043D\u0430\u0432\u0438\u0441: "0X1O1804", "\u043D\u0430\u0433\u0430 ": "160X176A", \u043D\u0430\u0434: "0V0X0X1T161V172Q184S192F1L281M6X", \u043D\u0430\u0434\u0430: "0V0M0X04160H170E19051L261M6Y", \u043D\u0430\u0434\u0430\u0434: "1MAL", "\u043D\u0430\u0434\u043E ": "185H", \u043D\u0430\u0435: "0V050X3M162F173H1831", "\u043D\u0430\u0435 ": "0X1G160Y1755", "\u043D\u0430\u0435\u0448 ": "0X1D161L", \u043D\u0430\u0439: "161T177U180X192Y1L1U1M3C", "\u043D\u0430\u0439 ": "176S18021L101M23", \u043D\u0430\u043C: "0V3R0X4R1639173Y183D19371L1N1M2V", "\u043D\u0430\u043C ": "0V3E0X5E161Y1742183C1921", \u043D\u0430\u043C\u0430: "0V0I0X021604170F190Y1L171M32", \u043D\u0430\u043C\u0430\u0439: "1M5Z", "\u043D\u0430\u043D ": "1L7Q", \u043D\u0430\u043F: "0V1Z0X45165N1728181M19161L0G", \u043D\u0430\u043F\u0440: "0V0K0X42164M170P180J1905", \u043D\u0430\u043F\u0440\u0430: "0V0V0X40168T180J", \u043D\u0430\u0441: "0V2Z0X1Y161I177F183M193U1L281M14", \u043D\u0430\u0442: "0V0X0X4F165A170W182A191W1L1W", \u043D\u0430\u0442\u0430: "0V020X3N164W170D180719051L10", "\u043D\u0430\u0442\u0430 ": "0V060X3H169U180B1907", "\u043D\u0430\u044F ": "1607179L182Z", \u043D\u0430\u0458: "0V220X36", \u043D\u0430\u0458\u0434: "0X30", \u043D\u0430\u0458\u0434\u0435: "0X1H", \u043D\u0433: "0V090X04160B170L180I190J1L1B1M3N", \u043D\u0434: "0V0B0X0F160A170O180P190O1LGR1M78", "\u043D\u0434 ": "0V020X031605180219021MDF", \u043D\u0434\u0430: "0V0G0X0T160A170S180E19071LKS1M1M", "\u043D\u0434\u0430 ": "0V0B0X0X1607170M180719061LKB", \u043D\u0434\u0430\u0440: "0X0218031L6P", \u043D\u0434\u0430\u0493\u044B: "1L7Q", \u043D\u0434\u0435: "0X08180619021LAL", "\u043D\u0434\u0435 ": "0X0218041LBH", \u043D\u0434\u044B: "170G18031L9S", \u043D\u0435: "0VA30XD416B417GC18O819KL1LAT", "\u043D\u0435 ": "0VDY0XMN16OF17SG18SF19RE1LGG", \u043D\u0435\u0433\u043E: "0V0Z0X2J161S182D", "\u043D\u0435\u0433\u043E ": "0V2D0X1W16241846", \u043D\u0435\u043A: "0V2N0X2Z160B1715180I19031L0K", \u043D\u0435\u043A\u043E: "0V1S0X2W180I", \u043D\u0435\u043C: "0V370X6I1615171H181U19241L33", \u043D\u0435\u043C\u0430: "0V1O0X6R170O1802191V", "\u043D\u0435\u043C\u0430 ": "0V1X0X4X190C", "\u043D\u0435\u043C\u0435 ": "0X1D", "\u043D\u0435\u0442 ": "0X0E18401904", \u043D\u0435\u0448: "0V1U0X38161A1713180719051L0S", \u043D\u0435\u0448\u0442: "0V1V0X2K171F", \u043D\u0435\u0448\u0442\u043E: "0V4R0X2O", \u043D\u0435\u0449\u043E: "1635", "\u043D\u0435\u0449\u043E ": "166J", \u043D\u0438: "0V9Q0X6T168018GM19A61L2H1M99", "\u043D\u0438 ": "0V6I0X9D169U187C195P1L0P1M0J", \u043D\u0438\u0431\u0443\u0434: "184M", \u043D\u0438\u0435: "0X0Z165C18531L1W", "\u043D\u0438\u0435 ": "0X10164M18661L0O", \u043D\u0438\u0439: "1811196V1MI9", "\u043D\u0438\u0439 ": "181F197Z1MDQ", \u043D\u0438\u0439\u0433: "1M8U", "\u043D\u0438\u0439\u0433 ": "1MGA", \u043D\u0438\u043A: "0V3U0X4M164V186G191Z1L0P", \u043D\u0438\u043A\u0430\u0434: "0V4K0X03", \u043D\u0438\u043A\u043E: "0V1F0X4C163C183Y1907", \u043D\u0438\u043A\u043E\u0433: "0V0F0X2F1650185M", \u043D\u0438\u043A\u043E\u0458: "0X1A", "\u043D\u0438\u043E\u0442 ": "0X1H", \u043D\u0438\u0441: "0V4X0X07160K180G19041L0R1M0Q", \u043D\u0438\u0441\u0430: "0V3S", \u043D\u0438\u0441\u0430\u043C: "0V90", "\u043D\u0438\u0442\u0435 ": "0V3O0X1E164S1818", \u043D\u0438\u0447\u0435\u0433: "184M", \u043D\u0438\u0448\u0442: "0V1B0X27", \u043D\u0438\u0448\u0442\u043E: "0X21", "\u043D\u0438\u0449\u043E ": "1647", "\u043D\u0438\u044F ": "162W184N", \u043D\u0438\u0458: "0V5K0X0I", \u043D\u0438\u0458\u0435: "0V62", "\u043D\u0438\u0458\u0435 ": "0VDU", \u043D\u043D: "1608174L183A193A1L1P1M0C", \u043D\u043D\u0435: "176018071L0I", "\u043D\u043D\u0435 ": "178O1802", \u043D\u043D\u044F: "175P194H", "\u043D\u043D\u044F ": "178A194W", \u043D\u043E: "0V7K0X701673172S18GF199H1L121M45", "\u043D\u043E ": "0VAQ0XD916EX171P18H9199U1M3M", \u043D\u043E\u0433: "0V310X5D165Q170M185319201M14", \u043D\u043E\u0433\u043E: "0V2I166F185I1923", "\u043D\u043E\u0433\u043E ": "0V6516CR189D1930", \u043D\u043E\u0433\u0443: "0X6U18051902", "\u043D\u043E\u0433\u0443 ": "0X7518091904", "\u043D\u043E\u0439 ": "171M184R", "\u043D\u043E\u0441\u0442 ": "0V200X1C162Y", "\u043D\u043E\u0442\u043E ": "0X0R163O", \u043D\u0440\u0430\u0432\u0438: "184W", \u043D\u0441: "0V0K0X0I161U17111813190S1L121M0S", \u043D\u0441\u043A: "0V0Q0X0Z166C1728180Y", \u043D\u0441\u043A\u0438: "0V0E0X0S166O180Q", "\u043D\u0441\u043A\u0438 ": "0V0W0X0L16BP180A", \u043D\u0442: "0V0U0X0N1612171A181Z191D1L251M1L", "\u043D\u0442\u044D\u0439 ": "1M51", \u043D\u0443: "0V230X0Q160F173C184U194N1L101M0I", \u043D\u0443\u0432\u0430: "0X2Q160F191G", \u043D\u0443\u0436\u043D\u043E: "0X02160J184K", \u043D\u0446\u0443\u0437\u044C: "1935", "\u043D\u0448\u0430 ": "19021L7A", \u043D\u044B: "177V18631LDB1M25", "\u043D\u044B ": "17GN184G1L771M42", "\u043D\u044B\u0439 ": "1854", "\u043D\u044B\u043C ": "175K18281L0T", "\u043D\u044B\u044F ": "1798", \u043D\u044B\u04A3: "1LI5", "\u043D\u044B\u04A3 ": "1LQ9", \u043D\u044C: "1718184519221M2W", "\u043D\u044C ": "17341868191Z1M6U", \u043D\u044D: "17051MAU", "\u043D\u044D ": "1MFA", "\u043D\u044D\u0433 ": "1M38", \u043D\u044D\u0445\u044D\u044D: "1M55", \u043D\u044F: "162X174Z1862193X", "\u043D\u044F ": "1614177B189G195S", \u043D\u044F\u043A\u043E: "1633", \u043D\u044F\u043C: "165Z172Y1802190D", \u043D\u044F\u043C\u0430: "166M173Z", "\u043D\u044F\u043C\u0430 ": "169F175P", \u043D\u0456: "178Y19DK1L7X", "\u043D\u0456 ": "176F19GR1L5J", \u043D\u0456\u043A: "1785192K1L0D", "\u043D\u0456\u043A ": "17551902", \u043D\u0456\u043A\u043E\u043B: "174T193B", \u043D\u0456\u04A3: "1LAE", "\u043D\u0456\u04A3 ": "1LH2", \u043D\u04E9: "1M1Z", \u043E: "0VRN0XR416PW17BF18SG19SG1LB21MF9", "\u043E ": "0VPV0XLY16II17B218SG19Q41L0D1M46", \u043E\u0430: "0X32160618021903", "\u043E\u0430 ": "0XAA", \u043E\u0431: "0V3Y0X3D164A171V189J19EK1L161M09", \u043E\u0431\u0430: "0V240X2E160Y170A181D195K1L0N", \u043E\u0431\u0430\u0454\u0442: "193L", \u043E\u0431\u0438: "0V1L0X25163F181P19A0", "\u043E\u0431\u0438\u0432 ": "0X06193K", \u043E\u0431\u0438\u0442: "0X03180B1974", \u043E\u0431\u0438\u0442\u0438: "198M", \u043E\u0431\u0438\u0447: "0V0J0X0I162Y", \u043E\u0431\u0438\u0447\u0430: "0V090X031664", \u043E\u0431\u0440: "0V2P0X3S164V173P18251938", "\u043E\u0431\u0440\u0430 ": "0V0X0X0K160V174U1802190I", \u043E\u0431\u0440\u0435: "0V030X0316391807191X", "\u043E\u0431\u0440\u0435 ": "0V08166K192S", \u043E\u0431\u0440\u043E: "0V1Z0X32160F180A190B", "\u043E\u0431\u0440\u043E ": "0V4C0X2Z160M1804", "\u043E\u0431\u044B ": "17091859", \u043E\u0431\u0456: "1712195L", "\u043E\u0431\u0456 ": "194S", \u043E\u0432: "0V7N0X5M166V173818D419BV1L0O1M0J", "\u043E\u0432 ": "0V0V0X3F160K184519221L0P1M0Q", \u043E\u0432\u0430: "0V5F0X6E16CX17571874192X", "\u043E\u0432\u0430 ": "0V1U0X6J16CZ174D181I191F", "\u043E\u0432\u0434\u0435 ": "0V6G0X07", \u043E\u0432\u0435: "0V2V0X37165T1711184X1929", \u043E\u0432\u0435\u0447\u0435: "163S180D1904", \u043E\u0432\u0435\u045C\u0435: "0X1E", \u043E\u0432\u043E: "0V6V0X3B166E188F195I", "\u043E\u0432\u043E ": "0V400X0P160R180O190S", \u043E\u0432\u043E\u0440: "0V2G0X1G165T187V193L", \u043E\u0432\u043E\u0440\u0438: "0V440X0G167L18B9194E", \u043E\u0432\u0456: "1715195B", \u043E\u0433: "0V510X4H1640172618BF19AT1L0P1M3I", \u043E\u0433\u0430: "0V2Z0X5J167F174D181F191E", "\u043E\u0433\u0430 ": "0V1U0X2Y165Z176R180D190O", \u043E\u0433\u0430\u0442\u043E: "163S1803", \u043E\u0433\u0430\u0448: "0X42", "\u043E\u0433\u0430\u0448 ": "0X4A", \u043E\u0433\u0434: "185M", \u043E\u0433\u0434\u0430: "187L", "\u043E\u0433\u0434\u0430 ": "18C4", \u043E\u0433\u043D: "0V0P0X30161C18071904", \u043E\u0433\u043E: "0V2W0X15166N18B119GF1M1H", "\u043E\u0433\u043E ": "0V2G0X0S166Z18C519FP", \u043E\u0433\u043E\u0434: "0V0S0X08180F192V", \u043E\u0433\u043E\u0434\u043D: "0X021937", \u043E\u0433\u0443: "0V230X5A17191834190P", "\u043E\u0433\u0443 ": "0V220X6T170P183K190L", \u043E\u0434: "0V5E0X5V162P173P18B119AB1L0S1M2Q", "\u043E\u0434 ": "0V400X70160L1722181Q19071M1O", \u043E\u0434\u0430: "0V1N0X39162M171L183E19281L1U", "\u043E\u0434\u0430\u043C ": "0X1P170K1803", \u043E\u0434\u0438: "0V390X401640186N195Y", \u043E\u0434\u0438\u0442: "0V0M0X0D160Q184M191S", \u043E\u0434\u043D: "0V0Y0X1E160K173E185R194V", "\u043E\u0434\u043D\u044F ": "170L184Q1907", "\u043E\u0434\u043D\u0456 ": "193D", \u043E\u0434\u043E: "0V0B0X1W160T182F194S1M44", \u043E\u0434\u043E\u0431: "0X14160G180C193K", \u043E\u0434\u043E\u0431\u0430: "0X031953", "\u043E\u0434\u043E\u043E ": "1M42", \u043E\u0435: "0X0G160U170U18541903", \u043E\u0435\u0442\u043E: "0X0P1631", "\u043E\u0435\u0442\u043E ": "0X0R166B", \u043E\u0436: "0V1K0X34162J172L187619571L041M17", \u043E\u0436\u0430\u043C: "0X2M170L", "\u043E\u0436\u0430\u043C ": "0X2R170W", \u043E\u0436\u0435: "0V2R0X7H167R18751953", "\u043E\u0436\u0435 ": "0V1C0X3G164U181U192O", \u043E\u0436\u0435\u0431\u0438: "0X1W", \u043E\u0436\u0435\u0442: "0V0I0X03160K183Z190S", "\u043E\u0436\u0435\u0442 ": "1859", "\u043E\u0436\u0435\u0448 ": "0V240X1Q162R191W", "\u043E\u0436\u043D\u043E ": "0X0P160T184R", \u043E\u0437: "0V1N0X1B161E170P182Y194C1L0P", "\u043E\u0437\u0438 ": "0V0A0X0B162V1902", \u043E\u0437\u0443\u043C\u0456: "192O", \u043E\u0438: "0V020X0J160O182Z", \u043E\u0439: "163F172X1886190M1L3S1M3T", "\u043E\u0439 ": "16AK178V18E1190G1L0Y1M5L", \u043E\u0439\u044B\u043D: "1L6R", \u043E\u0439\u044B\u043D\u0448: "1L72", \u043E\u043A: "0V1V0X1D161G170X184J194C1L0N1M08", \u043E\u043B: "0V4L0X4O164D174N18CJ197Z1LES1MB9", "\u043E\u043B ": "0V060X0X160L1711180N190I1LD21MAT", \u043E\u043B\u0430: "0V1E0X2S1623171G180K190S1L9M", \u043E\u043B\u0430\u0434\u044B: "1L5Y", "\u043E\u043B\u0430\u043C ": "0X1T1802", \u043E\u043B\u0430\u0440: "0V060X0616091709190C1L8L", "\u043E\u043B\u0430\u0440 ": "1L78", \u043E\u043B\u0434\u044B: "1L6N", "\u043E\u043B\u0434\u044B ": "1L8A", \u043E\u043B\u0438: "0V7Q0X2A1620181V196J1L18", "\u043E\u043B\u0438 ": "0V1O0X14160S1808195C", \u043E\u043B\u0438\u043A: "0V3018061903", \u043E\u043B\u0438\u043A\u043E: "0V7D1802", \u043E\u043B\u0438\u043C: "0V380X0816061802", "\u043E\u043B\u0438\u043C ": "0V7R160C", \u043E\u043B\u043A: "0X4F165A180F1903", \u043E\u043B\u043A\u043E: "0X06165V1803", "\u043E\u043B\u043A\u043E ": "0X021655", \u043E\u043B\u043A\u043E\u0432: "165D1803", \u043E\u043B\u043A\u0443: "0X581804", "\u043E\u043B\u043A\u0443 ": "0X5G18071902", \u043E\u043B\u043D\u043E: "0X111603180K1M2S", "\u043E\u043B\u043D\u043E ": "0X0Z18061M5C", \u043E\u043B\u043E: "0V0O0X131613184L194L1L1B1M84", "\u043E\u043B\u043E\u043D ": "18041M3M", \u043E\u043B\u043E\u0445: "1M3A", "\u043E\u043B\u043E\u0445 ": "1M3U", "\u043E\u043B\u044B\u043F ": "1L64", \u043E\u043B\u044C: "178G18AH19151M0L", \u043E\u043B\u044C\u043A: "177V186L190C", \u043E\u043B\u044C\u043A\u043E: "18BE", \u043E\u043B\u044C\u043A\u0456: "17AT", \u043E\u043B\u044C\u0448: "173J184S", \u043E\u043B\u044C\u0448\u0435: "185X", \u043E\u043B\u0493\u0430\u043D: "1L6Q", \u043E\u043C: "0VBS0XBP166O173A18KG19NT1L3W1M48", "\u043E\u043C ": "0VIU0XQ516IO175X18OQ19PQ1L4Z1M5T", \u043E\u043C\u0430: "0V5A0X2F160Z173Q186H198V1L0W", "\u043E\u043C\u0430 ": "0V5H0X1N16031748187C198W", \u043E\u043C\u043E: "0V3J0X3U162C185A194Y", \u043E\u043C\u043E\u0433: "0V150X3V161G181G1928", \u043E\u043C\u043E\u0433\u043D: "0V230X421633", "\u043E\u043C\u043E\u043C ": "0V24183F193F", \u043E\u043C\u0443: "0V2K0X0D1716185C19C3", "\u043E\u043C\u0443 ": "0V2Z0X0E171Z187319DS", \u043E\u043D: "0V4X0X2D161I172O18EA198D1L5L1M6C", "\u043E\u043D ": "0V500X3B1611171E18C6191E1L141M6A", \u043E\u043D\u0430: "0V3J0X13161B1719187O196X1L0R", "\u043E\u043D\u0430 ": "0V360X0Q160Q170S189G1975", \u043E\u043D\u0438: "0V1M0X0U160Z186A193M1L0G1M1G", "\u043E\u043D\u0438 ": "0V130X0C160E1859193X", \u043E\u043D\u044B: "170N180C1L7Q1M10", \u043E\u043D\u044B\u04A3: "1L86", "\u043E\u043D\u044B\u04A3 ": "1LB9", \u043E\u043E: "0X09180M19081M52", "\u043E\u043E ": "1M63", \u043E\u043F: "0V1M0X1I1614170T183B193A1L0R", \u043E\u043F\u043E\u043C: "193D", \u043E\u043F\u043E\u043C\u043E: "193W", \u043E\u0440: "0V4B0X4G163S172Y18AM197F1L5K1M3W", \u043E\u0440\u0430: "0V3S0X59162P173U1820192A1L1C", "\u043E\u0440\u0430\u043C ": "0V1Q0X1D", \u043E\u0440\u0438: "0V3M0X2H165K185Y19401L0E1M0J", "\u043E\u0440\u0438 ": "0V120X1B1636180D190D", \u043E\u0440\u0438\u0442: "0V0K0X04160J184C1929", \u043E\u0440\u043E: "0V0Z0X1D160R187T193O1M3R", \u043E\u0440\u0443\u0432: "0X2X1903", \u043E\u0440\u0443\u0432\u0430: "0X331905", \u043E\u0441: "0V4V0X3Y163O172418CB197Z1L3U1M16", \u043E\u0441\u0442: "0V6V0X8F1688172C18D5196B1L2J", \u043E\u0441\u0442\u0430: "0V3U0X53163X172M185R191I1L3I", \u043E\u0441\u0442\u0430\u0432: "0V2U0X1T162Q1843190I", \u043E\u0441\u0442\u0430\u043D: "0V2R0X1V162F170W1821190R1L44", \u043E\u0441\u0442\u043E: "0V1Q0X3V1616185F193U", \u043E\u0441\u0442\u043E\u043D: "0V2E0X2U183H193B", "\u043E\u0441\u044C ": "171N183F193J", \u043E\u0442: "0V2G0X78167J171318CY196A1L2K1M0R", "\u043E\u0442 ": "0V0H0XCM168N170P1860190A1L0I1M0J", "\u043E\u0442\u0435\u043B ": "0X04160B184M", \u043E\u0442\u0438: "0V1A0X2Z164J18201917", \u043E\u0442\u043E: "0V0I0X3Q168H1850191P1L0F1M0Z", "\u043E\u0442\u043E ": "0X3M168K18061906", \u043E\u0442\u0440\u0456: "1936", \u043E\u0442\u0440\u0456\u0431: "194B", "\u043E\u0442\u0456\u0432 ": "193P", \u043E\u0445: "0V050X02160A17071817191D1M3F", \u043E\u0447: "0V1B0X14161C1716187U19551M09", \u043E\u0447\u0435: "0V1K0X0Y160V1898194C", \u043E\u0447\u0435\u043C\u0443: "186L", \u043E\u0447\u0435\u043D: "0X0418511902", \u043E\u0447\u0435\u043D\u044C: "188Y", \u043E\u0448: "0V1O0X1I160B170X1833191G1L05", \u043E\u0448\u0442: "0V0P0X3A170U190J", \u043E\u0448\u0442\u043E: "0V060X3W1906", "\u043E\u0448\u0442\u043E ": "0V090X44", "\u043E\u0449\u0435 ": "162T1804", \u043E\u044E: "1704180V19441L051M09", "\u043E\u044E ": "170F181H198C", \u043E\u0458: "0V4Y0X3X", "\u043E\u0458 ": "0V4A0X7I", \u043E\u0458\u0430: "0V1P0X33", \u043E\u0458\u0430\u0442: "0X26", \u043E\u0458\u0430\u0442\u0430: "0X1K", "\u043E\u0458\u0435 ": "0V2X", "\u043E\u0458\u043E\u0442 ": "0X1C", \u043E\u045E: "174D", "\u043E\u045E ": "176B", \u043E\u049B: "1L3G", \u043F: "0VAP0X9B16A6178W18BR19D01L691M0G", "\u043F ": "0V060X0416041704180619051LAX", \u043F\u0430: "0V300X2X161Z17EU183M192W1L5B1M0E", \u043F\u0430\u0434: "0V150X10160S179K180H190H1L0N", \u043F\u0430\u0434\u0430: "0V14160A176X180B1905", \u043F\u0430\u0434\u0430\u0431: "176A", \u043F\u0430\u0442\u0440\u044D: "1750", \u043F\u0435: "0V1N0X0Y1613173O184F194Q1L2M", \u043F\u0435\u0440: "0V0U0X0N160W178U185Z196K1L0P", \u043F\u0435\u0440\u0430: "0V0H0X07160A1798180J190B", \u043F\u0435\u0440\u0435: "0V040X02184T195R", \u043F\u0438: "0V2O0X1T1623183E19461L0E", \u043F\u043B: "0V190X111611171M182719231L04", \u043F\u043E: "0V8J0X7A1679171Y18KF19GP1L141M0M", \u043F\u043E\u0432: "0V170X2F1627181L1964", \u043F\u043E\u0432\u0435\u045C: "0X1E", \u043F\u043E\u0432\u0456: "193A", \u043F\u043E\u0434: "0V140X2O1637185L1965", \u043F\u043E\u0434\u043E: "0X1H160M181I193V", \u043F\u043E\u0434\u043E\u0431: "0X13160V180J1955", \u043F\u043E\u0437\u043D\u0430: "0V3D0X1C1620170W180T190L", \u043F\u043E\u043C: "0V260X4V163G1709184H1951", \u043F\u043E\u043C\u043E: "0V200X4Q162G1840192Q", \u043F\u043E\u043C\u043E\u0433: "0V2X0X421633182O1935", \u043F\u043E\u0441: "0V4L0X36162N170M185G1923", \u043F\u043E\u0442\u0440: "0V130X0Q1607180I193D", \u043F\u043E\u0442\u0440\u0456: "194B", \u043F\u043E\u0447\u0435\u043C: "186L", \u043F\u0440: "0V7T0X7K167V17A518E619BE1L0X", \u043F\u0440\u0430: "0V2Y0X98169O17L5184L1968", "\u043F\u0440\u0430 ": "1603176H", \u043F\u0440\u0430\u0432: "0V2N0X8Q169I1782185A1952", \u043F\u0440\u0430\u0432\u0430: "0V0A0X20160S174P180M190F", \u043F\u0440\u0430\u0432\u0434: "0V070X051831193Q", \u043F\u0440\u0430\u0432\u0438: "0V2W0X5G16C1183D191X", \u043F\u0440\u0430\u0432\u044F: "164E1712", \u043F\u0440\u0430\u0446: "177E1923", \u043F\u0440\u0430\u0446\u044E: "192T", \u043F\u0440\u0430\u0448: "0X2V170L180F", \u043F\u0440\u0430\u0448\u0430: "0X2F", \u043F\u0440\u0430\u045E: "1751", \u043F\u0440\u0430\u045E\u0434: "176R", \u043F\u0440\u0435: "0V7P0X8X169V184Z190J1L1T", \u043F\u0440\u0435\u0434: "0V1K0X3B165B183O1906", "\u043F\u0440\u0435\u0434 ": "0V0W0X1D1619", \u043F\u0440\u0435\u0434\u0438: "0X0C163W180C", \u043F\u0440\u0438: "0V530X471671189Y1971", \u043F\u0440\u0438\u044F\u0442: "164A180X1902", \u043F\u0440\u0438\u0458\u0430: "0V3K0X1C", \u043F\u0440\u043E: "0V5W0X5C167A171V18DL19BT1L0O", "\u043F\u0440\u043E ": "180A193L", \u043F\u0440\u043E\u0441: "0V0G0X0Z162D1723187B1937", \u043F\u0440\u043E\u0441\u0438: "160P184P191V", \u043F\u0440\u043E\u0441\u0442: "0V0T0X0W162O172U185V192N", \u043F\u0440\u044B: "17BI1805", \u043F\u0442: "0V070X051603170D180819091L2Z", \u043F\u0443: "0V1U0X0N160K170T181F190Q1L10", \u043F\u0443\u0431\u043B\u0438: "160F180C1L6G", \u043F\u0456: "1727194G1L0X", \u0440: "0VFH0XE516G017CI18G019HL1LIU1MGD", "\u0440 ": "0V1Z0X1D1612172J181U191U1LEW1MH9", \u0440\u0430: "0VC90XB516AS17L318HG19DH1LCD1M5O", "\u0440\u0430 ": "0V4B0X4M166X17BY184F193P1L31", \u0440\u0430\u0430: "0X0P1M4D", \u0440\u0430\u0431: "0V0C0X3S163O178G183Q190C1L0G", \u0440\u0430\u0431\u043E: "0X4M163X171G184D", \u0440\u0430\u0431\u043E\u0442: "0X4U1683171T187O", \u0440\u0430\u0431\u0456: "177I", \u0440\u0430\u0431\u0456\u0446: "175K", \u0440\u0430\u0432: "0V3Y0X8L16AG176O186R195A", \u0440\u0430\u0432\u0430: "0V0M0X2C160J175O180D190I", \u0440\u0430\u0432\u0430\u043C: "0V0A0X1L", \u0440\u0430\u0432\u0438: "0V1U0X5T166Z184H191D", "\u0440\u0430\u0432\u0438 ": "0V1B0X2L1666190D", \u0440\u0430\u0432\u0438\u0442: "0V0K0X04160Y184N1907", "\u0440\u0430\u0432\u044F ": "163Y", \u0440\u0430\u0434: "0V8C0X1K162R177A181H191P1L3F", \u0440\u0430\u0434\u0438: "0V860X0P1612180G190W", "\u0440\u0430\u0434\u0438 ": "0V6N0X091610180C190C", \u0440\u0430\u0434\u0438\u043C: "0V5W", "\u0440\u0430\u0434\u044B ": "170W18071L78", \u0440\u0430\u0437: "0V3A0X3Y166U17BX186G193N1L0X", "\u0440\u0430\u0437 ": "0V040X051766181S1927", \u0440\u0430\u0437\u043C\u0430: "175W", \u0440\u0430\u0437\u0443: "0V120X0A16061751180T190F", \u0440\u0430\u0437\u0443\u043C: "0V2P0X07160A176F180E", \u0440\u0430\u043B\u044B: "1L7E", "\u0440\u0430\u043B\u044B ": "1L67", \u0440\u0430\u043C: "0V1Y0X47161N174W180N190H1L3B", "\u0440\u0430\u043C ": "0V1G0X3N1614171Z18071903", "\u0440\u0430\u043C\u0435 ": "0X1B160J", \u0440\u0430\u043D: "0V3X0X3H164I176C185B19451L2G1M22", \u0440\u0430\u043D\u0446\u0443: "0V2C0X0U1724182W19391L1G", \u0440\u0430\u0441: "0V180X23161Q176I184X190O1L30", \u0440\u0430\u0442: "0V360X3N164U172H1839192L1L3L", "\u0440\u0430\u0442\u0430 ": "0V1Z0X0P163O170H180I190A", \u0440\u0430\u0446: "0V0C0X0C1604176Y1807192E1L0E", \u0440\u0430\u0448: "0V0K0X3S160O1728180O1908", \u0440\u0430\u0448\u0430: "0X2B170J", \u0440\u0432: "0V0N0X0K160R170F180O190F1M0L", \u0440\u0433: "0V040X071604170E180B190B1L2Y1M3P", "\u0440\u0433\u04AF\u0439 ": "1M46", \u0440\u0434: "0V080X08160D170B180H190G1L8Z1M1G", \u0440\u0434\u044B: "1LA3", "\u0440\u0434\u044B ": "1L9A", \u0440\u0434\u044B\u04A3: "1L8N", "\u0440\u0434\u044B\u04A3 ": "1LBN", \u0440\u0434\u0456: "19021L6T", "\u0440\u0434\u0456 ": "1L73", \u0440\u0435: "0V900X8D168C18BP196L1L8D", \u0440\u0435\u0431: "0V3X0X5Y160B1815191D", \u0440\u0435\u0431\u0430: "0V400X7C1914", "\u0440\u0435\u0431\u0430 ": "0V6A0X5R191N", \u0440\u0435\u0434: "0V2X0X4N165Q184P191O1L1K", "\u0440\u0435\u0434\u0438 ": "0V0G0X0I163P180M", "\u0440\u0435\u043A ": "1L6V", \u0440\u0435\u043C: "0V3G0X4H162Z183919141L1H", \u0440\u0435\u043C\u0435: "0V2E0X3I1632181T", "\u0440\u0435\u043C\u0435 ": "0V3O0X2P164S", \u0440\u0435\u043D: "0V200X2I16891826190G1L14", \u0440\u0435\u043D\u0441: "1665", \u0440\u0435\u043D\u0441\u043A: "16CB", \u0440\u0435\u0441\u043F\u0443: "18041L6G", \u0440\u0438: "0V6I0X5G166918CY198W1L2R1M3P", "\u0440\u0438 ": "0V5A0X92169Q187X192A1L111M0H", "\u0440\u0438\u0442\u0438 ": "0V0P192P", "\u0440\u0438\u0442\u044C ": "185W191D", \u0440\u0438\u044F\u0442\u0435: "163M1803", \u0440\u0438\u0458\u0430: "0V210X2C", \u0440\u0438\u0458\u0430\u0442: "0V390X1H", \u0440\u043A: "0V0H0X0F160F1715180R190Y1L1G", \u0440\u043B: "0V060X051606170B180719071L4Y1M1K", "\u0440\u043B\u044B\u049B ": "1L6Q", \u0440\u043D: "0V0V0X0N160U171F181N19211L1J1M0L", \u0440\u043E: "0V4T0X3W1638175018EM19H71L1I1M1W", \u0440\u043E\u0431: "0V1L0X1W161Q171R181V19DE1L0E", \u0440\u043E\u0431\u0438: "0X03180219B1", \u0440\u043E\u0431\u0438\u0432: "193J", \u0440\u043E\u0431\u0438\u0442: "19A1", \u0440\u043E\u0437: "0V0Q0X0H160J171M180E196D", \u0440\u043E\u0437\u0443\u043C: "193E", \u0440\u043E\u0441: "0V0O0X0V1629171P186T193D", \u0440\u0441: "0V090X0C160C170L180J190D1L2A1M28", "\u0440\u0441\u0430\u043D ": "1M4A", "\u0440\u0441\u044D\u043D ": "1M3M", \u0440\u0442: "0V0G0X0I160P1714181H191N1L5D1M44", \u0440\u0442\u0430: "0V080X0D160T171F180D190G1L2U1M61", \u0440\u0442\u0430\u0439: "19031M6J", "\u0440\u0442\u0430\u0439 ": "1MC5", \u0440\u0443: "0V2E0X1V1612173E184Q193N1L411M10", \u0440\u0443\u0432: "0X3J160I190C", \u0440\u0443\u0432\u0430: "0X4N160K190E", "\u0440\u0443\u0432\u0430 ": "0X1B160X", \u0440\u0443\u0432\u0430\u043C: "0X1I", \u0440\u0448: "0V0F0X0G160D170Q180G190L1L0P1M0F", \u0440\u044B: "17AE182F1LB81M0M", "\u0440\u044B ": "178O18131L73", \u0440\u044B\u043D: "172718031LAM1M0Z", "\u0440\u044B\u043D ": "1L781M13", \u0440\u044B\u043D\u0434\u0430: "1L61", \u0440\u044B\u043D\u044B\u04A3: "1L64", "\u0440\u044B\u0446\u044C ": "174Y", \u0440\u044D: "174A1M4K", "\u0440\u044D\u0431\u0430 ": "1767", \u0440\u044D\u0433: "17051M51", \u0440\u044D\u0433\u0442: "1M3V", \u0440\u044D\u0433\u0442\u044D: "1M7F", \u0440\u044F: "162T18221911", \u0440\u044F\u0431: "1671", \u0440\u044F\u0431\u0432: "167V", \u0440\u044F\u0431\u0432\u0430: "16FE", \u0440\u0456: "199A1L8G", "\u0440\u0456 ": "19AO1L6J", \u0440\u0456\u043D: "19081L74", \u0440\u0493: "1L31", \u0441: "0VIG0XG216I017C618JD19G41LFS1MAU", "\u0441 ": "0V280X191635172A188C19381L7G1M5E", \u0441\u0430: "0VAS0X44162Q175G183619291L9B1MBD", "\u0441\u0430 ": "0V3X0X0W166F171K1810190H1L1Y", \u0441\u0430\u0439: "170B180619031L2P1M5N", \u0441\u0430\u0439\u043D: "1M4C", "\u0441\u0430\u0439\u043D ": "1M7X", \u0441\u0430\u0439\u0445\u0430: "1M46", \u0441\u0430\u043A: "0V0E0X861606170K1802", \u0441\u0430\u043A\u0430: "0XAG170D", "\u0441\u0430\u043A\u0430 ": "0X2G", \u0441\u0430\u043A\u0430\u043B: "0X1G", \u0441\u0430\u043A\u0430\u043C: "0X48", \u0441\u0430\u043A\u0430\u0448: "0X2Q", \u0441\u0430\u043C: "0VIT0X4I1631176T1838192O1L14", "\u0441\u0430\u043C ": "0VJY0X1M160S1728180R190I1L0O", \u0441\u0430\u043C\u043E: "0V260X3Y16201716181T190M", "\u0441\u0430\u043C\u043E ": "0V510X3X163A18031908", "\u0441\u0430\u043C\u0456 ": "17521919", \u0441\u0430\u043D: "0V0J0X04160S170U180F19081L2G1MI8", "\u0441\u0430\u043D ": "0V0F160818021L0V1MH7", \u0441\u0430\u043D\u0430: "1605170H1L141M30", \u0441\u0432: "0V3D0X0X161I1736183B192R1M09", \u0441\u0432\u0430: "0V1A0X04162H176V18081903", \u0441\u0432\u043E: "0V2N0X1I16101716185J193K", \u0441\u0434\u0435\u043B: "185S", \u0441\u0434\u0435\u043B\u0430: "18AC", \u0441\u0435: "0V8I0X9O167G171N187H19341L7A", "\u0441\u0435 ": "0VGZ0XLL16J1173E182U192Z1L3Q", \u0441\u0435\u0433\u0430: "0X2U161P", "\u0441\u0435\u0433\u0430 ": "0X2Y163J", \u0441\u0435\u0433\u043E\u0434: "184X", \u0441\u0435\u043A\u043E: "0X281802", \u0441\u0435\u043A\u043E\u0433: "0X1E", \u0441\u0435\u043D: "0V060X0S160T170F180S190A1L6R", \u0441\u0438: "0V3I0X4P166J1848192T1L1L1M0B", "\u0441\u0438 ": "0V5O0XAR16H3180H190K1L0I", \u0441\u0438\u0433\u0443\u0440: "0V230X1N164S", \u0441\u0438\u0442\u0435: "0V050X37160K180L19061L1N", "\u0441\u0438\u0442\u0435 ": "0V0B0X3B160O180K1903", \u0441\u0438\u0447\u043A: "163U", \u0441\u0438\u0447\u043A\u0438: "164K", \u0441\u0438\u0447\u043A\u043E: "163N", \u0441\u043A: "0V270X1T164C175I188H195C1L1I", \u0441\u043A\u0430: "0V0N0X22168O17AQ188B197L", \u0441\u043A\u0430\u0437: "1760187O195F", \u0441\u043A\u0430\u0437\u0430: "177218CK197Q", "\u0441\u043A\u0430\u0439 ": "160A174R1802", "\u0441\u043A\u0430\u043C ": "165B", "\u0441\u043A\u0430\u0448 ": "1643", \u0441\u043A\u0438: "0V1X0X27167P183N1903", "\u0441\u043A\u0438 ": "0V1Q0X24167C181M1902", \u0441\u043A\u043E\u043B\u044C: "186G", "\u0441\u043A\u0443\u044E ": "174B180H", \u0441\u043B: "0V3N0X32163H1729186A192F1M0O", \u0441\u043B\u0430: "0V1H0X31160W1720180W190M1M19", \u0441\u043B\u0430\u043C: "0X2W170P", "\u0441\u043B\u0430\u043C ": "0X30170T", \u0441\u043B\u0435\u0434: "0V160X1J1636170K1833", \u0441\u043B\u0438: "0V4V0X1V161N183Z190W", "\u0441\u043B\u0438\u043C ": "0V6M", \u0441\u043B\u0443: "0V1A0X351629171O182I1910", \u0441\u043B\u044F: "165F170Y190E", "\u0441\u043B\u044F ": "165U171C190F", \u0441\u043C: "0V200X18160V170W1826190W1L07", \u0441\u043C\u0435: "0V190X3O1620171H181A190B", "\u0441\u043C\u043E ": "0V3Z0X071609", \u0441\u043C\u043E\u0442\u0440: "1851", \u0441\u043D: "0V170X14161K171T182O191Y1M0C", \u0441\u043E: "0V0Y0X3W160K170X1861192H1L2W1M39", "\u0441\u043E ": "0V050X7N1605181H1905", \u0441\u043E\u043D: "0V060X0N1717180A190M1L1W1M5W", "\u0441\u043E\u043D ": "0V050X07170P180819061M36", \u0441\u043F: "0V200X1K161C173R1844194F1L2R1M07", \u0441\u043F\u0440\u0430\u0432: "0V0N0X0H160Y173G18161937", \u0441\u043F\u0443\u0431\u043B: "170L18041L6G", \u0441\u0440: "0V0T0X0N160I1704180J", \u0441\u0442: "0V9K0X731688178O18JO19BM1LE51M1T", \u0441\u0442\u0430: "0V8U0X80167W17ES18B9195Q1LH91M12", \u0441\u0442\u0430\u0432: "0V2M0X30162P171Z183S191G", \u0441\u0442\u0430\u0432\u0438: "0V4E0X1L161I1833190T", \u0441\u0442\u0430\u043D: "0V3P0X43162S1734182H19181LGX", "\u0441\u0442\u0430\u043D ": "0V0W0X071606170O18021LAT", \u0441\u0442\u0430\u043D\u0430: "0V0L0X1P1637170R18091L3N", \u0441\u0442\u0430\u043D\u0434: "1L7Z", \u0441\u0442\u0432: "0V2R0X2X164Q172L186M190P", \u0441\u0442\u0432\u0430\u0440: "0V5B0X0A170W", "\u0441\u0442\u0435 ": "0V370X0J161Z181419051L0O", \u0441\u0442\u0438: "0V4X0X4I16541855193C1L1K", \u0441\u0442\u0438\u043D: "0V0P0X2I1625180E1908", \u0441\u0442\u0438\u043D\u0430: "0V0T0X2A164018031904", \u0441\u0442\u043E: "0V480X5Z164W172U189E19671L0G1M2K", "\u0441\u0442\u043E ": "0V1V0X2A162K170C183N192S", "\u0441\u0442\u043E\u0439 ": "1608180I1M51", \u0441\u0442\u043E\u043D: "0V0Z0X2P181X192C", "\u0441\u0442\u043E\u043D ": "0V130X2U181M190C", \u0441\u0442\u0440: "0V2E0X26164A175I186N193Z1L16", \u0441\u0442\u0440\u0430: "0V1N0X1Q1638174J183W19241L0Q", \u0441\u0442\u044B: "1724180L1L8U", \u0441\u0442\u044C: "186D191K", "\u0441\u0442\u044C ": "187P191S", \u0441\u0443: "0V2Y0X1Y160F172F181H191V1L2E1M25", "\u0441\u0443 ": "0V5F171F180C19141L1N", \u0441\u0443\u043C: "0V0A0X5G1604171H180D190R", "\u0441\u0443\u043C ": "0X73", \u0441\u0446: "0V02174T1802190A", \u0441\u0446\u044C: "1763", "\u0441\u0446\u044C ": "179Z", \u0441\u0446\u0456: "176R1907", "\u0441\u0446\u0456 ": "178Z1908", \u0441\u044A: "163V1808", \u0441\u044A\u043C: "168T", "\u0441\u044A\u043C ": "169O", \u0441\u044B: "170P180X1LE21M09", "\u0441\u044B ": "170W180W1LC8", \u0441\u044B\u043D: "170O180I1LE1", \u0441\u044B\u043D\u0434: "1L9S", \u0441\u044B\u043D\u0434\u0430: "1LCY", \u0441\u044B\u043D\u044B: "1L7C", \u0441\u044B\u043D\u044B\u04A3: "1L8Y", \u0441\u044C: "171618601953", "\u0441\u044C ": "171X18C0195Z", \u0441\u044C\u043E\u0433\u043E: "193H", "\u0441\u044C\u0446\u0456 ": "174E", \u0441\u044D: "170D1M5J", \u0441\u044D\u043D: "170B1M9A", "\u0441\u044D\u043D ": "1MA1", \u0441\u044F: "160D177T18A719C4", "\u0441\u044F ": "160J17I118IV19LM", \u0441\u0450: "0X0L", \u0441\u0451\u043D\u043D\u044F: "174R", \u0441\u0456: "172P192Q1L8H", \u0441\u0456\u0437: "1LAG", "\u0441\u0456\u0437 ": "1LBU", \u0441\u0456\u0437\u0434\u0456: "1L6J", "\u0441\u04E9\u043D ": "1M2W", \u0442: "0VIX0XL716N017CH18PL19O81LKY1MEB", "\u0442 ": "0V2F0X6X167H173F18HV193C1L6A1M3N", \u0442\u0430: "0V9O0X9P16B017HO18D719AG1LLU1MBT", "\u0442\u0430 ": "0V9H0XGV16NY17KF185R194Y1L5E1M4Q", "\u0442\u0430\u0430 ": "0X3L1M0M", \u0442\u0430\u0431\u0435: "175N", "\u0442\u0430\u0431\u0435 ": "178B", "\u0442\u0430\u0433\u0430 ": "174M", "\u0442\u0430\u0434\u044B ": "171O1L64", \u0442\u0430\u0437\u0438: "163N", "\u0442\u0430\u0437\u0438 ": "167I", \u0442\u0430\u0439: "160T172W180K190L1L2X1MCJ", "\u0442\u0430\u0439 ": "160D173Q180619091L2F1MDN", \u0442\u0430\u043A: "0V2J0X1Q1621178H18721968", "\u0442\u0430\u043A ": "0V0L176U185F193O", "\u0442\u0430\u043A\u0430 ": "0X1E162Y190Y", \u0442\u0430\u043C: "0V1X0X3316201752181M19141L43", "\u0442\u0430\u043C ": "0V0M0X2E161Z174N181W19151L14", "\u0442\u0430\u043C\u0443 ": "0X1L1738", \u0442\u0430\u043D: "0V3K0X3G162X174H182I192J1LED1M59", "\u0442\u0430\u043D ": "0V0T0X091604170I180519031LB41M15", \u0442\u0430\u043D\u0434: "1L6R1M19", \u0442\u0430\u043D\u0434\u044B: "1L7B", "\u0442\u0430\u043D\u044B ": "18051M3U", \u0442\u0430\u0440: "0V100X1316111760181W191J1LG91M0S", "\u0442\u0430\u0440 ": "0V080X0H1606171M180219031L7Q", \u0442\u0430\u0440\u0434\u044B: "1L61", \u0442\u0430\u0440\u044B: "172F180B1LAW", "\u0442\u0430\u0440\u044B ": "171W1L6M", \u0442\u0430\u0440\u044B\u043D: "1L7H", "\u0442\u0430\u0442\u0430 ": "0V090X1Y1640170I18021903", \u0442\u0432: "0V1Y0X1O162A171Y18501920", \u0442\u0432\u043E: "0V2Q0X3K164A171C184M192Q", \u0442\u0433: "16071M25", \u0442\u0435: "0V8M0X7Y169I18G3199A1LD71M0M", "\u0442\u0435 ": "0VFK0XG716M618CM198Q1L4O", \u0442\u0435\u0431: "0V0N0X1V161L1883193H1L0F", \u0442\u0435\u0431\u0435: "0V0K0X2G160K18671942", "\u0442\u0435\u0431\u0435 ": "0V1G0X2L161618B1195U", \u0442\u0435\u0431\u044F: "185A", "\u0442\u0435\u0431\u044F ": "189I", \u0442\u0435\u043B: "0V160X2M165Z188F192O1L2V", \u0442\u0435\u043B\u044C: "184P190J", \u0442\u0435\u043B\u044C\u043D: "18651903", \u0442\u0435\u0440: "0V150X1X161D183P191R1LAN", \u0442\u0438: "0V7R0X6B165V188N19N81L2A1M0Y", "\u0442\u0438 ": "0VBG0XBN16BR187X19SG", \u0442\u0438\u043D\u0430: "0V0F0X2C16231806190F", "\u0442\u0438\u043D\u0430 ": "0V130X22163O180A190L", \u0442\u0438\u0441: "0V070X04160D18071950", \u0442\u0438\u0441\u044F: "195B", "\u0442\u0438\u0441\u044F ": "197E", \u0442\u043A: "0V0I0X0R160T171L181H190Z1L2F", \u0442\u043D: "0V0V0X0L16141711181X19151L041M08", \u0442\u043E: "0VFB0XJI16G717AP18SA19NY1L5H1M63", "\u0442\u043E ": "0VG20XL716M717JL18RY199B", \u0442\u043E\u0430: "0X9Z160O18031905", "\u0442\u043E\u0430 ": "0XCS", \u0442\u043E\u0431: "0V0S0X06160N170I1851194R1L0K", \u0442\u043E\u0431\u044B: "1857", "\u0442\u043E\u0431\u044B ": "189D", \u0442\u043E\u0431\u0456: "1949", "\u0442\u043E\u0431\u0456 ": "1964", \u0442\u043E\u0432: "0V0V0X0W16A6170P182F191H", \u0442\u043E\u0432\u0430: "0V0N0X0316AI170I180N190G", "\u0442\u043E\u0432\u0430 ": "0V0816JG1808190C", \u0442\u043E\u0433\u043B\u043E: "1M42", \u0442\u043E\u0433\u043E: "0V04184019121M0V", "\u0442\u043E\u0433\u043E ": "187A191J", \u0442\u043E\u0437\u0438: "162T", "\u0442\u043E\u0437\u0438 ": "165V", \u0442\u043E\u0439: "167X1719181N190E1M40", "\u0442\u043E\u0439 ": "168R171Y1823190G1M4L", \u0442\u043E\u043B\u043A\u043E: "165D1802", \u0442\u043E\u043B\u043A\u0443: "0X291803", \u0442\u043E\u043B\u044C: "175M183G", \u0442\u043E\u043B\u044C\u043A: "17841866", \u0442\u043E\u043C: "0VK00XQ516IQ177218OJ19S01L6Q1M5K", "\u0442\u043E\u043C ": "0VH40XSD16KA177Q18O719PT1L8Z1M52", \u0442\u043E\u043C\u0430: "0V3X0X051605173D18631982", "\u0442\u043E\u043C\u0430 ": "0V9E174H18AP19BA", \u0442\u043E\u043C\u043E\u043C: "0V241839193D", \u0442\u043E\u043C\u0443: "0V2X170R185C195G", "\u0442\u043E\u043C\u0443 ": "0V7B1715189L197S", "\u0442\u043E\u043D ": "0V0G0X2S180X190A", \u0442\u043E\u0458: "0V100X38", "\u0442\u043E\u0458 ": "0V070X3P", \u0442\u0440: "0V4D0X3D1649174T187919701L10", \u0442\u0440\u0430: "0V3O0X1R163D175P1857194E1L0Y", \u0442\u0440\u0435: "0V4O0X761626183P191I", \u0442\u0440\u0435\u0431: "0V4M0X7K1604180J191E", \u0442\u0440\u0435\u0431\u0430: "0V9S0X7O191N", \u0442\u0440\u044D\u0431: "1778", \u0442\u0440\u044D\u0431\u0430: "1769", \u0442\u0440\u044F: "1672180E1905", \u0442\u0440\u044F\u0431: "167V", \u0442\u0440\u044F\u0431\u0432: "16FE", \u0442\u0440\u0456\u0431: "192Z", \u0442\u0440\u0456\u0431\u043D: "193Z", \u0442\u0441: "0V040X091605184U19031L0A", \u0442\u0441\u044F: "1894", "\u0442\u0441\u044F ": "18C4", \u0442\u0442: "0X0416081803190O1L9J1M0F", \u0442\u0442\u044B: "1L7R", "\u0442\u0442\u044B ": "1L6P", \u0442\u0442\u0456: "19051L79", "\u0442\u0442\u0456 ": "19051L7M", \u0442\u0443: "0V1I0X1H1617173Y183K194F1L4E1M1L", \u0442\u0443\u043A: "0X38162Y170818061902", "\u0442\u0443\u043A ": "16381804", \u0442\u0443\u043A\u0430: "0X3Q160418021902", "\u0442\u0443\u043A\u0430 ": "0X3X16081802", \u0442\u0443\u0440\u0430\u043B: "170E18021L5Y", "\u0442\u0443\u0442 ": "17461813192Z", \u0442\u044B: "1791188N1LHU1M0D", "\u0442\u044B ": "17K518FY1LE1", "\u0442\u044B\u043C ": "175X180A1L2A", \u0442\u044B\u043D: "170A18031LAA", "\u0442\u044B\u043D ": "1L94", \u0442\u044B\u0440: "170N180B1L9E", "\u0442\u044B\u049B ": "1L86", "\u0442\u044B\u04A3 ": "1L7M", \u0442\u044C: "18IB19B0", "\u0442\u044C ": "18R519E4", \u0442\u044C\u0441: "185D198B", \u0442\u044C\u0441\u044F: "1878199N", "\u0442\u044C\u0441\u044F ": "18CR19DF", \u0442\u044D: "171X1ME2", \u0442\u044D\u0439: "1MAZ", "\u0442\u044D\u0439 ": "1MBR", \u0442\u044D\u0440: "171Z1MH7", "\u0442\u044D\u0440 ": "170I1MIP", \u0442\u044F: "161I180R1912", "\u0442\u044F ": "165B180B191E", \u0442\u0456: "19481LCH", "\u0442\u0456 ": "192R1LBC", "\u0442\u0456\u0432 ": "1938", "\u0442\u0456\u043A ": "19021L6X", \u0442\u04AF: "1L321M3U", \u0442\u04AF\u04AF: "1M8P", \u0442\u04AF\u04AF\u043D: "1M9R", \u0442\u04AF\u04AF\u043D\u0434: "1M51", \u0442\u04AF\u04AF\u043D\u0438: "1MBF", \u0442\u04B1: "1L2Z", \u0443: "0VF10X9A165Q17A718CT19GG1L741MC6", "\u0443 ": "0VFL0X5E160Z17FN18IJ19LG1L741M7P", \u0443\u0430\u049B\u044B\u0442: "1L5V", \u0443\u0431: "0V0Y0X12160J170S181A190L1L11", \u0443\u0431\u043B\u0438\u043A: "160B180B1L6G", \u0443\u0432: "0V0Q0X4I1619170I181I196L1M0I", "\u0443\u0432 ": "0X081950", \u0443\u0432\u0430: "0V0I0XDZ163W171C1807198M", "\u0443\u0432\u0430 ": "0V040X63161J", \u0443\u0432\u0430\u0430\u0442: "0X1F", \u0443\u0432\u0430\u0432: "0X0Z192T", "\u0443\u0432\u0430\u0432 ": "0X0T193N", \u0443\u0432\u0430\u043C: "0V030X52160W", "\u0443\u0432\u0430\u043C ": "0X4B161M", \u0443\u0432\u0430\u0442: "0X05160C193K", \u0443\u0432\u0430\u0442\u0438: "1952", \u0443\u0432\u0430\u0448: "0X3G160C", "\u0443\u0432\u0430\u0448 ": "0X2D160K", \u0443\u0432\u0430\u0448\u0435: "0X1C", "\u0443\u0432\u0430\u0458 ": "0X1F", \u0443\u0433: "0V130X0H160J170G181V190N1L161M1G", \u0443\u0434: "0V290X0R160V172V185T194L1L3D1M39", \u0443\u0434\u0430: "0V0U0X0I160D170Z183019081L3M1M54", "\u0443\u0434\u0435\u0442 ": "185B", \u0443\u0434\u0437\u0435: "1754", "\u0443\u0434\u0437\u0435 ": "174Y", "\u0443\u0434\u044C ": "1832192Y", \u0443\u0436: "0V0P0X0E160G1713183Y192V", \u0443\u0436\u0435: "0V0A0X041603183F1953", "\u0443\u0436\u0435 ": "0V06183R195L", \u0443\u043A: "0V0W0X19160Y171B1818191D1L05", \u0443\u043A\u0430: "0V0J0X3D160H1726180J1912", "\u0443\u043A\u0430 ": "0V0B0X42160E18081909", \u0443\u043B: "0V0M0X0B160C172V181Z19441L1E1M3D", "\u0443\u043B\u0430 ": "0V0K0X04171R180E192Y", "\u0443\u043B\u043E ": "0V0318021934", \u0443\u043C: "0V140X26160P172F183O193M1L0T", "\u0443\u043C ": "0V050X5V1605170A18071903", \u0443\u043F: "0V1M0X0U160P171F1824191Y", \u0443\u0440: "0V260X0R160T171I181A19171L2U1M5E", \u0443\u0440\u0430: "0V4H0X0B160K171C180J19071L3K1M1L", \u0443\u0440\u0430\u0434: "0V4M", \u0443\u0440\u0430\u0434\u0438: "0VB7", \u0443\u0440\u0430\u043B\u044B: "1L5Y", \u0443\u0440\u0442: "180319031M4D", \u0443\u0440\u0442\u0430: "1M4R", \u0443\u0440\u0442\u0430\u0439: "1M9A", \u0443\u0441: "0V230X0R1616173K182U192P1L0N1M24", \u0443\u0442: "0V250X0O160O171Q183819421L0B1M13", \u0443\u0443: "1MB7", "\u0443\u0443 ": "1MBQ", \u0443\u0443\u0434: "1M4D", \u0443\u0443\u043B: "1M59", "\u0443\u0446\u044C ": "176X", \u0443\u0447: "0V210X1G161N171P183E19151M0O", \u0443\u0448: "0V100X1Q160E170Q181I190I1L1E", \u0443\u0448\u0442: "0V0G0X3V1902", \u0443\u0448\u0442\u0435: "0V060X3J", "\u0443\u0448\u0442\u0435 ": "0X3G", \u0443\u044B: "1L58", "\u0443\u044E ": "1787183D191U", \u0443\u0493\u0430: "1L77", "\u0443\u0493\u0430 ": "1LBF", \u0444: "0V0P0X0U1619170N180T19131L0F1M0A", \u0444\u0430: "0V060X0S1607170W180B190C1L07", \u0444\u0440\u0430\u043D\u0446: "0V2C0X0V160F172Y1839193G1L231M2V", \u0444\u0440\u0435: "165I", \u0444\u0440\u0435\u043D: "1665", \u0444\u0440\u0435\u043D\u0441: "16CB", \u0445: "0V2C0X0B163J173A183O194N1L101MG9", "\u0445 ": "0V2C0X03163E173X1850192S1L061M9Z", \u0445\u0430: "0V0D0X03161J1749181C19291L2W1M9E", \u0445\u0430\u0430: "1M59", \u0445\u0430\u0430\u043D: "1M2Y", \u0445\u0430\u0430\u043D\u0430: "1M42", \u0445\u0430\u043B\u044B\u049B: "1L61", \u0445\u0430\u043D: "0V0217131804190D1L271M4W", "\u0445\u0430\u043D ": "1M4G", \u0445\u0430\u0440: "0X051628170I180919061M6Q", \u0445\u0430\u0440\u0430: "170C18071M2W", \u0445\u0430\u0440\u0435\u0441: "1640", "\u0445\u0430\u0447\u0443 ": "174M", \u0445\u0433: "1M3O", \u0445\u0433\u04AF: "1M8W", \u0445\u0433\u04AF\u0439: "1MAB", "\u0445\u0433\u04AF\u0439 ": "1MIE", \u0445\u0438: "0V060X031606180D190W1L0F1M5Z", \u0445\u0438\u0439: "19021M9F", "\u0445\u0438\u0439\u0433 ": "1M4I", "\u0445\u0438\u0439\u0436 ": "1M46", \u0445\u0438\u0439\u0445: "1M2S", "\u0445\u0438\u0439\u0445 ": "1M46", \u0445\u043E: "0V1E0X0816121723188219651M3T", \u0445\u043E\u0434\u0437\u0456: "174U", \u0445\u043E\u0434\u0438: "161M184J191M", \u0445\u043E\u0434\u0438\u0442: "160B185C191O", \u0445\u043E\u0440\u043E\u0448: "185Y1909", \u0445\u043E\u0442\u0435\u043B: "0V0D0X05160P186G", \u0445\u043E\u0442\u0456: "193M", \u0445\u043E\u0442\u0456\u0432: "193H", \u0445\u043E\u0447: "172518511968", \u0445\u043E\u0447\u0435: "183P194D", "\u0445\u043E\u0447\u0435 ": "192T", \u0445\u043E\u0447\u0443: "183D192Y", "\u0445\u043E\u0447\u0443 ": "1865193Y", "\u0445\u0442\u043E ": "176D193Q", \u0445\u0443: "1609170T180B190F1M1X", "\u0445\u044B\u0433 ": "1M3J", \u0445\u044D: "1MAS", \u0445\u044D\u0437\u044D\u044D: "1M3Y", \u0445\u044D\u043B: "1M7N", \u0445\u044D\u043B\u0441: "1M2W", \u0445\u044D\u043B\u0441\u044D: "1M5O", \u0445\u044D\u043B\u044D: "1M2U", \u0445\u044D\u043D: "1M4F", "\u0445\u044D\u043D ": "1M42", \u0445\u044D\u0440: "1M61", \u0445\u044D\u0440\u044D: "1M58", \u0445\u044D\u0440\u044D\u0433: "1M8W", \u0445\u044D\u044D\u0440: "1M32", "\u0445\u044D\u044D\u0440 ": "1M63", "\u0445\u0456\u0431\u0430 ": "1712192O", \u0445\u04AF: "1M5V", \u0445\u04AF\u043B\u044D\u044D: "1M3M", "\u0445\u04AF\u043D ": "1M3J", \u0445\u04E9: "1M1V", \u0446: "0V2C0X1K161H179R181K195P1L0G1M29", \u0446\u0430: "0V180X0V160X176K181A19021M3M", "\u0446\u0430 ": "0V2R0X1R162D17G8181I", "\u0446\u0430\u0442\u0430 ": "0X1R163C", \u0446\u0435: "0V180X0R160K1746181T19941L08", "\u0446\u0435 ": "0V1S0X0D160D17A8181419G0", \u0446\u0438: "0V1L0X121619181F190O1L1I", \u0446\u0443\u0437\u044C\u043A: "1936", \u0446\u0446: "1750", \u0446\u0446\u0430: "17EQ", "\u0446\u0446\u0430 ": "17KW", \u0446\u044B: "1733180D", \u0446\u044C: "17D6192D", "\u0446\u044C ": "17SG191I", \u0446\u044C\u043E\u0433: "193B", \u0446\u044C\u043E\u0433\u043E: "194R", \u0446\u044F: "16051736191J", \u0446\u044F\u0431\u0435: "1769", "\u0446\u044F\u0431\u0435 ": "1795", \u0446\u0456: "175E194B", "\u0446\u0456 ": "17DK193Q", \u0447: "0V410X3J166J174U1884196S1L021M69", "\u0447 ": "0V090X041604170P180A190M1M4S", \u0447\u0430: "0V1X0X11162G177E184N193O1M4G", \u0447\u0430\u0434: "0X0416051M5A", \u0447\u0430\u0434\u0430: "1M3R", \u0447\u0430\u0434\u0430\u0445: "1M74", \u0447\u0430\u043B\u0430\u0432: "1767", \u0447\u0430\u043C: "0V0H0X0P1610172H18021M5I", \u0447\u0430\u043C\u0430: "1M2O", \u0447\u0430\u043C\u0430\u0439: "1M4L", \u0447\u0430\u043C\u0434: "1M2W", "\u0447\u0430\u043C\u0434 ": "1M5R", "\u0447\u0430\u043C\u0443 ": "1759", \u0447\u0430\u0441: "0V0J0X0O161K176W184M193A", \u0447\u0435: "0V2Q0X2I166F189V194O1L07", "\u0447\u0435 ": "0V1P0X1T16FW180D1926", \u0447\u0435\u0433\u043E: "1841", "\u0447\u0435\u0433\u043E ": "186W", "\u0447\u0435\u043C\u0443 ": "0V0O186U", \u0447\u0435\u043D\u044C: "18511903", "\u0447\u0435\u043D\u044C ": "188W1905", \u0447\u0438: "0V2Q0X241625184R196E1M7R", "\u0447\u0438 ": "0V1H0X2R162L180U192Y1M9Z", \u0447\u0438\u0433\u0434\u04E9: "1M3I", \u0447\u0438\u043D\u0438: "0V0T0X0D1607180A190M1M38", \u0447\u0438\u043D\u0438\u0439: "1M6E", \u0447\u043A: "0V0J0X0M1610170L180P190L", \u0447\u043D: "0V0X0X0X160S171Q181P191A", \u0447\u043E: "0V0A0X0E160M170Z1803193Q1M0B", \u0447\u043E\u0432\u0435\u043A: "0V1T0X13163P", "\u0447\u043E\u0433\u043E ": "1933", \u0447\u043E\u043C\u0443: "194K", "\u0447\u043E\u043C\u0443 ": "196J", \u0447\u0442: "160518AY19021M08", \u0447\u0442\u043E: "18KH", "\u0447\u0442\u043E ": "18LT", \u0447\u0442\u043E\u0431: "185A", \u0447\u0442\u043E\u0431\u044B: "189D", \u0447\u0443: "0V0O0X0T160W171L1821192W1M0E", \u0447\u044B: "176N", "\u0447\u044B\u0446\u044C ": "1777", \u0448: "0V6K0X8D164C174V184M19531L5P1M35", "\u0448 ": "0V4J0X66164F1739180F194G1L1E1M3F", \u0448\u0430: "0V1V0X1E160O172Q1824191A1L6A1M0S", \u0448\u0435: "0V1Y0X47162V184O19351L3C", "\u0448\u0435 ": "0V3I0XCE169H185B194U1L2L", \u0448\u0438: "0V190X0W160V183A192I1L0A1M3L", \u0448\u043A: "0V0R0X0K1609170U181W191E1L10", "\u0448\u043C\u0430\u0442 ": "1762", \u0448\u043D: "0V060X0I1608170M180K190G", \u0448\u0442: "0V4R0X6917621805190Q1L1E", \u0448\u0442\u0430: "0V5Q0X0W1728180519071L0X", "\u0448\u0442\u0430 ": "0V670X0C172P", \u0448\u0442\u0435: "0V0X0X3I1L14", "\u0448\u0442\u0435 ": "0V0M0X3M", \u0448\u0442\u043E: "0V630XFV17HN1802190C", "\u0448\u0442\u043E ": "0V720XJD17OA", \u0448\u044B: "172X1L5N", \u0448\u044C: "184D", "\u0448\u044C ": "188N", \u0448\u0456: "190W1L4O", \u0449: "163J1819194A", \u0449\u0430: "161I180W190O", \u0449\u0435: "163A181O191T", "\u0449\u0435 ": "16BV180U193O", \u0449\u043E: "162019BK", "\u0449\u043E ": "167M19ID", "\u0449\u043E\u0431 ": "193L", \u044A: "166R1805", \u044A\u0434: "161I", "\u044A\u0434\u0435 ": "1643", \u044A\u043C: "162E", "\u044A\u043C ": "169C", \u044A\u0440: "162Y", \u044A\u0442: "161M", "\u044A\u0442 ": "165F", \u044B: "17D8189R1LOM1M25", "\u044B ": "17KO18JX1LRA1M1M", \u044B\u0433: "170Z180E1M38", "\u044B\u0433 ": "1M7U", \u044B\u0437: "170H18061L7I", "\u044B\u0437 ": "1LBK", \u044B\u0437\u043C\u0435\u0442: "1L6G", "\u044B\u0439 ": "170O186Y", \u044B\u043B: "173K18541LAY", \u044B\u043B\u0430: "176918211L6N", "\u044B\u043B\u0430 ": "1780182O", "\u044B\u043B\u0434\u044B ": "1L5L", "\u044B\u043B\u043E ": "175L184K", \u044B\u043B\u044B: "1L9P", \u044B\u043B\u0493\u0430\u043D: "1L5V", \u044B\u043C: "174N181N1L8O", "\u044B\u043C ": "17A7182R1L91", "\u044B\u043C\u0435\u043D ": "1L8M", \u044B\u043D: "173A180G1LLI1M1V", "\u044B\u043D ": "170N18081LL91M4A", \u044B\u043D\u0430: "173T18051LCJ", "\u044B\u043D\u0430 ": "173718071LED", "\u044B\u043D\u0430\u043D ": "1L78", \u044B\u043D\u0434: "1LGA", \u044B\u043D\u0434\u0430: "1LMX", "\u044B\u043D\u0434\u0430 ": "1LKL", \u044B\u043D\u0434\u0430\u0493: "1L78", "\u044B\u043D\u0448\u0430 ": "1L7K", \u044B\u043D\u044B: "170Y1LBI", \u044B\u043D\u044B\u04A3: "1LF1", "\u044B\u043D\u044B\u04A3 ": "1LJT", \u044B\u043F: "170J180E1L59", "\u044B\u043F ": "1LC5", \u044B\u0440: "171Z180G1L8V", \u044B\u0441: "171P18141L8K", "\u044B\u0441 ": "1L6V", \u044B\u0441\u0442\u044B: "170I1L78", \u044B\u0441\u044B: "1L6Z", \u044B\u0446: "173O", \u044B\u0446\u044C: "177V", "\u044B\u0446\u044C ": "17CQ", \u044B\u044F: "17461802", "\u044B\u044F ": "17CA", "\u044B\u045E ": "1765", \u044B\u0493: "1L4A", \u044B\u0493\u044B: "1L87", \u044B\u049B: "1LCS", "\u044B\u049B ": "1LJY", \u044B\u049B\u0442: "1LAC", \u044B\u049B\u0442\u0430: "1LBQ", \u044B\u049B\u0442\u0430\u0440: "1LA1", \u044B\u049B\u0442\u044B: "1L7O", "\u044B\u049B\u0442\u044B ": "1L6Q", \u044B\u04A3: "1LDJ", "\u044B\u04A3 ": "1LP1", \u044B\u04A3\u044B\u0437: "1L8N", "\u044B\u04A3\u044B\u0437 ": "1L90", \u044C: "1602175K18AJ197W1L071M2G", "\u044C ": "17F018P319CA1L051M3E", \u044C\u0434: "170218031L061M27", \u044C\u043A: "1725182H194Q", "\u044C\u043A\u0438 ": "1802192W", "\u044C\u043A\u043E ": "186G190W", "\u044C\u043A\u043E\u044E ": "1932", "\u044C\u043A\u0456 ": "1794190A", "\u044C\u043C\u0456 ": "177B", \u044C\u043E: "1604193M", \u044C\u043E\u0433: "195U", \u044C\u043E\u0433\u043E: "196S", "\u044C\u043E\u0433\u043E ": "196U", \u044C\u043E\u0433\u043E\u0434: "1937", \u044C\u0441: "170E183819451M0D", \u044C\u0441\u044F: "1867198C", "\u044C\u0441\u044F ": "188D199O", "\u044C\u0448\u0435 ": "184N1923", \u044D: "174D183E1L0D1MOK", "\u044D ": "170W1MEH", \u044D\u0433: "17031M8G", "\u044D\u0433 ": "1M8Z", \u044D\u0433\u0442: "1M6D", \u044D\u0433\u0442\u044D: "1M65", \u044D\u0433\u0442\u044D\u0439: "1MB9", "\u044D\u0433\u04AF\u0439 ": "1M3U", \u044D\u0434: "170B1M6V", "\u044D\u0434 ": "1M4Y", \u044D\u0434\u044D: "1M7K", \u044D\u0434\u044D\u0433: "1M2U", \u044D\u0434\u044D\u0445: "1M3C", \u044D\u0436: "17021M44", "\u044D\u0436 ": "1M9C", "\u044D\u0437\u044D\u044D ": "1M3U", \u044D\u0439: "170T18021M52", "\u044D\u0439 ": "171818031MAX", \u044D\u043B: "171918051L091M6J", \u044D\u043B\u0441\u044D: "1M30", \u044D\u043B\u0441\u044D\u043D: "1M5V", \u044D\u043B\u044D: "1M47", \u044D\u043C: "170B18021M1X", \u044D\u043C\u044D\u0433\u0442: "1M4A", \u044D\u043D: "171O18041L081MEP", "\u044D\u043D ": "170G18021MFN", \u044D\u043D\u0434: "1M67", "\u044D\u043D\u0434 ": "1M6E", \u044D\u043D\u044D: "1MDH", "\u044D\u043D\u044D ": "1MES", \u044D\u0440: "171B182M1L0C1MFD", "\u044D\u0440 ": "170E1MLS", \u044D\u0440\u0438: "185K1L0U1M1H", "\u044D\u0440\u0438 ": "187I1L0X", \u044D\u0440\u044D: "1M7C", \u044D\u0440\u044D\u0433: "1M5M", \u044D\u0440\u044D\u0433\u0442: "1M7I", \u044D\u0441: "170S18031M2D", "\u044D\u0441\u044D\u043D ": "1M3M", \u044D\u0442: "177M18B41M0L", \u044D\u0442\u0430: "17HZ1815", "\u044D\u0442\u0430 ": "17MA181E", \u044D\u0442\u043E: "18J4", "\u044D\u0442\u043E ": "18IC", \u044D\u0442\u043E\u0433\u043E: "185A", "\u044D\u0442\u043E\u043C ": "185E", "\u044D\u0442\u043E\u0442 ": "184K", \u044D\u0442\u044B: "175Z", "\u044D\u0442\u044B ": "175N", \u044D\u0445: "17021M5N", "\u044D\u0445 ": "1M4V", \u044D\u0445\u0433\u04AF: "1M3N", \u044D\u0445\u0433\u04AF\u0439: "1M77", \u044D\u0445\u044D: "1M44", \u044D\u0445\u044D\u044D: "1M3D", \u044D\u0445\u044D\u044D\u0440: "1M5V", \u044D\u044D: "1MBV", "\u044D\u044D ": "1MC0", \u044D\u044D\u0433\u04AF\u0439: "1M42", \u044D\u044D\u0440: "1M7O", "\u044D\u044D\u0440 ": "1M7J", "\u044D\u044D\u0441 ": "1M2S", \u044E: "160E172S183E195G1L061M20", "\u044E ": "176S188819BF", \u044E\u043C: "1602180319021M2I", "\u044E\u043C ": "180219021M61", "\u044E\u0442\u044C ": "192U", \u044E\u0443: "1M3G", "\u044E\u0443 ": "1M7E", "\u044E\u0446\u044C ": "176M", \u044F: "168T17CZ18BD19DP1L1H1M35", "\u044F ": "168417M418RD19QN1L1B1M0K", \u044F\u0431: "161R171Y18081906", \u044F\u0431\u0432: "1671", \u044F\u0431\u0432\u0430: "167V", "\u044F\u0431\u0432\u0430 ": "16E7", "\u044F\u0431\u0435 ": "177L", \u044F\u0432: "1611170R180F190T1M29", \u044F\u0432\u0430\u0445: "16041M30", "\u044F\u0432\u0430\u0445 ": "1M3Y", \u044F\u0433: "1605172Q1804190M1M0J", \u044F\u0433\u043E: "177B1906", "\u044F\u0433\u043E ": "17BF", "\u044F\u0435 ": "1769", \u044F\u043A: "1613174718071954", "\u044F\u043A ": "17741802194U", "\u044F\u043B\u044B\u049B ": "1L6J", \u044F\u043C: "161S171Q180Q190J1M0Y", \u044F\u043C\u0430: "166E172F1M27", "\u044F\u043C\u0430 ": "1653173W", "\u044F\u043C\u0430\u0440 ": "1M4L", \u044F\u043D: "16081761180T190P1L0R1M0K", \u044F\u043D\u0430: "1604178U18021903", "\u044F\u043D\u0430 ": "160517DB18021903", \u044F\u043D\u0435: "1604176P1803", "\u044F\u043D\u0435 ": "17AG1802", "\u044F\u043D\u044B ": "176S1L0O", \u044F\u0440: "160C171T180419071M2F", \u044F\u0442: "16361710183U192Z1L0B1M08", "\u044F\u0442 ": "16651708182A1904", "\u044F\u0442\u0430 ": "164L17091807190B", "\u044F\u0446\u044C ": "17641906", "\u044F\u0448\u0447\u044D ": "176X", \u0450: "0X0B", "\u0450 ": "0X0Q", \u0451: "172D182N1M0I", "\u0451 ": "171S1855", \u0451\u043D: "174B180T", "\u0451\u043D ": "17BH180K", "\u0451\u043D\u043D\u044F ": "174O", \u0451\u0441\u0442\u043E\u0439: "1M51", \u0451\u0441\u0446\u044C: "175M", "\u0451\u0441\u0446\u044C ": "1789", \u0452: "0V0U", \u0453: "0X0D", \u0453\u0430: "0X0J", \u0454: "194E", "\u0454 ": "197H", \u0454\u0442: "193R", "\u0454\u0442\u0435 ": "192W", \u0454\u0442\u044C: "195D", \u0454\u0442\u044C\u0441: "1969", \u0454\u0442\u044C\u0441\u044F: "198W", \u0455: "0X02", \u0456: "17DV19JW1LJD", "\u0456 ": "17LD19LO1LLA", \u0456\u0432: "171C195O", "\u0456\u0432 ": "197R", \u0456\u0434: "1716197A1L0A", \u0456\u0437: "170V192G1LA9", "\u0456\u0437 ": "191M1LDC", "\u0456\u0437\u0433\u0435 ": "1L5Y", \u0456\u0437\u0434: "190B1L8E", \u0456\u0437\u0434\u0456: "1LB8", \u0456\u0437\u0434\u0456\u04A3: "1L9I", \u0456\u0439: "170G1940", "\u0456\u0439 ": "1708195J", \u0456\u043A: "173M19371L6U", "\u0456\u043A ": "173J190W1LAH", \u0456\u043A\u043E\u043B\u0438: "193B", \u0456\u043A\u043E\u043B\u0456: "174T", \u0456\u043B: "1741195I1L7N", \u0456\u043B\u0430: "176O191E", "\u0456\u043B\u0430 ": "177M191K", \u0456\u043B\u0430\u0441\u044F: "174G", \u0456\u043B\u044C: "172M196T", \u0456\u043B\u044C\u043A: "1935", \u0456\u043B\u044C\u043A\u0438: "193H", \u0456\u043B\u044C\u0448\u0435: "1931", \u0456\u043B\u0456: "174A190B1L7X", \u0456\u043C: "172T191V1L7D", "\u0456\u043C ": "176Q19131L8D", \u0456\u043D: "1753196Z1LFW", "\u0456\u043D ": "172H198S1LJT", \u0456\u043D\u0434: "170M19061L8S", \u0456\u043D\u0434\u0435: "1LC7", "\u0456\u043D\u0434\u0435 ": "1LBY", \u0456\u043D\u0435: "171J19081L7F", "\u0456\u043D\u0435 ": "171F1L94", \u0456\u043D\u0456\u04A3: "1L7S", "\u0456\u043D\u0456\u04A3 ": "1LAQ", \u0456\u043F: "170819071L37", \u0456\u0440: "171619231L8X", \u0456\u0441: "173I193H1L48", \u0456\u0442: "171H19471L1K", \u0456\u0446: "175F190L", "\u0456\u0446\u0446\u0430 ": "1769", \u0456\u0446\u044C: "17AA", "\u0456\u0446\u044C ": "17GA", \u0456\u04A3: "1L9B", "\u0456\u04A3 ": "1LJ4", "\u0456\u04A3\u0456\u0437 ": "1L5P", \u0457: "192T", "\u0457 ": "194E", \u0458: "0VCA0X5Q", "\u0458 ": "0V3A0X3L", \u0458\u0430: "0V4N0X6Q", "\u0458\u0430 ": "0V800XCE", "\u0458\u0430\u0441 ": "0X2K", \u0458\u0430\u0442: "0V160X3W", \u0458\u0430\u0442\u0430: "0X32", "\u0458\u0430\u0442\u0430 ": "0X37", \u0458\u0434: "0V040X1D", \u0458\u0434\u0435: "0V0A0X35", "\u0458\u0434\u0435 ": "0V0A0X2V", \u0458\u0435: "0VG40X04", "\u0458\u0435 ": "0VR90X08", \u0458\u0443: "0V2D0X05", "\u0458\u0443 ": "0V4V", \u0459: "0V200X05", \u045A: "0V1R0X0J", \u045A\u0435: "0V240X0V", "\u045A\u0435\u0442\u043E ": "0X1G", \u045B: "0V3C", \u045B\u0435: "0V3F", "\u045B\u0435 ": "0V6F", "\u045B\u0443 ": "0V4H", \u045C: "0X22", \u045C\u0430: "0X0L", \u045C\u0435: "0X3W", "\u045C\u0435 ": "0XCI", \u045D: "0X081604", "\u045D ": "0X0K1608", \u045E: "176L", "\u045E ": "17DW", \u045E\u0441: "173R", \u045E\u0441\u044F: "1762", "\u045E\u0441\u044F ": "179J", \u045F: "0V040X04", \u0493: "1L6T", \u0493\u0430: "1LHC", "\u0493\u0430 ": "1LG4", \u0493\u0430\u043D: "1LJR", "\u0493\u0430\u043D ": "1LOH", \u0493\u044B: "1L9U", "\u0493\u044B ": "1LAU", \u049B: "1LDN", "\u049B ": "1LBY", \u049B\u0430: "1LIY", \u049B\u0430\u0437: "1L9P", \u049B\u0430\u0437\u0430: "1LDP", \u049B\u0430\u0437\u0430\u049B: "1LGG", \u049B\u0430\u043B: "1L80", \u049B\u0430\u043B\u0430: "1L84", \u049B\u0430\u0440: "1LAA", \u049B\u0430\u0440\u0430: "1LA9", \u049B\u043E: "1L59", \u049B\u0441: "1L3V", \u049B\u0441\u0442\u0430: "1LA0", \u049B\u0441\u0442\u0430\u043D: "1LDT", \u049B\u0442: "1L6U", \u049B\u0442\u0430: "1LBI", \u049B\u0442\u0430\u0440: "1L94", \u049B\u0442\u0430\u0440\u044B: "1L72", \u049B\u0442\u044B: "1L6Z", "\u049B\u0442\u044B ": "1L7I", \u049B\u044B: "1L95", \u049B\u044B\u0437\u043C\u0435: "1L6G", \u049B\u04B1: "1L4L", \u049B\u04B1\u049B\u044B: "1L7C", \u04A3: "1L7F", "\u04A3 ": "1LJF", "\u04A3\u044B\u0437 ": "1L80", \u04AF: "1L3T1MDJ", "\u04AF ": "1M3E", \u04AF\u0439: "1L2W1MA4", "\u04AF\u0439 ": "1L0R1MJ2", \u04AF\u043D: "1L2D1M84", "\u04AF\u043D\u0434 ": "1M36", \u04AF\u043D\u0438: "1L111M98", \u04AF\u043D\u0438\u0439: "1MAO", "\u04AF\u043D\u0438\u0439 ": "1M7T", \u04AF\u043D\u0438\u0439\u0433: "1MD7", \u04AF\u043D\u044D: "1M48", \u04AF\u043D\u044D\u0445\u044D: "1M55", \u04AF\u0441: "1L1J1M29", \u04AF\u0448\u0456\u043D: "1L6L", "\u04AF\u0448\u0456\u043D ": "1L8J", \u04AF\u04AF: "1MB6", "\u04AF\u04AF ": "1M87", \u04AF\u04AF\u043D: "1MCJ", \u04AF\u04AF\u043D\u0434: "1M2Y", "\u04AF\u04AF\u043D\u0434 ": "1M5V", \u04AF\u04AF\u043D\u0438: "1MA8", \u04AF\u04AF\u043D\u0438\u0439: "1MIJ", \u04B1: "1L4N", \u04B1\u043B: "1L4Z", "\u04B1\u043B ": "1L8T", \u04B1\u043C\u044B\u0441: "1L82", "\u04B1\u043C\u044B\u0441 ": "1L6Q", \u04B1\u0440: "1L52", \u04D9: "1L3E", \u04D9\u043D: "1L3W", \u04D9\u043D\u0435: "1L98", "\u04D9\u043D\u0435 ": "1LFS", \u04D9\u0440: "1L3P", \u04E9: "1L431M9G", "\u04E9 ": "1M3A", \u04E9\u0433: "1M3F", \u04E9\u0434\u04E9\u0440: "1M2Y", "\u04E9\u0434\u04E9\u0440 ": "1M5O", \u04E9\u0437: "1L4A", \u04E9\u043D: "1L1A1M4Q", "\u04E9\u043D ": "1M4G", \u04E9\u043D\u0433\u04E9: "1M3R", \u04E9\u0440: "1L381M5S", "\u04E9\u0440 ": "1M6F", \u04E9\u0447\u0438\u0433\u0434: "1M3I", \u04E9\u04E9: "1M6C", "\u04E9\u04E9 ": "1M5K", \u04E9\u04E9\u0440: "1M5F", "\u05B4": "1H0N", "\u05B7": "1HIQ", "\u05B7 ": "1H9G", "\u05B7\u05D6\u05D5\u05D9 ": "1H39", "\u05B7\u05DC": "1H41", "\u05B7\u05DF": "1H4X", "\u05B7\u05DF ": "1H9N", "\u05B7\u05E0": "1H65", "\u05B7\u05E8": "1H7N", "\u05B8": "1HFM", "\u05B8\u05D1": "1H4A", "\u05B8\u05D1 ": "1H4U", "\u05B8\u05D1\u05DF ": "1H5B", "\u05B8\u05D8": "1H5Z", "\u05B8\u05D8 ": "1HAJ", "\u05B8\u05DD": "1H59", "\u05B8\u05DD ": "1HAA", "\u05B8\u05DE\u05E2\u05DF ": "1H3D", "\u05B8\u05E1": "1H6G", "\u05B8\u05E1 ": "1HAA", "\u05BC": "1H4N", "\u05BE": "1H1J", "\u05BF": "1H6Y", "\u05BF\u05D0": "1H51", "\u05BF\u05D0\u05B7": "1H8E", "\u05BF\u05D0\u05B7\u05E8": "1HDX", "\u05BF\u05D0\u05B7\u05E8 ": "1H4C", "\u05BF\u05D0\u05B7\u05E8\u05E9": "1H2Q", "\u05BF\u05D5\u05DF ": "1H75", "\u05C2": "1H0A", \u05D0: "1HSG", \u05D0\u05B7: "1HQX", "\u05D0\u05B7 ": "1HG5", \u05D0\u05B7\u05D6: "1H4Q", \u05D0\u05B7\u05D6\u05D5\u05D9: "1H3G", "\u05D0\u05B7\u05DB\u05D8 ": "1H2U", \u05D0\u05B7\u05DC: "1H7P", "\u05D0\u05B7\u05DF ": "1H6U", \u05D0\u05B7\u05E0: "1H8U", \u05D0\u05B7\u05E8: "1HEH", \u05D0\u05B8: "1HQU", \u05D0\u05B8\u05D1: "1H8H", "\u05D0\u05B8\u05D1 ": "1H98", \u05D0\u05B8\u05D1\u05DF: "1H5B", "\u05D0\u05B8\u05D1\u05DF ": "1H5R", "\u05D0\u05B8\u05D2\u05D8 ": "1H2X", \u05D0\u05B8\u05D8: "1HBL", "\u05D0\u05B8\u05D8 ": "1HIM", \u05D0\u05B8\u05DC: "1H60", \u05D0\u05B8\u05DD: "1HAA", "\u05D0\u05B8\u05DD ": "1HI8", \u05D0\u05B8\u05DE\u05E2\u05DF: "1H3D", "\u05D0\u05B8\u05DF ": "1H5I", \u05D0\u05B8\u05E1: "1HCG", "\u05D0\u05B8\u05E1 ": "1HI9", \u05D0\u05B8\u05E8: "1H7M", "\u05D0\u05B8\u05E8\u05DF ": "1H38", \u05D0\u05D5: "1H6B", \u05D0\u05D5\u05D9: "1H6H", "\u05D0\u05D5\u05D9\u05E3 ": "1H4K", "\u05D0\u05D5\u05DF ": "1H5T", \u05D0\u05D9: "1HLM", \u05D0\u05D9\u05D6: "1HLD", "\u05D0\u05D9\u05D6 ": "1HSG", \u05D0\u05D9\u05DA: "1HCK", "\u05D0\u05D9\u05DA ": "1HLG", \u05D0\u05D9\u05DF: "1H5J", "\u05D0\u05D9\u05DF ": "1HAF", \u05D0\u05D9\u05E8: "1H4P", "\u05D0\u05D9\u05E8 ": "1H8B", \u05D1: "1H9X", "\u05D1 ": "1H4I", \u05D1\u05D9: "1H57", \u05D1\u05D9\u05DF: "1H4X", "\u05D1\u05D9\u05DF ": "1H9E", "\u05D1\u05D9\u05E1\u05D8 ": "1H38", "\u05D1\u05DF ": "1H5F", \u05D2: "1HAL", \u05D2\u05E2: "1HCB", \u05D2\u05E2\u05D5: "1H5Q", \u05D2\u05E2\u05D5\u05D5: "1HAS", \u05D2\u05E2\u05D5\u05D5\u05D0: "1H3A", \u05D2\u05E2\u05D5\u05D5\u05E2: "1H7Y", \u05D3: "1HC2", \u05D3\u05D0: "1H5I", \u05D3\u05D0\u05B8: "1H8Q", \u05D3\u05D0\u05B8\u05E1: "1HC8", "\u05D3\u05D0\u05B8\u05E1 ": "1HD5", \u05D3\u05D9: "1H71", "\u05D3\u05D9 ": "1H7M", \u05D3\u05E2: "1H7D", "\u05D3\u05E2\u05DD ": "1H5E", \u05D3\u05E2\u05E8: "1HA2", "\u05D3\u05E2\u05E8 ": "1HE9", \u05D4: "1H7G", \u05D4\u05D0: "1HA8", \u05D4\u05D0\u05B8: "1HGC", \u05D4\u05D0\u05B8\u05D1: "1HDC", "\u05D4\u05D0\u05B8\u05D1 ": "1H9S", \u05D4\u05D0\u05B8\u05D1\u05DF: "1H5K", \u05D4\u05D0\u05B8\u05D8: "1HGN", "\u05D4\u05D0\u05B8\u05D8 ": "1HHP", \u05D5: "1HMD", "\u05D5 ": "1H5K", \u05D5\u05D0: "1H4R", \u05D5\u05D0\u05B8: "1H6A", \u05D5\u05D0\u05B8\u05E1: "1H6Z", "\u05D5\u05D0\u05B8\u05E1 ": "1H7E", \u05D5\u05D5: "1HFD", \u05D5\u05D5\u05D0: "1H95", \u05D5\u05D5\u05D0\u05B8: "1HBR", \u05D5\u05D5\u05D0\u05B8\u05DC: "1H2R", \u05D5\u05D5\u05D0\u05B8\u05E1: "1H7K", \u05D5\u05D5\u05D0\u05B8\u05E8: "1H2Q", \u05D5\u05D5\u05D9: "1H85", \u05D5\u05D5\u05E2: "1HBU", \u05D5\u05D5\u05E2\u05DF: "1H8P", "\u05D5\u05D5\u05E2\u05DF ": "1H9E", \u05D5\u05D9: "1HAU", "\u05D5\u05DE\u05E2\u05DF ": "1H38", \u05D5\u05DF: "1H3W", "\u05D5\u05DF ": "1H7K", \u05D5\u05E2: "1H6B", \u05D5\u05E2\u05DF: "1H4O", "\u05D5\u05E2\u05DF ": "1H8W", \u05D6: "1HDX", "\u05D6 ": "1HE5", \u05D6\u05D9: "1H7C", \u05D6\u05D9\u05D9\u05E2\u05E8: "1H37", \u05D6\u05D9\u05DA: "1H5O", "\u05D6\u05D9\u05DA ": "1HAN", \u05D6\u05E2: "1H4X", \u05D6\u05E2\u05E0: "1H6A", \u05D6\u05E2\u05E0\u05E2: "1H9P", \u05D6\u05E2\u05E0\u05E2\u05DF: "1HAG", "\u05D6\u05F2\u05B7\u05DF ": "1H4E", \u05D7: "1H19", \u05D8: "1HM5", "\u05D8 ": "1HPI", \u05D8\u05D0: "1H9R", \u05D8\u05D0\u05B8: "1HF1", \u05D8\u05D0\u05B8\u05DD: "1HI4", "\u05D8\u05D0\u05B8\u05DD ": "1HJ9", "\u05D8\u05D0\u05B8\u05DF ": "1H32", \u05D8\u05E2: "1H5F", \u05D8\u05E2\u05E8: "1H5F", "\u05D8\u05E2\u05E8 ": "1H6H", \u05D9: "1HSG", "\u05D9 ": "1HBE", \u05D9\u05D6: "1HD5", "\u05D9\u05D6 ": "1HLS", \u05D9\u05D8: "1H52", "\u05D9\u05D8 ": "1H6N", \u05D9\u05D9: "1HC8", \u05D9\u05D9\u05DF: "1H75", "\u05D9\u05D9\u05DF ": "1HD3", "\u05D9\u05D9\u05E2\u05E8 ": "1H37", \u05D9\u05DA: "1HA2", "\u05D9\u05DA ": "1HIE", \u05D9\u05DF: "1H9M", "\u05D9\u05DF ": "1HHM", \u05D9\u05E0: "1H57", \u05D9\u05E1: "1H5E", \u05D9\u05E1\u05D8: "1H52", "\u05D9\u05E1\u05D8 ": "1H5G", \u05D9\u05E7: "1H4Q", \u05D9\u05E8: "1H7Z", "\u05D9\u05E8 ": "1HB9", \u05D9\u05E9: "1HA9", "\u05D9\u05E9 ": "1H4V", \u05D9\u05E9\u05D8: "1HCS", "\u05D9\u05E9\u05D8 ": "1HKW", \u05DA: "1H65", "\u05DA ": "1HCZ", \u05DB: "1H3P", "\u05DB\u05F3\u05D1\u05D9\u05DF": "1H3A", \u05DC: "1HC9", "\u05DC ": "1H5J", \u05DC\u05D9: "1H6A", \u05DC\u05E2: "1H5J", \u05DD: "1H4T", "\u05DD ": "1HA8", \u05DE: "1HAJ", \u05DE\u05D9: "1H7J", "\u05DE\u05D9\u05D8 ": "1H5J", \u05DE\u05D9\u05E8: "1H61", "\u05DE\u05D9\u05E8 ": "1HB7", \u05DE\u05E2: "1H6C", "\u05DE\u05E2\u05DF ": "1H8P", \u05DE\u05E2\u05E0\u05D8\u05E9: "1H3S", \u05DE\u05F2\u05B7\u05DF: "1H5S", "\u05DE\u05F2\u05B7\u05DF ": "1H69", \u05DF: "1HHC", "\u05DF ": "1HRW", \u05E0: "1HEY", \u05E0\u05D8: "1H5Y", "\u05E0\u05D8 ": "1H6U", \u05E0\u05D9: "1H9B", \u05E0\u05D9\u05E9: "1HDD", \u05E0\u05D9\u05E9\u05D8: "1HLK", "\u05E0\u05D9\u05E9\u05D8 ": "1HLY", \u05E0\u05E2: "1H7T", \u05E0\u05E2\u05DF: "1H83", "\u05E0\u05E2\u05DF ": "1HET", \u05E1: "1HAO", "\u05E1 ": "1HAE", \u05E1\u05D8: "1H65", "\u05E1\u05D8 ": "1H5M", "\u05E1\u05D8\u05D5 ": "1H57", "\u05E1\u05F3\u05D0\u05D9\u05D6": "1H3T", \u05E2: "1HQ4", "\u05E2 ": "1H92", \u05E2\u05D5\u05D5: "1H6D", \u05E2\u05D5\u05D5\u05D0\u05B8: "1H2U", \u05E2\u05D5\u05D5\u05E2: "1H7T", \u05E2\u05D5\u05D5\u05E2\u05DF: "1H7Z", \u05E2\u05DC: "1H4F", "\u05E2\u05DD ": "1H4S", \u05E2\u05DF: "1HAN", "\u05E2\u05DF ": "1HJ9", \u05E2\u05E0: "1H88", \u05E2\u05E0\u05D8: "1H52", "\u05E2\u05E0\u05D8 ": "1H56", \u05E2\u05E0\u05E2: "1H76", \u05E2\u05E0\u05E2\u05DF: "1HAW", "\u05E2\u05E0\u05E2\u05DF ": "1HBP", \u05E2\u05E1: "1H44", \u05E2\u05E8: "1HJH", "\u05E2\u05E8 ": "1HN6", \u05E3: "1H11", \u05E4: "1H9X", \u05E4\u05BC: "1H7W", \u05E4\u05BC\u05E8\u05D0\u05B7: "1H2Q", \u05E4\u05BF: "1HDI", \u05E4\u05BF\u05D0: "1H9W", \u05E4\u05BF\u05D0\u05B7: "1HFB", \u05E4\u05BF\u05D0\u05B7\u05E8: "1HEW", \u05E4\u05BF\u05D5: "1H51", \u05E4\u05BF\u05D5\u05DF: "1H77", "\u05E4\u05BF\u05D5\u05DF ": "1H7Q", \u05E5: "1H0X", \u05E6: "1H4H", \u05E6\u05D9: "1H3Y", \u05E7: "1H99", \u05E7\u05D9: "1H3Y", \u05E7\u05D9\u05D9: "1H66", \u05E7\u05D9\u05D9\u05DF: "1H8X", "\u05E7\u05D9\u05D9\u05DF ": "1H9K", \u05E7\u05E2: "1H4M", \u05E8: "1HKR", "\u05E8 ": "1HJE", \u05E8\u05D0: "1H5B", \u05E8\u05D0\u05B7: "1H68", \u05E8\u05D9: "1H5C", "\u05E8\u05DF ": "1H4X", \u05E8\u05E2: "1H4U", \u05E9: "1HAC", \u05E9\u05D8: "1H97", "\u05E9\u05D8 ": "1HCI", \u05EA: "1H17", \u05F0: "1H0O", \u05F1: "1H0A", \u05F2: "1H53", \u05F2\u05B7: "1HA0", \u05F2\u05B7\u05DF: "1H6K", "\u05F2\u05B7\u05DF ": "1HC8", "\u05F3": "1H17", "\u05F3\u05D0\u05D9\u05D6 ": "1H3T", "\u05F3\u05D1\u05D9\u05DF ": "1H3A", "\u05F4": "1H0B", \u1E0D: "0332", "\u1E0D ": "034C", \u1E0De: "031N", \u1E25: "0322", "\u1E25 ": "0313", \u1E25e: "0322", \u1E25w: "0318", \u1E5B: "031O", \u1E5Ba: "031B", \u1E5Bu: "031G", \u1E63: "030D", \u1E6D: "031D", \u1E6Da: "031E", \u1E6D\u1E6D: "0314", \u1E93: "0314", \u1E93r: "0316", "\u200B": "06070Z02", "\u200B\u200B": "0Z04", "\u200E": "1H03", "\u2010": "1L04", "\u2011": "0303", "\u201F": "1H02", "\u2060": "1H0H", \u4E00: "06H5", \u4E00\u4E2A: "063T", \u4E00\u500B: "062Z", \u4E0A: "067D", \u4E0D: "06I1", "\u4E0D\u597D\u610F\u601D ": "06C2", \u4E0D\u662F: "063L", \u4E0D\u77E5\u9053: "06DC", \u4E2A: "067X", \u4E3A\u4EC0\u4E48: "069R", \u4E48: "065X", \u4E86: "06N1", "\u4E86 ": "06I3", \u4E86\u4E00: "0636", "\u4E86\u5417 ": "067N", \u4EBA: "06AJ", "\u4EBA ": "0643", \u4EC0: "065K", \u4EC0\u4E48: "065R", "\u4EC0\u4E48 ": "06E0", \u4EC0\u4E48\u65F6\u5019: "06Q1", \u4EC0\u9EBC: "062O", "\u4EC0\u9EBC ": "066Y", \u4EC0\u9EBC\u6642\u5019: "06GV", \u4ED6: "06JJ", \u4ED6\u4EEC: "0639", \u4ED6\u7684: "064G", \u4EE5: "064M", \u4EEC: "068I", \u4F1A: "064Y", \u4F60: "06K8", \u4F60\u4E3A\u4EC0\u4E48: "06H9", \u4F60\u4EC0\u4E48\u65F6\u5019: "06AU", \u4F60\u4EC0\u9EBC\u6642\u5019: "066K", \u4F60\u7684: "064G", "\u4FD7\u8A71\u53C8\u8AAA\uFF1A": "06BK", \u500B: "065L", \u5011: "065Y", "\u505A\u4EC0\u4E48 ": "06J9", \u5230: "067G", \u53BB: "0670", \u53D1\u751F\u4E86\u4EC0\u4E48: "0683", \u53EF: "064L", \u53EF\u4EE5: "063C", \u53EF\u4FD7\u8A71\u53C8\u8AAA: "06BD", \u5417: "064U", "\u5417 ": "0675", "\u5427 ": "062L", \u559C\u6B22: "0630", "\u55CE ": "065T", \u5728: "06FQ", "\u5728\u54EA\u91CC ": "06HN", \u591A: "0653", \u5927: "064R", \u5929: "0677", \u5979: "069M", \u597D: "066O", "\u597D ": "062R", \u59C6: "0684", \u59C6\u548C\u739B\u4E3D: "06ME", \u5B50: "0667", "\u5B50 ": "0637", \u5C31: "0651", \u5DE5\u4F5C: "062R", "\u5DE5\u4F5C ": "06C6", \u5F88: "068S", \u5F97: "065G", "\u5F97\u5F88\u597D ": "06GV", "\u600E\u4E48\u6837 ": "06J1", \u60F3: "0662", \u6211: "06SG", \u6211\u4E0D: "064E", \u6211\u4E0D\u559C\u6B22: "06G6", \u6211\u4E0D\u77E5: "066L", \u6211\u4E0D\u77E5\u9053: "06SG", \u6211\u4E0D\u77E5\u9053\u4ED6: "068A", \u6211\u4EEC: "067C", \u6211\u4EEC\u7684: "066M", \u6211\u5011: "065L", \u6211\u60F3: "062R", \u6211\u7684: "066P", "\u6211\u7684\u670B\u53CB ": "066R", \u662F: "06JR", \u662F\u4E00: "062U", \u662F\u4E16\u754C\u4E0A\u6700: "067X", "\u662F\u4EC0\u4E48 ": "06IA", \u662F\u6211: "062V", \u662F\u6211\u7684: "067S", \u6709: "06E7", "\u670B\u53CB ": "068B", \u6765: "064Y", \u6C64: "065E", \u6C64\u59C6: "067V", \u6C64\u59C6\u4E0D\u77E5\u9053: "066Y", \u6C64\u59C6\u548C\u739B: "06MI", \u6C64\u59C6\u548C\u739B\u4E3D: "06ND", \u6C92\u6709: "062P", \u6CA1\u6709: "063E", \u6E6F\u59C6: "064G", \u6E6F\u59C6\u548C\u746A\u9E97: "067J", \u751F: "065A", \u7684: "06S3", "\u7684 ": "069E", "\u7684\u4EBA ": "068Q", "\u7684\u540D\u5B57 ": "06GV", "\u7684\u5730\u65B9 ": "06H4", \u7684\u65F6\u5019: "06A5", "\u7684\u65F6\u5019 ": "06RL", \u7684\u6642\u5019: "066S", "\u7684\u6642\u5019 ": "06HN", "\u7684\u670B\u53CB ": "06JI", \u770B: "0657", \u77E5\u9053: "064O", \u80FD: "065M", \u81EA\u5DF1: "062J", \u81EA\u5DF1\u7684: "067D", \u8981: "068S", \u8FD9: "068O", \u8FD9\u4E2A: "062Z", \u9019: "066J", \u90A3: "0669", \u90FD: "064S", "\uFF1B\u53EF\u4FD7\u8A71\u53C8": "06B1" }, uniques: { " 'ac": "1q", " 'ar": "1q", " 'iv ": "1q", " 'k": "1o", " 'op ": "1q", " aast": "1c", " acea": 15, " acho": "p", " acue": "o", " adev": 15, " adiu": "t", " aed": "t", " afis": 4, " aftu": 13, " ag ": "s", " aho ": 4, " ah\xED": "o", " aige": "s", " aika": 11, " aina": 11, " aind": "p", " aith": "s", " aiu": "q", " aiz": "1d", " ajat": 11, " ajn": "1o", " ajud": "p", " ajut": 15, " ak-": 3, " aker": 3, " akh": "b", " akk ": 3, " akka": 3, " akke": 3, " akon": "d", " aku ": "b", " akvo": "1o", " ak\xE9": "y", " ak\xFD": "y", " alcu": "q", " aldy": "1n", " all\xE9": "l", " alst": "r", " alwa": "m", " amek": 3, " an-": "s", " ang ": "d", " anos": "p", " any ": "m", " anyt": "m", " aon ": "s", " aos": "p", " apak": "b", " apie": "1b", " apsi": "1b", " aql": 3, " araw": "d", " art\u0131": "1f", " ar\u012B": "1d", " as-d": 3, " ascu": 15, " asel": 3, " asj": "1c", " ass-": 3, " as\xED": "o", " atau": "b", " atb": "1d", " atc": "1d", " atid": "1b", " atsi": "1b", " att ": 10, " at\xE1": "s", " at\xE9": "p", " auch": "n", " aucu": "l", " auf ": "n", " augs": "1d", " auj": "l", " aus ": "n", " autr": "l", " aux ": "l", " auz": 15, " avet": "q", " avez": "l", " avre": "q", " ayah": "b", " ayen": 3, " ayer": "o", " azt ": 14, " a\xED": "p", " a\xFA": "o", " a\u0161": "1b", " a\u0165": "u", " bahw": "b", " bao ": "a", " bar\xE1": 14, " ba\u015F\u0131": "1f", " be'": "1q", " bem ": "p", " berh": "b", " ber\xE4": 10, " bhe": "s", " biez": "1d", " bij ": "r", " biq": "1q", " bizt": 14, " bje": "z", " bk": "1o", " ble ": 12, " blei": "n", " blij": "r", " bly ": 1, " boa ": "p", " bolm": "1n", " book": "m", " bp": "s", " br\xF6d": 10, " br\u0101": "1d", " bunu": "1f", " bv": "1o", " bw": 4, " bylo": "u", " bys ": "u", " b\xE3": "a", " b\xE4rd": "1n", " b\xE9 ": "a", " b\xE9o ": "a", " b\xED ": "a", " b\xF3n": "a", " b\u0113": "1d", " b\u0119": "1a", " b\u0131": "1f", " b\u016Bs ": "1d", " cad ": "s", " cael": "t", " can'": "m", " cao ": "a", " cauz": 15, " cea ": 15, " cean": "s", " cee": 15, " ces ": "l", " cet ": "l", " cett": "l", " cha ": "a", " chaw": "1q", " chay": "1q", " chez": "l", " chiu": "q", " chli": "y", " cho ": "a", " cho\u010F": "y", " cht": "u", " chui": "s", " ch\xE9i": "s", " ch\xED": "a", " ch\xF3 ": "a", " ch\xFD": "y", " cida": "p", " cieb": "1a", " cik ": "1d", " citt": "q", " citu": "1d", " coci": "o", " cs": 14, " cu ": 15, " cual": "o", " cung": "a", " cuno": 15, " cur ": "t", " c\xE1c": "a", " c\xE1i": "a", " c\xE1m ": "a", " c\xE9 ": "s", " c\xE9a": "s", " c\xE9n ": "s", " c\xE9u": "p", " c\xF2": "a", " c\xF3 ": "a", " c\xF3m": "o", " c\xF4 ": "a", " c\xFAm ": "a", " c\u0113": "t", " c\u016B": "t", " d-a": 3, " d-i": 3, " d-n": 3, " d-s": 3, " d-t": 3, " d-u": 3, " d-y": 3, " dagh": "1q", " dah ": "1q", " daja": "1q", " dakk": 3, " dary": "1b", " daso": "1q", " dass": "n", " daud": "1d", " da\u015F": "1n", " dcer": "u", " ddan": 3, " ddu": 3, " dezi": "1o", " dhe": "s", " dh\xE1": "s", " dh\xE9": "s", " did ": "m", " dije": "o", " dijo": "o", " dios": "o", " dirb": "1b", " dla ": "1a", " dled": "1p", " dlin": "1p", " dlo": "u", " does": "m", " dogt": 1, " doin": "m", " doit": "l", " dovu": "q", " dric": 10, " dro ": 12, " dr\xE6": "z", " dt": "s", " duj ": "1q", " dusa": "1q", " duu": "r", " dver": "y", " dvi": "1b", " dyb": "z", " dze": "1d", " d\xE2n": "a", " d\xE4l": "1n", " d\xE4r ": 10, " d\xE9s": "l", " d\xE9t": "l", " d\xEDa": "o", " d\xEDt": "u", " d\xEE": "l", " d\xF3n": "o", " d\xF4": "y", " d\xF6d": 10, " d\u0101": "1d", " d\u0131": "1f", " eac": "m", " eam": "t", " eat": "m", " ebl": "1o", " edzi": "1o", " eens": "r", " eest": "1c", " ef ": 13, " efti": 13, " egy ": 14, " eie ": 1, " eigi": 13, " eine": "n", " eiti": "1b", " eitt": 13, " eiu": "t", " ek'": 1, " ekd": "1o", " ekke": 13, " el\xE4": 11, " el\xE9g": 14, " ema ": "1c", " ens ": 10, " ents": "n", " eo ": "t", " eor": "t", " eos": "t", " eple": 12, " erat": "t", " erg ": "r", " erti": "1n", " ertu": 13, " eru ": 13, " erum": 13, " esa ": "o", " ese ": "o", " esmu": "1d", " eso ": "o", " est-": "l", " esu ": "1b", " esz": 14, " etd": "1n", " etia": "t", " etj": "1n", " etti": "1f", " etw": "n", " eum": "t", " evn": 12, " exs": "t", " ez ": 14, " ezek": 14, " ezt": 14, " e\xE9": "r", " e\u0161": "y", " facc": "q", " fao": "s", " few": "m", " fez": "p", " ff": 3, " fha": "s", " fhei": "s", " fho": "s", " fica": "p", " fik ": "z", " fiq": "p", " fjel": 12, " fk": 3, " folo": 15, " fue ": "o", " fuo": "q", " f\xE1 ": 13, " f\xE9i": "s", " f\xF6lj": 10, " f\xF6r ": 10, " f\xF6re": 10, " f\xF6rl": 10, " f\xFCn": "n", " f\xFCr ": "n", " gade": "z", " gads": "1d", " gadu": "1d", " galm": "1n", " garo": "p", " gawi": "d", " gc": "s", " gde": "v", " gece": "1f", " gely": 1, " gg": 3, " ghah": "1q", " ghaj": "1q", " ghen": "a", " ghi ": "a", " ghit": "1q", " ghl": "s", " ghor": "1q", " ghot": "1q", " ghu": "1q", " gia ": "a", " gic": 10, " gih": 4, " gije": "1n", " gik ": "z", " gina": "d", " gior": "q", " givo": "1p", " gi\xE1": "a", " gi\xF3 ": "a", " gje": 12, " gli ": "q", " glo ": 1, " got ": "m", " gou ": 1, " gowy": "1n", " gs": "r", " gudi": "1p", " guh": 4, " guk": 4, " guma": "d", " gur ": "s", " gusu": 4, " guy": "m", " gv": "1o", " gya": 14, " gyv": "1b", " gyz": "1n", " g\xE1i": "a", " g\xE2n": 15, " g\xE5e": "z", " g\xEC": "a", " g\xF3p ": "a", " g\u0103": 15, " ha-t": 3, " hac ": "t", " hafa": 13, " haig": "1c", " haky": "1n", " hapo": "d", " hasz": 14, " ha\xE7a": "1n", " hea ": "1c", " hear": "m", " hef ": 13, " hehe": 4, " heni": "1n", " heto": "1p", " heur": "l", " heut": "n", " hezk": "u", " hic ": "t", " hij ": "r", " him ": "m", " hizo": "o", " hj\xE4": 10, " hled": "u", " hoa ": "a", " hoan": "a", " hoc ": "t", " hode": 12, " hodn": "u", " holn": 14, " hom ": 1, " hon ": 10, " honu": 13, " how ": "m", " hoy": "o", " hoz": 14, " ho\u0107": "v", " hraj": "u", " hrin": 13, " huo": 11, " hva ": 12, " hvad": "z", " hven": 13, " hvit": 12, " hv\xED": 13, " h\xE1 ": "p", " h\xE2l": "1f", " h\xE4m ": "1k", " h\xE4mt": 10, " h\xE6t": 13, " h\xE9r ": 13, " h\xE9rn": 13, " h\xEA": 1, " h\xF6g": 10, " h\xF6rd": 10, " i'": "m", " i-a": 15, " iac": "t", " iad ": "s", " iap": "t", " iarr": "s", " ibir": 4, " ici ": "l", " ico ": 4, " icum": 4, " iedo": "1d", " ieg": "1d", " iek": "1d", " iep": "1d", " iesp": "1d", " iet ": "1d", " ie\u0161": "1b", " igal": "1c", " igaz": 14, " igj": 12, " ihje": "z", " ihre": "n", " iht": "1f", " ik ": "r", " ils ": "l", " ily": 14, " imi ": 3, " imir": 3, " imod": "z", " ind ": "z", " indt": "z", " inns": 12, " ioa": "t", " iom": "1o", " ion ": "1o", " ios": "t", " ips": "t", " isso": "p", " ist ": "n", " ist\xFD": "y", " it'": "m", " ita ": "t", " ithe": "s", " iton": "d", " itt ": 14, " itu ": "b", " iu ": "1o", " iud": "t", " iuj": "1o", " iur": "t", " iuv": "t", " ix": 3, " iyan": "d", " iyon": "d", " izs": "1d", " i\u0148": "1n", " i\u0161 ": "1b", " i\u0161e": "1b", " i\u0161t": "1b", " j'": "l", " jaf": 13, " jag ": 10, " jaki": "1a", " jak\xE9": "u", " jauk": "1d", " jd": "u", " jedz": "1a", " jego": "1a", " jeji": "u", " jep": "b", " jesz": "1a", " jie ": "1b", " jih ": "1q", " jij ": "r", " jija": "1q", " jik": "b", " jin\xE9": "u", " jis ": "1b", " jist": "u", " jmen": "u", " joka": 11, " jse": "u", " jsi": "u", " jst": "u", " juba": "1c", " jue": "o", " juh ": "1q", " jy ": 1, " j\xE1r": 14, " j\xED": "u", " j\xF3l ": 14, " j\u0119": "1a", " k'": 4, " kaik": 11, " kaj ": "1o", " kao ": "v", " kau ": "b", " kayb": "1f", " kdo ": "u", " kdy": "u", " kedy": "y", " kelu": "b", " kemb": "b", " ken-": 3, " keyp": 13, " kezd": 14, " khi": "a", " kho": "a", " khu": "a", " kh\xE1": "a", " kiam": "1o", " kie ": "1o", " kied": "1a", " kiek": "1b", " kiit": 11, " kil ": "1p", " kilk": "1a", " kio ": "1o", " kiom": "1o", " kion": "1o", " kiu ": "1o", " ki\xE7i": "1n", " kje": 12, " klaa": "r", " kl\xE6r": 12, " knew": "m", " kny": "1b", " koje": "v", " komt": "r", " kosk": 11, " kra ": 3, " kry ": 1, " kr\u0101": "1d", " kter": "u", " ktor": "y", " kt\xF3": "1a", " kubi": 4, " kui ": "1c", " kurl": "1d", " kuty": 14, " kvel": 12, " kvet": "y", " kwu": 4, " kyk ": 1, " k\xE4e": "1c", " k\xE4i": "1c", " k\xE4n ": "1n", " k\xE5": 12, " k\xE9o ": "a", " k\xF6me": "1n", " k\xF6pt": 10, " k\xFD ": "a", " k\u0105 ": "1b", " k\u016B": "1b", " l'a ": "l", " l-": 15, " laas": 1, " labs": "1d", " lahk": "1c", " lala": "d", " lalu": "b", " latl": "1q", " lb": 3, " lear": "m", " leav": "m", " left": "m", " legy": 14, " lehe": 14, " leig": 13, " lesz": 14, " leur": "l", " lhe ": "p", " li-": "1p", " lidt": "z", " lid\xE9": "u", " liel": "1d", " life": "m", " liig": "1c", " liik": 11, " liom": "s", " lleg": "o", " llen": "o", " llev": "o", " lli": 3, " llor": "o", " lm": 3, " loc ": 15, " lodn": "1q", " lojm": "1q", " loq ": "1q", " lor ": 15, " lors": "l", " lq": 3, " luat": 15, " lupw": "1q", " luu": 11, " lx": 3, " lyk ": 1, " lyss": 10, " l\xE1i": "a", " l\xE1ny": 14, " l\xE2n": 15, " l\xE4sa": 10, " l\xE5t": 10, " l\xE6g": "z", " l\xE9a": "s", " l\xE9i": "s", " l\xEDfi": 13, " l\xEDk": 13, " l\xF2": "a", " l\xF6d": "1p", " l\xFD ": "a", " l\u017E": "u", " m'a ": "l", " m'e": "l", " m-a": 15, " mahi": "d", " mamy": "1a", " ma\u017E": "1b", " mbei": "s", " me'": "1q", " meam": "t", " mee ": "r", " megi": 14, " megk": 14, " meie": "1c", " meir": 13, " mejo": "o", " mekd": "1n", " mely": 14, " mem ": "1o", " meo ": "t", " mfi": 4, " mha": "s", " mh\xE1": "s", " mi-a": 15, " mida": "1c", " mieg": "1b", " mij ": "r", " mim ": "p", " mj\xF6l": 10, " mlie": "y", " mlu": "u", " mnie": "1a", " moc ": "u", " moen": 1, " moga": "v", " mogu": "v", " mohu": "u", " moky": "1b", " mpa": 4, " muga": "1n", " muht": "1f", " muje": "o", " muns": 4, " muy ": "o", " mv": 4, " mw": 4, " mye ": 12, " mynd": 13, " m\xE1i ": "a", " m\xE1nu": 13, " m\xE1t ": "a", " m\xE4l": "1c", " m\xE9r ": 13, " m\xE9t ": "a", " m\xEC": "a", " m\xEDn ": 13, " m\xEDna": 13, " m\xEDt ": "u", " m\xF3g": "1a", " m\xF3n ": "a", " m\xF3r": "s", " m\xF6d": "1p", " m\u0113 ": "t", " m\u0119": "1a", " m\u0131": "1f", " m\u016Bz": "1d", " n'a ": "l", " n'av": "l", " n'es": "l", " n-am": 15, " nae": "1c", " nagy": 14, " nang": "d", " nasz": "1a", " nas\u0131": "1f", " nda": 4, " ndi ": 4, " ne-a": 15, " nedd": 3, " nedz": "1d", " neh ": "1q", " nekk": 3, " nel ": "q", " neni": "1o", " nen\xED": "u", " nequ": "t", " ner ": 10, " neud": "u", " nezi": "1d", " ng ": "d", " ngg": "b", " ngh": "a", " ngoa": "a", " ngon": "a", " ngu ": "a", " nguy": "a", " ng\xE2": "a", " ng\xE3 ": "a", " ng\xF3n": "a", " nha": "a", " nh\xE1t": "a", " nh\xE9": "a", " nh\xF3": "a", " nici": 15, " nie\u010D": "y", " nigh": "m", " nihi": "t", " niin": 11, " nimu": 4, " nin ": "1o", " ninc": 14, " nind": 4, " niny": "d", " nito": "d", " niya": "d", " ni\xF1": "o", " ni\u0161": "v", " nk'": 4, " nko": 4, " nku": 4, " nl": 3, " nn": 3, " noas": 15, " noen": 12, " nogl": "z", " noli": "t", " nopi": "1d", " noss": "p", " nsh": 4, " nta ": 4, " nti": 4, " ntu": 4, " nuai": "s", " nuit": "l", " nukk": 11, " nuq ": "1q", " nusi": "1b", " nyel": 14, " nzi": 4, " nzo": 4, " nzu": 4, " n\xE1i": "s", " n\xE4c": "n", " n\xE4di": "1n", " n\xE4r ": 10, " n\xE4st": 10, " n\xE9m ": "a", " n\xEA": "a", " n\xF3s": "p", " n\xFA ": 13, " n\xFAi": "a", " n\xFAn": 13, " n\xFAt ": "a", " n\u0103m": "a", " oam": 15, " obai": "s", " obi ": "1p", " obik": "1p", " obin": "1p", " obos": 15, " obri": "p", " obs ": "1p", " ock": 10, " odel": "1p", " odot": 11, " od\xED": "y", " ofe ": "1p", " off ": "m", " ofi ": "1p", " ogen": "r", " ogg": "q", " ogla": "1n", " ohne": "n", " oik": 11, " ojc": "1a", " ojo": "o", " okik": "1p", " okku": 13, " olab": "1f", " olac": "1f", " oled": "1c", " olha": "p", " olho": "p", " olid": "1c", " olis": 11, " ollu": 11, " olm": "1f", " oln": "1c", " olur": "1f", " olva": 14, " olvi": "o", " olya": 14, " omda": "r", " ome ": "1p", " omi ": "1p", " omik": "1p", " omne": "t", " onko": 11, " onne": 11, " onun": "1f", " ooi": "r", " oop ": 1, " oota": "1c", " opna": 13, " opp ": 12, " oppl": 12, " oppt": 12, " ori ": 15, " oric": 15, " otev": "u", " oth": "m", " ott ": 14, " oty": "1n", " oude": "r", " ouer": 1, " our ": "m", " out ": "m", " ouvi": "p", " ovaj": "v", " ovd": "v", " own": "m", " o\xED": "o", " o\xF1": "1n", " o\u0148": "1n", " pa'": "1q", " paan": "d", " paf": "1o", " pai ": "p", " paq ": "1q", " pe ": 15, " peu ": "l", " phi ": "a", " ph\xE2": "a", " ph\xF3n": "a", " ph\xF4 ": "a", " pi\u0161": "v", " pl\xE1n": "u", " pm": "m", " poh ": "1q", " pomy": "1a", " pom\xF3": "1a", " pord": "1o", " praw": "1a", " pre\u010D": "y", " prvn": "u", " pr\xF3p": "p", " pr\u0161e": "u", " puel": "t", " puhe": 11, " puma": "d", " pumu": "d", " puw": "d", " pw": "d", " pyst": 11, " p\xE1i": "s", " p\xE4e": "1c", " p\xE4\xE4s": 11, " p\xE9 ": "p", " p\xFCk": "1p", " p\u0113": "1d", " qac": "1q", " qaq": "1q", " qq": 3, " qr": 3, " quam": "t", " quia": "t", " quid": "t", " qui\xE9": "o", " quoi": "l", " qu\xE9 ": "o", " rae": "t", " rahv": "1c", " raib": "s", " raks": "1d", " razl": "v", " ra\u0161": "1b", " read": "m", " redz": "1d", " rejs": "z", " rep ": "1q", " re\xEB": 1, " riek": "y", " rigt": "z", " rij": "r", " risp": "q", " rius": "q", " rob\xED": "y", " rog ": 15, " rr": 3, " rud ": "s", " rych": "u", " ryi": 4, " ryto": "1b", " rze": "1a", " r\xE0": "a", " r\xE1da": "u", " r\xE4\xE4k": "1c", " r\xE8": "l", " r\xEA": "l", " r\xEDk": 13, " r\xFDc": "y", " r\u0103m": 15, " r\u0113": "t", " r\u0119": "1a", " s'e": "l", " s-a": 15, " said": "m", " says": "m", " sa\xED": "p", " sa\xF1": "1n", " sba": "q", " scii": "1o", " scr\xED": "s", " scuo": "q", " sebu": "b", " sehe": "n", " seo ": "s", " seor": "b", " seun": 1, " seur": 11, " seus": "p", " sfo": "q", " she ": "m", " shou": "m", " siaj": "1o", " sic ": "t", " sidd": "z", " siit": 11, " sinh": "a", " sjel": 12, " sj\xE1": 13, " sj\xE4": 10, " ska ": 10, " skoo": 1, " skov": "z", " sk\xE4": 10, " sk\xFA": "y", " slec": "r", " sleg": 1, " sln": "y", " slo ": 12, " sl\xE4": 10, " sme ": "y", " smo ": "v", " smuk": "z", " sn\xE1m": "s", " sn\xE4": 10, " soh ": "1q", " soj ": "1q", " sont": "l", " soru": "1f", " spea": "m", " spus": 15, " sp\xE1t": "u", " srin": 3, " sse": 3, " stay": "m", " stej": "u", " stes": "q", " stia": "q", " str\u0101": "1d", " stva": "v", " styk": "z", " st\xF3r": 13, " st\xF4": "y", " st\u0101": "1d", " suel": "o", " suon": "q", " suy ": "a", " svak": "v", " sve ": "v", " svi ": "v", " svo ": 13, " svon": 13, " syk ": 12, " szc": "1a", " szem": 14, " szko": "1a", " szob": 14, " sz\xFC": 14, " s\xE0": "a", " s\xE1 ": 13, " s\xE1ng": "a", " s\xE1t ": "a", " s\xE2u ": "a", " s\xE4g ": 10, " s\xE4ke": 10, " s\xE4l": 10, " s\xE9r ": 13, " s\xF3ng": "a", " s\xF4": "a", " s\u0105 ": "1a", " s\u0113": "t", " t'e": "l", " t-t": 3, " talt": "z", " tal\xE1": 14, " tam'": "1q", " tan\u0131": "1f", " tarv": 11, " tay ": "a", " tayo": "d", " td": 3, " te-": 15, " tead": "1c", " teba": "y", " teed": "1c", " teha": "1c", " telj": 14, " ten\xED": "o", " tesr": 3, " tev ": "1d", " tew": 3, " tf": 3, " tg": 3, " thao": "a", " that": "m", " thei": "m", " thi ": "a", " thin": "m", " this": "m", " thou": "m", " thu ": "a", " thua": "a", " thu\xEA": "a", " th\xED": "a", " tiam": "1o", " tiko": "1p", " timp": 15, " tiom": "1o", " tise": 3, " tit ": "z", " tiu ": "1o", " tiun": "1o", " tive": "p", " tke": 3, " tli": 3, " tmaz": 3, " tme": 3, " tmu": 3, " tn": 3, " toat": 15, " toga": "v", " tohl": "u", " tois": 11, " toiv": 11, " tomy": "1n", " tom\u4E0D": 6, " tom\u5728": 6, " tom\u662F": 6, " tom\u6709": 6, " too ": "m", " toom": "1c", " tous": "l", " tp": 3, " tq": 3, " truy": "a", " tr\xE0": "a", " tr\xE1c": "a", " tr\xE6 ": "z", " tr\xF2": "a", " tr\xFAn": "a", " tr\u0103m": "a", " tt-": 3, " tta": 3, " tte": 3, " tuam": "t", " tud ": 14, " tudn": 14, " tugh": "1q", " tun ": "n", " tunt": 11, " tuoi": "q", " tuot": 11, " tus ": "o", " tuus": "t", " tuy ": "a", " tuzo": 4, " tyck": 10, " tyd ": 1, " tym": "1a", " tytt": 11, " tz": 3, " t\xE0": "a", " t\xE1ch": "a", " t\xE1i ": "a", " t\xE1m ": "a", " t\xE4i": "1c", " t\xE4na": "1c", " t\xE4nk": 10, " t\xE8": "q", " t\xE9l\xE9": "l", " t\xEC": "a", " t\xEDch": "a", " t\xEDm ": "u", " t\xEDn ": "a", " t\xF2": "a", " t\xF3k": 13, " t\xF3m ": "a", " t\xF5e": "1c", " t\xF6b": 14, " t\xF6rt": 14, " t\xF6\xF6": "1c", " t\xF9": "a", " t\xFAc ": "a", " t\xFAi ": "a", " t\xFAl": 14, " t\u0101": "1d", " t\u0113 ": "t", " t\u0119 ": "1a", " uai": "s", " uang": "b", " ubi ": "t", " ubu ": 4, " ubw": 4, " ud ": "z", " uden": "z", " udt": "z", " ugar": 3, " uge ": "z", " uile": "s", " uita": 15, " uke ": 12, " uko ": 4, " ulac": 3, " ulag": "1n", " uly ": "1n", " umah": 3, " umie": "1a", " umo ": "1p", " umun": 4, " um\xED": "u", " un'": "q", " und ": "n", " unds": "z", " unoh": 11, " uom": "q", " up ": "m", " urab": 4, " urad": "v", " uras": 4, " urbo": "1o", " urs\xE4": 10, " usaw": 3, " usc": "q", " usha": 4, " uspe": "v", " usq": "t", " utd": 12, " utom": 10, " ut\xE1": 14, " uur": "r", " uw ": "r", " uxo": "t", " uzt": "1d", " uzv": "1d", " u\u017Es": "1b", " vaba": "1c", " vack": 10, " vakk": 12, " vakr": 12, " varf": 10, " vatn": 13, " vav": "1q", " vaya": "o", " vd": "u", " vece": "o", " vegn": 13, " vej ": "z", " velm": "u", " venl": "z", " very": "m", " veu": "l", " viac": "y", " vich": "1q", " vid ": 10, " vids": "z", " vigh": "1q", " vigt": "z", " viik": 11, " vije": "1q", " viku": 13, " vimu": "1q", " visn": "t", " viu ": "p", " vj": "1o", " vo ": "y", " vobo": "1p", " voir": "l", " vou ": "p", " vous": "l", " voy ": "o", " vrag": "r", " vrai": "l", " vrat": "v", " vrea": 15, " vrei": 15, " vua ": "a", " vui ": "a", " vya": 4, " vyi": 4, " v\xE1 ": "p", " v\xE2ng": "a", " v\xE4n": 10, " v\xE6g": "z", " v\xE9 ": "a", " v\xE9ri": "l", " v\xEC": "a", " v\xEDm": "u", " v\xF4 ": "a", " v\u0101": "1d", " v\u012Br": "1d", " v\u0161e ": "u", " wa'": "1q", " wait": "m", " wans": 3, " wasn": "m", " waya": 3, " waye": 3, " wea": "m", " weit": "n", " wej ": "1q", " whe": "m", " wij ": "r", " wir ": "n", " with": "m", " wiw": 4, " wo ": "n", " woll": "n", " woor": "r", " work": "m", " wp": "1a", " ws": "1a", " wys": "1a", " wz": "1a", " w\xFC": "n", " xa ": "a", " xe ": "a", " xem ": "a", " xin ": "a", " xinh": "a", " xoay": "a", " xon": "a", " xung": "a", " x\xE1": "a", " x\xE9t ": "a", " x\xF3m ": "a", " y'i": 4, " yal ": 3, " yapa": "1f", " yari": 4, " ya\u015F": "1f", " yeb": 3, " yedd": 3, " yef": 3, " yek": 3, " yess": 3, " yez": 3, " yf": 13, " yh": 11, " yif": 3, " yise": 3, " yks": 11, " ymm": 11, " yna": "1n", " yok ": "1f", " yp": "1b", " yra": "1b", " yri": 11, " yst": 11, " yufa": 3, " yz": "1n", " y\xFC": "1f", " zabu": "y", " zag ": "r", " zais": "v", " zal ": "r", " zase": "u", " zatl": "1n", " zaw": "1a", " zeg ": "r", " zegt": "r", " zei ": "r", " zeit": "n", " zeke": "r", " zelf": "r", " zemr": 3, " zept": "u", " zi ": 15, " zich": "r", " ziek": "r", " zien": "r", " zif ": "1p", " zij": "r", " zik ": 3, " zile": 15, " zin ": "r", " zinu": "1d", " zit ": "r", " ziu": 15, " zk": "u", " zmie": "1a", " zoba": "1a", " zobu": "y", " zoe": "r", " zoru": "1f", " zou ": "r", " zp": "u", " zt": "u", " zu ": "n", " zum ": "n", " zvie": "y", " zza": 3, " z\xE2": 15, " z\xE4": "n", " z\xEDt": "u", " \xBD": "n", " \xE1hu": 13, " \xE1i": "s", " \xE1k": 13, " \xE1ll": 14, " \xE1no": "y", " \xE1o": "a", " \xE4bi": "1p", " \xE4d": "1p", " \xE4gi": "1p", " \xE4hli": "1n", " \xE4i": 11, " \xE4ka": "1p", " \xE4lo": "1p", " \xE4ls": 10, " \xE4l\xE4": 11, " \xE4l\xF6": "1p", " \xE4n ": 10, " \xE4ne": "1p", " \xE4no": "1p", " \xE4pp": 10, " \xE4r ": 10, " \xE4sa": "1p", " \xE4ta": 10, " \xE4te": 10, " \xE4u": "n", " \xE4vi": "1p", " \xE4\xE4": 11, " \xE5b": "z", " \xE5k": 10, " \xE5p": 12, " \xE5s": 10, " \xE5t ": 10, " \xE6g ": "z", " \xE6gt": "z", " \xE6l": "z", " \xE6n": "z", " \xE6tt": 13, " \xE7a ": "l", " \xE7o": "1f", " \xE7y": "1n", " \xE8 ": "q", " \xE9a": "s", " \xE9co": "l", " \xE9i": "s", " \xE9m": "l", " \xE9q": "l", " \xE9rde": 14, " \xE9rt": 14, " \xE9t ": "z", " \xE9ta": "l", " \xE9tu": "l", " \xE9t\xE9": "l", " \xE9x": "o", " \xE9\xE9": "r", " \xEDch ": "a", " \xEDg": 14, " \xEDr": 14, " \xEDt ": "a", " \xEEm": 15, " \xEEn": 15, " \xF1": "o", " \xF5": "1c", " \xF6e": "1c", " \xF6go": 10, " \xF6ll": 13, " \xF6nc": "1f", " \xF6nsk": 10, " \xF6pp": 10, " \xF6r\xE4": "1n", " \xF6ss": 14, " \xF6ver": 10, " \xF6w": "1n", " \xF6zi": "1n", " \xF6z\xFCm": "1n", " \xF6\xF6": "1c", " \xF8re": "z", " \xFAc ": "a", " \xFAg": 14, " \xFAj": 14, " \xFAk": "u", " \xFAs\xE1": "s", " \xFCh": "1c", " \xFCks": "1c", " \xFCle": "1c", " \xFCri": "1c", " \xFCtl": "1c", " \xFD ": "a", " \xFDa": "1n", " \u0101tr": "1d", " \u0103n": "a", " \u0105": "1b", " \u010Daka": "y", " \u010Dia ": "1b", " \u010Dit": "v", " \u010Dov": "v", " \u010Dt": "u", " \u010D\xEDt": "y", " \u010Fa": "y", " \u0111an": "a", " \u0111e": "a", " \u0111i": "a", " \u0111u": "a", " \u0113m": "t", " \u011F": "1k", " \u0131": "1f", " \u0142": "1a", " \u0148": "y", " \u0153": "l", " \u015Far": "1f", " \u015Fi ": 15, " \u015Fim": "1f", " \u015Fon": "1n", " \u0161eit": "1d", " \u0161el": "u", " \u0161it": "1b", " \u0161o ": "1d", " \u0161pat": "u", " \u0161ta ": "v", " \u0161to": "v", " \u0161tu": "y", " \u0165": "y", " \u016Bde": "1d", " \u016D": "1o", " \u017Eeli": "v", " \u017Eem": "1b", " \u017Ein": "1b", " \u017Eo": "1b", " \u017E\xED": "u", " \u0430\u0430\u0432 ": "1m", " \u0430\u0432\u0441\u0430": "1m", " \u0430\u0432\u0447 ": "1m", " \u0430\u0432\u044B": "1k", " \u0430\u0434\u0437": 17, " \u0430\u0434\u0438\u043B": "1m", " \u0430\u0434\u043A": 17, " \u0430\u0434\u043D": 17, " \u0430\u0436\u0438": "1m", " \u0430\u0437\u0430\u043C": "1l", " \u0430\u0439\u043D": "1l", " \u0430\u0439\u0442": "1l", " \u0430\u043B\u0430 ": "1k", " \u0430\u043B\u044C ": "1m", " \u0430\u043C\u044C": "1m", " \u0430\u043D\u044B ": "1k", " \u0430\u043D\u044B\u04A3": "1k", " \u0430\u0441\u0443": "1m", " \u0430\u0441\u044B\u0440": "1l", " \u0430\u0442\u0440\u044B": 17, " \u0430\u0443\u0434\u0430": "1l", " \u0430\u0447\u044B": "1k", " \u0430\u0448\u0430": "1k", " \u0430\u0458": "x", " \u0430\u04A3\u0430": "1k", " \u0431\u0430\u0433\u0448": "1m", " \u0431\u0430\u0439\u043D": "1m", " \u0431\u0430\u0439\u0441": "1m", " \u0431\u0430\u0439\u0448": "1m", " \u0431\u0430\u0442\u044C": 19, " \u0431\u0430\u0447\u0438": 19, " \u0431\u0430\u044F\u043D": "1m", " \u0431\u0435\u0432": "x", " \u0431\u0435\u0440 ": "1k", " \u0431\u0435\u0440\u0430": "1k", " \u0431\u0435\u0440\u043A": "1k", " \u0431\u0435\u0440\u0441": "1k", " \u0431\u0438\u0434\u0435": "x", " \u0431\u0438\u043A ": "1k", " \u0431\u0438\u0442 ": "1k", " \u0431\u0438\u0447": "1m", " \u0431\u043E\u0434\u043E": "1m", " \u0431\u043E\u043B ": "1m", " \u0431\u043E\u043B\u0443": "1l", " \u0431\u0443 ": "1k", " \u0431\u0443\u0432": 19, " \u0431\u0443\u0435": "1k", " \u0431\u0443\u0446": "1m", " \u0431\u044A": 16, " \u0431\u044B\u0442": 18, " \u0431\u044D ": "1m", " \u0431\u0456\u043B\u044C": 19, " \u0431\u0456\u0440": "1l", " \u0431\u04AF\u0440 ": "1m", " \u0432\u0434\u043E\u043C": 19, " \u0432\u0435 ": "x", " \u0432\u0436": 19, " \u0432\u0438\u0433": 19, " \u0432\u0438\u043A\u043B": 19, " \u0432\u0438\u0448\u0435": "v", " \u0432\u043E\u043D\u0430": 19, " \u0432\u043E\u043D\u0438": 19, " \u0432\u043E\u043F": 18, " \u0432\u043E\u0442": 18, " \u0432\u0441\u0435\u043C": 18, " \u0432\u0441\u0435\u0445": 18, " \u0432\u0441\u0442\u0440": 18, " \u0432\u0443\u0447": 17, " \u0432\u0447\u0438": 19, " \u0432\u0447\u043E": 19, " \u0432\u044D": "1m", " \u0432\u0456\u0434 ": 19, " \u0432\u0456\u0440": 19, " \u0433\u0430 ": "v", " \u0433\u0430\u043D\u0446": "1m", " \u0433\u0435\u043B ": "1k", " \u0433\u043B\u0430\u0437": 18, " \u0433\u043E\u043B\u044F": 16, " \u0433\u044A": 16, " \u0433\u044B": "1k", " \u0434\u0430\u0430": "1m", " \u0434\u0430\u043F": 17, " \u0434\u0435\u0447\u043A": "x", " \u0434\u0437\u044F": 17, " \u0434\u0437\u0456": 17, " \u0434\u0438\u0432\u0438": 19, " \u0434\u0438\u0442\u0438": 19, " \u0434\u043D\u0435\u0441": 16, " \u0434\u043E\u043A ": "v", " \u0434\u043E\u0440\u0438": 16, " \u0434\u0443\u0433\u043E": "v", " \u0434\u0443\u0441": "1k", " \u0434\u044A": 16, " \u0434\u04AF\u043D\u0438": "1l", " \u0434\u04E9\u0440\u0435": "1k", " \u0435\u0432\u0435": "x", " \u0435\u0433\u043E ": 18, " \u0435\u0434\u0435\u043D": "x", " \u0435\u0434\u0456": "1l", " \u0435\u0437\u0438": 16, " \u0435\u043A\u0435": "1l", " \u0435\u043A\u0456": "1l", " \u0435\u043C\u0435": "1l", " \u0435\u043C\u0443": 18, " \u0435\u0440\u0442\u0435": "1l", " \u0435\u0441\u043B": 18, " \u0435\u0441\u0442\u044C": 18, " \u0435\u0441\u0456": "1l", " \u0435\u0449": 18, " \u0435\u0458": "x", " \u0435\u04A3": "1l", " \u0436\u0430\u0437": "1l", " \u0436\u0430\u0441\u0430": "1l", " \u0436\u0430\u0441\u0442": "1l", " \u0436\u0430\u0442\u044B": "1l", " \u0436\u0434": 18, " \u0436\u0435\u043A": "1l", " \u0436\u0435\u043B\u0438": "v", " \u0436\u0435\u0440\u0434": "1l", " \u0436\u0435\u0442": "1l", " \u0436\u0438\u043D\u0430": "1l", " \u0436\u044B\u043B ": "1l", " \u0437\u0430\u0435\u0442": 16, " \u0437\u0430\u0439\u043D": 19, " \u0437\u0430\u0440 ": "v", " \u0437\u0432\u0438": 19, " \u0437\u0432\u0456": 19, " \u0437\u0434\u0430\u0440": 17, " \u0437\u0434\u0435\u0441": 18, " \u0437\u043C\u0456": 19, " \u0437\u043D\u0430 ": "v", " \u0437\u043D\u043E\u0432": 19, " \u0437\u0440\u0430\u0431": 17, " \u0437\u0443\u043F\u0438": 19, " \u0437\u0443\u0440 ": "1k", " \u0437\u0443\u0441\u0442": 19, " \u0437\u0443\u0441\u0456": 17, " \u0437\u044A": 16, " \u0437\u044F\u043B": 17, " \u0437\u0456 ": 19, " \u0437\u04AF": "1m", " \u0438\u0434\u0432": 16, " \u0438\u0437\u0430": "v", " \u0438\u0437\u043A": 16, " \u0438\u0437\u0447": 16, " \u0438\u043A\u0435 ": "1k", " \u0438\u043B\u04AF": "1m", " \u0438\u0440\u0435": "1k", " \u0438\u0440\u0441": "1m", " \u0438\u0440\u0442": "1k", " \u0438\u0441\u0435\u043C": "1k", " \u0438\u0442\u0435\u043B": "1k", " \u0438\u0448\u0435": "1k", " \u0439\u0434": 19, " \u0439\u043E\u043A\u043B": "1k", " \u0439\u0442": 19, " \u043A ": 18, " \u043A\u0430\u0437\u0432": 16, " \u043A\u0430\u0439\u0434": "1k", " \u043A\u0430\u0439\u0442": "1k", " \u043A\u0430\u043E": "v", " \u043A\u0430\u0445": 17, " \u043A\u0430\u0458 ": "x", " \u043A\u0435\u0431": "1k", " \u043A\u0435\u043B\u0435": "1l", " \u043A\u0438\u0442\u0435": "1k", " \u043A\u0438\u0442\u0442": "1k", " \u043A\u043D\u0456": 17, " \u043A\u043E\u0439\u0442": 16, " \u043A\u043E\u0445": 19, " \u043A\u043E\u044F ": 16, " \u043A\u043E\u044F\u0442": 16, " \u043A\u043E\u044F\u0448": "1k", " \u043A\u043E\u0458 ": "x", " \u043A\u0440\u0430\u0449": 19, " \u043A\u0442": 18, " \u043A\u0443\u0434\u0430": 18, " \u043A\u044A": 16, " \u043A\u0456\u043B": 19, " \u043A\u04AF\u0440\u0441": "1k", " \u043A\u04E9\u043D\u043D": "1k", " \u043B\u0438\u043F\u0441": 16, " \u043B\u0443\u0442": "x", " \u043B\u0443\u0447": 18, " \u043B\u044E\u0431\u0456": 17, " \u043B\u0456\u043A\u0430": 19, " \u043C\u0430 ": "1l", " \u043C\u0430\u0431\u0443": 19, " \u043C\u0430\u0432 ": 19, " \u043C\u0430\u0433\u0443": 17, " \u043C\u0430\u0436": "x", " \u043C\u0430\u0440\u044B": 17, " \u043C\u0430\u0448 ": "1m", " \u043C\u0430\u0448\u044B": 17, " \u043C\u0435\u043D\u044F": 18, " \u043C\u0438\u043D ": "1k", " \u043C\u043E\u0436\u0434": "v", " \u043C\u043E\u043B\u0430": "x", " \u043C\u043E\u043D\u044B": "1k", " \u043C\u044A": 16, " \u043C\u044D\u0440\u044B": 17, " \u043C\u044F\u043D": 17, " \u043C\u0456\u0441": 19, " \u043C\u04AF": "1l", " \u043D\u0430\u0434\u044F": 16, " \u043D\u0435\u0439 ": 18, " \u043D\u0435\u0439\u043D": 16, " \u043D\u0435\u043C\u043D": 18, " \u043D\u0435\u0442 ": 18, " \u043D\u0435\u044F ": 16, " \u043D\u0438\u0432": "x", " \u043D\u0438\u0441\u0430": "v", " \u043D\u0438\u0441\u0438": "v", " \u043D\u0438\u0458": "v", " \u043D\u043E\u043C ": "1m", " \u043D\u043E\u0445": "1m", " \u043D\u043E\u0449": 16, " \u043D\u0440": 18, " \u043D\u044C ": "1m", " \u043D\u044C\u043E": 19, " \u043D\u044D\u0440": "1m", " \u043D\u044F\u043A": 16, " \u043E\u0431\u044F\u0441": 16, " \u043E\u0431\u0456": 19, " \u043E\u0432\u0438\u0435": "x", " \u043E\u0432\u043E ": "v", " \u043E\u0434\u0430\u043C": "x", " \u043E\u0434\u0438 ": "x", " \u043E\u0434\u0438\u043C": "x", " \u043E\u0434\u0438\u0448": "x", " \u043E\u0434\u0440\u0443": 19, " \u043E\u0437\u0430\u043A": "1k", " \u043E\u043B ": "1l", " \u043E\u043B\u0430\u0440": "1l", " \u043E\u043B\u043E\u043D": "1m", " \u043E\u043D\u044B ": "1l", " \u043E\u043D\u044B\u0442": "1k", " \u043E\u043D\u044B\u04A3": "1l", " \u043E\u043F\u0438\u0442": 16, " \u043E\u0440\u043D": "1l", " \u043E\u0440\u043E\u0439": "1m", " \u043E\u0440\u0442\u0430": "1l", " \u043E\u0440\u044B\u043D": "1l", " \u043E\u0441\u044B ": "1l", " \u043E\u0442\u0432\u0435": 18, " \u043E\u0442\u0435\u0446": 18, " \u043E\u0442\u0438\u0432": 16, " \u043E\u0442\u044B\u0440": "1l", " \u043E\u0447\u0430\u043A": 16, " \u043E\u0447\u0435\u043D": 18, " \u043E\u0447\u0440\u0430": "1k", " \u043E\u0448\u0438": 18, " \u043E\u0449\u0435": 16, " \u043E\u04A3": "1l", " \u043F\u0430\u0432\u0456": 17, " \u043F\u0430\u0439\u0448": 17, " \u043F\u0430\u043A\u043E": 17, " \u043F\u0430\u043C\u044B": 17, " \u043F\u0430\u0442 ": "x", " \u043F\u0430\u0447\u0443": 17, " \u043F\u0435\u0432\u0430": "v", " \u043F\u0435\u043D ": "1l", " \u043F\u0438\u044F": 16, " \u043F\u043E\u0439\u0442": 18, " \u043F\u043E\u043B\u0456": 19, " \u043F\u0440\u0430 ": 17, " \u043F\u0440\u0430\u0448": "x", " \u043F\u0440\u0435 ": "v", " \u043F\u0440\u044B\u0432": 17, " \u043F\u0440\u044B\u043D": 17, " \u043F\u0443\u0448\u0442": "x", " \u043F\u044C": 18, " \u0440\u0430\u0431\u0456": 17, " \u0440\u0430\u0437\u043A": 16, " \u0440\u0430\u043D\u044C": 18, " \u0440\u043E\u043A\u043B": 16, " \u0440\u0456": 19, " \u0441\u0430\u0431\u0435": 17, " \u0441\u0430\u0435\u043D": "1k", " \u0441\u0430\u043A\u0430": "x", " \u0441\u0432\u0430\u0431": 17, " \u0441\u0435\u0437\u043D": "1k", " \u0441\u0435\u043A\u043E": "x", " \u0441\u0435\u043D ": "1l", " \u0441\u0435\u043D\u0456": "1l", " \u0441\u0438\u0442\u0435": "x", " \u0441\u043A\u0456": 19, " \u0441\u043B\u0438\u0448": 18, " \u0441\u043B\u044B": 18, " \u0441\u043B\u0456": 19, " \u0441\u043C\u043E ": "v", " \u0441\u043C\u043E\u0433": 18, " \u0441\u043C\u043E\u0442": 18, " \u0441\u043E\u043D\u0434": "1l", " \u0441\u043E\u043D\u0441": "1m", " \u0441\u043E\u04A3\u0433": "1k", " \u0441\u0443\u0440\u0433": "1m", " \u0441\u044C\u043E": 19, " \u0441\u0451\u043D": 17, " \u0442i": "1l", " \u0442\u0430\u0430 ": "x", " \u0442\u0430\u0431\u0435": 17, " \u0442\u0430\u0432\u044B": "1k", " \u0442\u0430\u0433\u043E": 17, " \u0442\u0430\u0437\u0438": 16, " \u0442\u0430\u0458 ": "v", " \u0442\u0435\u0436 ": 19, " \u0442\u0435\u04A3": "1l", " \u0442\u0438\u0435 ": "x", " \u0442\u0438\u0437": "1k", " \u0442\u0438\u0439": "1m", " \u0442\u0438\u043A ": "1k", " \u0442\u043E\u0435 ": 17, " \u0442\u043E\u0440\u0430": "1k", " \u0442\u043E\u0440\u044B": "1k", " \u0442\u0440\u044B": 17, " \u0442\u0443\u0433\u0430": "1k", " \u0442\u0443\u0434\u0430": 18, " \u0442\u0443\u043A ": 16, " \u0442\u0443\u0441\u043B": "1m", " \u0442\u0443\u0445\u0430": "1m", " \u0442\u044A": 16, " \u0442\u044B\u043C ": 17, " \u0442\u044D\u043B": 17, " \u0442\u044D\u0440 ": "1m", " \u0442\u044F ": 16, " \u0442\u044F\u0445": 16, " \u0443\u0432\u0435\u043A": "v", " \u0443\u0432\u0438": 18, " \u0443\u0436\u043E ": 17, " \u0443\u0437\u043D\u0430": 18, " \u0443\u043B ": "1k", " \u0443\u043D\u0448": "1m", " \u0443\u0440\u044B": "1k", " \u0443\u0442\u044B": "1k", " \u0443\u0443": "1m", " \u0443\u0447\u0430 ": 16, " \u0443\u0448\u0442": "x", " \u0444\u0438\u043A\u0435": "1k", " \u0444\u0440\u0435\u043D": 16, " \u0445\u0430\u043C\u0430": "1m", " \u0445\u0430\u043C\u0442": "1m", " \u0445\u0430\u043D\u0433": "1m", " \u0445\u0430\u0440\u0436": "1m", " \u0445\u0432\u0430\u0442": 18, " \u0445\u0435\u0437\u043C": "1k", " \u0445\u0438\u0439": "1m", " \u0445\u043E\u043D\u043E": "1m", " \u0445\u043E\u0440\u0430": 16, " \u0445\u043E\u0451\u0440": "1m", " \u0445\u0442\u0435": "v", " \u0446\u0435 ": 19, " \u0446\u0435\u0439": 19, " \u0446\u044C": 19, " \u0446\u044E ": 19, " \u0446\u044F ": 19, " \u0446\u044F\u043B": 16, " \u0447\u0430\u0433\u043E": 17, " \u0447\u0430\u0434\u0430": "1m", " \u0447\u0430\u0434\u0434": "1m", " \u0447\u0430\u043B\u0430": 17, " \u0447\u0430\u043C\u0442": "1m", " \u0447\u0435 ": 16, " \u0447\u0435\u043C ": 18, " \u0447\u0435\u0442\u0435": 16, " \u0447\u043E\u0433": 19, " \u0447\u043E\u043C": 19, " \u0447\u043E\u043D\u043E": "1m", " \u0447\u0442": 18, " \u0447\u044B\u043A": "1k", " \u0447\u044B\u043C": 17, " \u0448\u0438\u0439\u0434": "1m", " \u0448\u0442\u0430 ": "v", " \u0448\u0443\u043B": "1k", " \u0448\u0447": 17, " \u0449\u0430\u0441\u043B": 19, " \u044A": 16, " \u044B\u0448": "1k", " \u044D\u043C\u044D": "1m", " \u044D\u0442\u0430": 18, " \u044D\u0442\u0443": 18, " \u044D\u0447": "1k", " \u044D\u0448": "1k", " \u044E\u043A ": "1k", " \u044E\u043C ": "1m", " \u044F\u0432\u0430\u0445": "1m", " \u044F\u0432\u0441\u0430": "1m", " \u044F\u0434\u043E\u0441": 16, " \u044F\u0435": 17, " \u044F\u043A\u0430 ": 19, " \u044F\u043A\u0430\u044F": 17, " \u044F\u043A\u0438\u0439": 19, " \u044F\u043D\u044B ": 17, " \u044F\u0440\u0430": "1k", " \u044F\u0440\u0438": "1m", " \u044F\u0448\u0438": "1k", " \u0451\u0439": 17, " \u0451\u043D": 17, " \u0451\u0441\u0442": "1m", " \u0456\u0437 ": 19, " \u0456\u0441\u0442\u0435": "1l", " \u0456\u0445": 17, " \u0456\u0448\u0456": "1l", " \u0458\u0430\u0434": "x", " \u0458\u0435 ": "v", " \u0459\u0443\u0434": "v", " \u045A\u0435": "v", " \u045A\u0438": "v", " \u04AF\u0435\u0434 ": "1m", " \u04AF\u0437\u0435": "1k", " \u04AF\u0437\u044D": "1m", " \u04AF\u0439": "1l", " \u04AF\u0442": "1k", " \u04AF\u0448": "1l", " \u04D9\u0440 ": "1l", " \u04E9\u0433": "1m", " \u04E9\u0437 ": "1l", " \u04E9\u0437\u0433\u0435": "1l", " \u04E9\u0439": "1k", " \u04E9\u043A": "1l", " \u04E9\u043D\u0433": "1m", " \u04E9\u0442": "1l", " \u05D0\u05D5 ": "1g", " \u05D0\u05D5\u05D9\u05DA": "1h", " \u05D0\u05D5\u05DF": "1h", " \u05D0\u05D5\u05E0\u05D3": "1h", " \u05D0\u05D9\u05DD": "1h", " \u05D0\u05D9\u05E4": "1g", " \u05D0\u05D9\u05E8 ": "1h", " \u05D0\u05D9\u05E9": "1g", " \u05D0\u05DC ": "1g", " \u05D0\u05DD": "1g", " \u05D0\u05E4\u05D9\u05DC": "1g", " \u05D0\u05E8\u05D5\u05D7": "1g", " \u05D1\u05D0\u05D5": "1g", " \u05D1\u05D5\u05DA ": "1h", " \u05D1\u05D8\u05D5": "1g", " \u05D1\u05D9\u05D5\u05DD": "1g", " \u05D1\u05D9\u05EA ": "1g", " \u05D1\u05DB\u05DC": "1g", " \u05D1\u05E1": "1g", " \u05D1\u05E2\u05E1\u05E2": "1h", " \u05D1\u05E7": "1g", " \u05D1\u05E9\u05D1\u05D9": "1g", " \u05D1\u05EA": "1g", " \u05D2\u05D9\u05D9 ": "1h", " \u05D2\u05D9\u05D9\u05DF": "1h", " \u05D2\u05DC\u05D9\u05D9": "1h", " \u05D2\u05E2\u05D2": "1h", " \u05D2\u05E2\u05D3\u05D0": "1h", " \u05D2\u05E2\u05D4": "1h", " \u05D2\u05E2\u05D5": "1h", " \u05D2\u05E2\u05DE": "1h", " \u05D2\u05E2\u05E0": "1h", " \u05D2\u05E2\u05E7": "1h", " \u05D2\u05E2\u05E9": "1h", " \u05D2\u05E8\u05D5\u05D9": "1h", " \u05D3\u05D5\u05E8\u05DB": "1h", " \u05D3\u05D9\u05DA ": "1h", " \u05D3\u05D9\u05E8 ": "1h", " \u05D4\u05D0\u05D5": "1g", " \u05D4\u05D0\u05D8 ": "1h", " \u05D4\u05D1": "1g", " \u05D4\u05D3": "1g", " \u05D4\u05D5\u05D9\u05D6": "1h", " \u05D4\u05D5\u05DC": "1g", " \u05D4\u05D9\u05D8\u05D1": "1g", " \u05D4\u05D9\u05D9\u05E1": "1h", " \u05D4\u05D9\u05DC\u05D3": "1g", " \u05D4\u05D9\u05E0\u05D8": "1h", " \u05D4\u05DE": "1g", " \u05D4\u05E2\u05D1\u05D5": "1g", " \u05D4\u05E2\u05DC\u05E4": "1h", " \u05D4\u05E2\u05E8 ": "1h", " \u05D4\u05E8\u05D0\u05E9": "1g", " \u05D4\u05E8\u05D1": "1g", " \u05D5\u05D5\u05D0\u05E1": "1h", " \u05D5\u05D5\u05D9 ": "1h", " \u05D5\u05D5\u05D9\u05DB": "1h", " \u05D5\u05D5\u05E2": "1h", " \u05D6\u05D5\u05DF ": "1h", " \u05D6\u05D9 ": "1h", " \u05D6\u05D9\u05DB\u05E2": "1h", " \u05D6\u05D9\u05E1 ": "1h", " \u05D6\u05E2\u05D8 ": "1h", " \u05D6\u05E2\u05E0": "1h", " \u05D6\u05E7\u05D5\u05E7": "1g", " \u05D7\u05D1\u05E8": "1g", " \u05D7\u05D9\u05D9": "1g", " \u05D8\u05D0\u05DD ": "1h", " \u05D8\u05D5\u05D1": "1g", " \u05D8\u05D5\u05D8 ": "1h", " \u05D8\u05D5\u05DD": "1g", " \u05D8\u05E8\u05D9\u05E0": "1h", " \u05D9\u05D3": "1g", " \u05D9\u05D5\u05DD": "1g", " \u05D9\u05D5\u05EA": "1g", " \u05D9\u05DB": "1g", " \u05D9\u05E2\u05D3\u05E2": "1h", " \u05D9\u05E2\u05E0\u05E2": "1h", " \u05D9\u05E9 ": "1g", " \u05DB\u05D0\u05DF": "1g", " \u05DB\u05D5": "1g", " \u05DB\u05DC": "1g", " \u05DB\u05DE": "1g", " \u05DB\u05E9": "1g", " \u05DC\u05D0 ": "1g", " \u05DC\u05D0\u05DB\u05D5": "1g", " \u05DC\u05D1\u05D9\u05EA": "1g", " \u05DC\u05D3": "1g", " \u05DC\u05D4": "1g", " \u05DC\u05D5 ": "1g", " \u05DC\u05D5\u05DE\u05D3": "1g", " \u05DC\u05D7": "1g", " \u05DC\u05D9\u05D1 ": "1h", " \u05DC\u05D9\u05D9\u05E2": "1h", " \u05DC\u05DA": "1g", " \u05DC\u05DB": "1g", " \u05DC\u05DC": "1g", " \u05DC\u05DE": "1g", " \u05DC\u05E0": "1g", " \u05DC\u05E2\u05D1\u05D5": "1g", " \u05DC\u05E2\u05D5\u05DC": "1g", " \u05DC\u05E2\u05E9": "1g", " \u05DC\u05E4": "1g", " \u05DC\u05E7": "1g", " \u05DC\u05E8": "1g", " \u05DC\u05E9\u05DD ": "1g", " \u05DE\u05D0\u05D3": "1g", " \u05DE\u05D0\u05DE\u05D9": "1g", " \u05DE\u05D0\u05E9\u05E8": "1g", " \u05DE\u05D3\u05D5\u05E2": "1g", " \u05DE\u05D4": "1g", " \u05DE\u05D5\u05DB": "1g", " \u05DE\u05D5\u05E7\u05D3": "1g", " \u05DE\u05D9 ": "1g", " \u05DE\u05D9\u05D8 ": "1h", " \u05DE\u05D9\u05D9\u05DF": "1h", " \u05DE\u05D9\u05D9\u05E0": "1h", " \u05DE\u05D9\u05DA": "1h", " \u05DE\u05D9\u05DD ": "1g", " \u05DE\u05D9\u05E8 ": "1h", " \u05DE\u05DB\u05D9\u05E8": "1g", " \u05DE\u05DE\u05E0\u05D9": "1g", " \u05DE\u05E1\u05D5\u05D2": "1g", " \u05DE\u05E1\u05D5\u05DB": "1g", " \u05DE\u05E1\u05E4": "1g", " \u05DE\u05E2\u05D5": "1g", " \u05DE\u05E2\u05DF ": "1h", " \u05DE\u05E7": "1g", " \u05DE\u05E8": "1g", " \u05DE\u05E9\u05D4": "1g", " \u05E0\u05D9\u05D8": "1h", " \u05E0\u05DE\u05E6\u05D0": "1g", " \u05E0\u05E8": "1g", " \u05E2\u05D1\u05D5": "1g", " \u05E2\u05D3": "1g", " \u05E2\u05D5\u05D1\u05D3": "1g", " \u05E2\u05D5\u05D3": "1g", " \u05E2\u05D5\u05DE\u05D3": "1g", " \u05E2\u05D5\u05E9": "1g", " \u05E2\u05DB\u05E9": "1g", " \u05E2\u05DC ": "1g", " \u05E2\u05DD": "1g", " \u05E2\u05E0\u05D2\u05DC": "1h", " \u05E2\u05E1 ": "1h", " \u05E2\u05E1\u05D5\u05E7": "1g", " \u05E2\u05E9": "1g", " \u05E4\u05BC": "1h", " \u05E4\u05E2": "1g", " \u05E6\u05D5\u05D5\u05D9": "1h", " \u05E6\u05D9 ": "1h", " \u05E6\u05E8\u05D9": "1g", " \u05E7\u05D5\u05DE\u05D8": "1h", " \u05E7\u05D5\u05E8\u05D0": "1g", " \u05E7\u05D9\u05D9\u05E0": "1h", " \u05E7\u05DC\u05D9\u05D9": "1h", " \u05E7\u05E2\u05E0": "1h", " \u05E7\u05E2\u05E5": "1h", " \u05E7\u05E8\u05D5\u05D1": "1g", " \u05E8\u05E2\u05D3 ": "1h", " \u05E8\u05E7": "1g", " \u05E9\u05D4": "1g", " \u05E9\u05D5\u05D9": "1h", " \u05E9\u05D5\u05E0\u05D0": "1g", " \u05E9\u05D9\u05D9\u05DF": "1h", " \u05E9\u05D9\u05E2\u05D5": "1g", " \u05E9\u05D9\u05E9 ": "1g", " \u05E9\u05DC ": "1g", " \u05E9\u05DC\u05D4": "1g", " \u05E9\u05DC\u05DB\u05DD": "1g", " \u05E9\u05DC\u05E2\u05DB": "1h", " \u05E9\u05DD ": "1g", " \u05E9\u05E0\u05D9\u05DD": "1g", " \u05EA\u05D5": "1g", " \u05EA\u05DE": "1g", " \u0622 ": "h", " \u0622\u0626\u06CC": "h", " \u0622\u0628": "1j", " \u0623\u062A": "1i", " \u0623\u0633": "1i", " \u0623\u0638\u0646 ": "1i", " \u0623\u0644": "1i", " \u0623\u0645": "1i", " \u0627\u0628 ": "h", " \u0627\u0628\u0648": "h", " \u0627\u062A\u0627\u0642": "1j", " \u0627\u062A\u0635\u0644": "1i", " \u0627\u062A\u0641\u0627": "1j", " \u0627\u062A\u0646": "h", " \u0627\u062D\u0633\u0627": "1j", " \u0627\u0632 ": "1j", " \u0627\u0633 ": "h", " \u0627\u0633\u062A\u0641": "1j", " \u0627\u0633\u06CC": "h", " \u0627\u0634 ": "1j", " \u0627\u0634\u062A\u0628": "1j", " \u0627\u063A\u0644\u0628": "1j", " \u0627\u0641\u062A\u0627": "1j", " \u0627\u0644\u0622\u062E": "1i", " \u0627\u0644\u0627\u0633": "1i", " \u0627\u0644\u0628\u0627": "1i", " \u0627\u0644\u0628\u062D": "1i", " \u0627\u0644\u0628\u0631": "1i", " \u0627\u0644\u0628\u0644": "1i", " \u0627\u0644\u062A": "1i", " \u0627\u0644\u062B": "1i", " \u0627\u0644\u062F": "1i", " \u0627\u0644\u0632": "1i", " \u0627\u0644\u0633": "1i", " \u0627\u0644\u0634": "1i", " \u0627\u0644\u0635": "1i", " \u0627\u0644\u0636": "1i", " \u0627\u0644\u0639\u062F": "1i", " \u0627\u0644\u0639\u0634": "1i", " \u0627\u0644\u0639\u0644": "1i", " \u0627\u0644\u063A": "1i", " \u0627\u0644\u0641\u062A": "1i", " \u0627\u0644\u0641\u0646": "1i", " \u0627\u0644\u0645\u062C": "1i", " \u0627\u0644\u0645\u062E": "1i", " \u0627\u0644\u0645\u0632": "1i", " \u0627\u0644\u0645\u0635": "1i", " \u0627\u0644\u0645\u0639": "1i", " \u0627\u0644\u0645\u0641": "1i", " \u0627\u0644\u0645\u0642": "1i", " \u0627\u0644\u0645\u0645": "1i", " \u0627\u0644\u0646": "1i", " \u0627\u0644\u0648": "1i", " \u0627\u0645 ": "1j", " \u0627\u0645\u0627": "1j", " \u0627\u0645\u06CC\u062F": "1j", " \u0627\u0646\u0627 ": "1i", " \u0627\u0646\u062F\u0627": "1j", " \u0627\u0646\u06AF\u0631": "h", " \u0627\u0646\u06AF\u0644": "1j", " \u0627\u0648\u0631 ": "h", " \u0627\u067E": "h", " \u0627\u0686": "h", " \u0627\u06A9\u06CC": "h", " \u0627\u06CC\u06A9": "h", " \u0628\u0627 ": "1j", " \u0628\u0627\u062A ": "h", " \u0628\u0627\u0631 ": "1j", " \u0628\u0627\u0631\u0627": "1j", " \u0628\u0627\u0631\u0634": "h", " \u0628\u0627\u0634": "1j", " \u0628\u0627\u0644\u062A": "1i", " \u0628\u0627\u0644\u0633": "1i", " \u0628\u0627\u0644\u0645": "1i", " \u0628\u0627\u0644\u0646": "1i", " \u0628\u0627\u0648\u0631": "1j", " \u0628\u062D\u0627": "1i", " \u0628\u062E\u0648": "1j", " \u0628\u0631 ": "1j", " \u0628\u0631\u0627\u062F": "1j", " \u0628\u0631\u0648\u0645": "1j", " \u0628\u0633\u0628\u0628": "1i", " \u0628\u0633\u0631\u0639": "1i", " \u0628\u0644\u0646\u062F": "1j", " \u0628\u0646\u0641\u0633": "1i", " \u0628\u0647\u0627 ": "1i", " \u0628\u064A\u0646": "1i", " \u062A\u0627 ": "1j", " \u062A\u0627\u0646 ": "1j", " \u062A\u062A": "1i", " \u062A\u062D\u0628": "1i", " \u062A\u062D\u062A\u0627": "1i", " \u062A\u062D\u0641": "h", " \u062A\u0633\u062A": "1i", " \u062A\u0642\u0648\u0644": "1i", " \u062A\u0644\u0627\u0634": "1j", " \u062A\u0646\u0627\u0648": "1i", " \u062A\u0646\u0647\u0627": "1j", " \u062A\u06A9 ": "h", " \u062A\u06CC\u0646": "h", " \u062C\u0627\u062A": "h", " \u062C\u0627\u0646\u0627": "h", " \u062C\u0628 ": "h", " \u062C\u062F\u0627\u064B": "1i", " \u062C\u0631\u0645": "h", " \u062C\u0645\u0627\u0644": "1i", " \u062C\u0647\u0627\u0646": "1j", " \u062C\u0648 ": "h", " \u062C\u0648\u0627\u0646": "1j", " \u062D\u0631\u0641": "1j", " \u062D\u0642\u0627 ": "1i", " \u062D\u0648\u0644 ": "1i", " \u062E\u0627\u0626\u0641": "1i", " \u062E\u0627\u0637\u0631": "1j", " \u062E\u062A": "h", " \u062E\u0648\u0627": "1j", " \u062E\u0648\u062F\u0634": "1j", " \u062E\u0648\u0631": "1j", " \u062F\u0627\u062F": "1j", " \u062F\u0627\u0646 ": "1i", " \u062F\u0627\u0646\u0634": "1j", " \u062F\u062E\u062A\u0631": "1j", " \u062F\u0631 ": "1j", " \u062F\u0631\u062E\u062A": "1j", " \u062F\u0631\u0648\u063A": "1j", " \u062F\u0631\u06CC\u0627": "1j", " \u062F\u0633 ": "h", " \u062F\u0633\u062A": "1j", " \u062F\u0646 ": "h", " \u062F\u0646\u0628\u0627": "1j", " \u062F\u06CC ": "h", " \u062F\u06CC\u0627": "h", " \u0631\u0623\u0649 ": "1i", " \u0631\u0627 ": "1j", " \u0631\u0627\u0626\u0639": "1i", " \u0631\u0627\u062A ": "h", " \u0631\u0627\u0647": "1j", " \u0631\u0633\u0627\u0644": "1i", " \u0631\u0641\u062A": "1j", " \u0631\u0645\u0636\u0627": "1i", " \u0631\u064A": "1i", " \u0632\u0645\u0627": "1j", " \u0632\u0645\u06CC\u0646": "1j", " \u0632\u0648\u062C\u062A": "1i", " \u0632\u064A": "1i", " \u0632\u06CC\u0628": "1j", " \u0633\u0627\u062E\u062A": "1j", " \u0633\u0628 ": "h", " \u0633\u0631 ": "1j", " \u0633\u0645\u0639": "1i", " \u0633\u0648\u0641 ": "1i", " \u0633\u064A": "1i", " \u0633\u06CC\u06A9": "h", " \u0634\u062F ": "1j", " \u0634\u062F\u0645 ": "1j", " \u0634\u062F\u0646": "1j", " \u0634\u06A9\u0633\u062A": "1j", " \u0634\u06CC": "1j", " \u0637\u0648\u0627\u0644": "1i", " \u0639\u0627\u062F ": "1i", " \u0639\u0627\u0634\u0642": "1j", " \u0639\u0634\u0642 ": "1j", " \u0639\u0648\u0631": "h", " \u063A\u062F\u0627\u064B": "1i", " \u063A\u0631\u0641": "1i", " \u063A\u06CC\u0631 ": "1j", " \u0641\u0631\u0627\u0645": "1j", " \u0641\u0631\u062F\u0627": "1j", " \u0642\u0627\u0644": "1i", " \u0642\u0627\u0645": "1i", " \u0642\u0647\u0648\u0647": "1j", " \u0643\u0627": "1i", " \u0644\u0626": "h", " \u0644\u0627 ": "1i", " \u0644\u062F": "1i", " \u0644\u0633": "1i", " \u0644\u0642": "1i", " \u0644\u0644": "1i", " \u0644\u0645 ": "1i", " \u0644\u0645\u0627": "1i", " \u0644\u0645\u0628": "h", " \u0644\u0646 ": "1i", " \u0644\u0647 ": "1i", " \u0644\u0647\u0627 ": "1i", " \u0644\u064A": "1i", " \u0644\u06AF": "h", " \u0644\u06CC\u0627": "h", " \u0644\u06CC\u06A9": "h", " \u0645\u0627\u0631\u06CC": "1j", " \u0645\u0627\u0646": "1j", " \u0645\u0627\u0647 ": "1j", " \u0645\u062A ": "h", " \u0645\u062F\u062F": "h", " \u0645\u0631\u0627 ": "1j", " \u0645\u0631\u062F": "1j", " \u0645\u0639 ": "1i", " \u0645\u0639\u0647 ": "1i", " \u0645\u0644\u06A9": "h", " \u0645\u0646\u062A\u0638": "1j", " \u0645\u0646\u0630 ": "1i", " \u0645\u0646\u064A ": "1i", " \u0645\u0648\u0631\u062F": "1j", " \u0645\u0648\u0641\u0642": "1j", " \u0645\u06CC ": "1j", " \u0645\u06CC\u0631\u06CC": "h", " \u0646\u062D\u0646": "1i", " \u0646\u062E\u0648": "1j", " \u0646\u062F\u0627": "1j", " \u0646\u0632\u062F\u06CC": "1j", " \u0646\u0634\u0627\u0646": "1j", " \u0646\u0647 ": "1j", " \u0646\u06AF": "1j", " \u0646\u06CC\u0627": "1j", " \u0647\u0631 ": "1j", " \u0647\u0644 ": "1i", " \u0647\u0645\u0627\u0646": "1j", " \u0647\u0645\u0647": "1j", " \u0647\u0646\u0648\u0632": "1j", " \u0647\u0648 ": "1i", " \u0647\u0648\u0627 ": "1j", " \u0647\u064A": "1i", " \u0648\u0627\u062D": "1i", " \u0648\u0627\u0642\u0639": "1j", " \u0648\u0627\u0644\u0627": "h", " \u0648\u0627\u067E": "h", " \u0648\u062C\u062F\u062A": "1i", " \u0648\u0635\u0644": "1i", " \u064A\u0627": "1i", " \u064A\u0628": "1i", " \u064A\u062A": "1i", " \u064A\u0631": "1i", " \u064A\u0633": "1i", " \u064A\u0645": "1i", " \u064A\u0646": "1i", " \u067E\u0627\u0633\u062E": "1j", " \u067E\u062A": "h", " \u067E\u0633\u0646": "h", " \u067E\u0648\u0631": "h", " \u067E\u06A9": "h", " \u067E\u06CC\u0631": "1j", " \u06A9\u0627 ": "h", " \u06A9\u0627\u0631 ": "1j", " \u06A9\u0627\u0631\u06CC": "1j", " \u06A9\u0627\u0645\u0644": "1j", " \u06A9\u0631\u0648": "h", " \u06A9\u0645\u06CC ": "1j", " \u06A9\u0646": "1j", " \u06A9\u0648 ": "h", " \u06A9\u0648\u062F\u06A9": "1j", " \u06A9\u0648\u0646": "h", " \u06A9\u0648\u0686\u06A9": "1j", " \u06AF\u0631\u0628\u0647": "1j", " \u06AF\u0648": "1j", " \u06CC\u06A9": "1j", " \u0964": "g", " \u2015": 18, " \u2116": 18, " \u300D\u300C\u4F55": 5, " \u300D\u300C\u79C1": 5, " \u300D\u300C\u9055": 5, " \u3072": 5, " \u30A8": 5, " \u30B1": 5, " \u30B5": 5, " \u30CD\u30BA\u30DF": 5, " \u4E00\u4EBA": 5, " \u4E00\u4F53": 5, " \u4E00\u500B": 6, " \u4E00\u5207\u90FD": 6, " \u4E00\u65E5": 5, " \u4E00\u751F": 5, " \u4E07\u4E00": 5, " \u4E0D ": 6, " \u4E0D\u597D\u610F": 6, " \u4E16\u754C\u4E00": 5, " \u4E16\u754C\u5E73": 5, " \u4E57\u7D44\u54E1": 5, " \u4E8C\u5EA6": 5, " \u4EA4\u901A": 5, " \u4ECA\u56DE": 5, " \u4ECA\u5EA6": 5, " \u4ECA\u6669": 5, " \u4ECA\u671D": 5, " \u4ECA\u9031": 5, " \u4ED6\u4E00": 6, " \u4ED6\u4EBA": 5, " \u4ED6\u53EF\u80FD": 6, " \u4ED6\u559C": 6, " \u4ED6\u5E38\u5E38": 6, " \u4ED6\u603B\u662F": 6, " \u4ED6\u628A": 6, " \u4ED6\u6709": 6, " \u4ED6\u6CA1": 6, " \u4ED6\u770B\u8D77": 6, " \u4ED6\u7E3D\u662F": 6, " \u4ED6\u975E\u5E38": 6, " \u4F55\u6642": 5, " \u4FFA": 5, " \u500B\u4EBA\u7684": 5, " \u5148\u65E5": 5, " \u5148\u9031": 5, " \u5168\u7136": 5, " \u5168\u90E8": 5, " \u51B7\u8535": 5, " \u52D5\u7269": 5, " \u5317\u6D77\u9053": 5, " \u535A\u7269\u9928": 5, " \u539F\u5B50\u529B": 5, " \u53D4\u7236": 5, " \u53F0\u98A8": 5, " \u540D\u53E4\u5C4B": 5, " \u541B": 5, " \u56E0": 6, " \u56F3\u66F8": 5, " \u5730\u4E0B\u9244": 5, " \u5730\u9707": 5, " \u57FA\u672C\u7684": 5, " \u590F\u4F11": 5, " \u5916\u56FD": 5, " \u591A\u5206": 5, " \u5927\u4E08": 5, " \u5927\u5B66": 5, " \u5927\u5BB6": 6, " \u5927\u7D71": 5, " \u5973\u6027": 5, " \u5982": 6, " \u5B50": 5, " \u5B66\u751F\u6642": 5, " \u5B66\u751F\u9054": 5, " \u5B87\u5B99\u98DB": 5, " \u5BCC\u58EB\u5C71": 5, " \u5C11\u5E74": 5, " \u5E74\u6708\u65E5": 5, " \u5F53\u6642 ": 5, " \u5F7C\u7B49": 5, " \u5FC5\u8981": 5, " \u611F\u8B1D\u796D": 5, " \u6210\u529F": 5, " \u6211\u4EE5": 6, " \u6211\u4F1A": 6, " \u6211\u53D4\u53D4": 6, " \u6211\u53EA": 6, " \u6211\u53EF": 6, " \u6211\u540C\u610F": 6, " \u6211\u548C": 6, " \u6211\u54E5\u54E5": 6, " \u6211\u5988\u5988": 6, " \u6211\u59B9\u59B9": 6, " \u6211\u5ABD\u5ABD": 6, " \u6211\u5B8C\u5168": 6, " \u6211\u5BE7\u9858": 6, " \u6211\u5C31": 6, " \u6211\u5E0C": 6, " \u6211\u5E38\u5E38": 6, " \u6211\u5E7E\u4E4E": 6, " \u6211\u5F1F\u5F1F": 6, " \u6211\u5FC5": 6, " \u6211\u6000\u7591": 6, " \u6211\u603B\u662F": 6, " \u6211\u6253": 6, " \u6211\u628A": 6, " \u6211\u660E": 6, " \u6211\u6628": 6, " \u6211\u66F4\u559C": 6, " \u6211\u6700": 6, " \u6211\u671F\u5F85": 6, " \u6211\u6765\u81EA": 6, " \u6211\u6B63": 6, " \u6211\u6BCD\u4EB2": 6, " \u6211\u6C38\u9060\u4E0D": 6, " \u6211\u6CA1": 6, " \u6211\u7121\u6CD5": 6, " \u6211\u7236": 6, " \u6211\u73FE\u5728": 6, " \u6211\u771F": 6, " \u6211\u77E5": 6, " \u6211\u80AF\u5B9A": 6, " \u6211\u80FD": 6, " \u6211\u89BA": 6, " \u6211\u8A8D": 6, " \u6211\u8BA8\u538C": 6, " \u6211\u8BB0\u5F97": 6, " \u6211\u901A\u5E38": 6, " \u6211\u9084": 6, " \u6211\u9700": 6, " \u6211\u975E\u5E38": 6, " \u6240\u6709": 6, " \u628A": 6, " \u643A\u5E2F\u96FB": 5, " \u652F\u914D\u4EBA": 5, " \u653F\u6CBB": 5, " \u6551\u6025\u8ECA": 5, " \u6559\u79D1\u66F8": 5, " \u6570\u5E74\u524D": 5, " \u6599\u7406": 5, " \u65B0\u805E": 5, " \u65C5\u884C": 5, " \u65E5\u672C\u7684": 6, " \u65E9\u5BDD\u65E9": 5, " \u660E\u5F8C\u65E5": 5, " \u6628\u591C": 5, " \u662F\u7684 ": 6, " \u666E\u6BB5": 5, " \u666E\u901A": 5, " \u6700\u521D": 5, " \u6700\u8FD1\u5F7C": 5, " \u6700\u8FD1\u7684": 6, " \u6708\u65E5": 5, " \u6708\u66DC": 5, " \u6709\u4E9B": 6, " \u671D": 5, " \u6765\u5E74": 5, " \u6765\u9031": 5, " \u6771\u4EAC\u99C5": 5, " \u6B21": 5, " \u6B8B\u5FF5": 5, " \u6BCE": 5, " \u6C11\u4E3B\u4E3B": 5, " \u6CA1": 6, " \u6D17\u6FEF\u6A5F": 5, " \u6D17\u6FEF\u7269": 5, " \u6D77\u5916\u65C5": 5, " \u6D88\u9632\u58EB": 5, " \u6E6F": 6, " \u725B\u4E73": 5, " \u73FE\u5728 ": 5, " \u751F\u6D3B\u8CBB": 5, " \u7530\u4E2D": 5, " \u75C5\u9662": 5, " \u793E\u4F1A": 5, " \u79C1": 5, " \u7A7A\u6E2F": 5, " \u7A81\u7136 ": 5, " \u7B2C\u4E8C\u6B21": 5, " \u7D50\u5A5A": 5, " \u7D50\u5C40": 5, " \u7D50\u679C": 5, " \u7D76\u5BFE": 5, " \u7F8E\u8853\u9928": 5, " \u81EA\u5DF1\u7D39": 5, " \u8428\u7C73": 6, " \u88C1\u5224\u5B98": 5, " \u898B": 5, " \u8A00": 5, " \u8ACB": 6, " \u8B66\u5B98": 5, " \u8B66\u5BDF\u5B98": 5, " \u8C22\u8C22": 6, " \u8D64": 5, " \u9019": 6, " \u904B\u52D5": 5, " \u9053\u8DEF": 5, " \u90A3": 6, " \u90E8": 5, " \u90F5\u4FBF": 5, " \u9280\u884C": 5, " \u98DB\u884C": 5, " \u99D0\u8ECA\u5834": 5, " \u9AD8\u6821\u6642": 5, " \u9AD8\u6821\u751F": 5, " \uAC08": 7, " \uAC10": 7, " \uAC14": 7, " \uAC1C": 7, " \uACA8\uC6B8": 7, " \uACB0": 7, " \uACBD": 7, " \uACC4": 7, " \uACE7 ": 7, " \uACF5": 7, " \uAD00\uC2EC": 7, " \uAD1C\uCC2E": 7, " \uAD50\uC721": 7, " \uAD8C": 7, " \uADFC\uCC98": 7, " \uAE34 ": 7, " \uAF64 ": 7, " \uB054\uCC0D": 7, " \uB0A0": 7, " \uB0A8": 7, " \uB0C4\uC0C8": 7, " \uB10C ": 7, " \uB110 ": 7, " \uB144": 7, " \uB178": 7, " \uB18D\uB2F4": 7, " \uB204": 7, " \uB208": 7, " \uB2EC": 7, " \uB2F4\uBC30": 7, " \uB3C8": 7, " \uB3CC": 7, " \uB3FC ": 7, " \uB418": 7, " \uB420 ": 7, " \uB450": 7, " \uB458 ": 7, " \uB54C": 7, " \uB5A0": 7, " \uB610 ": 7, " \uB611\uB611": 7, " \uB9C9 ": 7, " \uB9CE": 7, " \uB9E4": 7, " \uBA38\uBB3C": 7, " \uBA39": 7, " \uBA4D\uCCAD": 7, " \uBA54": 7, " \uBA70\uCE60": 7, " \uBA85 ": 7, " \uBA87": 7, " \uBAA9\uD45C": 7, " \uBAB0": 7, " \uBABB": 7, " \uBB3C": 7, " \uBB50": 7, " \uBB58 ": 7, " \uBC0F ": 7, " \uBC14": 7, " \uBC18": 7, " \uBC1B": 7, " \uBC24 ": 7, " \uBC29": 7, " \uBC30": 7, " \uBC84": 7, " \uBC88": 7, " \uBC8C\uC368": 7, " \uBCD1\uC6D0": 7, " \uBCFC ": 7, " \uBD84 ": 7, " \uBD84\uBA85": 7, " \uBD88": 7, " \uBE44": 7, " \uBE60\uB974": 7, " \uBE60\uC838": 7, " \uBE60\uC84C": 7, " \uC0B0": 7, " \uC0B4": 7, " \uC0C8": 7, " \uC120": 7, " \uC124\uBA85": 7, " \uC131": 7, " \uC194\uC9C1": 7, " \uC288\uD37C": 7, " \uC2EB": 7, " \uC4F0": 7, " \uC57D\uC18D": 7, " \uC5B8": 7, " \uC5BC": 7, " \uC5C4\uCCAD": 7, " \uC5F0": 7, " \uC5F4": 7, " \uC601": 7, " \uC608": 7, " \uC628 ": 7, " \uC62C ": 7, " \uC644\uBCBD": 7, " \uC65C": 7, " \uC678\uAD6D": 7, " \uC6B4": 7, " \uC6C0\uC9C1": 7, " \uC6D0": 7, " \uC6D4 ": 7, " \uC704": 7, " \uC720": 7, " \uC74C\uC2DD": 7, " \uC74C\uC545": 7, " \uC798": 7, " \uC810\uC2EC": 7, " \uC870": 7, " \uC874\uC7AC": 7, " \uC880": 7, " \uC885\uAD50": 7, " \uC8C4\uC1A1": 7, " \uC8FD": 7, " \uC900\uBE44": 7, " \uC904": 7, " \uC911": 7, " \uC9C1\uC5C5": 7, " \uC9C1\uC811": 7, " \uC9C4": 7, " \uC9D1": 7, " \uCC28": 7, " \uCC38 ": 7, " \uCC3E": 7, " \uCC45": 7, " \uCC98\uC74C": 7, " \uCC9C\uCC9C": 7, " \uCD5C\uADFC": 7, " \uCD5C\uC120": 7, " \uCDA9\uBD84": 7, " \uCE5C": 7, " \uCEE4\uD53C": 7, " \uCEF4\uD4E8": 7, " \uD070 ": 7, " \uD154\uB808": 7, " \uD1A0\uB07C": 7, " \uD2B9\uBCC4": 7, " \uD2C0\uB838": 7, " \uD2F0\uBE44": 7, " \uD30C": 7, " \uD3C9\uD654": 7, " \uD3EC\uD568": 7, " \uD45C\uD604": 7, " \uD53C": 7, " \uD544": 7, " \uD559": 7, " \uD568\uAED8": 7, " \uD589": 7, " \uD6C4\uD68C": 7, " \uD6E8\uC52C": 7, " \uFF0D": "n", "''e": "1q", "''h": "r", "''i": "r", "''w": "r", "'a'": "1q", "'ae": "q", "'ai ": "l", "'aide": "l", "'aim": "l", "'air": "l", "'altr": "q", "'as ": "l", "'avai": "l", "'be'": "1q", "'bo": "1q", "'cho": "1q", "'chu": "1q", "'cl": "m", "'d ": "m", "'da ": "1f", "'daj": "1q", "'daq": "1q", "'di' ": "1q", "'dib": "1q", "'e'": "1q", "'ea": "l", "'egh": "1q", "'ej": "1q", "'ell": "l", "'era": "q", "'esa": "q", "'est-": "l", "'fb": "q", "'fh": "s", "'gh": "1q", "'ha ": "q", "'hai": "q", "'ho ": "q", "'hui": "l", "'h\xF4": "l", "'ibi": 4, "'igi": 4, "'ih": "1q", "'ils": "l", "'iq": "1q", "'ish": 4, "'lah": "1q", "'les ": "1q", "'lij ": "1q", "'ll": "m", "'lu'": "1q", "'mah": "1q", "'me": "1q", "'moh": "1q", "'nin": "1f", "'ny": "d", "'n\u0131": "1f", "'oh": "1q", "'ont": "l", "'ou": "l", "'ov": "q", "'oy": "1q", "'pu": "1q", "'q": "1q", "'re ": "m", "'ri": "1q", "'t-": "d", "'ta'": "1q", "'tah": "1q", "'tl": "1q", "'ubu": 4, "'uf": "q", "'ult": "q", "'umu": 4, "'umw": 4, "'une": "l", "'uo": "q", "'uq": "1q", "'uv": "q", "'va": "1q", "'ve ": "m", "'vetl": "1q", "'wi": "1q", "'ye ": "1f", "'yi": "1f", "'\xE0": "l", "'\xE1": "p", "'\xE2": "l", "'\xE8 ": "q", "'\xE9c": "l", "'\xE9g": "l", "'\xE9i": "s", "'\xE9l": "l", "'\xE9p": "l", "'\xE9t": "l", "'\xE9v": "l", "'\xEA": "l", "'\xEE": "l", "'\xF4": "l", "'\xFC": "1f", "'\u0131": "1f", "'\u0153": "l", "'\u03B5": "w", "'\u03C0": "w", "'\u0435": 17, "'\u0440": "x", "'\u044F\u0437": 19, "'\u0451": 17, "'\u0456": 17, "'\u05D1\u05D9\u05DF ": "1h", "'\u05D5": "1g", "'\u05D9": "1g", "(-)": "1o", "(la": "1o", "(mi": "1o", "(ne": "1o", "(q": "p", "(r": "p", "(y": "o", "(z": "n", "(\u0438": 18, "(\u043A": 18, "(\u043D": 18, "(\u043F": 18, "(\u0441": 18, "-'": "1f", "-aar": "d", "-ai ": 15, "-ar ": 15, "-asen": 3, "-au ": 15, "-awe": 3, "-bai": "b", "-by": "m", "-ce ": "l", "-d-t": 3, "-d-y": 3, "-da ": "1n", "-ea": "m", "-ee": "d", "-eh": "d", "-ek": "1o", "-ell": "l", "-ey": "m", "-fei": "p", "-fk": 3, "-gv": "1o", "-id ": 3, "-id-": 3, "-ii": "d", "-ik ": 3, "-ike": 3, "-il ": "l", "-inu": 3, "-ip": "d", "-is ": 3, "-ise": 3, "-it ": 3, "-iw ": 3, "-iy": 3, "-je ": "l", "-k ": 3, "-kano": "1p", "-kn": "m", "-kv": "1o", "-l ": 15, "-lhe": "p", "-lo ": "p", "-l\xE0": "l", "-l\xF6": "1p", "-me ": "p", "-mi ": 15, "-moi": "l", "-m\xE8": "l", "-m\xEA": "l", "-nk": 3, "-nn": 3, "-nou": "l", "-ns": 3, "-nt": 3, "-nw": 3, "-ob": "1o", "-of": "m", "-oj": "1o", "-ok": "1o", "-sat": "b", "-ss": 3, "-tess": 3, "-tg": 3, "-tse": 3, "-tt": 3, "-tu ": "l", "-ub": "d", "-uu": "d", "-vou": "l", "-wen": 3, "-yes": 3, "-yet": 3, "-yi": 3, "-yu": 3, "-\xE0": "l", "-\xE2": "l", "-\xE3": "p", "-\xE4": "1p", "-\xE5": "z", "-\xEA": "l", "-\xED": "p", "-\xF3": 14, "-\xF6": 14, "-\u010D": 3, "-\u0131": "1f", "-\u015F": 15, "-\u03B5": 3, "-\u0434\u043E\u0431": 16, "-\u043D\u0438": 18, "-\u0446": 18, "-\u044E": 18, "-\u0456": 19, "-\u04AF": "1k", "-\u04D9": "1k", "-\u04E9": "1k", "a''": "1q", "a'b": "1q", "a'c": "1q", "a'di": "1q", "a'h": "1q", "a'les": "1q", "a'm": "1q", "a'p": "1q", "a'v": "1q", "a'w": "1q", "a'y ": "d", "a-ap": "b", "a-d ": 3, "a-fe": "p", "a-me": "p", "a-s ": 3, "a-ten": 3, aaar: "d", aaga: "d", aagd: "r", aagt: "r", aakt: "r", aald: "r", "aano ": "d", aapan: "1c", "aard ": "r", aarde: "r", aarh: "r", aaroo: 1, "aasa ": "1c", aatst: "r", aaw: "d", aayo: "d", abae: "d", "abai ": "1b", abair: "s", abaja: "o", abajo: "o", abbia: "q", abeb: "t", abeo: "t", abeza: "o", abg: "n", abih: "d", ablar: "o", ably: "m", "abob ": "1p", "abom ": "1p", abui: "t", abyc: "u", ab\u00F6: "1p", ab\u0101: "1d", ab\u0103: 15, ab\u0113: "t", acchi: "q", aceas: 15, acee: 15, acev: "q", aci\u00F3n: "o", acj: "1a", acv: "1o", acz: "1a", ac\u0103: 15, ac\u0131: "1f", adary: "1b", ada\u015F: "1f", adei: "p", "adev ": "1q", adhu: "t", adi\u0161: "v", adong: "d", aduse: "1c", adym: "1n", adzie: "1a", ad\u0101: "1d", ad\u012B: "1d", ad\u0131m: "1f", ad\u0131\u011F\u0131: "1f", "aec ": "t", aega: "1c", aegr: "t", aegu: "1c", aegy: "t", aeil: "s", aep: "t", aeq: "t", aeso: "t", afab: "1o", afea: 15, afero: "1o", afise: 4, af\u00ED: "o", "ag-u": "d", agaim: "b", "agay ": "d", agazz: "q", aggio: "q", aghaj: "1q", aginn: 13, agiy: 4, agka: "d", aglia: "q", agoj: "1o", agpa: "d", agpu: "d", agsi: "d", agsu: "d", agtat: "d", agtu: "d", agty: "1n", ag\u00F6n: "1p", ag\u0101: "1d", ag\u0103: 15, "ah-": "b", "ahab ": "1c", "ahad ": "1c", aharl: "1n", ahasa: "b", "ahay ": "d", ahbe: "1q", ahera: 4, ahet: "1c", ahig: "d", "ahil-": 3, ahkan: "b", ahny: "b", "ahr ": "n", ahrad: "u", ahtn: "1c", ahts: "1c", ahtu: 11, ahui: "b", "ahun ": "b", ahvad: "1q", "ah\xED ": "o", aibh: "s", aibi: "d", aider: "l", aient: "l", "aigh ": "s", aiin: "d", "aik-": "b", aikki: 11, aikn: "b", "aiks ": "1d", aikut: 11, aiky: "1b", ail\u00ED: "s", ainda: "p", aing: "d", "ainn ": "s", ainul: "1c", ainuo: "1b", "aip ": "1b", airg: "s", "airt ": "s", "ais-": "l", aisn: "1d", aisse: "l", aithe: "s", aity: "1b", "aiu ": "p", aiut: "q", aixa: "p", aixo: "p", aizv: "1d", ai\u010D: "1b", ai\u0161: "1b", "aj'": "1q", "ajag ": "1d", ajbe: "1q", "ajn ": "1o", ajuda: "p", ajung: 15, aj\u00E9: "o", aj\u00EDm: "u", "aj\xEDt ": "u", aj\u0105: "1a", aj\u0119: "1a", aj\u0161: "y", "akah ": "b", akain: "d", akaka: "d", akaw: "d", akdy: "1n", akhi: "b", "akie ": "1a", akkur: 12, aklik: 1, akong: "d", akov\u00E9: "u", akoze: 4, aks\u0101: "1d", akud: 3, akuka: "b", akund: 4, akwi: 4, akyan: "d", akyn: "1n", akyt: "1b", "al-i": 3, "al-n": 3, alar\u0131: "1f", albon: "1o", albos: "1b", aldie: "1d", "aldy ": "1n", "ald\u0131 ": "1f", alebo: "y", algum: "p", algu\u00E9: "p", algy: "1b", alhar: "p", "alho ": "p", aliq: "t", "aliu ": "1b", allym: "1n", all\u00ED: "o", aloda: "1d", alodu: "1d", alque: "p", alstu: "r", altid: "z", aluan: 11, al\u00E1l: 14, al\u00F2: "q", al\u012B: "1d", "al\u0131 ": "1f", al\u0131y: "1f", al\u0148: "1n", "am'e": "1q", amahe: 4, amahi: 3, ambro: "1o", amb\u00E9: "p", amicu: "t", amilj: 10, aminh: "p", amleg: 13, amqu: "t", amwe: 4, am\u00E1l: 13, am\u00E1ra: "s", am\u00E2: 15, am\u00E4t: "y", am\u00EDl: "p", am\u00F2: "q", "am\u0131 ": "1f", am\u0131y: "1f", "an't": "m", "an-i": 3, "an-n": 3, andhe: "z", anect: 3, "anh ": "a", ankv: "1o", anlam: "1f", anl\u0131: "1f", annai: "s", annak: 14, annh: 12, annsy: 12, annya: "b", annyi: 14, ann\u00E9: "l", "anob ": "1p", anobs: "1p", "anoj ": "1o", anong: "d", anseo: "s", ansuz: "1n", answ: "m", "anud ": "1c", "anwa ": 3, "anye ": 4, anyny: "1n", anyp: "1n", "anz ": "n", anz\u00F6: "n", an\u0101: "1d", an\u0103: 15, an\u0131m: "1f", aoh: "m", aoin: "s", aoir: "s", "aois ": "s", aoj: "1o", aoks: "1c", aong: "d", aont: "s", aota: "1c", aoz: "y", "ap-": "d", apaca: "1f", apaht: 11, "apet ": 12, apmak: "1f", apmay: "1f", apnis: "1d", appon: "q", apraw: "1a", apsal: "u", apw: "d", apyn: "1n", ap\u00E4e: "1c", ap\u00EDs: "y", aqm: "1q", aquam: "t", "aqui ": "p", aqu\u00ED: "o", "ar-b": "b", arapy: "1n", ardz: "1a", ard\u0131: "1f", arebb: "q", arf\u00F6: 10, "argh ": "1q", arili: "d", "arje ": 10, "aroj ": "1o", "arok ": 14, aroor: 1, arr\u00EA: "l", arsy: "1n", arth\u00E1: "s", arvit: 11, aryny: "1n", arzy: "1a", ar\u00E0: "q", ar\u00F2: "q", ar\u00FC: "n", ar\u0103: 15, ar\u0113: "1d", "ar\u012B ": "1d", "asc ": "s", ascia: "q", ascol: "q", "asen-": 3, ashak: 4, "asid ": "1c", "asih ": "b", askt: 12, "asla ": "1f", aspic: "t", asst: "n", "ass\xE9 ": "l", ast\u0101: "1d", asyny: "1n", aszt: 14, as\u0103: 15, as\u012B: "1d", as\u0131na: "1f", "at-o": 15, atao: "d", atapo: "d", ataw: "d", atda: "1n", atege: 4, ateic: "1d", atelj: "v", athai: "s", "atid ": "d", atink: "1b", "atoj ": "1o", atqu: "t", atsis: "1b", atsit: "1b", atud: "1c", atuke: "1c", "atul ": 15, atvy: "1b", atyn: "1n", atyt: "1b", "atz ": "n", atze: "n", at\u00E2: 15, at\u0101s: "1d", at\u0103: 15, at\u012B: "1d", aubt: "n", "auch ": "n", aucou: "l", aucun: "l", audz: "1d", auen: "n", aufen: "n", aufg: "n", auft: "n", augia: "1b", augst: "1d", "auh ": "b", auj\u00ED: "y", auns: "1d", "aupa ": 13, aurai: "l", ausg: "n", ausim: "1b", autre: "l", autt: 11, aut\u0101: "1d", auza: 15, au\u0161: "1b", au\u017E: "1b", "avau ": "1b", avea: 15, avev: "q", "avez ": "l", avf: 10, avhe: 12, avno: "v", "avn\xE9 ": "y", avoa: 15, avoir: "l", avond: "r", avons: "l", avras: "p", "avs ": "1d", avve: "q", avvi: "q", av\u00F2: "q", av\u00F4: "p", av\u0101: "1d", "aw' ": "1q", awab: "b", awang: "d", awen: 3, awia: "1a", awie: "1a", axx: 3, axy: "m", "ay' ": "1q", ayac: "1f", "ayaw ": "d", ayj: "m", ayong: "d", ayroo: "d", ayud: "o", ayz: 3, ay\u00F3: "o", ay\u00FA: "o", "azla ": "1f", azoj: "1o", azum: "v", az\u00F3n: "o", az\u00FA: "o", a\u00E3: "p", a\u00E4: 11, a\u00E7y: "1n", a\u00E7\u0131: "1f", a\u00E8: "l", a\u00EDo: "s", a\u00EE: "l", a\u00F1an: "o", a\u00F1e: "o", a\u00F1i: "o", a\u00F1o: "o", a\u00F3n: "o", a\u00F6: 14, a\u00FAn: "o", a\u00FD: "1n", "a\u0107 ": "1a", a\u0111: "v", a\u011F\u0131m: "1f", a\u011F\u0131n\u0131: "1f", a\u0131: "1l", a\u0142: "1a", a\u0144: "1a", "a\u0148a ": "1n", a\u015Fd: "1n", a\u015Fgal: "1n", a\u015Fk: "1f", a\u015Flar: "1f", a\u015F\u0131n: "1f", a\u016D: "1o", a\u017Eem: "v", a\u017Eia: "1b", a\u017Ein: "1b", a\u0301: "a", a\u0303: "a", a\u03B3: 3, a\u03B5: 3, "b-i": 3, "b-l": "1p", "b-n": 3, badus: "1c", bagai: "b", "bago ": "d", bahas: "b", bahir: 4, bahk: "b", baho: "d", bahwa: "b", "bair ": "s", baix: "p", bajar: "o", balha: "p", balho: "p", bambi: "q", banh: "p", barad: "1n", barmy: "1n", "baru ": "b", bar\u00E1t: 14, bar\u00FD: "1n", ba\u00F1: "o", ba\u015Fg: "1n", ba\u0161: "v", "bbia ": "q", bbiam: "q", "be'n": "1q", beauc: "l", bedst: "z", beids: 12, beim: "n", beite: "n", "bej ": "1q", bejd: "z", belum: "b", benar: "b", benod: 1, berap: "b", berik: "b", berit: "b", ber\u00E4t: 10, ber\u00ED: "o", ber\u00FD: "1n", besig: 1, besz: 14, bes\u00F6k: 10, betj: "z", bezon: "1o", be\u00E7: "p", be\u00EF: "r", bhai: "s", bhar: "s", bhea: "s", bhf: "s", bhi: "t", bhl: "s", bhr: "s", bh\u00E1: "s", bh\u00ED: "s", biau: "1b", bicul: "t", bietj: 1, bie\u017E: "1d", bigan: "d", bihi: "d", biji: "1d", bijn: "r", biju: "1d", bikor: 4, biliy: "1f", bilmi: "1f", bil\u00FD: "1n", bimu: "t", binob: "1p", binol: "1p", binom: "1p", binos: "1p", bin\u00F6: "1p", birli: "1f", bisog: "q", "bist ": "n", bitac: "o", bith: "s", bizim: "1f", bi\u00E8: "l", bi\u00E9n: "o", bi\u00EB: "r", "bi\xF3 ": "o", "bi\u0107 ": "1a", bjer: "z", bj\u00F3: 13, blaho: "y", blaj: "1o", "blar ": "o", bleib: "n", blitt: 12, blive: "z", blj: "v", bloe: "r", blua: "1o", bl\u00E6: "z", bl\u00F8: "z", bl\u00FC: "n", bned: "z", bobs: "1p", "bof ": "1p", "bogh ": "1q", "boh ": "y", boho: "b", boldy: "1n", boleh: "b", bolje: "v", bolup: "1n", bonum: "t", bonv: "1o", "bose ": 4, bosit: 15, both: "m", bowa: "1a", bpl: "1o", bpu: "1q", bq: "1q", bratr: "u", bra\u00E7: "p", brey: 13, broli: "1b", brore: 12, bruge: "z", bruka: 10, bruke: 12, brukt: 12, "brum ": "t", bryd: "z", bryte: 12, brze: "1a", br\u00E5: 10, br\u00E6n: "z", br\u00E9f: 13, br\u00ED: "o", br\u0103: 15, br\u012B: "1d", bsik: "1p", "bst ": "n", bs\u00F6: "1p", "bt-": 3, btf: "m", bts: "m", buah: "b", buat: "b", "buch ": "n", budn: "y", budol: "y", budou: "u", buel: "o", "buen ": "o", buena: "o", buie: 15, buil: "m", buji: "u", bukas: "d", buni: 15, "bunu ": "1f", bunun: "1f", burad: "1f", buvau: "1b", "buvo ": "1b", buw: "d", "buy ": "m", bu\u00FD: "a", bvy: "u", bx: 3, bych: "u", bydl: "u", "byl ": "u", byla: "u", "bylo ": "u", "bym ": "1a", byo: "d", byrj: 13, byste: "u", by\u0165: "y", b\u00E0: "a", "b\xE1c ": "a", b\u00E1nh: "a", b\u00E1o: "a", b\u00E2t: "l", b\u00E2y: "a", b\u00E4ri: "1n", b\u00E4s: 10, b\u00E4tt: 10, b\u00E4u: "n", b\u00E6k: 13, b\u00E9ar: "s", b\u00E9m: "p", b\u00EC: "a", "b\xEDa ": "o", "b\xEDl ": 13, b\u00EDo: "s", b\u00EE: "l", "b\xF3k ": 13, b\u00F3ki: 13, b\u00F3ng: "a", b\u00F6ck: 10, b\u00F6rj: 10, b\u00F6rn: 13, b\u00F6y: "1f", b\u00F8g: "z", b\u00F8k: 12, b\u00F8rn: "z", "b\xF9 ": "q", b\u00FAa: 13, b\u00FAi: 13, "b\xFAt ": "a", b\u00FB: "l", b\u00FCc: "n", b\u00FDr: 13, b\u00FDt: "u", b\u00FDval: "u", "b\u0101 ": "1d", "b\u0103 ": 15, b\u0113s: "t", b\u012Bs: "t", b\u0131r: "1f", b\u0142: "1a", b\u014D: "t", b\u0153: "l", b\u016Bd: "1b", b\u016Bk: "1b", b\u016Bn: "1b", b\u016Bti: "1b", b\u017E: "1b", b\u03B3: 3, b\u03B5: 3, "c'er": "q", "c'es": "l", "c'i": 4, "c'u": 4, "c'\xE8": "q", "c'\xE9": "l", "c-n": 3, cabez: "o", cacc: "q", caint: "s", cait: "s", caix: "p", canke: 4, "carr ": "s", ca\u00E7: "p", ca\u00F1: "o", ca\u011F\u0131: "1f", cche: "q", "cchi ": "q", cchia: "q", ccia: "q", ccip: "t", cci\u00F3: "o", ccon: "q", cc\u00E8: "l", cc\u00F2: "q", ceann: "s", ceast: 15, ceea: 15, cemma: 3, cepu: 15, cesz: "1a", cetn: "t", cfr: "1o", cg: 3, "cha'": "1q", chaa: "r", chaid: "s", chail: "s", chath: "s", chean: "s", chear: "s", chega: "p", chein: "n", "chez ": "l", chg: "n", chk: "n", "chlo ": "y", chny: "u", choh: "1q", "chom ": "u", chona: "s", "chra ": "t", chrei: "n", chse: "n", "chu'": "1q", chuir: "s", chuy: "a", ch\u00E1d: "y", ch\u00E1z: "u", ch\u00E3: "p", ch\u00E4: "n", "ch\xED ": "a", ch\u00F3d: "1a", ch\u00F3na: "s", ch\u00F6: "n", ch\u00FA: "a", ch\u00FC: "n", ch\u00FDb: "y", ch\u0103: "a", cibu: "t", cieba: "t", ciebi: "1a", "ciec ": "1a", cilv: "1d", cimu: "t", cinev: 15, cin\u0101: "1d", ciod: 15, cioj: "1o", cipu: "t", cisto: "1o", ciut: "q", ci\u00EA: "p", ci\u00EB: "r", ci\u0105: "1a", ci\u0107: "1a", cji: "1a", cj\u0119: "1a", "ckan ": 10, cked: "m", ckk: "n", clase: "o", cmo: "1o", cn\u00FD: "u", cocin: "o", coep: "t", coge: "o", cois: "p", "coj ": "1o", cojn: "1o", cold: "m", "com'": "q", comig: "p", compt: "l", conas: "s", conh: "p", conmi: "o", conoc: "o", copii: 15, corso: "q", "cos'": "q", cosas: "o", costr: "q", couz: "u", covat: "u", cpe: "1o", "creo ": "o", crips: "t", cruri: 15, crv: "v", cr\u0103: 15, cr\u0113: "t", cr\u012B: "t", csa: 14, csi: 14, csk: 14, cs\u00E1: 14, cs\u00E9: 14, cs\u00F6: 14, cted: "m", ctf: "m", "ctis ": "t", ctly: "m", "ctu ": "t", ctum: "t", ct\u00E1: "o", ct\u00FA: "o", ct\u0101: "t", ct\u0103: 15, ct\u016B: "t", "cu-": 3, cualq: "o", cuan: "o", cuch: "o", cuel: "o", cuen: "o", cuerd: "o", cug: "q", cuie: 15, cuiu: "t", cukl: "1f", "cumi ": 4, cumpl: "o", cumq: "t", "cung ": "a", cunia: "t", "cuno ": "q", cunos: 15, cuol: "q", cuor: "q", cutus: "t", cu\u00E1: "o", cvo: "1o", cw: 3, cykle: "z", "cz ": "1a", czas: "1a", "cze ": "1a", czeg: "1a", czek: "1a", czen: "1a", czk: "1a", czn: "1a", czo: "1a", czu: "1a", czy: "1a", cz\u0105: "1a", cz\u0119: "1a", c\u00E0: "a", "c\xE1c ": "a", c\u00E1ch: "a", "c\xE1i ": "a", c\u00E1nh: "a", c\u00E2i: 15, c\u00E2m: "p", "c\xE2n ": "a", c\u00E2t: 15, c\u00E2u: "a", c\u00E2y: "a", c\u00E3o: "p", c\u00E6: "t", c\u00E7: "p", c\u00E9i: "o", "c\xE9u ": "p", "c\xEA ": "p", "c\xEA-": "p", c\u00EAn: "p", c\u00EC: "q", c\u00EDo: "o", "c\xF2 ": "q", c\u00F3ca: "s", c\u00F3na: "s", c\u00F5: "p", c\u00F9: "a", c\u00FAz: "y", "c\u0103 ": 15, c\u0103m: 15, c\u0103n: "a", c\u010D: 3, c\u0119: "1a", c\u012Bg: "1d", c\u012Bm: "t", c\u012Bti: "1d", "c\u0131 ": "1f", c\u0131m: "1f", c\u0142: "1a", c\u014D: "t", c\u0165: "y", c\u016Br: "t", c\u016Bz: "1b", c\u03B5: 3, "d'f": "s", "d'h": "l", "d'v": "m", "d'\xE8": "q", "d)": "m", "d-is": 3, "d-ta": 3, "d-ts": 3, "d-tu": 3, "d-ya": 3, daag: "r", dabar: "1b", dagar: 10, dager: 12, dagha: "1q", "daha ": "1f", dahj: "1q", dajn: "1o", dakke: 3, dakun: 4, daky: "1n", dalah: "b", dalaw: "d", "dalk ": 1, dal\u0161: "u", dam\u00E1: 13, danam: "1n", daneh: "1q", danh: "a", "dann ": "n", dan\u00E7: "p", "dap ": "b", "daq ": "1q", daryt: "1b", dar\u012B: "1d", dasha: 4, "dass ": "n", datam: 12, "daug ": "1b", daugi: "1b", davv: "q", dav\u00ED: "o", "dazi ": 4, da\u00E7: "p", da\u00F1: "o", da\u015F\u0131: "1f", da\u0161: "v", da\u0165: "y", da\u017En: "1b", dbog: "z", dbol: "z", dche: "n", dcu: "m", dcz: "1a", dc\u00E9: "y", ddm: 3, "ddo ": "q", ddor: "q", ddun: 3, deach: "s", deber: "o", dec\u00E2: 15, "deg-": 3, deia: "p", "dein ": "n", deine: "n", dejar: "o", delij: "r", "dell'": "q", dem\u00E1: "o", denfo: "z", "deng ": "d", "denn ": "n", deree: "r", derwy: 1, desia: "y", desmi: "1d", despu: "o", destu: 15, detto: "q", "deu ": "p", deum: "t", "deze ": "r", dezir: "1o", de\u00F1: "o", de\u0107: "v", "de\u0148 ": "y", de\u0161i: "1b", dgm: "m", dgov: "v", "dh ": "s", dhb: "s", dhuc: "t", dhui: "s", "dh\xE1 ": "s", dh\u00E9a: "s", dibah: "1q", dicho: "o", didel: "1b", didic: "t", didn: "m", didy: "t", digd: "r", digim: "1n", dikum: "1p", dinh: "p", "dinn ": 13, dintr: 15, diru: "1o", diuv: "t", dixe: "t", dixit: "t", di\u00EB: "r", di\u010De: "u", di\u0148: "1n", "di\u0161 ": "v", djie: 1, dj\u00E1: 14, dkv: "1o", dlac: "1a", dledo: "1p", dlh: "y", dlic: "n", dlis: 3, dlou: "u", dl\u00E6: "z", "dn'": "m", dnj: "v", dnou: "u", dnud: "1c", dn\u00FA: "y", "dob ": "1p", dobry: "1a", "dobs ": "1p", dochv: "1q", "does ": "m", doet: "r", "dof ": "1p", dogi: "1p", dogr: "1n", dogte: 1, "doh ": "b", "doi ": 15, doing: "m", "doit ": "l", dojn: "1o", dolgo: 14, domum: "t", "don'": "m", donis: "1o", donn\u00E9: "l", doon: "d", dopis: "u", dotie: "1d", "dott ": 14, douf: "u", dovr: "q", dovut: "q", "down ": "m", "dp ": "m", dph: "m", dpove: "y", dpow: "1a", "drak ": "z", drek: 13, drepe: 12, drick: 10, drim: 3, droit: "l", drv: "v", dr\u00E0: "q", dr\u00ED: "o", dr\u00F2: "q", dr\u00FC: "n", dr\u0103: 15, dr\u0105: "1b", dr\u012B: "1d", dsby: "z", dsels: "z", dsim: "1d", dskyl: "z", dsn: "r", dstef: "z", dsy: "z", dt\u00FD: "y", ducir: "o", duine: "s", duki: "1o", dumne: 15, dunob: "1p", dunom: "1p", duot: "1b", dupa: "b", durch: "n", dusaq: "1q", dush: 4, dusj: 12, du\u00E7: "p", du\u00FD: "1n", dvere: "y", dvl: "r", dv\u00E4: 10, "dwi ": 4, dx: 3, dygy: "1n", dykla: "1n", dyla: "1n", dymus: "t", dymy: "1n", dyry: "1n", dyti: "1b", dy\u0148: "1n", dy\u017E: "u", "dze ": "1a", dzer: "1d", dzia: "1a", "dzie ": "1a", dziel: "1a", dzir: "1d", dzis: "1a", dziw: "1a", dzte: "y", "dzu ": "1d", dzwo: "1a", dzy: "1a", dz\u0105: "1a", dz\u0119: "1a", "d\xE0 ": "q", "d\xE1-": "p", d\u00E1\u017E: "y", "d\xE2n ": "a", d\u00E3o: "p", "d\xE4l ": "1n", d\u00E4ld: "1n", d\u00E4t: 11, "d\xE5 ": 10, d\u00E5l: 10, "d\xE6 ": "t", d\u00E6k: "z", d\u00E6m: 13, d\u00E8: "l", d\u00E9an: "s", "d\xE9e ": "l", d\u00E9k: 14, d\u00E9p: "l", d\u00E9so: "l", d\u00EA: "p", d\u00EC: "q", "d\xEDa ": "o", d\u00EDas: "o", d\u00EDva: "u", d\u00EEn: "l", "d\xF2 ": "q", d\u00F4l: "y", d\u00F4v: "y", d\u00F5: "p", d\u00F6da: 10, d\u00F6rr: 10, d\u00F6w: "1n", "d\xF8r ": "z", d\u00F9: "a", d\u00FAf: "y", d\u00FAi: "s", d\u00FAv: "p", d\u00FB: "l", "d\xFC ": "1f", "d\xFCn ": "1f", d\u00FDa: "1n", d\u00FDr: 13, "d\u0101 ": "1d", d\u0103: 15, d\u0113r: "t", d\u012Bc: "t", d\u012Bm: "t", d\u012Bt: "1d", d\u0131l: "1f", d\u0131n: "1f", d\u0131\u015F: "1f", d\u0142: "1a", d\u0148: "y", d\u017Eia: "1b", d\u017Eio: "1b", d\u03B5: 3, "e''": "1q", "e'b": "1q", "e'c": "1q", "e'h": "1q", "e'm": "1q", "e'p": "1q", "e're": "m", "e'w": "1q", "e-ai": 15, "e-am ": 15, "e-de ": "1n", "e-y": "m", "eab ": "1c", eabh: "s", eadu: "1c", eady: "m", eae: "t", eally: "m", eanga: "s", "eann ": "s", eanna: "s", eard: "m", "earr ": "s", "ears ": "m", easc: 15, "ease ": "m", easo: "m", easy: "m", eauco: "l", eaun: 15, eave: "m", eaw: "m", ea\u00E7: "p", ea\u00F1: "o", "eb-": 3, ebalo: "v", "ebie ": "1a", ebih: "b", ebok: 12, ebudu: "u", "ebui ": 15, ebuv: "1b", ebyl: "u", eb\u00E8: "q", eb\u00EA: "p", ecchi: "q", ecco: "q", eceb: "p", ecek: "1f", eceu: "p", ecf: 3, echen: "n", ecir: "o", "ecit ": "t", eci\u00F3: "o", ecm: 3, "econ ": "1o", ecuni: "t", "ecut ": 15, ec\u00EA: "p", ec\u0103: 15, ec\u016B: "t", edang: "b", "eddu ": 3, edelj: "v", edeng: "d", edih: "b", "edil ": "1n", edink: 1, edive: "z", ediy: "1f", "edl ": "u", edn\u00ED: "u", edoj: "1o", edok\u00E1: "u", edste: "z", eduno: "1p", edzie: "1a", "ed\xF3 ": "o", "ed\xF6n ": "1p", ed\u00FD: "1n", ed\u017E: "1b", "eea ": 15, "eeb ": "1c", eedz: "1o", eeft: "r", eegi: "1c", eeksi: 11, eekt: "r", eems: "m", eerde: "r", eerli: "r", eesmu: "1d", eetj: "r", eeuw: "r", ee\u00EB: "r", efni: 13, eftir: 13, "efur ": 13, "egd ": "r", "egee ": 1, eggas: 3, eggj: 13, egimi: "1n", egini: "1n", "egit ": "t", "egja ": 13, eglio: "q", egnap: 14, egou: "p", egov: "v", egozi: "q", egrib: "1d", egrij: "r", egtig: 1, "egur ": 13, egynd: "z", egys: 14, eg\u00E9: 14, eg\u00EDte: 14, "eg\xF3 ": "o", eg\u0103: 15, ehid: "b", ehka: "b", "ehn ": "n", "ehr ": "n", ehs: "n", "eht ": "n", eh\u00F6r: "n", eh\u00F8: "z", eias: "p", eibt: "n", "eica ": "1d", eicht: "n", eidz: "1d", eife: "n", "eigu ": "1b", eikal: "1b", eikia: "1b", eikum: "1d", eilik: 1, "eing ": "m", "einn ": 13, eirra: 13, eisie: 1, eisj: "r", eitai: "1b", "eith ": "s", "eitt ": 13, eitth: 13, eius: "t", eix: "p", "eizi ": "1d", ei\u00E7: "p", ei\u010D: "1b", ei\u0161: "1b", ejdet: "z", ejich: "u", "ejl ": "z", ejlig: "z", ejor: "o", "ejr ": "z", "ejte ": "u", "ejto ": "y", ej\u00E4: 11, "ej\xED ": "u", ej\u00F3: "o", ej\u0119: "1a", "ekal ": "u", ekao: "v", ekedy: "y", "ekem ": 14, ekerj: "b", ekg: "1o", ekiy: "1f", "ekl ": "u", ekoop: 1, ekvie: "1b", ekz: "1o", ek\u00F6m: "1p", "elah ": "b", elaku: "b", elama: "b", elbs: "n", eldur: 13, "eleo ": "v", "elg ": 12, "elho ": "p", eligt: "z", eliha: "b", eliq: "t", elisk: "1d", eliy: "1f", elkee: 1, "ell-a": 3, ellom: 12, "elpi ": "1o", elqu: "l", elsda: "z", elset: "z", elski: "1a", elt\u00E4: 11, eluar: "b", elvs: 12, elyke: 1, "el\xE4 ": 11, el\u00E6: "z", el\u00E9f: "o", el\u00F8: "z", el\u012Bb: "1d", emaal: "r", emaan: 11, emban: "b", emey: "1f", emiy: "1f", emi\u015Fe: "1n", "emm ": 3, emml: 3, "emmo ": "q", emm\u00E4n: 11, "emob ": "1p", emohu: "u", "emok ": "1n", emom: "1p", "emot ": 10, empez: "o", emps: "l", empus: "t", emqu: "t", emren: 3, "emua ": "b", emud: "b", em\u00E3: "p", em\u00E6: "z", em\u00E9n: 14, em\u00F6n: "1p", em\u00FD: "u", em\u0105: "1b", "en't": "m", "en-i": 3, "ench ": "m", endn: "z", eneem: 1, enfan: "l", engse: 12, "enho ": "p", enhum: "p", eniaz: "y", "enii ": 15, eni\u00F1: "1n", enjad: "b", "enje ": "v", "enna-": 3, ennyi: 14, "enn\xE4 ": 11, "enok ": "1n", enori: "1b", entap: "1p", "enul ": 15, enx: "p", en\u00E6r: 13, en\u00EA: "l", en\u00EDa: "o", en\u00F6n: "1p", en\u0101: "1d", en\u0105: "1b", eodat: 15, eoe: "r", eoma: "v", eoo: "r", eopl: "m", eoru: "t", eow: "m", eoz: "q", "epat ": "b", "epit ": "t", epodo: "y", epoi: "p", eptal: "u", epui: "l", eqb: 3, eqq: 3, eqs: 3, "era' ": "1q", erapa: "b", erasa: "b", ereki: "1f", eretn: 14, erewe: 4, eriau: "1b", erlal: "b", ernej: "1o", ernt: "n", "eroj ": "1o", eryb: "m", eryth: "m", er\u00E0: "q", er\u00EA: "p", er\u00EC: "q", "er\xEDa ": "o", er\u00F2: "q", er\u00F9: "q", "er\xFD ": "u", er\u0101: "t", er\u0103: 15, er\u014D: "t", "es-t": "l", "es-v": "l", esago: "1p", esagt: "n", esaw: "b", "esc ": 15, escre: "p", esehe: "n", esiat: "y", esiel: 12, eskab: "z", eskry: 1, esoe: 1, esoi: "l", esok: "b", esp\u0113: "1d", esri: 3, essv: 12, ess\u00E1: "p", ess\u00E4: 11, "est-c": "l", estoy: "o", eszc: "1a", es\u00EA: 1, es\u0105: "1b", es\u012Bb: "1d", es\u0165: "y", etaja: "1c", etci: "y", etdi: "1n", ether: "m", ethin: "m", etiam: "t", etiek: "1d", etji: 1, etky: "y", etk\u00FD: "y", etmeg: "1n", etmen: "1f", etmey: "1f", etm\u00E4: "1n", etn\u00E9: 14, etob: "1p", eto\u017E: "y", etr\u00E6: "z", etsz: 14, ettba: 3, ettm: 3, ett\u00E4: 11, etyr: 12, "etzt ": "n", etzte: "n", et\u00E0: "q", et\u00F8: "z", et\u0103: 15, euch: "n", euer: "n", euil: "l", "euk ": "r", eurd: "r", eureu: "l", "eut-": "l", euts: "n", "euw ": "r", euwe: "r", eux: "l", "ev'": "q", "evad ": "1c", evaja: "1d", evaru: "1d", every: "m", "evie ": "y", eviem: "y", eviyo: "1f", evob: "1p", evoie: 15, evrai: "l", evut: "q", ev\u00E6: "z", ev\u00EDm: "u", ev\u0103: 15, ev\u010D: "y", ev\u0113: "1d", "ew'": "m", ewees: "r", eww: 3, exx: 3, ex\u00E1: "o", eyec: "1f", "eyin ": "1f", eyj: 13, "eyk ": "d", eynd: 13, eypt: 13, "eyra ": 13, ey\u00F3: "o", ezere: 4, ezinu: "1d", ezira: "1o", ezmir: 3, ezte: 14, ezur: "1o", "ezwa ": 4, ezzay: 3, ezzo: "q", ez\u00E9: 14, ez\u00F3: "o", "e\xE1 ": "s", e\u00E3: "p", "e\xE4 ": 11, e\u00E4\u00E4: 11, e\u00E5: "z", "e\xE6 ": "t", "e\xE7 ": "1f", e\u00E7a: "p", "e\xE7o ": "p", e\u00E9i: "o", e\u00E9n: "r", e\u00EBl: 1, e\u00EBn: "r", "e\xED ": "o", e\u00EDa: "o", e\u00EDb: "o", e\u00EDd: "o", e\u00EE: 15, e\u00EFn: "r", e\u00EFs: "r", e\u00F1a: "o", e\u00F1o: "o", e\u00F2: "q", e\u00F3n: "o", e\u00F5: "p", e\u00FB: "l", e\u00FD: "1n", e\u0101: "t", e\u010Dia: "1b", e\u010Do: "y", e\u010D\u00EDt: "y", e\u0111: "v", e\u0113: "1d", e\u011F: "1f", e\u012B: "t", e\u0131: "1l", e\u0142: "1a", e\u0144: "1a", e\u0148a: "y", e\u014D: "t", e\u015Fd: "1n", "e\u0165 ": "y", e\u0165a: "y", e\u016D: "1o", e\u017Ein: "1b", e\u03B3: 3, e\u03B5: 3, e\u043D: "1l", "e\u2018": "n", "f-e": "m", "f-s": "m", fabb: "q", "faci ": 15, facie: "t", facit: "t", "fai ": "q", faid: "s", "fais ": "l", "fait ": "l", faite: "l", faldt: "z", fam\u00ED: "p", fandt: "z", fanoj: "1o", faoi: "s", fap: 15, farge: 12, farlo: "q", faru: "1o", farve: "z", fasha: 4, fath: "m", fatto: "q", faut: "l", fazer: "p", fazl: "1f", "fd ": "r", fdl: "r", fdp: "r", fds: "r", "fe'": "m", fearr: "s", fecit: "t", feel: "m", fehl: "n", feic: "s", feito: "p", "fell-": 3, femme: "l", fengi: 13, fengs: 12, "few ": "m", ffn: "n", ffy: "m", fhio: "s", fh\u00E1: "s", fh\u00E9: "s", fh\u00F6: "n", ficou: "p", fidom: "1p", fid\u00F6: "1p", fiec: 15, fiest: "o", figl: "q", "fiju ": "1d", fikk: 12, fikul: "1p", filho: "p", filii: "t", filiu: "t", fimm: 13, finf: "1o", fior: "q", fip: "1o", first: "m", fish: "m", "fiu ": 15, fiut: "q", "fiz ": "p", fja: 13, fjell: 12, "fjor ": 12, fj\u00F3: 13, fj\u00F6: 13, "fk ": 3, "fk-": 3, fleni: "1p", flens: "1p", flj: 13, flum: "t", flyr: 12, flyte: 12, flyv: "z", fl\u00E9: "l", fl\u00FD: 13, fme: "n", "fn ": 13, fnv: 13, foar: 15, "fob ": "1p", fodb: "z", foed: "t", "fof ": "1p", foghl: "s", fois: "l", foje: "1o", fojo: "1o", folos: 15, foly: 14, "fom ": "1p", foram: "p", forir: "1o", "fost ": 15, foun: "m", fq: 3, fratr: "t", "frau ": "n", frazo: "1o", frenc: "m", freun: "n", frj: 13, "from ": "m", "frue ": "1o", frumo: 15, fryg: "z", "fr\xE1 ": 13, fr\u00E5: 10, fr\u00E6: 13, fr\u00E8: "l", fr\u00EC: "q", fr\u00FC: "n", fs\u00F6: 13, ftur: 13, fty: "m", fuai: "s", fuil: "s", "fuld ": "z", fuor: "q", fx: 3, fyld: "z", fylg: 13, fylt: 12, fyri: 13, fyrs: 13, f\u00E0: "q", f\u00E1m: "u", f\u00E1th: "s", f\u00E2r: 15, f\u00E3: "p", f\u00E4h: "n", f\u00E4rd: 10, f\u00E5e: "z", f\u00E5g: 10, f\u00E5n: 10, f\u00E6l: "z", f\u00E6n: "z", f\u00E7: "1f", "f\xE8 ": "q", f\u00E8r: "l", f\u00E9a: "s", f\u00E9kk: 13, f\u00EDa: "o", f\u00EE: "l", f\u00F2: "q", f\u00F3l: 13, "f\xF3r ": 13, f\u00F4: "p", f\u00F6ge: "1p", f\u00F6rb: 10, f\u00F6rk: 10, f\u00F6rlo: 10, f\u00F6rr: 10, f\u00F6rs: 10, f\u00F6rv: 10, f\u00F6r\u00E4: 10, f\u00FB: "l", f\u00FCh: "n", f\u0101: "t", f\u0103: 15, f\u0105: "1b", f\u010D: 3, f\u0113: "t", f\u0119: "1a", f\u012B: "t", f\u0131: "1f", f\u0153: "t", f\u015F: "1f", f\u016B: "t", f\u03B5: 3, "g)": "m", "g-aa": "d", "g-ar": "d", "g-n": 3, "g-us": "d", gaat: "r", gadsi: "1d", gaei: "s", gagaw: "d", "gah ": "b", "gaha ": 4, gajn: "1o", gaku: "b", galdy: "1n", galim: "1b", galiu: "1b", galvo: "1b", gamal: 13, gamit: "d", gandr: "1d", ganh: "p", ganir: 4, ganze: "n", "gao ": "v", gapy: "1n", gara\u015F: "1n", garot: "p", gar\u0161: "1d", "gasi ": "1c", gatav: "1d", gayo: "d", ga\u00F1: "o", ga\u010D: "v", gbab: "d", gca: "s", gce: "s", gco: "s", gcr: "s", gc\u00F3: "s", gdag: "d", gdp: "m", gdy: "1a", gdz: "1a", geben: "n", "gece ": "1f", gedaa: "r", geed: "1o", geef: "r", gef\u00FC: "n", gegee: 1, gegen: "n", gehen: "n", geht: "n", geh\u00F6: "n", gelec: "1f", gelj: "1n", gelyk: 1, gel\u00FD: "1n", gerag: 4, ger\u00E7: "1f", geseh: "n", geskr: 1, getur: 13, geven: "r", gezek: "1n", ge\u00EB: "r", ge\u00EF: "r", ggs: "m", gg\u00EC: "q", "gh'": "1q", "gh-": "m", "ghah ": "1q", ghaht: "1q", "ghaj ": "1q", ghajb: "1q", "ghen ": "a", ghitl: "1q", ghm: "1q", ghogh: "1q", ghoj: "1q", ghom: "1q", "ghos ": "1q", ghp: "1q", ghq: "1q", ghro: "1q", ghte: "m", ghv: "1q", gh\u00E9: "a", giao: "a", giap: "q", giare: "q", giau: "1b", "gibi ": "1f", gibt: "n", giel: "1a", giets: 1, gifa: 4, gifi: 4, gihe: 4, gihu: 4, gikk: 12, ginag: "d", ginaw: "d", gioc: "q", giorn: "q", giov: "q", gitd: "1n", gitj: "1n", "gitt ": 12, gitum: 4, giun: "q", "giv ": "z", "gi\xE1 ": "a", gi\u00EB: "r", gi\u00F1: "1n", gi\u00FA: "a", gi\u0148: "1n", gjem: 12, gjer: 12, gjet: 12, gj\u00F8: 12, gkai: "d", gkak: "d", gkei: "n", gkh: "b", gkol: "d", "gku ": "b", glai: "l", gleda: "v", glei: "n", glesk: "v", gleti: "1p", gley: 13, gliat: "q", glich: "n", glior: "q", gl\u00EA: "p", gl\u00F6m: 10, gl\u00FC: "n", gl\u0105: "1a", gmez: "1o", gmy: 13, "gnap ": 14, gnede: "z", gnm: "m", "gnya ": "b", "goan ": "a", "gob ": "1p", godin: "v", godz: "1a", goede: "r", "gof ": "1p", gogl: "q", goh: "1o", going: "m", "goj ": "1o", gojn: "1o", golol: "1p", gonsi: 10, gonti: 10, good: "m", gork: "1n", govar: "v", govo: "v", "goy ": "d", go\u015F: "1n", gpak: "d", gpal: "d", gpap: "d", gpas: "d", gq: "1q", grae: "t", gra\u00E7: "p", gra\u017E: "1b", greu: 15, gre\u0161: "v", gribu: "1d", "gr\xE1 ": "s", gr\u00E5d: 12, gr\u00E6d: "z", gr\u00E6s: "z", gr\u0101: "1d", gr\u0103: 15, gth: "m", gtige: "z", gtigt: "z", gtl: "1n", gtra: "d", gtv: 10, "gu'": "1q", "guam ": "t", gudik: "1p", gufa: 4, "guh ": "b", guien: "o", guiu: "p", guko: 4, guku: 4, gum\u00E1: 13, gunj: "b", guno: "o", "gusa ": 4, guse: "1c", "gutt ": 12, gutw: 4, guw: "d", gu\u0107: "v", gyay: "d", gye: 14, gyi: 14, gymy: "1n", gynda: "1n", gynde: "z", gynn: 12, gynt: 12, gyny: "1n", gyok: 14, gyon: 14, gysz: 14, gyu: 14, "gyz ": "1n", gyzy: "1n", gy\u00E1: 14, gy\u00E9: 14, gy\u00FC: 14, gy\u0148: "1n", gzaw: 3, "g\xA0": "n", g\u00E0: "a", "g\xE1i ": "a", g\u00E2nd: 15, g\u00E2y: "a", g\u00E3o: "p", g\u00E5n: 10, g\u00E6r: 13, g\u00E6ti: 13, g\u00E8: "l", g\u00E9e: "l", g\u00E9p: 14, "g\xED ": "o", g\u00EDa: "o", g\u00EE: "l", g\u00F2: "q", g\u00F4: "a", "g\xF6n ": "1p", g\u00F8: "z", g\u00F9: "q", "g\xFAn ": "o", g\u00FAr: "o", g\u00FCv: "1f", g\u00FCz: "1f", g\u0101t: "1d", "g\u0103 ": 15, g\u010D: "1b", g\u0113: "t", g\u012B: "t", g\u0131: "1f", g\u0142: "1a", g\u014D: "t", g\u015F: "1n", g\u017E: "1b", g\u0303: "d", "h)": "n", "haa ": 11, "habe ": "n", habla: "o", habr: "o", habt: "n", hab\u00ED: "o", hace: "o", haci: "o", haec: "t", "hafa ": 13, hagy: 14, hahta: "1q", hahv: "1q", haint: "s", hairt: "s", haith: "s", hakyk: "1n", halua: 11, hamw: 4, hanap: "d", "hanc ": "t", hangg: "d", hanh: "a", hapon: "d", "haq ": "1q", hardt: 12, harus: "b", hasha: 4, haszn: 14, hatha: "s", "haus ": "n", hause: "n", havd: "z", havia: "p", havis: "1o", "haw'": "1q", hayat: "1f", ha\u00E7an: "1n", ha\u0107: "1a", "hb ": "s", "hbe'": "1q", hbog: "1q", hcel: "y", "hcem ": "y", hces: "1a", hchu: "1q", "hci ": "u", hcia: "1a", "hdaj ": "1q", hdaq: "1q", "hdi' ": "1q", hd\u00E4: 11, "he's ": "m", heann: "s", hebb: "r", "hede ": 1, heef: "r", hefu: 13, hegar: "p", hegh: "1q", hego: "p", heic: "s", "heir ": "m", heiro: "p", heith: "s", hejm: "1o", heldu: 13, helem: "r", helse: 12, helye: 14, hemi\u015F: "1n", heniz: "1n", "heo ": "a", hepd: "1n", "here'": "m", hetom: "1p", heute: "n", "hey'": "m", heyr: 13, he\u00E7: "p", hfaca: "s", hfid: "s", hfui: "s", hge: "n", hiam: "q", "hiar ": 15, hiav: "q", hici: "o", hidu: "b", "hiel ": "1p", hierd: 1, hihi: "d", hijo: "o", hilf: "n", hims: "m", hings: "m", "hinh ": "a", "hink ": "m", hiriz: 4, hisze: 14, hiud: "q", hiya: "d", "hizo ": "o", hi\u00EA: "a", hjaj: "1q", "hjel ": "z", hj\u00E1: 13, hj\u00E4l: 10, hj\u00E6: "z", hj\u00F3: 13, "hkem ": "1c", "hku ": "b", hlaf: "n", hlag: "n", hlai: "s", hlec: "n", hlic: "n", hlieb: "y", hlj: 13, "hlog ": "s", hlos: "n", hls: "n", hlt: "n", "hlu'": "1q", hlut: 13, hl\u00E4: "n", hl\u00FA: "y", hl\u00FC: "n", hmey: "1q", hmt: "n", "hmu ": "b", "hned ": "u", hnev: "y", hnh: "n", hnl: "n", "hno ": "u", hnya: "b", "hnyt ": 11, hn\u00FA: "y", hoang: "a", hobor: 4, hobu: "1c", hodet: 12, hodia: "1o", hodie: "t", hodz: "1a", hoef: "r", hoeko: 1, "hogh ": "1q", hogy: 14, "hoh ": "1q", "hoil ": "s", "hoje ": "p", hojm: "1q", holna: 14, homb: "o", homoj: "1o", hoog: "r", hoord: "r", horf: 13, horgh: "1q", hoses: "l", houd: "r", houg: "m", "hoz ": 14, hozz: 14, ho\u00E1: "a", hqa: "1q", hqo: "1q", "hqu'": "1q", hraje: "u", hra\u00ED: "s", "hree ": "m", hreib: "n", hrer: "n", hrh: "n", hrij: "r", hring: 13, hrl: "n", "hro'": "1q", hrou: "m", hrr: "n", hrs: "n", hrt: "n", hr\u00E1l: "u", hr\u00E6: 13, hr\u00ED: "s", "hst ": "n", hste: "n", "hta'": "1q", htah: "1q", htet: "n", htiy: "1f", htnu: "1c", htud: "1c", htul: "1c", htus: "1c", ht\u00E1: "s", ht\u00E4: 11, ht\u00FA: "s", "hu' ": "1q", huai: "s", hubi: "o", hubu: "b", hugh: "1q", hugm: 13, hugsa: 13, hugu: 4, huig: "s", huine: "s", huiu: "t", huli: "d", hundo: "1o", huom: 11, huon: 11, hutl: "1q", huvu: 10, huwa: "d", "huya ": "a", hu\u00E9: "o", hvam: "1q", hvar: 13, hvera: 12, hverj: 13, hvern: 13, hvers: 13, hvid: "z", hvorn: "z", hvort: 13, hvus: "1c", hv\u00E9: "o", hwer: "n", hwh: "m", hwij: "1q", "hy'": "m", hyv: 11, hy\u00F6: 11, h\u00E0: "a", "h\xE1c ": "a", "h\xE1ch ": "a", h\u00E1in: "s", h\u00E1ir: "s", "h\xE1n ": "a", h\u00E1ng: "a", h\u00E1ny: 14, "h\xE1p ": "a", h\u00E1ro: 14, h\u00E1za: 14, h\u00E2n: "a", h\u00E2t: "l", h\u00E2u: "a", "h\xE3 ": "p", h\u00E3o: "p", h\u00E4lt: "n", "h\xE4n ": 11, h\u00E4ne: 11, "h\xE4r ": 10, h\u00E4sti: "1c", h\u00E4tte: "n", h\u00E4u: "n", h\u00E4z: "1n", h\u00E5b: "z", h\u00E5g: 10, h\u00E5l: 10, h\u00E5p: 12, h\u00E6c: "t", h\u00E6g: 13, h\u00E6n: "z", h\u00E7: "1f", h\u00E8r: "l", h\u00E9ana: "s", h\u00E9e: "l", "h\xE9p ": "a", h\u00E9rna: 13, h\u00EAm: "a", h\u00EC: "a", h\u00EDch: "a", h\u00EDnh: "a", h\u00EDo: "s", h\u00EDs: "o", h\u00EDv: 14, h\u00F2: "a", h\u00F3a: "a", "h\xF3d ": "1a", "h\xF3i ": "a", h\u00F3ng: "a", h\u00F4n: "a", h\u00F4t: "l", h\u00F5e: "p", h\u00F6c: "n", h\u00F6h: "n", h\u00F6j: 10, h\u00F6ne: "n", h\u00F6re: "n", h\u00F6v: 10, h\u00F8n: "z", h\u00F8res: 12, h\u00F8v: "z", h\u00F9: "a", h\u00FAc: "a", h\u00FAi: "s", "h\xFAn ": 13, h\u00FAsi: 13, h\u00FAt: "a", h\u00FCb: "n", h\u0101: "t", h\u0103m: "a", h\u0103n: "a", h\u0105: "1a", h\u010D: "u", h\u0119: "1a", h\u012B: "t", h\u0131: "1f", h\u0142: "1a", h\u015F: "1f", h\u0161: "y", "h\u2018": "n", "i''": "1q", "i'p": "1q", "i'w": "1q", "i-ai": 15, "i-au": 15, "i-bi": "1p", "i-d ": 3, "i-d-": 3, "i-kan": "1p", "i-y": 3, iacc: "q", iadku: "y", iae: "t", iagg: "q", "iain ": "s", iajn: "1o", iansk: "y", "iap ": "b", iapo: "t", iarra: "s", iaus: "1b", iaze: "y", ia\u00E7: "p", ia\u0107: "1a", ia\u0165: "y", "ibah ": "1q", ibaz: 4, "ibh ": "s", ibiga: "d", "ibil ": 15, ibrum: "t", "ibum ": "t", ib\u0113: "1d", icae: "t", icch: "q", icej: "1o", icheg: "1q", ici\u00F3: "o", "icka ": 10, "icou ": "p", icp: "1o", icuro: "q", icv: "1o", icz: "1a", ic\u00EDa: "o", ic\u00F2: "q", ic\u0103: 15, ic\u012B: "1d", idagi: "1c", ideac: "s", "idi\xF3 ": "o", idk: "1o", "idom ": "1p", idp: "1o", idste: "z", idup: "b", "idur ": "b", idym: "t", idzie: "1a", id\u00E3: "p", id\u00E4: 11, id\u00F2: "q", id\u00F6n: "1p", id\u00FD: "1n", id\u0113: "t", id\u012B: "1d", id\u017E: "1b", iebam: "t", ieben: "n", iebie: "1a", iebt: "n", iecar: 15, iedod: "1d", iedy: "1a", iedzi: "1a", ied\u00E4: 11, "iej ": "1a", iejs: "1a", iekv: "1b", iel\u00E4: 11, iel\u0101: "1d", iempo: "o", iempr: "o", iemy: "1a", "iep ": "r", ierdi: 1, ierdu: 15, ierno: "o", iesco: "q", "iesz ": "1a", ieszk: "1a", ies\u012B: "1d", iet\u00E4: 11, iewa: "1a", iezg: "1d", ie\u00EB: "r", ie\u0107: "1a", ie\u010Di: "1b", ie\u0165: "y", "ie\u017E ": "y", "ie\u017Ei ": "1d", "if-": 3, ifise: 4, ifiu: "q", "igal ": "1c", igard: "1o", "igd ": "r", ighaj: "1q", igho: "1q", ighr: "1q", igiet: 1, igif: 4, igih: 4, igik: 4, igimi: "1n", "igis ": "1o", igje: 12, igke: "n", iglia: "q", iglio: "q", igp: "d", igurn: "v", igust: "1c", ig\u00E5: 10, ig\u00EA: "p", "ihil ": "t", ihiy: "d", ihjel: "z", "ihm ": "n", ihmi: 11, "ihn ": "n", ihnen: "n", ihq: "1q", "ihr ": "n", "ihre ": "n", ihtn: "1c", ihts: "1c", ihug: 4, ihvad: "1q", ih\u00E5: 10, "iia ": "1c", iib: "d", iic: 15, iih: 11, "iile ": 15, iime: 11, iinn: 11, iit\u00E4: 11, iiw: "d", iiy: "d", "ij'": "1q", "ijd ": "r", ijden: "r", ijf: "r", ijge: "r", "ijk ": "r", ijke: "r", "ijn ": "r", ijna: "r", ijne: "r", ijnl: "r", ijoj: "1b", ijq: "1q", "ijt ": "r", ijve: "r", ijz: "r", ij\u00ED: "u", ij\u00FA: "y", "ik-b": "b", "ika-": "d", "ikad ": "v", ikdo: "u", ikev: 12, ikib: 4, ikiu: "1b", ikj: "r", ikny: "b", ikob: "1p", "ikoj ": "1o", "ikol ": "1p", "ikor ": 14, ikora: 4, ikrai: "1b", "ik\xE4 ": 11, "ik\xF6n ": "1p", "ik\xFCn ": "1p", "ik\u0105 ": "1b", ilbag: "z", ilbak: 12, ilece: "1f", ilegh: "1q", ilgil: "1f", "ilha ": "p", "ilho ": "p", ilhos: "p", "ilii ": "t", "ilir ": "1f", iliri: "1f", ilium: "t", iljek: "1n", illba: 10, illeu: "l", illsa: 10, ilmiy: "1f", "ilob ": "1p", iloj: "1o", "ilol ": "1p", ils\u0113: "1d", "iltu ": 13, ilye: 14, il\u00E0: "l", il\u00EA: "p", "il\xEDn ": "s", "iman-": 3, ima\u0161: "v", "imdi ": "1f", imeir: "p", imese: "1c", imish: 4, "imle ": "1f", "imod ": "z", imta: "1b", "imwe ": 4, im\u00E7: "1n", im\u00F6: "1p", "in-n": 3, inae: "t", inang: "d", "inau ": "1b", incs: 14, "ineh ": "1q", ineva: 15, ingj: 13, ingvo: "1o", ing\u00FA: "o", "inha ": "p", inhas: "p", "inho ": "p", inhv: 13, iniw: "d", "iniz ": "1f", ini\u00F1: "1n", "inle ": "1f", inmal: "n", innr: 12, inobs: "1p", "inoj ": "1o", inoms: "1p", insha: 4, inshi: 4, inteo: "s", inuga: "1c", inull: 11, "inun ": 11, "inyo ": "d", in\u00E1l: 14, "in\xE4 ": 11, in\u00EA: "p", in\u00F6n: "1p", in\u0101s: "1d", in\u0103: 15, in\u0113: "t", "io)": "1o", iocc: "q", iodat: 15, "ioj ": "1o", iojn: "1o", iony: "1a", iooni: "1c", iorno: "q", iosu: "t", ious: "m", "io\xA0": "1o", iparh: "1q", ipfu: 4, ipirk: "1b", ipov: "1o", ip\u00E4: 11, iqo: "1q", "irea ": 15, ireac: "s", irean: "s", irej: "1o", irino: "1o", irjo: 11, irju: "1c", irkli: "n", "irl ": "m", irlik: "1f", irny: "b", iroj: "1o", irong: 4, ir\u00E0: "q", ir\u00E7: "1f", "ir\xED ": "s", ir\u00F2: "q", ir\u00FD: "1n", ir\u0101: "1d", ir\u0161: "1b", "is-j": "l", isao: "v", iseen: 11, isiaj: "1a", "isid ": "1c", isiin: 11, "isip ": "d", isi\u00F3: "o", isje: "r", "iskt ": 10, isk\u0105: "1b", isly: 12, ismer: 14, "isne ": "t", isogn: "q", "isov ": "1q", issz: 14, iss\u00E4: 11, istea: "s", ist\u0113: "1d", isuu: 11, "is\xA0": "1o", is\u00E3: "p", is\u00E4: 11, is\u0103: 15, is\u0105: "1b", "it's": "m", "it-ta": 3, itaby: "1n", itanj: "v", itdi: "1n", itege: 4, itelj: "v", ithn: "s", itjek: "1n", itong: "d", itqu: "t", itt\u00E4: 11, ituma: 4, it\u00E0: "q", "it\xE4 ": 11, it\u00E4i: 11, it\u00F2: "q", it\u00F3r: "p", it\u0103: 15, it\u0119: "1b", "iua ": 15, iubi: 15, iuf: "1o", iui: "1b", "iuj ": "1o", iujn: "1o", iulo: "1o", iune: 15, "iunt ": "t", iuos: "1b", iusci: "q", iutar: "q", iutt: "q", iuu: "d", iuw: "d", iux: "t", "ivad ": "1c", "ivi'": "1q", "ivir ": "o", ivj: "1q", ivob: "1p", "ivro ": "p", ivros: "p", iv\u00E4t: 11, iv\u00F2: "q", iv\u00F6: "1p", iv\u0103: 15, iwen: 3, iwet: 3, iwin: 3, iwl: 3, iwt: 3, iwy: "1a", "iy'": "1q", iyac: "1f", iydi: "1f", iyim: "1f", iyl: "1f", iyor: "1f", iyos: "d", iyy: 3, iy\u00E1: "d", iy\u00E4: "1p", iy\u00F3: "d", izdar: "1d", izgl: "v", izman: "1d", izq: "o", izsk: "1d", izto: 14, i\u00E1c: "a", "i\xE1ng ": "a", i\u00E1o: "a", i\u00E3: "p", "i\xE6 ": "t", i\u00E7a: "p", "i\xE7in ": "1f", i\u00E7o: "p", i\u00E8m: "l", i\u00E9e: "l", "i\xE9n ": "o", "i\xE9rt ": 14, i\u00EAm: "a", i\u00EAu: "a", i\u00EBl: "r", i\u00EBn: "r", i\u00F1l: "1n", i\u00F1o: "o", i\u00F2: "q", i\u00F4: "p", i\u00F5: "p", i\u00F6p: "1p", i\u00F9: "q", i\u00FAi: "s", i\u00FAl: "s", i\u00FAnt: "s", i\u00FAp: "a", i\u00FCp: "1p", i\u00FD: "1n", "i\u0101 ": "t", i\u010Dno: "v", i\u010Do: "y", i\u010F: "u", i\u0111: "v", i\u0113: "t", i\u0119: "1a", i\u012B: "t", i\u0142: "1a", i\u014D: "t", i\u015Fti: "1f", i\u0161ei: "1b", i\u0161el: "u", i\u0161ie: "y", i\u0161ki: "1b", i\u0161p: "1b", i\u0161r: "1b", i\u0161s: "1b", i\u0161v: "1b", i\u0165: "y", "i\u016B ": "1b", i\u016Bl: "1b", i\u016Br: "1b", "i\u017E ": "u", i\u0301: "a", i\u03B3: 3, i\u03B5: 3, i\u0431: 19, i\u0432: 19, i\u0433: "1l", i\u0434: 19, i\u0437: "1l", i\u0439: 19, "i\u043A ": "1l", i\u043Bi: "1l", i\u043B\u0435: "1l", i\u043Di: "1l", i\u043D\u0434: "1l", i\u043F: "1l", i\u0440: "1l", i\u0442: 19, i\u0448: "1l", i\u04A3: "1l", "j' ": "1o", "j'i": "l", "j'y": "l", "j'\xE9": "l", "j)": "1o", "jaa ": 11, jaap: "1c", "jadi ": "b", jadz: "1d", jahr: "n", jakd: "1n", jakie: "1a", jak\u00FD: "u", jalg: "1c", janga: "b", jaok: "1c", jap\u00F3: "o", jap\u00FC: "1p", jap\u0101: "1d", jaroj: "1o", jatl: "1q", jau\u010D: "1b", jawa: "b", "jbe'": "1q", jch: "1q", jcie: "1a", jdd: "r", jdj: "r", jdt: "r", jdz: "1a", "je'": "1q", jecha: "1a", jeda: "v", "jedd ": 12, jedia: "y", jedol: "y", jeig: "1b", jejic: "u", jej\u00ED: "u", jekd: "1n", jeld: 12, "jell ": 12, jelli: 12, jelp: 12, jempe: 12, "jemy ": "1a", jenno: 12, jepa: "b", jerg: "z", jerm: "b", jerns: "z", jestl: "u", "jesz ": "1a", jetz: "n", jeun: "l", jezik: "v", je\u0161t: "u", "jf ": "r", jfa: "1o", jfd: "r", jfi: "1o", jfo: "1o", jft: "r", "jg ": "r", jgen: "r", jgt: "r", "jho ": "y", "jiem ": "1d", jies: "1d", jiet: "1d", jihv: "1q", jika: "b", jimat: "1p", jiq: "1q", jison: "1p", ji\u017E: "u", jji: 3, jkb: "r", jkd: "r", jkh: "r", jks: "r", jkt: "r", jky: "y", jls: "r", jmb: "1o", jms: "1o", jmt: "1o", jmv: "1o", jm\u00E9: "u", jnas: "1o", jnd: "r", jnf: "1o", jnh: "r", jnon: "1o", jnt: "r", jof: "1o", joit: 11, "joje ": "1b", "joka ": 11, "jome ": "1b", jonen: 12, jonge: "r", jopr: "1d", jota: 11, joue: "l", jourd: "l", jours: "l", jo\u0161: "v", "jp ": "r", jpl: "1o", jpt: "r", jqa: "1q", jqu: "1q", jrb: "1o", jret: "z", jro: "1o", jrz: "1a", jsc: "1a", "jse ": "z", jsem: "u", jsh: "r", jsj: "r", jsl: "r", jsm: "u", jso: "u", jsu: "1o", js\u0165: "y", "jtas ": "1o", jtg: "r", jtra: "y", jt\u00F3: 14, jual: "b", judar: "p", "judi ": "v", jud\u00E1: "p", jueg: "o", juht: "1c", julle: 1, julli: "r", juml: "b", jumu: "1d", juns: 15, jusq: "l", jutor: 15, juuri: 11, juz: "o", ju\u0107: "v", ju\u010D: "v", ju\u0161: "1d", jven: "r", "jwe ": 4, jwo: "r", jze: "r", "j\xA0": "1o", j\u00E0: "l", j\u00E1lf: 13, j\u00E1lp: 13, "j\xE1t ": 14, j\u00E3: "p", j\u00E4lv: 10, j\u00E4rg: "1c", j\u00E5f: 12, j\u00E6l: "z", j\u00E6r: 12, "j\xE9 ": "o", j\u00EDc: "u", j\u00EDd: "u", j\u00EDs: "u", j\u00F3p: 13, j\u00F5: "1c", j\u00F6f: 13, j\u00F6ni: "1p", j\u00F6tt: 14, j\u00F6v: 14, j\u00F8e: 12, j\u00F8k: 12, j\u00F8l: 12, j\u00F8n: 12, "j\xF8r ": 12, j\u00F8re: 12, j\u00F8rt: 12, j\u00F8t: 12, j\u00FAc: "y", j\u00FAk: 13, j\u0101: "1d", j\u0103: 15, j\u010F: "u", j\u0113: "1d", j\u0119s: "1b", j\u0131: "1f", j\u0161i: "y", j\u016Br: "1b", j\u016Bt: "1d", "k(": 3, "ka- ": "d", "kaa ": 11, "kaar ": "r", kaasa: "1c", kadar: "1f", kafij: "1d", kafo: "1o", kahit: "d", kaib: "d", kaidr: "1d", kaikk: 11, kajn: "1o", kakai: "d", kakel: 1, "kako ": "v", kaksi: 11, kalba: "1b", kald\u0131: "1f", kanil: "d", kanny: "b", kanob: "1p", kanol: "1p", kanom: "1p", kanss: 11, kanye: 4, kapab: "1o", kapet: 12, karde: "1f", karok: 14, kar\u0131: "1f", kar\u015F: "1f", kasn: "v", kasut: "1c", katd: "1n", katie: "1d", katso: 11, katz: "n", kat\u0101: "1d", kauf: "n", kayo: "d", kazo: "1o", ka\u00E7: "1f", ka\u0107: "1a", ka\u0165: "y", ka\u017Ee: "v", ka\u017Ek: "1b", "kbo ": "d", kcia: "1o", kcid: "1o", kco: "1o", "kd-": "1o", kdig: "1n", kdyb: "u", kdyg: "1n", kead: "b", kebu: "b", kedu: "b", kedv: 14, "kedy ": "y", keeg: "1c", keele: "1c", keelt: "1c", keep: "m", keju: "b", keku: "b", "kem-": 3, kemar: "b", kemba: "b", kemur: 13, kendt: "z", keney: 4, "kent-": 3, kepad: "b", kerja: "b", kerro: 11, kerto: 11, ker\u00FC: 14, kesu: "b", keyk: "d", ke\u00E4: 11, ke\u010D: 3, ke\u010F: "y", kgl: "1o", khaw: "b", khd: "m", "khi ": "a", khir: "b", khl: "u", khoa: "a", "khu ": "a", khuy: "a", "kh\xE1 ": "a", kh\u00E1c: "a", kh\u00ED: "a", kh\u00F3: "a", kh\u00F4: "a", kh\u0103: "a", "kial ": "1o", "kiam ": "1o", "kiau ": "1b", "kich ": "1a", kics: 14, "kida ": "1c", kiego: "1a", "kiek ": "1b", "kiel ": "1o", kift: "z", kigg: "z", kiito: 11, kijk: "r", kikod: "1p", kilal: "d", kims: "1f", kimw: 4, kinh: "a", "kiom ": "1o", kipet: 12, kipti: 13, kissa: 11, kiuj: "1o", kiun: "1o", kiyo: "1f", ki\u00E4: 11, ki\u00EA: "a", ki\u00EB: "r", kjed: 12, kjel: 12, kjem: 12, kjen: 12, kjer: 12, kj\u00E6: 12, kj\u00F8: 12, kkede: "z", "kkor ": 14, "kkur ": 13, kkv: "1o", klai: "1b", klary: "1n", klar\u0131: "1f", klich: "n", kligt: 10, klike: 1, klj: "v", kloc: 10, klukk: 13, kl\u00FD: "u", kl\u0101: "1d", "kl\u0105 ": "1b", kl\u0131: "1f", "kmu ": "b", "knew ": "m", knj: "v", know: "m", knyg: "1b", kn\u00EDh: "y", kocha: "1a", kodus: "1c", "koer ": "1c", koera: "1c", "kof ": "1p", "kog ": "v", kohv: "1c", koir: 11, "koks ": "1b", "kol-": "1p", koldt: "z", "kolm ": "1c", kolme: 11, kooli: "1c", korw: 4, koska: 11, kotii: 11, kots: "d", koud: "r", koulu: 11, koup: "u", koven: "z", kovr: "1o", kowa: "1a", "koze ": 4, ko\u010Dk: "u", "krai ": "1b", kratt: 10, kreda: "1o", kribi: "1o", krifa: 13, "krik ": 1, kryf: 1, kr\u00E6: "z", "ks-": "1o", ksci: "1o", ksee: 11, ksene: 12, "ksid ": "1c", ksi\u0105: "1a", ksj: 12, ksud: "b", ks\u00E4: 11, ks\u00E5: 10, ks\u00E9: 14, ks\u010D: "1b", ks\u0131: "1f", ktd: "1o", kter\u00E9: "u", ktige: 12, ktigt: 10, ktm: "1o", kt\u00F3r: "1a", kt\u0105: "1b", kt\u0131: "1f", kubik: 4, kuci: "b", kuga: 4, kugen: 4, kugi: 4, kugu: 4, kuha: "d", kuid: "1c", kuin: 11, kuir: "1o", kulay: "d", kulik: "1p", kumai: "d", kunv: "1o", kuol: 11, kurls: "1d", kutim: "1o", kuvu: 4, kuwe: "d", ku\u0107: "v", ku\u0161a: "v", kvai: "1b", kvan: "1o", kvaz: "1o", kvien: "1b", kvil: "1o", kvon: "1o", kv\u00E4: 10, kv\u00F6: 13, "kw'": 4, kwam: "r", kwig: 4, kwiy: 4, kyka: "1n", kykl: "1b", kymm: 11, kysy: 11, kyto: "1b", kzam: "1o", kzis: "1o", kzo: "1o", k\u00E1b: 14, k\u00E2: "1f", k\u00E4es: "1c", k\u00E4nd: 10, k\u00E4nne: 10, k\u00E4v: 11, k\u00E4y: 11, k\u00E4\u00E4: 11, k\u00E5p: 10, k\u00E5t: 12, k\u00E6l: "z", k\u00E6m: "z", k\u00E6re: "z", k\u00E6rl: "z", k\u00E7a: "1f", k\u00E9n: 14, k\u00E9p: 14, k\u00E9r: 14, k\u00E9s: 14, k\u00E9t: 14, k\u00EA: "a", k\u00EC: "a", k\u00EDnh: "a", k\u00EDv: 14, k\u00F3la: 13, k\u00F4: "y", k\u00F5: "1c", "k\xF6 ": 11, k\u00F6mo: "1p", k\u00F6m\u00F6: "1p", k\u00F6nne: "n", k\u00F6ny: 14, k\u00F6pa: 10, k\u00F6ve: 14, k\u00F6z: 14, k\u00F8b: "z", k\u00F8d: "z", k\u00F8k: "z", k\u00F8l: "z", k\u00F8n: "z", k\u00F8r: "z", k\u00FAp: "y", k\u00FB: "1f", k\u00FCc: "n", k\u00FCh: "n", k\u00FCsi: "1c", k\u00FC\u00E7: "1f", k\u00FDa: "1n", k\u00FDr: 13, k\u0101: "1d", k\u010D: "1b", k\u0119s: "1b", k\u0131: "1f", k\u0142: "1a", k\u014D: "n", k\u015F: "1f", k\u0161t: "1b", "l'f": "q", "l'ul": "q", "l'\xE9": "l", "l-v": "1o", laats: "r", labai: "1b", labh: "s", labob: "1p", labol: "1p", labom: "1p", "labs ": "1d", lacak: "1f", lacc: "q", laet: "t", lagd: "z", laiko: "1b", laiks: "1d", laim\u012B: "1d", laiss: "l", lajn: "1o", lakuk: "b", lalak: "d", "lalu ": "b", "lamt ": 3, landy: "1n", lan\u0131: "1f", larak: "1f", larym: "1n", lasci: "q", lasj: 12, latik: "1p", laub: "n", lauf: "n", lauki: "1b", la\u00ED: "s", la\u0165: "y", lb\u0105: "1b", lchr: "t", lcos: "q", lcs: 14, lcun: "q", ldib: "1c", ldies: "1d", ldiva: "1c", ldrei: 13, ldse: "1c", lduk: "1f", "ldym ": "1n", learn: "m", lease: "m", "lebo ": "y", lebt: "n", lecat: 15, "legh ": "1q", lehet: 14, lehr: "n", leich: "n", leili: 12, "leks ": "1c", lek\u00E1: "y", lembr: "p", lemok: "1n", lem\u00F6: "1p", lenok: "1n", leor: "s", lepie: "1a", lerni: "1o", "lesz ": 14, letz: "n", "lewe ": 1, leyl: "1f", "lez-": "l", le\u00F1: "o", "lf-": "m", lfaci: "1o", lfd: "r", lfru: "1o", lfv: "r", lfw: "m", lgiv: "z", lgj: 13, lgoz: 14, lgui: "o", "lgum ": "p", lguna: "o", lgyt: "1b", lg\u00FA: "o", "lh ": "1q", "lh'": "1q", lhad: "p", "lhar ": "p", "lhas ": "p", lhb: "1q", lhd: "1q", lhl: "1q", lhm: "1q", lhor: "p", "lhoy ": "1q", lhp: "1q", lhq: "1q", lht: "1q", lhw: "1q", "li' ": "1q", "li-b": "1p", "li-v": "1p", liain: "s", liaj: "1o", liau: "1b", libru: "t", licet: "t", "lich ": "n", licka: 10, "lid\xE9 ": "u", lid\u00ED: "u", liebe: "n", lieci: "1d", lieft: "r", lieko: "y", lihat: "b", lihi: "d", liian: 11, lijk: "r", lijv: "r", likde: "1n", "likk ": 12, lil\u00E4: "1p", "linh ": "a", "liom ": "s", littl: "m", lit\u00E9: "l", livat: 11, livro: "p", liyd: "1f", liyo: "1f", li\u00E8: "l", li\u00EA: "a", li\u00EB: "r", li\u010Dn: "v", li\u016B: "1b", "ljer ": 10, "lji ": "v", ljiv: "v", ljn: "v", ljub: "v", ljudi: "v", lj\u00E1: 14, lj\u00F3: 13, lj\u00FA: 13, lkaar: "r", lkaj: "1o", lkf: "1o", lkj: "1o", lkk: 11, lkoz: 14, lkste: "1d", lk\u00E4: 11, lk\u00FD: "u", "ll'a": "q", "ll'e": "q", "ll'o": "q", "ll'u": "q", "ll-as": 3, llae: "t", llbak: 10, "llde ": 10, lliu: "t", llogh: "1q", lloin: 11, lltaf: 13, llz: "n", "ll\xE4 ": 11, ll\u00E5: 10, "ll\xED ": "o", ll\u00F2: "q", lnk: "y", lnov: "1o", lnud: "1c", lnya: "b", ln\u00ED: "u", ln\u0131: "1f", "lobs ": "1p", loce: "q", locui: 15, lodho: "1q", lodni: "1q", "lodu ": "1d", loed: "r", loem: "r", "logh ": "1q", lojmi: "1q", lojn: "1o", "loms ": "1p", loob: "d", looma: "1c", louh: "u", "love ": "m", lovek: "y", lpp: 11, lr\u00E4: 10, lsdag: "z", lsj: "r", lsked: "z", lsn: "r", lstub: "r", "lsz ": 14, ltaj: "1o", "ltak ": 14, ltc: 15, ltema: 1, ltij: "r", "ltum ": "t", ltyd: 1, lt\u00E0: "q", "lt\xE4 ": 11, lt\u00F2: "q", lt\u0103: 15, "lu' ": "1q", luais: 11, ludz: "1a", "luh ": "b", lukka: 13, lukm: "1n", lumea: 15, lurer: 12, lusj: 12, "lutt ": 12, luul: 11, luvil: "u", luvit: "u", luvo: "1o", lu\u00E7: "p", lu\u0148: "1n", lvoja: "1b", lvoju: "1b", lv\u00E4: 11, lv\u00ED: "o", lv\u00F2: "q", lv\u0113: "1d", lyck: 10, lydy: "1n", lygy: "1n", lyj: "1b", "lyke ": 1, "lyo ": "d", "lyp ": "1n", lyver: "z", "lz ": "n", l\u00E1to: 14, l\u00E1tta: 14, "l\xE2 ": "1f", l\u00E2ng: 15, l\u00E2u: "a", l\u00E4b: "1c", l\u00E4f: "n", l\u00E4ht: 11, l\u00E4i: 11, l\u00E4na: "1p", l\u00E4ra: 10, "l\xE4sa ": 10, l\u00E4u: "n", l\u00E4x: 10, l\u00E4\u00E4: 11, l\u00E5d: 10, l\u00E5e: "z", l\u00E5te: 10, l\u00E5tt: 12, l\u00E6d: "z", l\u00E6kn: 13, l\u00E6m: 13, l\u00E6n: "z", l\u00E6se: "z", "l\xE6st ": "z", l\u00E8: "l", l\u00E9am: "s", "l\xE9e ": "l", l\u00E9fo: "o", "l\xEA ": "p", l\u00EC: "q", l\u00EDa: "o", l\u00EDcu: "o", l\u00EDg: "o", l\u00EDka: 13, l\u00EDng: "p", l\u00ED\u010D: "u", l\u00EE: "1f", l\u00F1: "1n", "l\xF2 ": "q", l\u00F6j: 10, l\u00F6mi: "1p", l\u00F6y: 11, l\u00F8b: "z", l\u00F9: "a", "l\xFAc ": "a", l\u00FAp: "y", l\u00FB: "l", l\u00FDs: 13, l\u0101v: "t", l\u0103: 15, "l\u0113 ": "1d", l\u0113s: "t", l\u011F: "1k", "l\u012B ": "t", l\u012Bd: "1d", l\u0131d: "1f", l\u0131m: "1f", l\u0131n: "1f", l\u0131s: "1f", l\u0131yo: "1f", l\u0131\u015F: "1f", l\u014D: "t", l\u0161i: "y", l\u0161\u00ED: "u", l\u03B5: 3, "m'la ": "1f", "m'n": "r", "m'u": "1f", "m'\xE8": "q", "m'\xE9": "l", "m-i": 3, "m-li": "1p", "m-v": "p", "m-y": 3, maaa: "d", maaf: "b", macch: "q", mad\u0131: "1f", "mag-": "d", magk: "d", magsa: "d", "magy ": "1n", magyn: "1n", mag\u00E1: 14, maher: 4, maiso: "l", majd: 14, majn: "1o", maj\u00ED: "u", maj\u00FA: "y", makak: "d", maken: "r", makli: 1, makta: "1f", malbo: "1o", malfe: "1o", malpl: "1o", malr: "1o", malyd: "1n", mal\u0131: "1f", "mamy ": "1a", mam\u0131: "1f", manjo: "1o", man\u0119: "1b", man\u0131: "1f", mar\u012B: "t", masih: "b", "masz ": "1a", mas\u0131: "1f", matay: "d", matuj: "u", mayr: "d", ma\u010Dia: "1b", ma\u010F: "u", ma\u0148: "1n", "ma\u0161 ": "v", ma\u0165: "y", ma\u017Ea: "1b", mbac: "b", mbali: "b", mbi\u00E9: "o", mbua: "b", mbw: 4, mb\u0103: 15, "me'r": "1q", "meam ": "t", mecu: "t", meddu: 3, medz: "y", meeld: "1c", "mees ": "1c", megim: "1n", megt: 14, megv: 14, megy: 14, meio: "p", meiro: "p", mekde: "1n", melak: "b", melho: "p", melih: "b", melm: 3, memba: "b", membu: "b", memil: "b", mempe: "b", mengg: "b", mengh: "b", menii: 15, menn\u00E4: 11, mensc: "n", menun: "b", "merg ": 15, mesia: "y", mesmo: "p", messo: "q", methi: "m", mettr: "l", meum: "t", meyi: "1f", me\u00E4: 11, "me\xF1 ": "1n", me\u017E: "1d", mf\u00F6: 10, "mga ": "d", mgr: "1o", mg\u00E5: 10, "mh ": "s", mhai: "s", mhc: "s", mhl: "u", mhn: "s", mhr: "s", mh\u00E1i: "s", mh\u00F3: "s", miaj: "1o", mibo: "1p", "mich ": "n", micus: "t", miedo: "o", miei: "q", mient: "o", miesz: "1a", mieu: "l", might: "m", migl: "q", mijn: "r", mikil: 13, mikoj: "1o", mikor: 14, mik\u00E4: 11, mimp: "b", minha: "p", "minn ": 13, minni: 13, min\u00E4: 11, misli: "v", missc: "r", miyo: "1f", "mi\xA0": "1o", mi\u00E4: 11, mi\u00E8: "l", mi\u00E9rt: 14, mj\u00F3: 13, mj\u00F6g: 13, mj\u00F6lk: 10, mlega: 13, mliek: "y", mlj: "v", mluv: "u", mmans: 10, mmede: "z", "mm\xE4n ": 11, mm\u00E4r: 11, mnak: 14, mnea: 15, mnib: "t", mniu: "t", mnj: "v", mnog: "v", mnya: "b", mn\u0103: 15, mn\u0105: "1a", "mo' ": "1q", moar: 15, moas: 15, mocho: "1a", moch\u00F3: "1a", "moct ": "u", "moe ": "r", moede: "r", moeni: 1, moest: "r", moete: "r", "mogu ": "v", mogus: "1b", "moh ": "1q", "mohl ": "u", mohol: "y", "mohu ": "u", moim: "1a", moins: "l", mojn: "1o", molim: "v", molti: "q", molto: "q", mondj: 14, mondt: 14, money: "m", monon: "1o", moont: 1, moth: "m", mox: "t", moys: "t", mo\u00E7: "p", mo\u0107: "v", mo\u017Ee: "v", mpeg: "q", mpj: "r", mpm: "1o", mprat: "q", mp\u00E4: 11, mp\u00EA: "l", mqua: "t", mque: "t", "mred ": 3, mrem: 3, mrs: "m", mself: "m", msuj: 3, "mt-": 3, "mts ": "1d", mt\u00ED: 13, "mu'": "1q", muan: "b", muba: 4, mucho: "o", mudug: 4, muert: "o", mugal: "1n", mugo: 4, muhte: "1f", muhu: 4, "muid ": "s", muist: 11, muito: "p", mujer: "o", mukh: "d", mulhe: "p", mungk: "b", munk\u00E1: 14, munsi: 4, muntu: 4, muos: "1b", "murt ": 3, musis: "1a", "muss ": "n", musst: "n", mutom: "1p", mutta: 11, muut: 11, muw: "d", mu\u0148: "1n", mvu: 4, mvy: 4, "mw'": 4, mwu: 4, myak: 4, myb: "1b", myck: 10, "mynd ": 13, myndi: 13, "myt ": "1n", myu: 3, myy: 11, my\u00F6: 11, my\u0148: "1n", m\u00E0: "a", m\u00E1ir: "s", "m\xE1r ": 14, m\u00E1rac: "s", m\u00E1riu: "y", m\u00E1y: "a", m\u00E2i: 15, m\u00E2na: 15, m\u00E2nc: 15, m\u00E2nd: 15, m\u00E3o: "p", m\u00E4g: "1n", m\u00E4i: 11, m\u00E4ngi: "1c", m\u00E4nni: 10, m\u00E4\u00E4: 11, m\u00E5d: "z", m\u00E5r: 10, m\u00E5sk: "z", m\u00E5st: 10, m\u00E5te: 12, m\u00E6n: "z", m\u00E6r: "z", m\u00E6t: 13, m\u00E7e: "1n", m\u00E8n: "l", m\u00E8r: "l", m\u00E9e: "l", "m\xE9g ": 14, "m\xE9no ": "u", m\u00EAm: "l", m\u00EDa: "o", m\u00EDm: "u", "m\xEDna ": 13, m\u00EDv: "u", m\u00ED\u0161: "u", m\u00F3j: "1a", "m\xF3r ": "s", m\u00F4r: 1, m\u00F6c: "n", m\u00F6gl: "n", m\u00F6\u00F6: "1c", m\u00F8d: "z", m\u00F8n: "z", m\u00F8t: 12, m\u00F9: "a", m\u00FAi: "s", m\u00FAn: "o", m\u00FB: "l", "m\xFC ": "1f", m\u00FCmki: "1n", m\u00FCss: "n", m\u00FCz: "1f", m\u0101c: "1d", m\u0101l: "t", m\u0101n: "t", "m\u0101s ": "t", m\u0103: 15, m\u0113r: "1d", m\u0113s: "1d", m\u012Bc: "t", m\u012Bg: "1d", m\u012Blu: "1d", m\u012Bs: "t", m\u0131s: "1f", m\u0131z: "1f", m\u0142: "1a", m\u0148: "y", m\u014D: "t", m\u015F: "1f", m\u016Bzi: "1d", m\u03B5: 3, "n'ai": "l", "n'd": "1f", "n't ": "m", "n'um": 4, "n'y": "l", "n'\xE8": "q", "n'\xE9": "l", "n-d ": 3, "n-is": 3, "n-li ": "1p", naand: 1, nabbt: 10, "naby ": 1, nadev: "1q", "nag-": "d", nagaw: "d", nagb: "d", nagk: "d", nagm: "d", nagp: "d", nags: "d", nagta: "d", "nagu ": "1c", "nagy ": 14, nagyo: 14, nahi: "d", naigh: "s", naj\u00ED: "u", nakak: "d", nakat: "d", namn: 10, namuo: "1b", "nann ": "s", napak: "d", nap\u00FC: "1p", nasj: 12, nask: "1o", natus: "t", nauc: "1a", nauj: "1b", "na\xED ": "s", na\u010Di: "v", na\u0148: "y", "na\u0161 ": "v", na\u0161ie: "y", "nc-": "1o", nci\u00F3: "o", ncoj: "1o", ncta: "t", nc\u00E2: 15, nc\u00FA: "y", nc\u0103: 15, nc\u016B: "1b", ndaf: 4, ndeng: "b", ndhed: "z", ndih: "d", ndi\u00F3: "o", ndnu: "z", ndrar: 10, ndsky: "z", "ndta ": 14, ndyg: "1n", ndyr: "1n", nd\u00E5: 10, nd\u00F2: "q", "nd\u0131 ": "1f", nd\u014D: "t", neach: "s", neav: 15, nebol: "y", neby: "u", nedok: "u", nedol: "1p", ned\u0113: "1d", neeu: "r", negoz: "q", nehbe: "1q", nehme: "n", nehov: "y", nejak: "y", nejs: "u", nej\u0161: "y", neked: 14, nekem: 14, "nekk ": 3, nemlu: "u", nemoj: "v", nem\u00F4: "y", nenhu: "p", nenia: "1o", nenio: "1o", neniu: "1o", nen\u00FD: "y", nepas: "1b", nepie: "1d", neque: "t", neue: "n", neum\u00ED: "u", nevaj: "1d", nevoi: 15, nev\u00ED: "u", next: "m", nezin: "1d", ne\u0107: "v", ne\u010F: "y", ne\u0161to: "v", nfac: "n", nfano: "1o", nft: "n", nf\u00E4: "n", nf\u00ED: "o", ngelm: 11, nggr: "b", ngh\u00E8: "a", ngiar: "q", ngik: "b", nginn: 13, ngju: 13, nglez: 15, ngny: "b", ngoan: "a", ngo\u00E1: "a", ngry: "m", nguam: "t", "nguy ": "a", "ngvo ": "1o", "ng\xE5 ": 12, "ng\xE9 ": "l", "ng\xF3n ": "a", ng\u00FAn: "o", ng\u0105: "1b", nhad: "p", nhec: "p", nheir: "p", nhl: "u", "nhor ": "p", "nhos ": "p", "nh\xE1t ": "a", nh\u00E2: "a", "nh\xE9 ": "a", "niai ": "1b", niej: "1a", nieka: "1b", nieke: "y", nieks: "1d", niene: "1a", niets: "r", niew: "1a", night: "m", nigie: 1, "niin ": 11, "nije ": "v", "nikt ": "1a", nikto: "y", "nill ": 12, "ninn ": 13, ninyo: "d", nipon: "1q", nired: "1n", nisam: "v", nish: "m", niteb: "1q", niwal: "d", niyan: "d", ni\u00E8: "l", ni\u00EB: "r", "ni\xF1 ": "1n", "ni\xF3n ": "o", ni\u0107: "1a", "ni\u010D ": "y", ni\u0148: "1n", ni\u0161t: "v", njadi: "b", njeg: "v", njel: "b", njig: "v", njor: "1o", nj\u00F3: 13, nkaan: 11, nklik: 1, nkni: 12, nkp: "1o", nkrig: "z", nkvi: "1o", "nm ": "s", "nmal ": "n", nmigo: "o", "nmu ": "b", nm\u00F6: "n", nm\u0113: "1d", nm\u0131: "1f", nn\u00E5: 12, nn\u00EA: "l", "no)": "1o", "no-li": "1p", noap: 15, nobis: "t", "nobs ": "1p", nocte: "t", "nof ": "1p", nofs: "1p", noget: "z", nogle: "z", nogo: "v", "noin ": 11, noite: "p", nojn: "1o", nokdy: "1n", nokku: 13, "nol-": "1p", nolol: "1p", nolom: "1p", "nom-": "1p", "nong ": "d", noong: "d", nopir: "1d", noriu: "1b", nosot: "o", nosso: "p", noth: "m", notik: "1d", not\u00ED: "p", noug: "m", nouv: "l", "now ": "m", "nows ": "m", nozc: "o", no\u00EB: "l", no\u0107: "v", np\u00E4: 11, "nq ": "l", nquam: "t", nr\u00ED: "o", nr\u00F8: 12, nsaml: 13, nsanl: "1f", nsegn: "q", nse\u00F1: "o", "nsj ": 12, nsje: 12, nskar: 10, nsked: "z", nskj: 12, nskyl: 12, nsog: "1o", "nssa ": 11, nsynl: 12, ns\u00E3: "p", "ns\xE4 ": 11, ns\u0103: 15, ns\u0131: "1f", ntede: "z", nteoi: "s", ntlik: 1, ntly: "m", ntoe: 1, "ntoj ": "1o", ntotd: 15, "ntou ": "p", ntq: "t", ntsu: "1c", nt\u00E0: "q", "nt\xE4 ": 11, nt\u00EC: "q", nt\u00F2: "q", nt\u00F9: "q", nt\u0103: 15, nt\u0105: "1b", nt\u012B: "t", nt\u0131: "1f", "nu-m": 15, nuest: "o", nuev: "o", "nuga ": "1c", nujo: "1o", nuju: "b", nukku: 11, nului: 15, numq: "t", nunj: "b", nunqu: "t", nuova: "q", nuqd: "1q", nusip: "1b", "nust ": "1c", "nuwe ": 1, nu\u00F1: "1n", nu\u0148: "1n", nu\u015F: "1f", nvl: "r", nvy: "m", nv\u00E4n: 10, nv\u0103: 15, nv\u0113: "t", "nwen ": 3, nwent: 3, nyaa: "b", nyene: 4, nyga: "1b", nyit: 14, nymo: "m", "nyny ": "1n", nyong: "d", "nyp ": "1n", "nys ": "1b", nyth: "m", nyuma: 4, nyv: 14, "nywa ": 4, ny\u00E1: 14, ny\u00E9: 14, ny\u0148: "1n", nzio: "q", nzir: 4, nzob: 4, nzok: 4, nz\u00F6s: "n", "n\xAD": "n", n\u00E0: "a", n\u00E4da: "1c", n\u00E4dip: "1n", n\u00E4gi: "1c", n\u00E4hi: "1n", n\u00E4k: 11, n\u00E4me: "1n", n\u00E4y: 11, n\u00E4\u00E4: 11, n\u00E4\u00E7: "1n", n\u00E5g: 10, n\u00E7ai: "l", n\u00E7ar: "p", n\u00E7as: "p", n\u00E8: "l", n\u00E9e: "l", n\u00E9k: 14, "n\xE9l ": 14, n\u00E9z: 14, n\u00EC: "q", "n\xEDa ": "o", "n\xEDl ": "s", n\u00EDo: "s", n\u00EDz: "u", n\u00ED\u017E: "u", n\u00F2: "q", n\u00F3i: "a", n\u00F3ng: "a", "n\xF3s ": "p", n\u00F3tt: 13, n\u00F5: "1c", n\u00F6a: 10, n\u00F6j: 10, "n\xF8 ": 12, n\u00F8dt: "z", n\u00F8e: 12, n\u00F8g: "z", n\u00F8k: 12, n\u00F8t: 12, n\u00F9: "q", n\u00FAa: "o", "n\xFAi ": "a", n\u00FAna: 13, n\u00FCb: "n", n\u00FCz: "1f", n\u00FDa: "1n", n\u00FDj: 13, n\u00FDt: 13, n\u0101r: "t", "n\u0103 ": 15, n\u0103n: "a", n\u010Dia: "1b", n\u010F: "u", n\u0113m: "t", n\u0113s: "t", n\u0119s: "1b", n\u011F: "1k", "n\u012B ": "t", n\u012Bb: "1d", n\u012Bg: "1d", "n\u0131n ": "1f", n\u0131r: "1f", n\u0131y: "1f", n\u0131z: "1f", n\u0131\u015F: "1f", n\u014D: "t", n\u0153: "l", n\u03B5: 3, "n\u2018": "n", "o'm": "1q", "o'y ": "d", "o-li ": "1p", oaf: "m", "oang ": "a", oape: 15, oapt: 15, oarc: 15, "oare ": 15, oarte: 15, oastr: 15, "ob-": "1p", obair: "s", "obh ": "s", obino: "1p", obi\u0107: "1a", obob: "1p", obosi: 15, obrz: "1a", obsi: "1p", obwa: 4, ob\u00EDm: "y", ob\u00F6: "1p", ob\u00FA: "o", ob\u0105: "1a", ob\u010D: "u", ochod: "1a", ochop: "u", ochta: "s", ochva: "1q", ocm: 15, ocou: "p", ocuk: "1f", ocutu: "t", "ocy ": "1a", ocz: "1a", oc\u00EA: "p", oc\u00F2: "q", "oday ": "m", odei: "p", ode\u0161e: "u", odgo: "v", odhom: "1q", odm\u00ED: "u", "odni'": "1q", odoh: "b", "odzi ": "1a", odzie: "1a", odzin: "1a", od\u00EDv: "u", od\u0101: "1d", od\u014D: "t", od\u017E: "1b", oege: "r", "oeke ": 1, oeken: "r", oemd: "r", oeme: "r", oenie: 1, oepi: "t", oesn: "m", "oest ": "r", oeten: "r", oew: "r", ofd: "r", ofn: 13, ofw: "r", ofz: "r", "og'": "m", ogao: "v", ogap: "1n", ogeli: "r", oghe: "q", oghla: "s", oglan: "1n", oglia: "q", oglio: "q", "ogno ": "q", ogob: "1p", "ogol ": "1p", "ogry ": "1n", ogter: 1, og\u00F6: "1p", og\u0119: "1a", ohkem: "1c", "ohne ": "n", ohpu: "1q", ohvad: "1q", ohvi: "1c", ohw: "1q", "oich ": "1a", oidea: "s", oih: 11, oike: 11, oinen: 11, oirse: "s", oisas: "p", "oita ": 11, oitt: 11, oitur: "l", oix: "l", "oj-": "1o", ojau: "1b", ojego: "1a", ojf: "1o", ojh: "y", ojich: "y", ojie: "1d", "ojim ": "v", ojmit: "1q", "ojn ": "1o", ojum: "1d", okazi: "1o", okkar: 13, okkr: 13, okkur: 13, okoju: "1a", "okov ": "y", oksim: "1o", "okud ": "u", okuw: "1n", okyk: "1b", okyt: "1b", ok\u00F6: "1p", "ol-li": "1p", olah: "b", olay: "1f", "oldi ": "q", "oldu ": "1f", "oleh ": "b", oletk: 11, olhe: "p", "olje ": "v", ollte: "n", olob: "1p", "olol ": "1p", olo\u010Dn: "y", "ols-": "1p", olyan: 14, ol\u00E3: "p", ol\u00EDc: "p", ol\u00F2: "q", ol\u00F6: "1p", ol\u00FD: "1n", "om'la": "1f", "om's ": "m", omae: "t", omase: "1p", omaso: "1o", omdat: "r", ometh: "m", omey: 4, omhet: 12, omigo: "p", ominc: "q", ominn: 13, ominu: "t", ommt: "n", omnes: "t", omoct: "u", "omoj ": "1o", omow: "1a", omui: "1b", om\u00EDn\u00E1: "u", om\u00F4: "y", om\u00FA: "o", om\u0101: "1d", om\u0105: "1b", onaic: "s", ondta: 14, onlar: "1f", only: "m", onmig: "o", onnt: "n", "onn\xE9 ": "l", onoce: "o", onoci: "o", ontli: 1, "onun ": "1f", onye: 4, on\u00EA: "p", ooda: "1c", "oog ": "r", ooie: "r", ooke: "m", oola: "1c", "oong ": "d", "oont ": "r", oontl: 1, oopt: "r", oorz: "r", oovi: "1c", opett: 11, opf\u00F8: "z", opirk: "1d", opisk: 11, "ople ": "m", oppd: 12, oppg: 12, opph: 12, "oppo ": "q", oppta: 12, oppv: 12, "op\u0101 ": "1d", ora\u00E7: "p", ordm: 12, "ordt ": "r", ordum: "1f", "orgh ": "1q", "oril ": "y", "oriu ": "1b", orkia: 3, orlar: "1f", ortoj: "1o", orund: "1f", "oruz ": "1f", "or\xA0": "1o", or\u00E5: "z", or\u00E6: "z", or\u00EC: "q", or\u00EDa: "o", or\u00EDm: "y", or\u00EDte: "y", or\u00F2: "q", or\u00FD: "y", or\u0103: 15, "os'h": "q", osaa: 11, osao: "v", "osc ": 15, oslou: "u", ossia: "q", ossz: 14, oss\u00ED: "p", ostaw: "1a", osus: "t", os\u00FA: "s", os\u0165: "y", otain: 11, otde: 15, "oth ": "m", otow: "1a", oto\u017E: "u", "otra ": "o", "otre ": "l", otriv: 15, "otro ": "o", otros: "o", otsu: "1c", otui: "t", "otul ": 15, otyr: "1n", ot\u00EDc: "p", ot\u00F2: "q", "ou'": "m", "ou-s": "p", "ouco ": "p", oudt: "r", ouers: 1, ouf\u00E1: "u", ough: "m", ouhl: "u", ouho: "u", oujo: "l", oulai: "l", ould: "m", oupit: "u", ourq: "l", ourr: "l", outro: "p", ouvel: "l", ouw: "r", ouzs: "u", ou\u00E7: "p", ou\u00E9: "l", ou\u010D: "u", ou\u0161: "u", "ov-": "1o", ovare: "q", ovbe: "1q", ovde: "v", ove\u010F: "y", ovg: "1o", ovnak: "y", ovri: "1o", ovv: "q", ov\u00F2: "q", ov\u00FA: "y", ov\u00FC: "1p", "ow'": "m", "ow-": "m", owani: "1a", owany: "1a", owd: "m", owed: "m", owf: "m", owh: "m", "owi ": "1a", owied: "1a", owini: "1a", owinn: "1a", owm: "m", owod: "1a", oyf: "m", oyn: "1f", oyse: "t", oyuf: "1p", oyun: "1f", oy\u00E9: "l", oy\u00F3: "o", ozmaw: "1a", "ozni ": 14, ozpr\u00E1: "y", ozri: "y", ozw: "1a", "o\xA0e": "1o", o\u00E0: "a", o\u00E1i: "a", o\u00E1n: "a", o\u00E5: 10, o\u00E7a: "p", o\u00E7o: "p", o\u00EA: "l", "o\xED ": "o", o\u00EDc: "s", o\u00EDr: "o", o\u00EE: "l", o\u00F1o: "o", o\u00F9: "l", o\u00FB: "l", o\u00FD: "1n", o\u0103: "a", "o\u010D ": "u", "o\u010Dka ": "u", o\u010Dnos: "y", o\u010Du: "y", o\u0111: "v", o\u011F: "1f", o\u0142: "1a", o\u0144: "1a", o\u015Fl: "1f", "o\u0161 ": "v", o\u0161an: "1d", o\u0165: "u", o\u016D: "1o", o\u017Ee\u0161: "v", "o\u017Eno ": "y", o\u0301: "a", "o\u2082": "n", "p's": "m", "p-j": "1o", "p-u": "d", "pa' ": "1q", "pa-a": "b", paano: "d", pabb: 13, pabo: "d", pad\u00E1: "u", paes: "q", "pag ": "d", "pag-": "d", pagb: "d", "pagh ": "1q", pagk: "d", pagm: "d", pagp: "d", pags: "d", pagt: "d", paldi: "1d", paljo: 11, palju: "1c", palun: "1c", pam\u00E4: "y", panga: "d", panh: "p", papra: "1b", pasak: "1b", pasir: "1b", pass\u00E9: "l", pas\u00F3: "o", pauc: "t", paur: "q", pavy: "1b", pazz: "q", pa\u00F1: "o", pa\u0165: "y", pa\u017Ei: "1b", "pbe'": "1q", pbu: "d", pcs: 14, "pde ": "1n", pdo: "1o", pdy: "1n", "peak ": "m", pecun: "t", pegn: "q", peker: "b", pekn: "y", pelob: "1p", pel\u00ED: "o", penia: "y", pen\u00F6: "1p", peop: "m", pergu: "p", perlu: "b", pesie: 12, petaj: "1c", "peur ": "l", "peut ": "l", pevo: "q", pewn: "1a", pex: "t", pe\u00E4: 11, pe\u00F1: "o", pe\u00F3: "o", pe\u0148: "y", "pf ": "n", pfl: "n", pft: "n", pfuz: 4, pgu: "1o", phim: "a", phn: "m", phong: "a", phs: "m", ph\u00E1: "a", ph\u00E9p: "a", ph\u00EA: "a", ph\u00ED: "a", ph\u00FA: "a", piace: "q", pierw: "1a", pieti: "1d", pieva: "y", piii: 15, pijn: "r", pijt: "r", pikol: "1p", pinag: "d", pinak: "d", pinig: "1b", pin\u0101: "1d", piov: "q", pistu: "t", pitk: 11, pi\u00E8: "l", pi\u00F1: "o", pi\u0161e: "v", plaas: 1, plaat: "r", plads: "z", plauk: "1b", plava: "u", pleas: "m", pleu: "l", plj: "v", plne: "y", pl\u00E1v: "y", pl\u00E2n: 15, pl\u00E5: 10, pl\u00F8s: 12, "pm ": "m", "po-": "1o", poat: 15, "pode ": "p", pogle: "v", poik: 11, pojk: 10, pokud: "u", pole\u010D: "u", poria: "y", potp: "v", potri: 15, pouco: "p", pouv: "l", povas: "1o", povie: "y", povis: "1o", povus: "1o", powi: "1a", powo: "1a", pozer: "y", pozr: "y", po\u00E8: "l", po\u010F: "y", ppade: 10, ppda: 12, ppf\u00F8: 12, ppga: 12, ppme: 12, ppna: 10, pptag: 10, pptat: 12, ppva: 12, pq: "1q", pracy: "1a", prans: "d", prawi: "1a", "prea ": 15, preek: "r", preke: "r", prekv: "y", priec: "1d", prie\u0161: "1b", pri\u010D: "v", pri\u0161: "y", "prog ": "z", proks: "1o", proov: "1c", prosj: 12, prosz: "1a", prowa: "1a", prz: "1a", pr\u00E0: "q", pr\u00E8: "l", pr\u00E9c: "l", pr\u00E9f: "l", pr\u00EC: "q", pr\u00EDd: "y", pr\u00EDl: "y", pr\u00EDs: "y", pr\u00F2: "q", pr\u0101: "1d", "psal ": "u", psl: "r", ptatt: 12, ptea: 15, ptum: "t", pt\u0103: 15, pt\u0131: "1f", "pu'": "1q", "pu-": "b", pubb: "q", pueb: "o", pued: "o", puell: "t", "puer ": "t", pueri: "t", puest: "o", "puh ": "1q", puhu: 11, "puis ": "l", pulch: "t", pulks: "1d", pumun: "d", puny: "b", puoi: "q", puq: "1q", purni: 13, purte: 12, putea: 15, putut: 15, puud: "1c", puwe: "d", pu\u00E9s: "o", pu\u00F1: "o", pwe: "d", pyk: "1b", pysty: 11, pyta: "1a", pyu: "d", pyy: 11, py\u00F6: 11, pza: "r", pzo: "r", p\u00E0: "q", p\u00E1in: "s", p\u00E1m: 14, p\u00E1\u010D: "y", p\u00E3: "p", "p\xE4 ": 11, p\u00E4ra: "1c", p\u00E6n: "z", p\u00E8: "l", p\u00E9e: "l", p\u00E9u: "p", p\u00EC: "q", p\u00EDm: "u", p\u00EDsa: "y", p\u00EDv: "u", p\u00F2: "q", p\u00F3j: "1a", "p\xF3n ": "o", p\u00F4d: "p", p\u00F4r: "p", p\u00F5e: "p", p\u00F6y: 11, p\u00F8k: 12, "p\xF8r ": 12, p\u00F8rg: "z", p\u00F8rr: 12, p\u00F8rs: 12, p\u00FB: "l", p\u00FCh: "1c", p\u00FCko: "1p", p\u00FDt: "y", p\u0101r: "1d", p\u0103: 15, p\u010D: "1b", p\u0113c: "1d", p\u0113l: "1d", p\u0131: "1f", p\u0142: "1a", p\u014D: "t", p\u0153: "t", p\u015F: "1f", p\u0161ie: "y", p\u017E: "1b", "q'": "1q", "qa'": "1q", qach: "1q", qag: "1q", qap: "1q", "qar'": "1q", qast: "1q", qatl: "1q", qba: 3, qbu: 3, qch: "1q", qci: 3, qdaq: "1q", qer: 3, qf: 3, qg: "1q", qime: 3, "ql-": 3, qlo: "1q", qmey: "1q", qmo: "1q", "qo'": "1q", qon: "1q", qoq: "1q", qor: "1q", qos: "1q", qp: "1q", "qq ": 3, qqe: 3, qqi: 3, qql: 3, qqr: 3, qre: 3, qri: 3, "qu' ": "1q", "qu'e": "l", "qu'i": "l", "qu'o": "l", qualq: "p", "quam ": "t", "quan ": "a", quay: "a", "qub ": "1q", quch: "1q", quela: "p", quien: "o", quitu: "t", quod: "t", "quoi ": "l", quom: "t", "quot ": "t", qup: "1q", quu: "t", quy: "a", qu\u00E1n: "a", "qu\xED ": "o", qu\u00FD: "a", qu\u0101: "t", qv: "1q", qwi: "1q", q\u00E4: "1k", q\u00E7: "1k", q\u00FB: "l", q\u0131: "1k", q\u03B5: 3, "r-a ": 3, "r-o ": 15, "r-un": 15, rabah: "d", raci\u00F3: "o", racow: "1a", raec: "t", raeg: "1c", ragaz: "q", raiso: "l", "rakk ": 12, rakst: "1d", ranc\u00E9: "o", ransu: "1n", rasf: "q", rasha: 4, rasj: 12, rauch: "n", raue: "n", rauf: "n", rauga: "1b", ravai: "l", rawd: "1a", ra\u00E7o: "p", "ra\u0161 ": "v", ra\u0161a: "1b", rbeit: "n", rbh: "s", rbica: "b", rbj: 10, rboj: "1o", rbua: "b", rb\u0105: "1b", "rcat ": 15, rceb: "p", rcz: "1a", rc\u00F2: "q", rc\u00F3: "o", rc\u0103: 15, "rdad ": "o", rde\u015F: "1f", rdloo: 1, rdoj: "1o", rdzi: "1a", rdzo: "1a", rd\u00F2: "q", "rd\u0131 ": "1f", rd\u0131m: "1f", "re's": "m", reall: "m", rebal: "v", rebuj: "y", recut: 15, redas: "1o", regj: 12, regti: 1, reiki: "1b", rekva: "y", "ren'": "m", rench: "m", renis: "1o", renko: "1o", reod: 15, rert: 12, reska: "1o", reund: "n", "rewe ": 4, reyt: 13, rezw: 4, re\u00ED: "o", re\u00F3: "o", re\u0107: "v", re\u010D\u00ED: "y", re\u0161n: "v", rf\u00F6r: 10, rgd: "r", rgmi: "1c", rgsm: "z", rg\u0103: 15, rg\u0119: "1b", "rha'": "1q", rhad: "b", rhav: "1o", rheid: "r", riadk: "y", rian\u00E7: "p", "riau ": "1b", ribir: "o", riek\u0161: "1d", "rie\u0161 ": "1b", rigti: "z", rijd: "r", rijk: "r", rijv: "r", rij\u0105: "1b", rimei: "p", rimw: 4, rinh: "p", "rinn ": 13, rinob: "1p", rioa: 15, ripsi: "t", rispo: "q", "rit\xE9 ": "l", riusc: "q", "riy ": "1q", rizw: 4, ri\u00EB: "r", "ri\xF3 ": "o", ri\u0148: "1n", ri\u0161i: "y", ri\u0161l: "y", rjade: 10, rjoi: 11, "rju ": 13, rjuta: "1c", rj\u00F3: 13, rkert: "z", rkje: 12, rklic: "n", rklig: 10, "rkti ": "1b", rlalu: "b", rlare: "q", rlden: 10, rlega: 13, rlf: "m", rliec: "1d", rlih: "b", rlij: "r", rlikt: "1f", rlora: 10, rlosi: 1, rl\u00E5: 10, rl\u00F2: "q", rmk: "1o", rm\u00E3: "p", rm\u00EC: "q", rm\u00F2: "q", "rnah ": "b", rnejo: "1o", rnsy: "z", rn\u00E5: "z", roap: 15, "rob\xED ": "y", rodz: "1a", "rois ": "l", rojn: "1o", rokov: "y", rongo: 4, roppo: "q", roru: "t", rosje: 12, roun: "m", rouve: "l", "row ": "m", rowad: "1a", "ro\xA0": "1o", rpik: "b", rqe: 3, rquo: "l", rrz: 3, rr\u00E0: "q", rr\u00E6: "t", rr\u00F2: "q", rself: "m", rsih: "b", rskel: "z", rskj: 12, rsoa: 15, rsq: "l", rsteh: "n", rstmi: "r", rsuc: "n", "rsun ": "1f", rs\u00E6t: "z", rs\u00F6k: 10, "rt-n": 3, "rtea ": 15, rteld: "r", rtfar: 10, rth\u00E1i: "s", rtuu: "t", rtyt: 1, rt\u00E0: "q", rt\u00EC: "q", rt\u00F2: "q", rt\u00F9: "q", rt\u0103: 15, ruger: "z", rugsa: "1n", ruker: 12, rumah: "b", rvits: 11, rvl: "r", rv\u00E4: 10, rv\u00E5: 10, rv\u00FD: "y", rwh: "m", rws: "1a", rwys: 1, "ry'n": "1f", ryam: 4, ryar: 4, ryaw: 4, rybo: "m", ryde: "z", "ryf ": 1, ryge: "z", rygt: "z", ryhe: 1, rymy: "1n", "ryna ": "1n", "ryp ": "1n", ryti: "1b", ry\u0148: "1n", ry\u017E: "1b", rzeb: "1a", rzec: "1a", rzep: "1a", rzew: "1a", rzez: "1a", rziu: 15, rzt: "n", rzym: "1a", rz\u00E4: "n", rz\u0105: "1a", rz\u0119: "1a", "r\xAD": "n", "r\xE1-": "p", r\u00E1ce: "u", "r\xE1da ": "u", "r\xE1di ": "u", "r\xE1i ": "a", r\u00E2nd: 15, r\u00E2s: 15, r\u00E3: "p", r\u00E4ck: 10, r\u00E4ff: 10, r\u00E4g: "n", r\u00E4u: "n", r\u00E4\u00E4ki: "1c", r\u00E5b: "z", r\u00E5g: 10, r\u00E5n: 10, r\u00E5re: "z", r\u00E6dd: 13, r\u00E6de: "z", r\u00E6f: "z", r\u00E6kk: "z", r\u00E6l: "z", "r\xE6t ": "z", r\u00E6v: "z", r\u00E7e: "1f", "r\xE8 ": "q", r\u00E8r: "l", "r\xE9e ": "l", r\u00E9po: "l", r\u00E9tt: 13, r\u00EDan: "o", r\u00EDas: "o", r\u00EDde: "y", r\u00EDli\u0161: "y", "r\xEDm ": "y", r\u00EDoc: "s", r\u00EDp: "y", "r\xEDte ": "y", r\u00EDv: "p", r\u00ED\u0161: "y", r\u00ED\u017E: "y", r\u00F3ci: "1a", r\u00F4l: "l", r\u00F6j: 10, r\u00F8g: "z", r\u00F8t: 12, "r\xF9 ": "q", r\u00FAi: 13, r\u00FB: "l", r\u00FCf: "n", r\u00FCn\u00FC: "1f", r\u00FDa: "1n", r\u00FDl: "u", r\u0101d: "1d", r\u0101v: "t", "r\u0103 ": 15, r\u010Dite: "y", r\u0113d: "t", r\u0113t: "1d", r\u0119s: "1b", r\u011F: "1k", r\u012Bg: "1d", "r\u012Bs ": "1d", r\u012Bt: "1d", r\u0131l: "1f", r\u0131m: "1f", r\u0131n\u0131: "1f", r\u0131y: "1f", r\u0142: "1a", r\u014Ds: "t", r\u0153: "t", r\u016Bk: "1b", r\u03B5: 3, s$: "p", "s'es": "l", "s'il": "l", "s'o": "l", "s's": "m", "s'\xE8": "q", "s'\xE9": "l", "s-au": 15, "s-d-": 3, "s-li": "1p", "s-o ": 15, "s-vo": "l", saab: "1c", "saam ": 1, sadec: "1f", "sae ": "t", sagat: "1n", sagd: "z", sagol: "1p", sagte: "n", sag\u00F6: "1p", "sair ": "p", saiu: "p", "saja ": "b", sakya: "d", sakyk: "1b", samoc: "1a", sanns: 12, sanoi: 11, san\u0131: "1f", saoi: "s", sapev: "q", sapro: "1d", sareb: "q", sasak: "d", sasj: 12, satz: "n", sat\u0131: "1f", savoi: "l", sawal: 3, "says ": "m", sa\u00FA: "p", sa\u0148: "1n", sa\u0165: "y", sbag: "q", "sbe' ": "1q", sceu: "p", schap: "r", schic: "n", schij: "r", schla: "n", schle: "n", schli: "n", schne: "n", scht: "n", schwi: "n", scieb: "t", sciis: "1o", "scit ": "t", scoil: "s", scors: "q", scoz: "q", screv: "p", scuc: "o", "scut ": 15, scuz: 15, "scy ": "1a", sc\u00FA: "o", sc\u0103: 15, sc\u012B: "t", seac: "s", "seba ": "y", sebel: "b", sebli: 1, sebua: "b", seb\u00E4: "1n", segga: 3, segir: 13, segj: 13, segz: 3, seg\u00EDt: 14, seker: 1, selal: "b", selki: 3, selma: 3, selsd: "z", semai: "l", semaj: "1o", semua: "b", seora: "b", sesua: "b", setia: "b", setz: "n", "seu ": "p", "seul ": "l", seule: "l", "seun ": 1, "sevi ": "1d", seviy: "1f", sevo: "1p", "sez-": "l", se\u0107: "v", sfy: "m", sf\u00E2: 15, sgv: "1o", "sh-": "m", "sha'": "1q", shaka: 4, shash: 4, "she'": "m", shed: "m", shira: 4, shn: "m", "sho ": 4, shob: 4, shoul: "m", shur: 4, siac: "y", siamo: "q", siap: "b", sibh: "s", "sibi'": "1q", "sich ": "n", sicht: "n", sicur: "q", sids: "z", sieh: "n", siemp: "o", sievi: "1d", siia: "1c", "sikk ": 12, silma: "1c", sinab: "d", "sinh ": "a", siniz: "1f", sinj: "1o", sinsh: 4, sinud: "1c", sinz: 4, sin\u00E4: 11, sioo: "1c", sipir: "1b", sisy: "d", "sisz ": "1a", "sit-t": 3, sitik: "1b", sitk: 11, sitz: "n", "siya ": "d", siyan: "d", "si\xE4 ": 11, si\u00E8: "l", si\u00EB: "r", si\u00F3n: "o", si\u00FA: "s", si\u0148: "1n", si\u016B: "1b", si\u017E: "1b", sjeb: "r", sjek: 12, sjok: 12, "sjon ": 12, sjone: 12, sjuk: 10, sjun: 10, "sj\xE1 ": 13, sj\u00E1l: 13, sj\u00E4l: 10, sj\u00E5: 12, sj\u00E6: "z", sj\u00F3: 13, sj\u00F8: 12, sj\u00FA: 13, skaan: 11, skabe: "z", skaid: "1d", skais: "1d", skait: "1b", skerm: 1, skete: "z", skieg: "1a", skipe: 12, skipt: 13, skje: 12, skool: 1, skrat: 10, skrib: "1o", sk\u00E6: "z", sk\u00ED: 13, sk\u00F3l: 13, sk\u00F8: "z", sk\u00FAs: "y", "sl ": "u", slaha: "1n", slape: "r", slegs: 1, slio: "v", sluta: 10, slyk: 12, sly\u0161: "u", sl\u0113: "1d", smaal: "1c", "smuk ": "z", smukk: "z", "sn'": "m", snab: 10, "snel ": "r", sng: "d", snill: 12, snj: 13, sn\u00E4l: 10, sn\u00F6: 10, soas: "p", sobie: "1a", soek: 1, sogno: "q", soha: 14, soir: "l", sojn: "1o", sokat: 14, sollt: "n", sonh: "p", soos: 1, soov: "1c", "sop ": "1q", sorad: "1n", sorag: "1n", sorun: "1f", sotr: "o", sotsi: "1c", soun: "m", sovb: "1q", sozin: "p", so\u0148: "1n", spava: "v", speak: "m", spela: 10, spelo: "1p", spett: "q", spiev: "y", spij: "r", spila: 13, spotk: "1a", sprac: "n", "spre ": 15, sprek: "r", spue: "o", spune: 15, spurg: "z", spurn: 13, spurt: 12, "spus ": 15, spu\u00E9: "o", "sp\xE1t ": "u", sp\u00E4t: "n", sp\u00F4: "y", sp\u00FC: "n", sp\u00FD: "y", sqe: 3, squec: "p", srb: "y", "srin ": 3, srint: 3, "ss-a": 3, ssaan: 11, ssaw: 3, ssiam: "q", ssiw: 3, ssoa: "p", ssuno: "q", ssza: 14, ssze: 14, ss\u00E0: "q", ss\u00E3: "p", "ss\xE4 ": 11, stahv: "1q", stawi: "1a", sta\u00E7: "p", steac: "s", stedi: "1f", stehe: "n", stejn: "u", steld: "r", stiyo: "1f", stkie: "1a", "stko ": "1a", "stli ": "u", stmis: "r", "stoj ": "1o", stoji: "v", stoup: "u", stq: "t", str\u00E1k: 13, stvar: "v", "stwo ": "1a", st\u00E0: "q", "st\xE4 ": 11, st\u00E4l: 10, st\u00E8: "l", st\u00EA: "p", st\u00EC: "q", st\u00F2: "q", st\u0101s: "1d", st\u0101v: "1d", st\u0103: 15, "su-": 3, "suam ": "t", suat: "b", sudah: "b", sumba: 4, sunuz: "1f", suoi: "q", surh: "1o", sutra: "v", suuda: "1c", suum: "t", "suur ": "1c", suuri: 11, su\u00E7: "1f", su\u017E: "1b", svarb: "1b", sverr: 12, sv\u00E5: 10, "sv\xE9 ": "u", sv\u00E9h: "u", sv\u00E9m: "u", sv\u00F6: 13, sv\u00FD: "u", sx: 3, syad: "d", "syg ": "z", syge: "z", sykd: 12, syke: 12, sykk: 12, synan: "1n", "syo ": "d", syy: 11, syz: "1n", sy\u00E4: 11, sy\u00F6: 11, sy\u0148: "1n", szab: 14, szak: 14, "szer ": 14, szeri: 14, szik: 14, szy: "1a", sz\u00E1: 14, sz\u00E9: 14, sz\u00ED: 14, sz\u00FCk: 14, sz\u00FCl: 14, sz\u0105: "1a", sz\u0119: "1a", "s\xAD": "n", "s\xE0 ": "q", s\u00E1ch: "a", s\u00E1go: 14, s\u00E1id: "s", s\u00E1ri: "p", "s\xE2n ": "a", s\u00E4c: "n", s\u00E4ga: 10, s\u00E4ger: 10, s\u00E4ker: 10, s\u00E4ko: "1p", s\u00E4mi: "1n", s\u00E4na: "1p", s\u00E4u: "n", s\u00E4\u00E4: 11, s\u00E5g: 10, s\u00E5l: 10, "s\xE6 ": "t", s\u00E6d: "z", "s\xE6t ": "z", s\u00E6tt: "z", s\u00E8: "l", s\u00E9e: "l", s\u00E9g: 14, s\u00EC: "q", s\u00EDnu: 13, s\u00EDo: "s", s\u00EDv: "p", s\u00F2: "q", "s\xF3c ": "a", s\u00F3lo: "o", "s\xF3ng ": "a", s\u00F5e: "p", s\u00F6ker: 10, s\u00F6kte: 10, s\u00F6\u00F6: "1c", s\u00F8d: "z", s\u00F8g: "z", s\u00F8k: 12, s\u00F8t: 12, s\u00F9: "q", s\u00FAh: "y", s\u00FAi: "s", s\u00FB: "l", s\u00FCko: "1p", s\u00FCre: "1f", s\u00FDn: 13, "s\u0103 ": 15, s\u010Di: "1b", s\u0113t: "1d", s\u0131l: "1f", "s\u0131na ": "1f", s\u0131nd: "1f", s\u0131n\u0131: "1f", s\u0131r: "1f", s\u0131zc: "1f", s\u0142: "1a", s\u0148: "u", s\u014D: "t", s\u0153: "l", s\u0165a: "y", s\u0165o: "y", s\u016Bn: "1b", s\u03B5: 3, "t'ai": "l", "t'an": "q", "t'd": "m", "t'r": "m", "t'v": "m", "t'\xE8": "q", "t-an ": 3, "t-d ": 3, "t-id": 3, "t-o ": 15, "taa ": 11, tabh: "s", tabt: "z", taci\u00F3: "o", "tady ": "u", tahab: "1c", tahad: "1c", tahak: "1c", tahun: "b", taien: "l", takov: "u", tak\u00FD: "y", "talk ": "m", talop: "1p", tambi: "o", tanno: "q", tanp: "b", tanud: "1c", tanul: 14, tanut: 11, "taon ": "d", tapah: 11, "tapi ": "b", tap\u00FC: "1p", tarap: "1n", tasid: "1c", tasj: 12, tatea: 15, tatlo: "d", tavad: "1c", "tayo ": "d", ta\u00ED: "s", ta\u00F1: "o", ta\u0165: "y", tcl: "m", tdy: "1n", teang: "s", teaz: 15, "teba ": "y", teddu: 3, teeb: "1c", teeds: "r", teff: 3, "teha ": "1c", teica: "1d", "teie ": "1c", teiku: "1d", tejto: "y", telah: "b", tenkt: 12, ten\u00E7: "p", teoir: "s", tepta: 15, "tera'": "1q", ter\u00FD: "u", tetap: "b", tettw: 3, "teu ": "p", tezm: 3, te\u00E4: 11, te\u010F: "u", te\u015F: "1f", te\u017E: "v", tf\u00F6: 10, "th-": "m", thair: "s", thang: "a", "thao ": "a", "thar ": "s", "that'": "m", thay: "a", thb: "m", thean: "s", their: "m", there: "m", "they ": "m", thfi: "s", thing: "m", think: "m", "this ": "m", thne: "s", thoi: "s", thom\u00E1: "s", thp: "m", thq: "m", thre: "m", tht: "m", "thua ": "a", thuis: "r", thuy: "a", "thu\xEA ": "a", thva: 13, thw: "m", th\u00E1ch: "a", "th\xE1i ": "a", th\u00E1n: "a", th\u00E2: "a", "th\xE8m ": "a", th\u00EA: "a", th\u00EDc: "a", th\u00F4: "a", th\u0103: "a", th\u014D: "t", tiamo: "q", tiap: "b", "tibi ": "t", tibus: "t", tidet: 3, tidur: "b", tieda: "1p", "tiem ": "1d", tiemp: "o", tierr: "o", tie\u0161: "1d", tie\u017E: "y", tijd: "r", "tikk ": 12, tilfe: 12, tillb: 10, "timp ": 15, timpu: 15, "tinh ": "a", tinha: "p", "tinn ": 13, "tiom ": "1o", tior: "t", tiskt: 10, tiuj: "1o", "tiun ": "1o", "tius ": "t", tiv\u0113: "1d", ti\u00E4: 11, ti\u00E7: "p", ti\u00E8: "l", ti\u00EA: "a", ti\u00EB: "r", "ti\xF3 ": "o", ti\u00FA: "s", "tjek ": "1n", tjent: "z", tjes: "r", tjie: 1, tjo: 10, tjue: 12, tj\u00F3: 13, tkv: "1o", tlary: "1n", tlh: "1q", tmady: "1n", tmaha: 3, tmazi: 3, "tmis ": "r", "tmu ": "b", tmur: 3, "tn'": "m", tn\u00FA: "y", "to)": "1o", toar: 15, toate: 15, "tob ": "1p", tobs: "1p", tocc: "q", "toch ": "r", today: "m", todel: 11, "toga ": "v", toimi: 11, toist: 11, toivo: 11, tojas: "1b", "toks ": "1b", tomna: 14, tomor: "m", took: "m", tooma: "1c", torul: 15, tor\u00E9: "y", "tott ": 14, totul: 15, touj: "l", toute: "l", to\u00E1: "a", to\u00F1: "o", to\u010Dn: "y", tqe: 3, "tr-": 15, tra\u00F1: "o", tra\u017E: "v", trecu: 15, tretn: "y", troed: "z", trois: "l", "trop ": "l", tropp: "q", trouv: "l", tryi: "m", trz: "1a", tr\u00E1ch: "a", tr\u00E6n: "z", tr\u00E6r: 12, tr\u00EC: "a", tr\u00F6t: 10, tr\u012Bs: "1d", tr\u016B: "1b", tsaky: "1b", tsiaa: "1c", tsio: "1c", ts\u00E9: 14, ttaa: 11, ttban: 3, tthv: 13, ttii: 11, ttmah: 3, ttq: 3, ttwa: 3, tt\u00E0: "q", tt\u00E1: 14, "tt\xE4 ": 11, tt\u00F2: "q", tt\u0131: "1f", "tu'l": "1q", "tu-s": "b", tubl: "r", tudar: "p", tudj: 14, tudod: 14, tudok: 14, tudt: 14, "tuh ": "b", "tuke ": "1c", tukse: 11, tulee: 11, tungk: "d", "tunk ": 14, tunut: 11, "tuoi ": "q", turiu: "1b", "tuse ": "1c", tutto: "q", "tuu ": 11, tuwa: "d", tu\u00E9: "l", tvarn: "v", tvik: 12, tvl: "r", tvyk: "1b", tv\u00E4: 10, tv\u00E5: 10, tv\u00ED: "u", tv\u00F6: 13, tv\u00FD: "u", twali: 3, twara: 4, tx: 3, "ty-": "m", tylk: "1a", tytj: 1, tyve: "z", tyy: 11, ty\u00E1: 14, ty\u00E4: 11, tzl: "n", "t\xE0 ": "q", "t\xE1-": "p", "t\xE1c ": "a", t\u00E1im: "s", t\u00E1o: "a", t\u00E1x: "p", t\u00E2l: 15, t\u00E2mp: 15, t\u00E2nc: "p", t\u00E2r: 15, "t\xE2t ": 15, t\u00E2y: "a", t\u00E3: "p", t\u00E4c: 10, t\u00E4he: "1c", t\u00E4m\u00E4: 11, "t\xE4na ": "1c", t\u00E4ng: 10, t\u00E4nke: 10, t\u00E4n\u00E4: 11, t\u00E4u: "n", t\u00E4y: 11, t\u00E4z: "1n", t\u00E4\u00E4: 11, t\u00E5n: 10, "t\xE6 ": "t", t\u00E6k: 13, t\u00E6l: "z", t\u00E6n: "z", t\u00E6rk: "z", t\u00E6t: "z", "t\xE8 ": "q", t\u00E8r: "l", t\u00E9e: "l", "t\xE9k ": 14, "t\xE9l ": 14, t\u00E9v: 14, "t\xEA-": "p", t\u00EAm: "p", "t\xEC ": "q", "t\xEDch ": "a", t\u00EDma: 13, t\u00ED\u017E: "u", t\u00EE: "l", "t\xF2 ": "q", "t\xF3c ": "a", "t\xF3l ": 14, t\u00F3q: "p", t\u00F3re: "1a", t\u00F4l: "y", t\u00F4t: "l", t\u00F5en: "1c", "t\xF6 ": 11, t\u00F6lv: 13, t\u00F6\u00F6t: "1c", t\u00F8v: "z", "t\xFAl ": 14, t\u00FAt: "y", "t\xFC ": "1f", "t\xFCn ": "1f", t\u00FCnk: 14, t\u00FCrg: "1c", t\u00FDa: "1n", t\u00FDd: "u", t\u00FDn: 13, t\u00FD\u017E: "y", t\u0101b: "t", t\u0101d: "1d", t\u0101r: "t", "t\u0103 ": 15, t\u0103m: 15, t\u0103n: "a", t\u0113s: "t", t\u0113v: "1d", "t\u012B ": "t", t\u012Bb: "1d", t\u012Bg: "1d", "t\u0131m ": "1f", "t\u0131n ": "1f", t\u0131\u011F\u0131: "1f", t\u0142: "1a", t\u0161i: "u", t\u0161\u00ED: "u", t\u016Bk: "1b", t\u017E: "1b", t\u03B5: 3, "t\u2018": "n", "u''": "1q", "u'a": "l", "u'b": "1q", "u'c": "1q", "u'di'": "1q", "u'es": "l", "u'il": "l", "u'lu": "1q", "u'm": "1q", "u'on": "l", "u'p": "1q", "u're": "m", "u't": "1q", "u'u": "l", "u'w": "1q", "u- ": "1o", "u-i ": 15, "u-j": "1o", "u-sa": "b", uaa: 11, uach: "s", uae: "t", uaig: "s", uaim: "s", ualc: "q", "uand ": "l", uanh: "a", uany: "b", uap: "o", uarg: "b", uase: "p", uasj: 12, "uatu ": "b", uazi: "q", ua\u00E7: "p", ubahi: 4, ubicu: "t", ubiko: 4, ubona: 4, ub\u00F2: "q", uchos: "o", ucoup: "l", "ucru ": 15, ucrur: 15, ucv: "1o", ucz: "1a", uc\u0103: 15, "udah ": "b", udiko: "1p", udiku: "1p", "udod ": 14, "udol ": "y", udp: "1o", uduga: 4, "udz ": "1d", "udzi ": "1a", udzie: "1a", ud\u00F6: "1p", ud\u00FA: "y", ud\u012B: "t", uedar: "o", uede: "o", ueir: "p", uelq: "l", uelv: "o", "ueri ": "t", ueria: "p", uerta: "o", ueva: "o", ueve: "o", uevo: "o", ue\u00E7: "p", ue\u00F1: "o", "ufan ": 3, ufh: "n", ufis: 4, ufob: "1p", ufoj: "1o", ufom: "1p", ufz: "n", uf\u00F6n: "1p", ugall: "1n", ugev: "1c", ught: "m", "ugsa ": 13, ugsat: "1n", ugu\u00EA: "p", ugw: 4, ug\u00FC: "1f", uhay: "d", "uhi ": "b", uhir: 4, uhny: "b", uhok: "d", "uhr ": "n", uhtu: "1c", "uhua ": 11, uh\u00E9: "u", uh\u00FD: "u", uibu: "t", uiero: "o", uii: "q", uike: "r", uikt: "r", uink: 11, uinqu: "t", "uis-": "l", uitur: "t", "uiu ": "p", uius: "t", uize: "r", ui\u00E7: "p", ui\u00E9n: "o", ui\u00F3: "o", "ujn ": "1o", ujour: "l", "uj\xED ": "u", uj\u00EDm: "y", uj\u00FA: "y", uj\u0119: "1a", ukia: "1b", uklar: "1f", ukora: 4, ukp: "1o", uksen: 11, ukund: 4, ukuri: 4, uk\u00E7: "1f", uk\u0161: "1b", "ulac ": 3, ulche: "t", "uld'": "m", "uleb ": "1c", "ulee ": 11, ulez: "l", ulher: "p", "ulig ": 12, uligt: "z", ulkst: "1d", "ulog ": "d", "uloj ": "1o", ulong: "d", ul\u0101: "t", umaga: "d", "umah ": "b", umele: 15, umeny: 4, umj: "1o", umoa: 15, umup: "d", umva: 4, umvir: 4, "umwe ": 4, umyt: "1n", um\u0101: "1d", um\u0105: "1b", "un'i": "q", "un'o": "q", unagi: "1c", "unc ": "t", undsk: "z", "une-": 15, unggu: "b", ungki: "b", ungko: "d", ungum: 13, "unik ": "1p", "unla ": "1f", "unn ": 12, unng: 12, unnl: 12, unns: 12, unoa: 15, "unob ": "1p", unog: "d", unol: "1p", unsj: 12, untuk: "b", unua: "1o", "unud ": "1c", unue: "1o", "unul ": 15, "unun ": "1f", unust: "1c", "unuz ": "1f", "uny ": "1n", unyw: 4, un\u00F6: "1p", un\u0101: "1d", un\u0103: 15, "uo-": "1o", "uok ": "1b", uonee: 11, uoq: "t", "uose ": "1b", uotta: 11, "uovo ": "q", uoz: "1o", uo\u0161: "1b", uppta: 10, upwi: "1q", uqda: "1q", uqm: "1q", urako: 4, urash: 4, "urd'": "l", urgt: "z", urile: 15, urime: "1b", urinn: 13, "uriu ": "1b", uri\u00F3: "o", urnar: 13, urob: "y", urrai: "l", urs\u00E4k: 10, urtig: "z", ur\u00E2: 15, ur\u00F2: "q", ur\u00FC: "n", ur\u0103: 15, ur\u0161: "1d", usap: "d", usawa: 3, usaz: 4, ushak: 4, ushik: 4, usiai: "1b", usind: "z", usipi: "1b", usisz: "1a", usste: "n", us\u00E3: "p", "utea ": 15, ute\u010D: "u", utlu: "1f", utres: "l", utsch: "n", "utse ": 4, "utto ": "q", utuh: "b", utvi: 12, ut\u00F2: "q", ut\u0103: 15, uub: "d", uude: 11, uue: "1c", "uul ": "1c", uuta: 11, uutt: 11, uuw: "d", "uvau ": "1b", uvea: "l", uvek: "v", uvell: "l", uvez: "l", "uvil ": "u", uvp: "1q", uvs: "1o", uvud: 10, uv\u00E9: "l", uv\u00ED: "u", uv\u00F6: "1p", "uw-": "r", "uwag ": "d", uwb: "r", "uwd ": "r", uweb: "d", uwede: "d", "uwen ": "r", uwg: "r", uwj: "r", uwp: "r", uwu: 4, uwv: "r", "ux-t": "l", uxor: "t", uxx: 3, "uy-": 3, uydu: "1f", uyor: "1f", uy\u00F3: "o", uzic: 15, uzir: "p", uzob: 4, uzsky: "u", uzva: "1d", uz\u00F3: "o", uz\u0161: "u", u\u00E0: "a", "u\xE1 ": "a", "u\xE1l ": "o", u\u00E1nd: "o", u\u00E1nt: "o", "u\xE2n ": "a", u\u00E3: "p", u\u00E4: "n", u\u00E6: "t", u\u00E8: "l", u\u00E9e: "l", u\u00E9l: "o", "u\xE9m ": "p", u\u00EB: "l", u\u00EC: "q", u\u00EDt: "o", u\u00EE: "l", u\u00EFn: "r", "u\xF1 ": "1n", u\u00F1a: "o", u\u00F1e: "o", u\u00F2: "q", u\u00F3: "o", u\u00F4: "a", "u\xFD ": "a", u\u00FDt: "a", u\u0101l: "t", u\u0103: 15, "u\u010De ": "v", "u\u010Dit ": "u", u\u0111: "v", u\u0113: "t", u\u012B: "t", u\u0131: "1k", u\u0142: "1a", u\u0144: "1a", "u\u0148 ": "1n", u\u014D: "t", u\u015Fm: "1f", u\u015Ft: "1f", u\u015Fy: "1n", u\u017Ed: "1b", u\u017Et: "1b", u\u0301: "a", u\u0303: "a", u\u03B3: 3, u\u03B5: 3, "v' ": "1o", "v'a": "1q", "v'\xE8": "q", "v-j": "1o", "v-z": "1o", "vaa ": 11, "vaak ": "r", "vaan ": 11, vaata: "1c", vabad: "1c", vacke: 10, "vagy ": 14, vagyo: 14, vahe: "1c", vaika: "1b", vairs: "1d", vajad: "1d", vajag: "1d", vajn: "1o", vaj\u00ED: "u", vaj\u00FA: "y", vakre: 12, valak: 14, valod: "1d", val\u00F3: 14, vanaa: 1, "vand ": "z", vanem: "1c", vanha: 11, vanj: "v", varje: 10, "varu ": "1d", vater: "n", vave: "p", "vay'": "1q", va\u00E7: "p", va\u0165: "y", va\u017Ei: "1b", "vbe'": "1q", vca: "v", vecc: "q", veces: "o", veck: 10, vec\u0101: "1d", vedie: "y", vedom: "y", "vedz ": "y", vedzt: "y", vegl: "q", vegna: 13, veie: 12, veio: "p", vejen: "z", vejr: "z", "vekk ": 12, velge: 12, velmi: "u", "ven'": "m", "venn ": 12, vennl: 12, venos: "1o", venut: "q", ven\u00E6: 13, veom: "v", "very ": "m", veryt: "m", vesz: 14, veut: "l", veva: "q", vevo: "q", vew: "m", "vez-": "l", vezet: 14, ve\u00FC: "1p", ve\u0107: "v", "ve\u010F ": "y", vgj: 12, vgr: "1o", vhen: 12, "vi' ": "1q", "viac ": "y", "viaj ": "1o", vidst: "z", vienk: "1d", "vie\u0161 ": "y", vifik: "1p", vigha: "1q", vigti: "z", vihka: "1c", vihm: "1c", viito: 15, vijat: "1q", vilob: "1p", vilol: "1p", vilom: "1p", viltu: 13, vil\u00E1: 14, vineh: "1q", vinh: "p", vinsa: 13, vipar: "1q", viq: "1q", viska: "1b", visne: "t", visov: "1q", vivir: "o", vi\u00E4: 11, vi\u00E8: "l", vi\u00EA: "a", vi\u00EB: "r", vi\u00F3: "o", vi\u0161e: "v", vlj: "v", "vn\xED ": "u", vn\u00FA: "y", "vo'": "1q", voas: 15, "vob ": "1p", vobis: "t", voet: "r", vogl: "q", vogn: "z", "voin ": 11, vojej: "y", vojic: "y", vokst: 12, volas: "1o", volev: "q", volim: "v", volj: "v", volna: 14, voms: "1p", "vona ": 13, "vond ": "r", vonde: "r", vondt: 12, "vons ": "l", vorto: "1o", vor\u00ED: "y", vostr: "q", votr: "l", voul: "l", vow: "m", vox: "t", vo\u00EB: 1, vpe: "1o", vpr: "1o", vpu: "1q", vq: "1q", vraa: "r", vraim: "l", vrais: "l", vrati: "v", "vrea ": 15, vreb: "q", vreo: 15, vrest: "q", vrij: "r", vrl: "v", "vrou ": 1, vrut: 15, vry: 1, vr\u00E0: "q", vr\u00E1t\u00ED: "u", vr\u00F2: "q", vr\u0161: "v", vub: 4, vuel: "o", vug: 4, vuoi: "q", vuol: "q", vuse: "1c", vuto: "q", vver: "q", vvis: "q", vw: "1q", "vy'": 4, vyan: 4, vyc: "u", vyey: 4, vyiy: 4, "vyko ": "1b", vyks: "1b", vyo: 4, vypa: "u", vyze: "y", vze: "1o", vzp: "u", vz\u00ED: "u", v\u00E0: "a", v\u00E1g: 14, v\u00E1la: 14, v\u00E1lt: 14, v\u00E1ro: 14, "v\xE2ng ": "a", v\u00E2nt: 15, v\u00E2r: 15, v\u00E3o: "p", "v\xE4 ": 11, v\u00E4c: 10, v\u00E4d: 10, "v\xE4g ": 10, "v\xE4ga ": "1c", v\u00E4ge: 10, v\u00E4ik: "1c", v\u00E4k: 11, "v\xE4l ": 10, v\u00E4ld: 10, v\u00E4nd: 10, v\u00E4rl: 10, "v\xE4t ": 11, v\u00E4x: 10, "v\xE5 ": 10, v\u00E5b: "z", v\u00E5k: 12, v\u00E5n: 10, "v\xE5re ": 12, v\u00E6k: "z", v\u00E6l: "z", v\u00E6m: 13, v\u00E6ri: 13, v\u00E6rk: "z", v\u00E6rr: "z", v\u00E8: "l", v\u00E9e: "l", "v\xEA ": "p", "v\xEA-": "p", "v\xEDa ": "o", "v\xEDc ": "u", v\u00EDce: "u", v\u00ED\u0161: "u", v\u00EE: "l", "v\xF2 ": "q", "v\xF3s ": "p", "v\xF6 ": 13, v\u00F9: "a", "v\xFDm ": "u", "v\u0101 ": "1d", "v\u0103 ": 15, v\u0103n: "a", v\u0105: "1b", "v\u010Da ": "y", v\u010F: "y", v\u0113l: "1d", v\u0113n: "t", v\u0113t: "1d", v\u0119: "1b", "v\u012B ": "t", v\u012Bc: "t", v\u012Bd: "t", v\u012Bs: "t", v\u0131: "1f", v\u014D: "t", v\u0153: "l", v\u015F: "1f", v\u0161et: "y", v\u016B: "1b", "w'i": 4, "w's": "m", "w'u": 4, "w-ar": "d", "w-n": 3, "w-z": "r", "wa' ": "1q", waars: "r", wabo: 4, wadz: "1a", wajen: 3, wakt: "b", "wal-": 3, wanie: "1a", wanj: 4, wansi: 3, wants: "m", "wany ": "1a", warum: "n", watc: "m", "wawe ": 4, "waya ": 3, wayen: 3, ways: "m", wa\u0107: "1a", wcz: "1a", "wda ": "1a", wdz: "1a", wd\u0119: "1a", "we'": "m", wear: "m", weest: "r", wego: "1a", weite: "n", wela: "d", welch: "n", welik: 1, "wen-": 3, weni: "n", "wenn ": "n", "wese ": 4, weten: "r", wex: 3, "what ": "m", when: "m", wher: "m", whet: "m", whic: "m", whil: "m", why: "m", "wi'": "1q", wiad: "1a", wiat: "1a", wiba: 4, widz: "1a", wiec: "1a", wiede: "n", wiedz: "1a", wiek: "1a", wiem: "1a", wierz: "1a", wiesz: "1a", wife: "m", wiga: 4, wijn: "r", wika: "d", winie: "1a", wio: "1a", wird: "n", wiriz: 4, wirk: "n", wirs: "n", "with ": "m", wiwe: 4, wi\u0105: "1a", wi\u0107: "1a", wkw: "m", wls: "m", wly: "m", "wn-": "m", wno: "1a", wnt: "m", "wo-": "m", woh: "n", woi: "1a", woj: "1a", wollt: "n", woln: "1a", "won'": "m", woont: "r", wordt: "r", worr: "m", woul: "m", wq: 3, writ: "m", wr\u00F3: "1a", wsg: "r", wsz: "1a", wth: "m", wub: 4, wund: "n", wurd: "n", wwa: 3, wwe: 3, wwu: 3, wyb: "1a", wyc: "1a", wyd: "1a", wyg: "1a", wyj: "1a", wyk: "1a", wym: "1a", "wyn ": 1, wyp: "1a", wyr: "1a", wyse: 1, w\u00E4: "n", w\u00E7: "1n", w\u00EA: 1, w\u00F3: "1a", w\u00F6: "n", w\u00FCn: "n", w\u00FCr: "n", w\u00FCs: "n", w\u00FCt: "n", w\u0105: "1a", w\u010D: 3, w\u0119: "1a", w\u0131: "1k", w\u0142: "1a", w\u03B5: 3, "x-tu": "l", "x-w": "m", xad: "p", xanh: "a", xch: "m", xd: 3, "xe-": "p", xedd: 3, xei: "p", xeru: "t", xg: "n", "xinh ": "a", xitq: "t", xk: "n", xn: 3, "xoay ": "a", xong: "a", xore: "t", xou: "p", xp\u00E9: "l", xsp: "t", xtb: "m", xth: "m", xts: "m", xty: "m", "xung ": "a", xw: 3, xxa: 3, x\u00E0: "a", x\u00E1c: "a", x\u00E1m: "o", x\u00E2: "a", x\u00E3o: "p", x\u00E4: "1k", x\u00EDc: "p", x\u00F4: "a", x\u00F5: "p", x\u00FA: "a", x\u0103: "a", x\u0113: "t", x\u0131: "1k", x\u015F: "1k", "y'm": "1q", "y'ni": "1f", "y'r": "m", "y'u": 4, "y'y": "1f", "y-f": "m", "y-g": "m", "y-i": 3, "y-o": "m", "y-u": "d", yaca: "1f", yahk: "b", yanj: 4, yan\u0131: "1f", yapab: "1f", yapac: "1f", yapma: "1f", yapt: "1f", yar\u0131: "1f", "yawe ": 4, ya\u015Fa: "1f", ya\u015F\u0131: "1f", ybk: "1a", ybod: "m", ychl: "u", ychom: "u", yci: "1a", ycka: 10, ycke: 10, yckl: 10, yckt: 10, ycz: "1a", ydl\u00ED: "u", ydz: "1a", yd\u00E4: 11, yd\u0131: "1f", yea: "m", yece: "1f", yedda: 3, yeh: 3, yej: 3, yelha: 3, yella: 3, yelv: 14, yemek: "1f", yemma: 3, yeq: 3, yernu: 3, yessa: 3, yesse: 3, yetta: 3, yettw: 3, yeu: "l", yex: 3, yezm: 3, ye\u010D: 3, yfr: "m", "yge ": "z", ygodn: "1a", ygp: 10, ygte: "z", "ygy ": "1n", ygym: "1n", yg\u0105: "1b", yhd: 11, yhm: 11, yht: 11, yh\u00E4: 11, "yi-": 3, "yid-": 3, yima: 3, "ying ": "m", yinsh: 4, "yiwe ": 4, yjac: "1a", ykar: "1n", ykat: "1n", ykdo: 12, ykeh: 12, ykj: 13, "ykk ": 12, ykku: 13, ykk\u00E4: 11, ykly: "1n", ykst: "1b", yk\u00E4: 11, yldt: "z", yldy: "1n", yledi: "1f", yleme: "1f", yley: "1f", ylko: "1a", yll\u00E4: 11, "ylt ": 12, ylyk: "1n", yl\u00FC: "1f", ymm\u00E4: 11, ymor: "m", ymyz: "1n", ym\u00E1: 14, ym\u00E4: 11, ym\u0105: "1b", yndan: "1n", ynder: "z", yndl: "z", yndt: "z", ynene: 12, ynner: 12, "ynte ": 12, ynyt: 11, yn\u00E7: "1n", yn\u0131: "1f", "yone ": "m", "yong ": "d", yordu: "1f", yorl: "1f", yorum: "1f", yoruz: "1f", yose: 4, your: "m", ypd: "1n", yrdy: "1n", yrir: 13, yrja: 13, yrma: "1n", yrn: 13, yroon: "d", yrre: "z", yrst: 13, yr\u0131: "1f", ysb: "d", yscy: "1a", ysiu: "1b", yssn: 10, ystk: "1a", yst\u00E4: 11, yszed: "1a", yszer: 14, ys\u00E4: 11, "yt-": 3, ytani: "1a", ythi: "m", "yti ": "1b", "ytis ": "1b", ytji: 1, ytoj: "1b", ytt\u00E4: 11, yt\u00E4: 11, yt\u00F6: 11, yudar: "o", yufan: 3, yufo: "1p", yuf\u00F6: "1p", yumv: 4, "yunk ": 14, yuw: 3, yvena: "1b", yvin: 11, ywh: "m", yyi: 3, yys: 11, yyt: 11, yyu: 3, yzl: "1n", y\u00E2: "1f", y\u00E8: "l", y\u00EA: "a", y\u00ED: 14, y\u00F1: "1n", y\u00F4: "l", "y\xF6 ": 11, y\u00F6h: 11, y\u00FAd: "o", y\u00FCr: "1f", y\u00FD: "1n", y\u0101: "1o", y\u0107: "1a", "y\u010D ": "u", y\u010Da: "y", y\u011F: "1k", "y\u0131 ": "1f", y\u0131m: "1f", y\u0131z: "1f", y\u0142: "1a", "y\u0148 ": "1n", y\u014D: "n", y\u015F: "1n", y\u0161e: "u", y\u0161\u00ED: "u", y\u016B: "n", "y\u017E ": "u", y\u0301: "a", y\u03B5: 3, "z'n": "r", "z'o": "q", "z-v": "l", zabad: 14, zabud: "y", zady: "1n", zaist: "v", zajtr: "y", zaj\u00ED: "u", zasu: "1a", zaud\u0113: "1d", zaws: "1a", zaye: 3, za\u00E7: "p", za\u0161t: "v", zbog: "v", "zbyt ": "1a", zcl: "o", zco: "o", zcz: "1a", zdne: "y", zd\u0131: "1f", zebu: "1a", zegd: "r", "zego ": "1a", "zegt ": "r", zehn: "n", zeig: "n", zeker: "r", "zelf ": "r", zenia: "1a", zerew: 4, "zer\xE1 ": "y", "zett ": 14, zeug: "n", zgle: "v", zgov: "v", "zich ": "r", ziec: "1a", zieh: "n", "ziek ": "r", ziet: "r", ziew: "1a", "zij ": "r", zijn: "r", zinh: "p", "zinu ": "1d", zin\u0101: "1d", ziras: "1o", zird\u0113: "1d", zisia: "1a", "zit-": 3, ziua: 15, zi\u00EB: "r", zi\u00F1: "1n", zi\u0107: "1a", zi\u0148: "1n", zmawi: "1a", zmer: 3, zmire: 3, zmirs: "1d", zna\u0161: "v", zn\u00ED: "u", "zo-": "1o", zoal: "r", zobac: "1a", zobi: 4, zoek: "r", zoh: 4, "zoj ": "1o", zojn: "1o", zond: "r", zoon: "r", zoraj: "1a", zorun: "1f", zott: 14, zoud: "r", zp\u00ED: "u", zqu: "o", zrob: "1a", zska: "1d", zs\u00E1: 14, zull: "r", zum\u00ED: "u", zung: "n", zuu: "r", zvai: "1d", zvier: "y", zv\u00ED: "u", "zwe ": 4, zwei: "n", zwem: "r", zwy: "1a", zyb: "1a", zyd: "1a", zyg: "1a", zyj: "1a", "zym ": "1a", zyma: "1a", zys: "1a", zyt: "1a", zyw: "1a", zyz: "1a", "zz'": "q", "zzo ": "q", zz\u00E1: 14, z\u00E1g: 14, z\u00E1hr: "y", z\u00E2m: 15, z\u00E3: "p", z\u00E4h: "n", z\u00E7: "1n", z\u00E8: "l", "z\xE9rt ": 14, z\u00EA: "p", z\u00EDtr: "u", z\u00F2: "q", z\u00F3l: 14, z\u00F4: "p", z\u00F5: "p", z\u00F6r: 14, z\u00F6si: "n", z\u00F6t: 14, z\u00FAc: "o", z\u00FCks: 14, z\u0101: "1d", z\u0103: 15, z\u010D: "u", z\u0113: "1d", z\u0119s: "1a", z\u012B: "1d", "z\u0131 ": "1f", z\u0131n: "1f", z\u0131r: "1f", z\u0142: "1a", z\u0165: "y", z\u03B5: 3, "{": "1q", "|": "g", "}": "1q", "\xA0=": "n", "\xA0b": "l", "\xA0es": "1o", "\xA0i": "n", "\xA0k": "1o", "\xA0ma": "1o", "\xA0mi": "1o", "\xA0o": "p", "\xA0q": "l", "\xA0u": "n", "\xA0w": "1a", "\xA0z": "1a", "\xA8": "u", \u00AA: "p", "\xAD ": "t", "\xADb": "n", "\xADd": "n", "\xADs": "n", "\xB2'": "1f", "\xB7 ": "w", "\xB7\u200B": "t", \u00BAc: "o", "\xBD ": "n", \u00DF: "n", "\xE0-": "l", \u00E0i: "a", \u00E0m: "a", \u00E0n: "a", \u00E0o: "a", \u00E0q: "p", \u00E0s: "p", \u00E0u: "a", \u00E0y: "a", "\xE0\xA0": "l", "\xE1'": 14, "\xE1-l": "p", "\xE1ba ": 14, "\xE1ban ": 14, \u00E1bb: 14, \u00E1bh: "s", \u00E1b\u00E6: 13, \u00E1b\u00F3: 14, \u00E1cs: 14, "\xE1cu ": "y", \u00E1c\u00ED: "u", \u00E1dal: "u", \u00E1dn\u00E9: "u", \u00E1dy: "u", \u00E1dz: "y", "\xE1g ": 14, \u00E1gb: 14, "\xE1got ": 14, \u00E1gua: "p", \u00E1gy: 14, \u00E1hl: "u", \u00E1hra: "y", \u00E1hug: 13, \u00E1hy: 13, \u00E1h\u00E1: "u", \u00E1il: "s", \u00E1je: "u", \u00E1js: "y", \u00E1j\u00E1: 14, \u00E1kv: 13, \u00E1lai: "s", \u00E1las: 14, \u00E1lj: 14, \u00E1lni: 14, "\xE1lom ": 14, \u00E1lpa: 13, \u00E1lta: 14, \u00E1nak: 14, "\xE1ndo ": "o", "\xE1nh ": "a", "\xE1nto ": "o", \u00E1nyo: 14, "\xE1n\xED ": "u", "\xE1o ": "a", \u00E1rach: "s", \u00E1rbo: "o", \u00E1rii: "y", "\xE1rio ": "p", "\xE1riu ": "y", \u00E1rom: 14, \u00E1ros: 14, \u00E1rvo: "p", \u00E1sl: "u", "\xE1sna ": "y", \u00E1sne: "y", \u00E1sr: 14, \u00E1sz: 14, \u00E1s\u00E1: 14, \u00E1s\u0165: "y", "\xE1th ": "s", \u00E1thai: "s", "\xE1to ": "y", "\xE1tok ": 14, \u00E1ts: 14, "\xE1tt ": 13, \u00E1tti: 13, "\xE1ttu ": 13, "\xE1u ": "a", \u00E1um: 13, "\xE1vam ": "y", "\xE1vat ": "u", "\xE1ve ": "y", \u00E1vel: "p", \u00E1v\u00E1m: "u", "\xE1y ": "a", "\xE1zal ": "u", \u00E1z\u00ED: "u", \u00E1\u00E1: 14, \u00E1\u00E6: 13, \u00E1\u00E9: 14, \u00E1\u00ED: 14, \u00E1\u00F1: "o", \u00E1\u00F3: 14, \u00E1\u00FA: 14, \u00E1\u00FC: 14, \u00E1\u010Di: "y", \u00E1\u010Dt: "y", \u00E1\u0148: "y", \u00E1\u0161a: "y", \u00E1\u0161\u00ED: "u", \u00E1\u0165: "y", \u00E2c: "l", \u00E2f: "1f", \u00E2g: "l", \u00E2h: "1f", "\xE2i ": 15, \u00E2in: 15, \u00E2k: "1f", \u00E2ln: 15, \u00E2l\u00E2: "1f", "\xE2m ": "a", \u00E2mpl: 15, "\xE2nc ": 15, \u00E2nca: 15, "\xE2nd ": 15, "\xE2nt ": 15, \u00E2nte: 15, \u00E2nz: 15, \u00E2n\u0103: 15, \u00E2p: "l", \u00E2q: "l", \u00E2rs: 15, \u00E2rz: 15, "\xE2s ": 15, \u00E2tev: 15, \u00E2ti: "l", "\xE2y ": "a", \u00E2\u011F: "1f", \u00E2\u0301: "a", "\xE3-": "p", \u00E3e: "p", \u00E3i: "a", \u00E3n: "a", \u00E3os: "p", \u00E3s: "p", \u00E3y: "a", \u00E3z: "p", "\xE4-": 11, \u00E4a: 11, "\xE4bi ": "1c", \u00E4bin: "1p", \u00E4ch: "n", "\xE4d ": 10, \u00E4dc: "n", \u00E4dd: 10, \u00E4dg: 10, \u00E4do: "1p", \u00E4dr: 10, \u00E4du: "1p", \u00E4d\u00F6: "1p", \u00E4ed: "1c", \u00E4ev: "1c", \u00E4ffa: 10, \u00E4fu: "1p", \u00E4f\u00F6: "1p", \u00E4gg: 10, "\xE4gi ": "1c", \u00E4gib: "1c", \u00E4gid: "1c", \u00E4gin: "1c", \u00E4git: "1c", \u00E4giv: "1p", \u00E4gl: "n", \u00E4go: "1p", \u00E4gr: 10, \u00E4gt: "n", \u00E4ha: "1c", \u00E4hd: 11, \u00E4heb: "1c", \u00E4hed: "1c", \u00E4hil: "1n", \u00E4hk: 11, \u00E4hr: "n", \u00E4h\u00E4: 11, \u00E4ib: "1c", \u00E4ie: "1c", \u00E4il: 11, \u00E4iv: 11, \u00E4j: 11, \u00E4kan: "1p", "\xE4ker ": 10, \u00E4kid: "1c", \u00E4kim: "1c", \u00E4kk: 11, \u00E4kn: 10, \u00E4kr: 10, "\xE4ks ": "1c", \u00E4kt: 10, \u00E4ldir: "1n", \u00E4ldr: 10, \u00E4let: "1c", \u00E4lik: "1p", "\xE4ll ": 10, "\xE4lla ": 10, \u00E4lld: 10, \u00E4ll\u00E4: 11, \u00E4lm: "1n", \u00E4log: "1p", \u00E4lp: 10, \u00E4lsk: 10, "\xE4lv ": 10, "\xE4l\xE4 ": 11, \u00E4md: 10, "\xE4mi ": "1n", \u00E4mn: 10, \u00E4mta: 10, "\xE4m\xE4 ": 11, \u00E4m\u00E4n: 11, \u00E4nap: "1p", \u00E4nda: 10, \u00E4ndra: 10, \u00E4ned: "1p", \u00E4nel: 11, \u00E4ngd: 10, \u00E4ngr: 10, \u00E4nker: 10, \u00E4nol: "1p", "\xE4nta ": 10, \u00E4ntar: 10, \u00E4nt\u00E4: 11, \u00E4ny: 11, "\xE4n\xE4 ": 11, \u00E4pi: 11, \u00E4p\u00E4: 11, \u00E4p\u00FC: "1p", \u00E4q: "n", \u00E4rar: 10, \u00E4ras: "1c", "\xE4rdi ": "1n", \u00E4rdig: 10, \u00E4rdim: "1n", \u00E4rgi: "1c", \u00E4rgm: "1c", \u00E4rh: 10, \u00E4rj: 11, \u00E4rld: 10, \u00E4rler: "1n", \u00E4rmi: "1n", "\xE4rna ": 10, \u00E4ro: 10, \u00E4rz: "n", \u00E4sag: "1p", \u00E4sc: "n", "\xE4si ": 11, \u00E4sl: "1p", \u00E4ss\u00E4: 11, \u00E4sta: 10, \u00E4st\u00E4: 11, \u00E4sy: 11, "\xE4ta ": 10, \u00E4tik: "1p", "\xE4tt ": 10, \u00E4tta: 10, \u00E4ttre: 10, \u00E4tt\u00E4: 11, \u00E4ty: 11, \u00E4tz: "n", \u00E4t\u00E1: "y", \u00E4t\u00E4: 11, \u00E4t\u00F6: 11, \u00E4ud: "n", \u00E4uf: "n", \u00E4um: "n", \u00E4vd: 10, \u00E4vl: 10, \u00E4vo: "1p", \u00E4v\u00E4: 11, \u00E4xa: 10, \u00E4xo: 10, \u00E4xt: 10, \u00E4yd: 11, \u00E4yn: 11, \u00E4ys: 11, \u00E4ytt: 11, \u00E4yty: 11, \u00E4yu: "1p", "\xE4ze ": "1n", \u00E4zir: "1n", "\xE4\xE4 ": 11, \u00E4\u00E4g: "1c", \u00E4\u00E4t: 11, \u00E4\u00E7e: "1n", \u00E4\u00F6: 11, \u00E4\u00FD: "1n", \u00E4\u010D: "y", \u00E4\u011F: "1k", \u00E4\u0148: "1n", \u00E4\u0165: "y", \u00E5a: 10, \u00E5be: "z", \u00E5bn: "z", \u00E5di: 12, \u00E5dt: "z", \u00E5et: "z", \u00E5f\u00F8: 12, "\xE5g ": 10, \u00E5ga: 10, \u00E5gl: 10, \u00E5go: 10, \u00E5gr: 10, \u00E5ki: 10, \u00E5kt: 10, \u00E5la: 10, \u00E5ld: 10, \u00E5lig: 10, \u00E5ll: 10, \u00E5m: 10, \u00E5na: 10, \u00E5nb: 10, \u00E5ng: 10, \u00E5ni: 10, \u00E5nn: 12, \u00E5pn: 12, \u00E5ra: 10, \u00E5sa: 10, \u00E5si: 10, \u00E5ta: 10, "\xE5te ": 12, \u00E5ts: 10, \u00E5vi: 12, \u00E6a: "t", \u00E6b: "z", "\xE6c ": "t", \u00E6ce: "t", "\xE6de ": "z", \u00E6der: "z", \u00E6dt: "z", \u00E6dv: "z", \u00E6e: "z", \u00E6fi: 13, \u00E6ft: "z", \u00E6ga: 13, \u00E6ge: "z", \u00E6gg: "z", \u00E6gte: "z", \u00E6j: 13, "\xE6k ": "z", \u00E6ki: 13, \u00E6kke: "z", \u00E6ku: 13, "\xE6l ": "z", \u00E6la: 13, \u00E6ld: "z", \u00E6le: "z", \u00E6lg: "z", \u00E6lk: "z", \u00E6lp: "z", \u00E6lv: "z", \u00E6ma: 13, \u00E6mp: "z", \u00E6ne: "z", \u00E6ng: "z", \u00E6ns: "z", \u00E6nt: 13, \u00E6o: "t", \u00E6q: "t", \u00E6ra: 13, \u00E6rd: "z", \u00E6rel: "z", \u00E6rhet: 12, "\xE6ri ": 13, "\xE6rk ": "z", \u00E6rke: "z", \u00E6rne: 12, \u00E6rre: "z", "\xE6se ": "z", \u00E6ser: "z", \u00E6sk: "z", \u00E6ss: "z", \u00E6ste: "z", \u00E6te: "t", "\xE6ti ": 13, \u00E6tir: 13, \u00E6tl: 13, \u00E6tn: "z", \u00E6tte: "z", \u00E6tti: 13, \u00E6ttu: 13, \u00E6tu: 13, \u00E6u: "t", \u00E6ve: "z", \u00E6vn: "z", "\xE7'": "1f", "\xE7-": "1f", "\xE7a-": "p", \u00E7ado: "p", \u00E7ag: "1n", \u00E7al\u0131: "1f", "\xE7as ": "p", \u00E7b: "1f", \u00E7d: "1n", \u00E7ekt: "1f", \u00E7g: "1f", \u00E7oc: "1f", \u00E7ok: "1f", \u00E7os: "p", \u00E7ou: "p", \u00E7s: "1f", \u00E7t: "1f", "\xE7y ": "1n", \u00E7yk: "1n", \u00E7yl: "1n", \u00E7\u00E0: "l", \u00E7\u00E1: "p", \u00E7\u00E3: "p", \u00E7\u00E7: "1f", \u00E7\u00F3: "p", \u00E7\u00F5: "p", \u00E7\u00FA: "p", \u00E7\u00FCk: "1f", \u00E7\u00FD: "1n", \u00E8b: "l", \u00E8c: "l", \u00E8d: "l", \u00E8f: "l", \u00E8g: "l", \u00E8l: "l", "\xE8n ": "a", \u00E8o: "a", \u00E8q: "l", \u00E8res: "l", \u00E8s: "l", \u00E8t: "l", \u00E8v: "l", "\xE8\xA0": "q", "\xE9'": 14, \u00E9ad: "s", "\xE9ben ": 14, \u00E9bu: "l", \u00E9b\u00E9: "l", \u00E9cl: "l", \u00E9cou: "l", \u00E9cr: "l", "\xE9d ": 14, \u00E9es: "l", \u00E9fl: "l", \u00E9f\u00E8: "l", \u00E9f\u00E9: "l", \u00E9ged: 14, \u00E9go: "l", \u00E9id: "s", \u00E9il: "s", \u00E9jo: "l", \u00E9ke: 14, \u00E9let: 14, \u00E9lj: 14, \u00E9lk: 14, \u00E9ln: 14, \u00E9my: "u", "\xE9nt ": 14, \u00E9ny: 14, \u00E9nz: 14, \u00E9par: "l", \u00E9pon: "l", \u00E9pp: 14, \u00E9pu: "l", \u00E9rdek: 14, "\xE9rem ": 14, \u00E9rj: 14, \u00E9rk: 14, \u00E9rl: 14, "\xE9rna ": 13, \u00E9rz: 14, \u00E9sz: 14, \u00E9tai: "l", "\xE9to ": "u", "\xE9tt ": 13, \u00E9tti: 13, \u00E9tud: "l", "\xE9t\xE9 ": "l", \u00E9un: "l", "\xE9z ": 14, \u00E9ze: 14, "\xE9\xA0": "l", \u00E9\u00E2: "l", \u00E9\u00E7: "l", \u00E9\u00E9n: "r", \u00E9\u00F1: "o", \u00E9\u00FC: 14, \u00E9\u010D: "u", \u00E9\u0161: "u", \u00E9\u017E: "u", "\xEA-l": "p", \u00EAb: "p", \u00EAc: "l", \u00EAl: "l", "\xEAme ": "l", "\xEAn ": "a", \u00EAnc: "p", \u00EAnd: "p", \u00EAng: "a", \u00EAni: "p", \u00EAp: "l", \u00EAq: "l", \u00EAr: 1, \u00EAs: "p", \u00EAt: "l", "\xEAu ": "a", \u00EAv: "l", \u00EAx: "p", \u00EA\u0301: "a", \u00EBe: "r", \u00EBi: "r", \u00EBle: "r", \u00EBls: 1, "\xEBn ": "r", \u00EBnt: "r", \u00EBr: "r", \u00EBz: "r", \u00ECa: "a", \u00ECm: "a", \u00ECn: "a", "\xED-": "p", \u00EDai: "o", "\xEDan ": "o", \u00EDbil: "u", \u00EDb\u00ED: "u", "\xEDce ": "u", \u00EDcia: "p", \u00EDcio: "p", "\xEDct ": "u", \u00EDc\u00ED: "u", "\xEDde ": "y", \u00EDdk: "u", \u00EDdl: "u", \u00EDd\u00E1: "u", "\xEDe ": "o", \u00EDes: "o", "\xEDf ": 13, \u00EDgr: "o", \u00EDgy: 14, \u00EDho: "u", \u00EDkar: 13, \u00EDki: 13, \u00EDkj: 13, \u00EDk\u00E1: "u", \u00EDngu: "p", "\xEDnh ": "a", \u00EDnum: 13, \u00EDn\u00FA: 13, "\xEDo ": "o", \u00EDob: "s", \u00EDoch: "s", \u00EDom: "s", "\xEDon ": "s", \u00EDonn: "s", \u00EDor: "s", \u00EDsal: "y", \u00EDss: "p", "\xEDst ": "u", \u00EDs\u0165: "y", \u00EDtear: "s", \u00EDtett: 14, \u00EDtot: 14, \u00EDtra: "u", \u00EDts: 14, \u00EDtur: 13, \u00EDt\u00E9: 14, \u00EDt\u00ED: "u", \u00EDu: 13, \u00EDval: "u", "\xEDvat ": "u", "\xEDvel ": "p", \u00EDvk: "u", "\xEDv\xE1 ": "u", \u00ED\u00E7: "p", \u00ED\u00F3: 13, "\xED\u010D ": "u", \u00ED\u010De: "u", \u00ED\u010F: "y", \u00ED\u0148: "u", \u00ED\u017Ee: "u", \u00EEc: "l", \u00EEi: 15, "\xEEl ": 15, \u00EEmb: 15, \u00EEmi: 15, \u00EEmp: 15, "\xEEn ": 15, \u00EEnc: 15, \u00EEnd: 15, \u00EEnf: 15, \u00EEng: 15, \u00EEns: 15, \u00EEnt: 15, \u00EEnv: 15, \u00EEt: "l", \u00EE\u015F: 15, "\xEF-": "l", \u00EFa: "l", \u00EFc: "l", \u00EFef: "r", \u00EFf: "l", \u00EFg: "l", \u00EFl: "l", \u00EFnt: "r", \u00EFnv: "r", \u00EFq: "l", \u00EFv: "l", \u00EFw: "l", \u00F0: 13, \u00F1g: "1k", \u00F1k: "1n", \u00F1m: "1n", \u00F1n: "1k", \u00F1r: "1k", \u00F1s: "1n", \u00F1u: "o", \u00F1y: "1n", \u00F1z: "1n", \u00F1\u00E1: "o", \u00F1\u00E9: "o", \u00F1\u00ED: "o", \u00F1\u00F3: "o", \u00F1\u00FC: "1n", \u00F1\u011F: "1k", \u00F2a: "a", \u00F2i: "a", \u00F2n: "a", "\xF3-": 14, "\xF3a ": "a", "\xF3b ": "1a", \u00F3b\u00E1: 14, \u00F3cai: "s", \u00F3cu: "p", \u00F3e: 14, \u00F3ge: "o", "\xF3ir ": "s", "\xF3j ": "1a", \u00F3ks: 13, \u00F3lan: 13, \u00F3lk: 13, "\xF3lo ": "o", "\xF3mo ": "o", \u00F3na\u00ED: "s", \u00F3nd: "o", \u00F3nl: 13, \u00F3nu: 13, \u00F3nv: 13, \u00F3o: 14, \u00F3pr: "p", \u00F3rio: "p", \u00F3ry: "1a", \u00F3rz: "1a", \u00F3r\u00E1: 14, "\xF3tt ": 13, \u00F3w: "1a", \u00F3\u00E1: 14, \u00F3\u00E9: 14, \u00F3\u00ED: 14, \u00F3\u0107: "1a", \u00F3\u0142: "1a", "\xF4-": "a", \u00F4b: "y", \u00F4c: "y", \u00F4i: "a", \u00F4j: "y", \u00F4k: "y", "\xF4l ": "y", \u00F4le\u017E: "y", "\xF4m ": "a", \u00F4mi: "p", "\xF4n ": "a", \u00F4ng: "a", \u00F4ni: "p", \u00F4p: "l", \u00F4q: "p", \u00F4re: 1, "\xF4s ": "p", \u00F4so: "y", "\xF4t ": "l", \u00F4t\u00E9: "l", \u00F4vo: "y", \u00F4\u0148: "y", \u00F4\u017E: "y", \u00F4\u0301: "a", "\xF5 ": "a", \u00F5b: "1c", \u00F5d: "1c", \u00F5g: "1c", \u00F5h: "1c", \u00F5i: "1c", \u00F5l: "1c", \u00F5n: "1c", \u00F5p: "1c", \u00F5r: "1c", \u00F5s: "1c", \u00F5t: "1c", \u00F5u: "1c", \u00F5v: "1c", \u00F5\u00F5: "1c", \u00F6bb: 14, \u00F6ch: "n", \u00F6diko: "1p", \u00F6do: "1p", \u00F6d\u00E4: 11, \u00F6el: "1c", \u00F6fi: "1p", \u00F6fn: 13, \u00F6fo: "1p", \u00F6fu: 13, \u00F6ga: 10, \u00F6geto: "1p", \u00F6gli: "n", \u00F6gon: 10, \u00F6gu: 13, \u00F6hn: "n", \u00F6h\u00E4: 11, \u00F6i: 11, \u00F6ja: 10, \u00F6jd: 10, \u00F6jl: 10, "\xF6ka ": 10, "\xF6ker ": 10, \u00F6llu: 13, \u00F6lu: 13, \u00F6mde: 10, \u00F6mek: "1n", \u00F6mib: "1p", \u00F6mom: "1p", \u00F6m\u00E4: 11, \u00F6nce: "1f", \u00F6ngu: 13, \u00F6nik: "1p", \u00F6nnen: "n", \u00F6nnt: "n", \u00F6nska: 10, \u00F6n\u00F6: 14, \u00F6o: 11, "\xF6pa ": 10, \u00F6pf: "n", \u00F6ppn: 10, \u00F6ra: 10, \u00F6rja: 10, \u00F6rkla: 10, \u00F6rlor: 10, \u00F6rsta: 10, \u00F6rst\u00E5: 10, \u00F6rs\u00F6: 10, \u00F6rt\u00E9: 14, \u00F6r\u00F6: 14, \u00F6r\u00FD: "1n", \u00F6sis: "n", \u00F6ssz: 14, \u00F6sz: 14, \u00F6tz: "n", \u00F6t\u00E4: 11, \u00F6t\u00FC: "1f", \u00F6vers: 10, \u00F6vet: 14, \u00F6wr: "1n", \u00F6w\u00FC: "1n", \u00F6x: 13, \u00F6yle: "1f", \u00F6ys: 11, \u00F6yt: 11, \u00F6z\u00F6: 14, \u00F6\u00E4: 11, \u00F6\u00F1: "1n", \u00F6\u00F6d: "1c", \u00F6\u00F6g: "1c", \u00F6\u00F6k: "1c", \u00F6\u00F6l: "1c", \u00F6\u00F6s: "1c", \u00F6\u00FD: "1n", \u00F6\u011F: "1f", \u00F6\u0148: "1n", "\xF8b ": "z", \u00F8be: "z", \u00F8bt: "z", \u00F8det: "z", \u00F8dte: "z", \u00F8er: "z", "\xF8g ": "z", \u00F8ge: "z", \u00F8gl: "z", \u00F8gt: "z", \u00F8j: "z", "\xF8k ": 12, "\xF8ke ": 12, \u00F8kel: 12, \u00F8kene: 12, \u00F8ker: 12, \u00F8kt: 12, "\xF8n ": "z", "\xF8nn ": 12, \u00F8nns: 12, "\xF8nt ": "z", \u00F8p: 12, \u00F8ra: 12, \u00F8rge: "z", \u00F8rgs: "z", \u00F8ri: 12, "\xF8rn ": "z", \u00F8rnen: "z", \u00F8rsm: 12, "\xF8t ": 12, \u00F8te: 12, "\xF8tt ": 12, \u00F8vd: 12, "\xF8vn ": "z", \u00F8y: 12, \u00F9a: "a", \u00F9i: "a", \u00F9m: "a", \u00F9n: "a", \u00F9y: "a", "\xFA-": 14, \u00FAar: 13, \u00FAce: "y", "\xFAci ": "y", \u00FAe: "o", \u00FAfam: "y", \u00FAgy: 14, \u00FAhl: "y", \u00FAil: "s", \u00FAinn: 13, \u00FAint: "s", \u00FAirt: "s", "\xFAj ": 14, \u00FAkl: 13, \u00FAkr: 13, "\xFAna ": 13, "\xFAng ": "a", \u00FAo: "o", "\xFAp ": "a", \u00FApil: "y", \u00FAsz: 14, \u00FAs\u00E1i: "s", "\xFAto ": "y", \u00FAts: 13, \u00FAvi: "p", \u00FAy: "o", \u00FAzsk: "y", \u00FAz\u0161: "y", \u00FA\u0161: "y", \u00FA\u0165: "y", "\xFB ": "l", \u00FBc: "l", \u00FBl: "l", \u00FBn: "l", \u00FBr: "l", \u00FBt: "l", "\xFC'": "1f", "\xFCa ": "1c", "\xFCber ": "n", \u00FCbs: "n", \u00FCch: "n", \u00FCck: "n", "\xFCd ": "1c", \u00FCdik: "1p", \u00FCdr: "1c", "\xFCe ": "o", \u00FCen: "o", \u00FCgt: "n", \u00FCgy: 14, "\xFCh ": "n", \u00FChl: "n", \u00FChm: "n", \u00FChr: "n", \u00FChs: "n", \u00FCki: "1p", \u00FCkob: "1p", \u00FCkol: "1p", \u00FCkom: "1p", \u00FCksi: "1c", \u00FCksk: "1c", \u00FCl\u00F6: 14, "\xFCmi ": "1n", \u00FCmkin: "1n", \u00FCmn: "1c", \u00FCm\u00FC: "1f", \u00FCnf: "n", "\xFCni ": "1n", "\xFCnk ": 14, \u00FCny: "1f", "\xFCn\xFC ": "1f", \u00FCn\u00FD: "1n", \u00FCrf: "n", \u00FCrgi: "1c", \u00FCrit: "1c", \u00FCrle\u015F: "1n", \u00FCrz: "n", \u00FCsim: "1c", \u00FCssen: "n", \u00FCtf: "1f", \u00FCtz: "n", \u00FCt\u00FC: "1f", \u00FCw: "1n", \u00FCy: "1f", "\xFCzel ": "1f", \u00FC\u00E7i: "1n", \u00FC\u00E7\u00FC: "1f", \u00FC\u00E9: "o", \u00FC\u00ED: "o", \u00FC\u00FC: "1c", \u00FC\u00FD: "1n", \u00FC\u011F: "1f", \u00FC\u0148: "1n", "\xFDa ": "1n", \u00FDad: "1n", \u00FDag: "1n", \u00FDak: "1n", \u00FDal: "1n", \u00FDap: "1n", \u00FDar: "1n", \u00FDat: "1n", \u00FDaz: "1n", \u00FDa\u015F: "1n", \u00FDchl: "y", \u00FDda: "1n", \u00FDden: "u", \u00FDdi: "1n", \u00FDdn: "u", \u00FDdy: "1n", \u00FDd\u00FD: "1n", \u00FDe: "1n", \u00FDg: "1n", \u00FDi: "1n", \u00FDja: 13, \u00FDju: 13, \u00FDla: "1n", \u00FDme: "1n", \u00FDnd: 13, \u00FDne: "1n", \u00FDni: 13, \u00FDo: "1n", \u00FDri: 13, \u00FDsi: 13, \u00FDsy: "1n", \u00FDtd: "1n", \u00FDtg: "1n", \u00FDti: 13, \u00FDtm: "1n", \u00FDtt: 13, \u00FDtu: 13, \u00FDu: "1n", "\xFDva ": "y", "\xFDval ": "u", \u00FDv\u00E1: "u", \u00FDw: "1n", \u00FDy: "1n", \u00FD\u00E4: "1n", \u00FD\u00F3: 13, \u00FD\u00F6: "1n", \u00FD\u00FC: "1n", \u00FD\u00FD: "1n", \u00FD\u015F: "1n", \u00FD\u0161l: "u", \u00FD\u017Ed: "y", \u00FE: 13, \u0101a: "1d", \u0101ba: "t", \u0101ci: "1d", \u0101da: "1d", "\u0101di ": "1d", \u0101ds: "1d", \u0101du: "1d", \u0101d\u0101: "1d", \u0101e: "t", \u0101f: "1d", \u0101g: "t", \u0101i: "1d", \u0101j: "1d", \u0101k: "1d", "\u0101m ": "1d", \u0101ma: "1d", \u0101mu: "t", \u0101p: "1d", \u0101rd: "1d", \u0101re: "t", \u0101rlie: "1d", \u0101rs: "1d", \u0101rt: "1d", \u0101r\u0101: "1d", \u0101r\u0161i: "1d", "\u0101t ": "1d", "\u0101te ": "1d", \u0101tie: "1d", \u0101ts: "1d", \u0101vi: "t", \u0101z: "1d", \u0101\u0161: "1d", "\u0103-": 15, \u0103b: 15, \u0103c: 15, \u0103d: 15, \u0103g: 15, \u0103i: 15, \u0103j: 15, \u0103l: 15, \u0103ma: 15, \u0103m\u00E2: 15, "\u0103n ": "a", \u0103ng: "a", \u0103ni: 15, \u0103nu: 15, \u0103n\u00E2: 15, \u0103n\u0103: 15, \u0103p: 15, \u0103r: 15, \u0103s: 15, \u0103t: 15, \u0103u: 15, \u0103v: 15, \u0103z: 15, \u0105b: "1a", \u0105c: "1a", \u0105d: "1a", \u0105g: "1a", \u0105j: "1b", \u0105l: "1b", \u0105m: "1b", \u0105n: "1b", \u0105p: "1a", \u0105r: "1b", \u0105t: "1a", \u0105z: "1a", \u0105\u0107: "1a", \u0105\u0142: "1a", \u0105\u017E: "1b", \u0107a: "v", \u0107b: "1a", \u0107c: "1a", \u0107d: "1a", \u0107e: "v", \u0107i: "v", \u0107m: "1a", \u0107n: "v", \u0107o: "v", \u0107s: "1a", \u0107u: "v", \u0107w: "1a", "\u0107\xA0": "1a", \u0109: "1o", "\u010D-": 3, \u010Dajne: "y", "\u010Dak ": "v", \u010Dakal: "y", \u010Dak\u00E1: "y", \u010Da\u0165: "y", \u010Dc: "u", \u010Deh: "u", \u010Dek\u00E1: "u", \u010Detl: "u", \u010Diai: "1b", \u010Diau: "1b", \u010Die: "y", \u010Dita: "v", \u010Diu: "1b", \u010Di\u0105: "1b", \u010Di\u016B: "1b", \u010Dki: "v", \u010Dlove: "y", \u010Dna: "v", "\u010Dno ": "v", "\u010Do ": "y", \u010Dom: "y", \u010Dos: "y", \u010Dove: "v", \u010Ds: "u", \u010Dty: "u", \u010Dud: "v", "\u010Dul ": "y", \u010Dur: 3, \u010Dv: "v", \u010Dw: 3, \u010Dx: 3, \u010Dy: "1b", \u010D\u00E1: "u", \u010D\u00FA: "y", \u010D\u010D: 3, \u010D\u0161: "y", \u010Fak: "y", \u010Fal: "y", \u010F\u00E1: "u", \u0111ang: "a", \u0111au: "a", \u0111e\u0161: "v", \u0111i\u00EA: "a", \u0111o: "a", "\u0111u ": "v", \u0111uj: "v", \u0111\u00E0: "a", \u0111\u00E1: "a", \u0111\u00E2: "a", \u0111\u00E3: "a", \u0111\u00E8: "a", \u0111\u00E9: "a", \u0111\u00EA: "a", \u0111\u00EC: "a", \u0111\u00ED: "a", \u0111\u00F2: "a", \u0111\u00F3: "a", \u0111\u00F4: "a", \u0111\u00F9: "a", \u0111\u00FA: "a", \u0111\u0103: "a", \u0113b: "t", "\u0113c ": "1d", \u0113ci: "t", "\u0113du ": "1d", \u0113d\u014D: "t", \u0113j: "1d", \u0113k: "1d", "\u0113l ": "1d", \u0113la: "1d", \u0113los: "1d", "\u0113m ": "1d", \u0113ma: "1d", \u0113mi: "t", "\u0113r ": "1d", \u0113re: "t", \u0113rn: "1d", \u0113rt: "1d", \u0113ru: "t", "\u0113t ": "1d", \u0113tie: "1d", "\u0113ts ": "1d", "\u0113tu ": "1d", "\u0113vs ": "1d", \u0113x: "t", \u0113\u0161: "1d", \u0117: "1b", \u0119b: "1a", \u0119c: "1a", \u0119d: "1a", \u0119g: "1a", \u0119k: "1a", \u0119l: "1a", \u0119p: "1a", "\u0119s ": "1b", "\u0119sto ": "1a", \u0119t: "1a", \u0119z: "1a", "\u0119\xA0": "1a", \u0119\u0107: "1a", \u0119\u0142: "1a", \u0119\u017E: "1b", \u011B: "u", \u011D: "1o", "\u011F ": "1f", "\u011F'": "1f", \u011Fc: "1f", \u011Fd: "1f", \u011Fe: "1f", \u011Fi: "1f", \u011Fl: "1f", \u011Fm: "1f", \u011Fn: "1f", \u011Fo: "1f", \u011Fr: "1f", \u011Fs: "1f", \u011Fu: "1f", \u011Fz: "1f", \u011F\u00E4: "1k", \u011F\u00FC: "1f", \u0123: "1d", \u0125: "1o", \u0129: "a", \u012Ba: "t", \u012Bba: "1d", \u012Bbe: "t", \u012Bbu: "1d", \u012Bb\u0101: "1d", "\u012Bc ": "t", \u012Bcit: "t", \u012Bcu: "t", \u012Bdi: "t", \u012Bdz: "1d", \u012Bga: "1d", \u012Bgi: "1d", \u012Bgs: "1d", "\u012Bgu ": "1d", \u012Bj: "1d", \u012Bk: "1d", "\u012Blu ": "1d", \u012Bmu: "t", \u012Bnu: "1d", \u012Bq: "t", \u012Bre: "t", \u012Bri: "1d", "\u012Bt ": "1d", \u012Btie: "1d", "\u012Bts ": "1d", "\u012Btu ": "1d", \u012Bvo: "1d", \u012Bx: "t", \u012Bz: "1d", \u012B\u0161: "1d", \u012F: "1b", "\u0131'": "1f", "\u0131-": "1f", \u0131c: "1f", \u0131f: "1f", \u0131h: "1f", \u0131i: "1f", \u0131k: "1f", \u0131q: "1k", \u0131u: "1f", \u0131v: "1f", \u0131\u00F1: "1k", \u0131\u0131: "1f", \u0135: "1o", \u0137: "1d", \u013A: "y", \u013C: "1d", \u013E: "y", "\u0142 ": "1a", \u0142a: "1a", \u0142b: "1a", \u0142c: "1a", \u0142d: "1a", \u0142e: "1a", \u0142g: "1a", \u0142k: "1a", \u0142l: "1a", \u0142m: "1a", \u0142n: "1a", \u0142o: "1a", \u0142p: "1a", \u0142s: "1a", \u0142t: "1a", \u0142u: "1a", \u0142w: "1a", \u0142y: "1a", \u0142z: "1a", \u0142\u00F3: "1a", \u0142\u0105: "1a", \u0142\u0119: "1a", \u0144c: "1a", \u0144k: "1a", \u0144m: "1a", \u0144s: "1a", \u0146: "1d", \u0148d: "1n", \u0148e: "1n", \u0148h: "y", \u0148i: "1n", \u0148l: "1n", \u0148m: "1n", \u0148r: "1n", \u0148y: "1n", \u0148z: "1n", \u0148\u00E7: "1n", \u0148\u00FC: "1n", \u014Db\u012B: "t", \u014Dd: "t", \u014Dg: "n", \u014Dk: "n", \u014Dl: "t", \u014Dm: "t", \u014Dn: "t", \u014Dr: "t", "\u014Ds ": "t", \u014Dsc: "t", \u014Dv: "t", \u0151: 14, \u0153b: "t", \u0153d: "t", \u0153i: "l", \u0153l: "t", \u0153n: "t", \u0153p: "t", \u0153s: "l", \u0153t: "t", \u0153u: "l", \u0155: "y", \u0159: "u", \u015B: "1a", \u015D: "1o", "\u015F'": "1f", "\u015F-": "1f", \u015Fary: "1n", \u015Far\u0131: "1f", \u015Fb: "1f", \u015Fda: "1n", \u015Fdi: "1n", \u015Fdy: "1n", \u015Fey: "1f", \u015Ff: "1f", "\u015Fga ": "1n", \u015Fh: "1f", \u015Fimd: "1f", \u015Fj: "1n", \u015Fka: "1f", \u015Fke: "1f", \u015Flar\u0131: "1f", \u015Fly: "1n", \u015Fl\u0131: "1f", \u015Fol: "1n", \u015Fony: "1n", \u015Fp: "1f", \u015Fq: "1k", \u015Fr: "1f", \u015Ftir: "1f", \u015Ftu: "1f", \u015Ft\u0131: "1f", \u015Fv: "1f", "\u015Fy ": "1n", \u015Fyn: "1n", \u015F\u00E7: "1f", \u015F\u00F6: "1f", \u015F\u00FCndi: "1n", \u015F\u00FCn\u00FC: "1f", \u015F\u00FD: "1n", \u015F\u0131l: "1f", \u015F\u0131m: "1f", \u015F\u0131r: "1f", \u015F\u0131y: "1f", \u015F\u015F: "1f", "\u0161-": "u", \u0161ai: "1b", \u0161ana: "1d", \u0161anu: "1d", \u0161ao: "v", "\u0161au ": "1b", \u0161av: "v", \u0161b: "1b", \u0161c: "u", \u0161d: "1b", \u0161ec: "u", "\u0161eit ": "1d", "\u0161ej ": "y", "\u0161el ": "u", "\u0161et ": "u", \u0161etc: "y", \u0161etk: "y", \u0161g: "1b", \u0161ian: "1b", \u0161ic: "u", \u0161iel: "y", \u0161imt: "1b", \u0161ita: "1b", \u0161ito: "1b", \u0161it\u0105: "1b", \u0161iu: "1b", \u0161i\u0105: "1b", \u0161j: "1b", "\u0161k ": "1b", \u0161kai: "1b", \u0161kas: "1b", \u0161kin: "1b", \u0161k\u0105: "1b", \u0161lj: "v", \u0161m: "1b", \u0161nj: "v", \u0161od: "1d", "\u0161os ": "1d", \u0161patn: "u", \u0161si: "1b", \u0161tai: "1b", \u0161tud: "y", \u0161un: "1b", \u0161uo: "1b", \u0161us: "1b", \u0161vy: "1b", \u0161y: "1b", \u0161\u00E9: "u", \u0161\u0101: "1d", \u0161\u0105: "1b", \u0161\u0107: "v", \u0161\u010D: "1b", \u0161\u0119: "1b", \u0161\u012B: "1d", \u0161\u016B: "1b", \u0163: 15, \u0165d: "y", \u0165\u00E1: "u", \u0169: "a", \u016Bc: "t", \u016Bden: "1d", \u016Bdz: "1d", \u016Bg: "1b", "\u016Bk ": "1b", \u016Bky: "1b", \u016Bly: "1b", \u016Bnu: "1b", \u016Bpi: "1b", "\u016Br ": "t", \u016Bri: "1b", \u016Bro: "1b", \u016Bru: "t", \u016Bsi: "1b", \u016Bsu: "1d", "\u016Btu ": "1d", \u016Bzik: "1d", \u016B\u010D: "1b", "\u016D ": "1o", "\u016D-": "1o", \u016Da: "1o", \u016Db: "1o", \u016Dc: "1o", \u016Dd: "1o", \u016De: "1o", \u016Df: "1o", \u016Dg: "1o", \u016Dh: "1o", \u016Di: "1o", \u016Dj: "1o", \u016Dk: "1o", \u016Dl: "1o", \u016Dm: "1o", \u016Dn: "1o", \u016Do: "1o", \u016Dp: "1o", \u016Dr: "1o", \u016Ds: "1o", \u016Dt: "1o", \u016Du: "1o", \u016Dv: "1o", \u016Dz: "1o", \u016F: "u", \u0171: 14, \u0173: "1b", \u017A: "1a", \u017C: "1a", \u017Eai: "1b", \u017Eao: "v", \u017Ec: "u", \u017Edn: "y", \u017Eei: "1b", "\u017Eel ": "u", \u017Eeleo: "v", \u017Eelim: "v", \u017Eg: "1b", \u017Eiad: "y", \u017Eiai: "1b", \u017Eiau: "1b", \u017Eic: "y", \u017Eie: "1b", \u017Eina: "1b", \u017Eino: "1b", "\u017Eit ": "u", \u017Eiu: "1b", \u017Eivi: "v", \u017Ei\u010D: "y", \u017Ei\u016B: "1b", \u017Ek\u0105: "1b", \u017Em: "1b", \u017Enai: "1b", \u017Enj: "v", \u017En\u00E1: "u", "\u017Eo ": "1b", \u017Eod: "1b", \u017Esi: "1b", \u017Eti: "1b", \u017Eud: "1b", \u017Euv: "1b", \u017Ev: "1b", \u017Ey: "1b", \u017E\u00E1: "u", \u017E\u00EDt: "u", \u017E\u0101: "1d", \u017E\u0105: "1b", \u017E\u010D: "1b", \u017E\u010F: "y", \u017E\u0113: "1d", \u017E\u0119: "1b", \u017E\u012B: "1d", \u017E\u0161i: "y", \u017E\u016B: "1b", \u01A1: "a", \u01B0: "a", \u01D4: "1o", \u01E7: 3, \u01F5: "1l", \u0219: 15, \u021B: 15, \u0251: "c", \u025B: 3, \u0263: 3, \u02B7: 3, \u02BC: 17, "\u0300": "a", "\u0301c": "a", "\u0301i": "a", "\u0301n": "a", "\u0301o": "a", "\u0301p": "a", "\u0301t": "a", "\u0301u": "a", "\u0301\u0432": 18, "\u0301\u0433": 18, "\u0301\u0434": 18, "\u0301\u0438": 18, "\u0301\u0439": 18, "\u0301\u043A": 18, "\u0301\u043B": 18, "\u0301\u043C": 18, "\u0301\u043D": 18, "\u0301\u0440": 18, "\u0301\u0441": 18, "\u0301\u0442": 18, "\u0301\u0447": 18, "\u0303a": "d", "\u0303n": "a", "\u0307b": "1f", "\u0307d": "1f", "\u0307f": "1f", "\u0307h": "1f", "\u0307k": "1f", "\u0307l": "1f", "\u0307m": "1f", "\u0307n": "1f", "\u0307p": "1f", "\u0307r": "1f", "\u0307t": "1f", "\u0307v": "1f", "\u0307y": "1f", "\u0307z": "1f", "\u0307\xE7": "1f", "\u0307\u011F": "1f", "\u0307\u015F": "1f", "\u0309": "a", "\u0323": "a", "\u0384": "w", \u0390: "w", \u03AC: "w", \u03AD: "w", \u03AE: "w", \u03AF: "w", \u03B1: "w", \u03B2: "w", "\u03B3 ": 3, "\u03B3-": 3, \u03B3a: 3, \u03B3e: 3, \u03B3i: 3, \u03B3l: 3, \u03B3r: 3, \u03B3u: 3, \u03B3\u03B3: "w", \u03B3\u03B5: "w", \u03B4: "w", "\u03B5-": 3, \u03B5a: 3, \u03B5b: 3, \u03B5c: 3, \u03B5d: 3, \u03B5e: 3, \u03B5f: 3, \u03B5i: 3, \u03B5j: 3, \u03B5l: 3, \u03B5m: 3, \u03B5n: 3, \u03B5q: 3, \u03B5r: 3, \u03B5t: 3, \u03B5u: 3, \u03B5w: 3, \u03B5y: 3, \u03B5z: 3, \u03B5\u03B3: "w", \u03B5\u03B5: 3, \u03B5\u03C0: "w", \u03B6: "w", \u03B7: "w", \u03B8: "w", \u03B9: "w", \u03BA: "w", \u03BB: "w", \u03BC: "w", \u03BD: "w", \u03BE: "w", \u03BF: "w", "\u03C0'": "w", \u03C0\u03B5: "w", \u03C0\u03C0: "w", \u03C1: "w", \u03C2: "w", \u03C3: "w", \u03C4: "w", \u03C5: "w", \u03C6: "w", \u03C7: "w", \u03C8: "w", \u03C9: "w", \u03CA: "w", \u03CC: "w", \u03CD: "w", \u03CE: "w", "\u0430)": 18, \u0430\u0430\u0433: "1m", \u0430\u0430\u0434: "1m", \u0430\u0430\u043D: "1m", "\u0430\u0430\u0440 ": "1m", \u0430\u0430\u0440\u0430: "1m", \u0430\u0430\u0441: "1m", "\u0430\u0430\u0442 ": "x", \u0430\u0430\u0445\u0430\u043D: "1m", \u0430\u0430\u0448: "1m", \u0430\u0431\u0430\u0435: 17, \u0430\u0431\u0443\u0442: 19, \u0430\u0431\u0456\u043B\u0430: 17, \u0430\u0431\u0456\u0446: 17, \u0430\u0432\u0430\u043B\u0456: 17, \u0430\u0432\u0430\u0440\u044B: 17, \u0430\u0432\u0430\u0446: 17, "\u0430\u0432\u0435\u043A ": 17, \u0430\u0432\u0436: 19, \u0430\u0432\u0438\u0445: 16, \u0430\u0432\u043C\u0435: "x", \u0430\u0432\u0441\u044F: 19, \u0430\u0432\u0443\u0432: "x", \u0430\u0432\u044A: 16, \u0430\u0432\u044B\u0440: "1k", \u0430\u0432\u044C: 18, "\u0430\u0432\u044F ": 16, \u0430\u0432\u0456\u043B: 17, \u0430\u0432\u0456\u043D: 17, \u0430\u0432\u0458: "x", \u0430\u0433\u0430\u0442\u043E: 19, \u0430\u0433\u0434\u0430\u0436: "1m", \u0430\u0433\u0440\u0438: "x", \u0430\u0433\u0442: "1m", \u0430\u0433\u0447: 17, \u0430\u0433\u044B: "1k", \u0430\u0433\u04AF: "1m", \u0430\u0434\u0430\u0430: "1m", \u0430\u0434\u0430\u043C\u043D: "1l", \u0430\u0434\u0437\u0435: 17, \u0430\u0434\u0437\u044F: 17, \u0430\u0434\u0437\u0456: 17, \u0430\u0434\u0442\u043E: 19, \u0430\u0434\u044A: 16, \u0430\u0434\u04D9\u0440: "1k", \u0430\u0435\u0442\u0441: 18, \u0430\u0435\u0446\u0435: 17, \u0430\u0436\u0434\u044B: 18, \u0430\u0436\u0435\u0442\u0441: 18, \u0430\u0436\u0443\u0432: "x", \u0430\u0437\u0430\u043C\u0430: "1l", \u0430\u0437\u0430\u0442\u0438: 19, \u0430\u0437\u0430\u0446: 17, "\u0430\u0437\u0432\u0430 ": 16, \u0430\u0437\u043F: 16, \u0430\u0437\u0445: 16, \u0430\u0438\u0441\u0442\u0438: 16, \u0430\u0438\u0446: "x", "\u0430\u0439-\u0434": 16, "\u0430\u0439\u0436\u0435 ": 19, \u0430\u0439\u043D\u044F: 19, "\u0430\u0439\u0446\u0435 ": 17, \u0430\u0439\u0447\u0430: "1k", \u0430\u0439\u0448\u0438\u043D: "1m", \u0430\u0439\u044B: "1l", \u0430\u043A\u0430\u0440\u0430: 16, \u0430\u043A\u0430\u0448\u0435: "x", \u0430\u043A\u0438\u0435: 18, \u0430\u043A\u0438\u0439: 19, \u0430\u043A\u043B\u044B: "1k", \u0430\u043A\u043D\u0430: "x", \u0430\u043A\u043E\u0442: "x", \u0430\u043A\u0441\u0430\u043C: 17, "\u0430\u043A\u0442\u043E ": 16, \u0430\u043A\u0447: "1k", \u0430\u043A\u044B: "1k", \u0430\u043B\u0430\u0430: "1m", \u0430\u043B\u0430\u0432: 17, \u0430\u043B\u0430\u0440\u043D: "1k", \u0430\u043B\u0434\u0430\u0430: "1m", \u0430\u043B\u043C\u0430\u0439: "1l", \u0430\u043B\u043C\u044B: "1k", \u0430\u043B\u0442\u0430\u0439: "1m", \u0430\u043B\u0443\u0439: 18, \u0430\u043B\u044B\u043A: "1k", "\u0430\u043C'": 19, \u0430\u043C\u0430\u0430: "1m", \u0430\u043C\u0430\u0442\u0442: "1l", \u0430\u043C\u0442\u0430\u0439: "1m", "\u0430\u043C\u044B\u043D ": "1l", \u0430\u043C\u044C\u0434: "1m", \u0430\u043D\u0430\u0432\u0430: 17, \u0430\u043D\u0433\u0430\u043B: "1m", \u0430\u043D\u043C: "1k", \u0430\u043D\u043E\u0442: "x", "\u0430\u043D\u044B\u043F ": "1k", \u0430\u043D\u044B\u0441: "1l", \u0430\u043F\u0430\u043C\u0430: 17, \u0430\u043F\u043E\u0447\u0432: 16, \u0430\u043F\u043E\u0448\u043D: 17, \u0430\u043F\u0456\u0441: 17, \u0430\u0440\u0430\u0433\u0434: "1m", \u0430\u0440\u0430\u043B\u044B: "1l", \u0430\u0440\u0435\u0441\u0430: 16, \u0430\u0440\u0435\u0441\u0432: 16, \u0430\u0440\u0438\u0432\u0430: 18, \u0430\u0440\u043B\u044B\u043A: "1k", \u0430\u0440\u043C\u044B: "1k", "\u0430\u0440\u043E\u0442 ": "x", \u0430\u0440\u0441\u0430\u043D: "1m", "\u0430\u0440\u0448\u044B ": "1k", \u0430\u0440\u044B\u043B\u0430: 17, \u0430\u0440\u044B\u0441\u0442: 17, \u0430\u0440\u044B\u0446: 17, \u0430\u0440\u044D: 17, \u0430\u0440\u0456: 19, \u0430\u0441\u043B\u0438\u0432: 19, \u0430\u0441\u0442\u0430\u0434: "1l", \u0430\u0441\u0446\u044C: 17, \u0430\u0442\u0435\u043B\u044C: 18, \u0430\u0442\u043E\u0442: "x", \u0430\u0442\u0440\u044B\u043C: 17, \u0430\u0442\u044A: 16, \u0430\u0442\u044B\u043D\u0430: "1l", \u0430\u0442\u044B\u043D\u0434: "1l", \u0430\u0442\u044B\u0441: "1l", \u0430\u0442\u044C\u043A\u043E: 19, \u0430\u0442\u0456: 19, \u0430\u0443\u0434\u0430\u0440: "1l", \u0430\u0443\u044B: "1l", "\u0430\u0445\u0430\u043D ": "1m", \u0430\u0445\u0433: "1m", \u0430\u0445\u0438\u0430: "1m", \u0430\u0446\u0430\u043B\u0430: 17, \u0430\u0446\u0435\u043B\u0430: 17, \u0430\u0446\u0440: "x", \u0430\u0446\u0446: 17, \u0430\u0446\u044B: 17, "\u0430\u0446\u044C ": 17, \u0430\u0446\u044E: 19, "\u0430\u0447\u0438\u0432 ": 19, \u0430\u0447\u0438\u0442\u0438: 19, \u0430\u0447\u044B\u043D: 17, \u0430\u0448\u0430\u043D: "1l", \u0430\u0448\u0430\u045A: "x", \u0430\u0448\u0443\u0432: "x", \u0430\u044E\u0446: 17, \u0430\u044E\u0449: 18, \u0430\u044F\u0440\u043B\u0430: "1m", \u0430\u044F\u0442\u0430: 16, "\u0430\u0451 ": 17, \u0430\u0451\u0439: 17, \u0430\u0451\u0442: 18, \u0430\u0456: 17, \u0430\u0458\u0435: "v", \u0430\u0458\u043E: "x", \u0430\u0458\u0447: "x", \u0430\u045A\u0443: "v", \u0430\u045F: "x", \u0430\u04A3\u0434: "1l", \u0431i\u043B: "1l", \u0431\u0430\u0430: "x", \u0431\u0430\u0435\u0446: 17, \u0431\u0430\u0439\u0432: "1m", \u0431\u0430\u0439\u0433\u0430: "1m", \u0431\u0430\u0439\u0434\u0430: "1m", \u0431\u0430\u0439\u043D\u0430: "1m", \u0431\u0430\u0439\u0441\u0430: "1m", \u0431\u0430\u0439\u0448\u0438: "1m", \u0431\u0430\u043A\u043D: "x", \u0431\u0430\u043E: "v", \u0431\u0430\u0441\u0442\u0430: "1l", \u0431\u0430\u0441\u044B\u043D: "1l", \u0431\u0430\u0442\u044C\u043A: 19, \u0431\u0430\u0446\u044C: 17, \u0431\u0430\u0447\u0438\u0432: 19, \u0431\u0430\u0447\u044B: 17, "\u0431\u0430\u0448\u0435 ": "x", \u0431\u0430\u0448\u043B: "1k", \u0431\u0430\u0449: 16, "\u0431\u0430\u044F\u043D ": "1m", \u0431\u0430\u044F\u0440: "1m", \u0431\u0430\u045A: "x", "\u0431\u0432\u0430 ": 16, \u0431\u0432\u0430\u0448: 16, \u0431\u0435\u0430: "x", "\u0431\u0435\u0432 ": "x", \u0431\u0435\u0437\u043D\u0435: "1k", \u0431\u0435\u0437\u043F\u0435: 19, \u0431\u0435\u043B\u043C: "1k", \u0431\u0435\u0440\u0430\u0437: "1k", \u0431\u0435\u0440\u0434\u0456: "1l", \u0431\u0435\u0440\u0435\u043D: "1k", \u0431\u0435\u0440\u043A\u0430: "1k", \u0431\u0435\u0440\u043A\u0435: "1k", \u0431\u0435\u0440\u0441\u0435: "1k", \u0431\u0436: 18, "\u0431\u0438\u0434 ": "1m", \u0431\u0438\u0434\u0430: "x", \u0431\u0438\u0434\u0435\u0448: "x", "\u0431\u0438\u043E ": "v", \u0431\u0438\u0440\u0435: "1k", \u0431\u043E\u043B\u0430\u0434: "1l", \u0431\u043E\u043B\u0434\u044B: "1l", \u0431\u043E\u043B\u043C: "1l", \u0431\u043E\u043B\u043E\u0445: "1m", \u0431\u043E\u043B\u0443\u044B: "1l", \u0431\u043E\u0440\u043E\u043E: "1m", \u0431\u043E\u0440\u0443\u0432: "x", \u0431\u043E\u0442\u0430\u0435: 18, \u0431\u043F: 19, \u0431\u0440\u0430\u0432\u0438: 16, \u0431\u0440\u0430\u0445: 16, \u0431\u0440\u043A: "x", \u0431\u0440\u043D: "x", "\u0431\u0443\u0432 ": 19, \u0431\u0443\u0434\u0437: 17, \u0431\u0443\u0434\u0438\u043D: 19, \u0431\u0443\u043B\u0433: "1k", \u0431\u0443\u043B\u0438: 19, "\u0431\u0443\u043B\u043E ": 19, \u0431\u0443\u043B\u0441: "1k", \u0431\u0443\u043B\u0443: "1k", \u0431\u0443\u043B\u044B: "1k", "\u0431\u0443\u0442\u0438 ": 19, "\u0431\u0443\u0442\u044C ": 19, \u0431\u0447: 18, \u0431\u0449\u043E: 16, \u0431\u044A\u0434: 16, \u0431\u044A\u043B: 16, \u0431\u044A\u0440: 16, \u0431\u044B\u0437: "1k", "\u0431\u044B\u043B ": 18, \u0431\u044B\u0441\u0442: 18, \u0431\u044B\u0446: 17, \u0431\u044B\u0447: 18, \u0431\u044C: 18, \u0431\u044F\u043B: 16, \u0431\u044F\u0445: 16, \u0431\u0456\u0434: 19, "\u0431\u0456\u0437 ": "1l", \u0431\u0456\u0437\u0434: "1l", \u0431\u0456\u0440\u0456: "1l", \u0431\u04AF\u0433\u0434: "1m", \u0431\u04AF\u043B: "1k", \u0431\u04D9\u0442: "1k", \u0431\u04E9\u043B: "1l", \u0431\u04E9\u0442: "1k", "\u0432'": 19, \u0432i: 19, "\u0432\u0430\u0430 ": "x", \u0432\u0430\u0430\u0442: "x", \u0432\u0430\u0431\u043E\u0434: 17, \u0432\u0430\u0435\u0442: 18, \u0432\u0430\u043D\u0435\u0442: 16, \u0432\u0430\u043E: "v", \u0432\u0430\u0442\u0438\u0441: 19, \u0432\u0430\u0442\u044C: 18, \u0432\u0430\u0449: 16, \u0432\u0430\u044E\u0441\u044F: 19, \u0432\u0430\u0451: 17, \u0432\u0430\u0458\u0446: "x", \u0432\u0432\u0430: 19, \u0432\u0434\u043E\u043C\u0430: 19, \u0432\u0434\u0456: 19, \u0432\u0435\u0430: "x", \u0432\u0435\u043D\u043D: 18, \u0432\u0435\u043E: "v", \u0432\u0435\u0440\u043E\u0458: "x", \u0432\u0435\u0440\u0443\u0432: "x", \u0432\u0435\u045A: "x", \u0432\u0436\u0434: 19, \u0432\u0436\u0435: 19, \u0432\u0437\u0435: 16, \u0432\u0437\u0438\u043C\u0430: 16, \u0432\u0438\u0432\u0447: 19, \u0432\u0438\u0436\u0434: 16, \u0432\u0438\u043C\u0435: "x", "\u0432\u0438\u043E ": "v", \u0432\u0438\u043E\u0442: "x", \u0432\u0438\u043F: 19, \u0432\u0438\u0442\u0441: 18, \u0432\u0438\u0447\u0430\u0439: 19, "\u0432\u0438\u0448\u0435 ": "v", \u0432\u043A\u044A: 16, "\u0432\u043C\u0435 ": "x", \u0432\u043C\u0456: 19, \u0432\u043D\u0430\u0442: "x", \u0432\u043D\u044B: 18, \u0432\u043D\u0456: 19, "\u0432\u043E\u0433 ": "v", "\u0432\u043E\u043D\u0430 ": 19, \u0432\u043E\u043E\u043F: "x", \u0432\u043E\u043F\u0440: 18, \u0432\u043E\u044F\u0442: 16, \u0432\u043E\u0451: 18, \u0432\u0440\u0432: "x", \u0432\u0440\u0437: "x", \u0432\u0440\u043D: "x", \u0432\u0440\u0441\u043A: "x", \u0432\u0441\u0430\u043D: "1m", \u0432\u0441\u0435\u0433: 18, \u0432\u0441\u0435\u043A: 16, "\u0432\u0441\u0435\u0445 ": 18, \u0432\u0441\u0438: 16, \u0432\u0441\u0442\u0440\u0435: 18, \u0432\u0441\u0443: "x", \u0432\u0441\u044A: 16, \u0432\u0441\u0451: 18, \u0432\u0441\u0456: 19, "\u0432\u0443\u0432\u0430 ": "x", \u0432\u0443\u0432\u0430\u043C: "x", \u0432\u0443\u0432\u0430\u0448: "x", \u0432\u0443\u0435: 18, \u0432\u0443\u0447\u044B: 17, \u0432\u0446\u0438: "x", \u0432\u0447\u0438\u0442: 19, \u0432\u0447\u043E\u0440: 19, \u0432\u044A\u0437: 16, \u0432\u044A\u043B: 16, \u0432\u044A\u043D: 16, \u0432\u044A\u0440: 16, \u0432\u044A\u0442: 16, \u0432\u044B\u0432\u0443: 17, \u0432\u044B\u0435: 18, "\u0432\u044B\u0439 ": 18, \u0432\u044B\u0440\u0430\u0448: 17, "\u0432\u044B\u044F ": 17, "\u0432\u044C ": 18, "\u0432\u044D ": "1m", \u0432\u044F\u0432: 16, \u0432\u044F\u0434\u043E\u043C: 17, \u0432\u044F\u0439: 16, \u0432\u044F\u0440\u043D\u0443: 17, \u0432\u0451\u0442: 18, \u0432\u0456\u0432: 19, \u0432\u0456\u0439: 19, "\u0432\u0456\u043D ": 19, \u0432\u0458\u0435: "x", \u0432\u0459\u0430: "v", \u0432\u045F: "x", \u0432\u04D9: "1k", \u0432\u04E9: "1k", "\u0433-\u0434": "x", \u0433i: "1l", "\u0433\u0430\u0430 ": "1m", \u0433\u0430\u0430\u0440: "1m", \u0433\u0430\u0432\u0430\u0440: 17, \u0433\u0430\u0434\u0437: 17, \u0433\u0430\u043E: "v", \u0433\u0433\u04AF: "1m", "\u0433\u0434\u0430 ": 18, "\u0433\u0434\u0430\u0436 ": "1m", \u0433\u0435\u0437: "1k", \u0433\u0436: "1m", \u0433\u0438\u0435: 18, \u0433\u0438\u0439\u043D: "1m", \u0433\u043B\u0435\u0436: 16, \u0433\u043D\u0430\u043C: "x", \u0433\u043D\u0430\u0445: 16, \u0433\u043D\u0435\u043C\u0435: "x", \u0433\u043E\u0434\u043D\u0456: 19, \u0433\u043E\u043B\u044F\u043C: 16, \u0433\u043E\u0440\u0430\u0434: 17, \u0433\u0440\u0430\u0442\u0438: 19, \u0433\u0440\u0431: "x", \u0433\u0440\u0434: "x", \u0433\u0440\u043E\u0448\u0435: 19, "\u0433\u0442 ": "1m", \u0433\u0442\u044D: "1m", \u0433\u0443\u043B\u044C\u043D: 17, \u0433\u0447\u044B: 17, \u0433\u044A\u0440: 16, "\u0433\u044B ": "1k", \u0433\u044B\u0439: "1k", \u0433\u044B\u043B: "1k", \u0433\u044B\u043D: "1k", \u0433\u044B\u0440: "1k", \u0433\u044B\u0448: "1k", \u0433\u044D\u0434: "1m", \u0433\u044D\u0436: "1m", \u0433\u044D\u043B: "1m", "\u0433\u044D\u043D ": "1m", \u0433\u044D\u0440: "1m", \u0433\u044D\u0441\u044D: "1m", \u0433\u044D\u0442: 17, \u0433\u0451: 18, \u0433\u0456\u0437: "1l", "\u0433\u0456\u043D ": "1l", \u0433\u04AF\u0439: "1m", \u0433\u04D9: "1k", "\u0434i ": "1l", "\u0434\u0430-": 18, \u0434\u0430\u0431\u0430: 17, "\u0434\u0430\u0433 ": "1m", \u0434\u0430\u0433\u0433: "1m", "\u0434\u0430\u0434 ": "1m", \u0434\u0430\u0435\u0446: 17, "\u0434\u0430\u0435\u0448 ": 17, \u0434\u0430\u0439\u0434: "1l", \u0434\u0430\u043B\u0434\u0430: "1m", \u0434\u0430\u043C\u0434\u0430: "1l", \u0434\u0430\u043D\u0430\u0441: "v", "\u0434\u0430\u043E ": "v", \u0434\u0430\u043F\u0430: 17, \u0434\u0430\u0440\u0430\u0430: "1m", \u0434\u0430\u0440\u0434\u044B: "1l", \u0434\u0430\u0440\u044B\u043D: "1l", \u0434\u0430\u0442\u044C: 18, \u0434\u0430\u0445\u0438: "1m", \u0434\u0430\u0446\u044C: 17, \u0434\u0430\u0451: 18, \u0434\u0432\u0430\u043C: 16, \u0434\u0432\u0430\u0458: "x", \u0434\u0432\u0456: 19, \u0434\u0434\u0430\u0433: "1m", \u0434\u0434\u0440: "x", \u0434\u0435\u0432\u0430\u043C: "x", \u0434\u0435\u0433\u0456: "1l", "\u0434\u0435\u043A\u0430 ": "x", \u0434\u0435\u043B\u0430\u0435: 18, "\u0434\u0435\u043C\u0435 ": "x", \u0434\u0435\u043D\u0435\u0433: 18, \u0434\u0435\u043D\u0435\u0441: "x", "\u0434\u0435\u043F ": "1l", \u0434\u0435\u0440\u0434\u0456: "1l", \u0434\u0435\u0440\u0456: "1l", \u0434\u0435\u0441\u0438: "v", "\u0434\u0435\u0442 ": 18, "\u0434\u0435\u0442\u044C ": 18, \u0434\u0435\u045A: "x", "\u0434\u0437\u0435 ": 17, \u0434\u0437\u0435\u0439: 17, \u0434\u0437\u0435\u043B: 17, \u0434\u0437\u0435\u043D: 17, \u0434\u0437\u0435\u0446: 17, \u0434\u0437\u044C: 17, \u0434\u0437\u0456\u043B: 17, \u0434\u0437\u0456\u043D: 17, \u0434\u0438\u043C\u0435: "x", "\u0434\u0438\u043F ": "1k", \u0434\u0438\u0442\u0438\u043D: 19, "\u0434\u043B\u0430\u0430 ": "1m", "\u0434\u043C\u0430\u0445 ": "v", \u0434\u043C\u0438\u0446\u0430: 16, \u0434\u043D\u0430\u0448: "x", "\u0434\u043D\u0435\u0441 ": 16, \u0434\u043D\u0438\u043E: "x", \u0434\u043D\u0438\u044F: 16, \u0434\u043D\u044A: 16, \u0434\u043E\u0430: "x", \u0434\u043E\u0431\u044A: 16, \u0434\u043E\u0434\u0435\u043A: "x", \u0434\u043E\u0434\u043E: 19, \u0434\u043E\u0435: 18, "\u0434\u043E\u0436 ": "1m", "\u0434\u043E\u043E ": "1m", \u0434\u043E\u043F\u043E\u043C: 19, \u0434\u043E\u0446: "x", \u0434\u043E\u0458: "x", \u0434\u043F\u043E\u0432: 19, \u0434\u0440\u044D: 17, "\u0434\u0441\u0430\u043D ": "1m", \u0434\u0442\u0438: 18, "\u0434\u0443\u0432\u0430 ": "x", \u0434\u0443\u0440\u0433: "1m", \u0434\u0443\u0440\u0442: "1m", \u0434\u0443\u0446: 17, \u0434\u0446\u0430: 18, \u0434\u0446\u044F: 19, \u0434\u0447\u044B: 17, \u0434\u044A\u043B: 16, \u0434\u044A\u0440: 16, \u0434\u044A\u0442: 16, \u0434\u044B\u043B\u0430\u0440: "1k", \u0434\u044D\u0433: "1m", \u0434\u044D\u043D\u0434: "1m", \u0434\u044D\u0445: "1m", \u0434\u044F\u0432: 16, \u0434\u044F\u043A: 19, \u0434\u0451: 18, \u0434\u0456\u0432: 19, \u0434\u0456\u0433: "1l", \u0434\u0456\u0439: 19, \u0434\u0456\u043A: "1l", \u0434\u0456\u0442: 19, \u0434\u0458: "v", \u0434\u0459: "v", \u0434\u045A: "v", \u0434\u04AF\u043D\u0438\u0435: "1l", \u0434\u04D9\u043C: "1k", \u0434\u04D9\u043D: "1k", "\u0434\u04D9\u0440 ": "1k", \u0434\u04E9\u043D: "1k", \u0434\u04E9\u0440\u0435\u0441: "1k", \u0435\u0301: 18, \u0435\u0430\u0432: "x", \u0435\u0430\u043C: "x", \u0435\u0431\u0430\u0448: "x", "\u0435\u0431\u0435\u043A ": "1k", "\u0435\u0431\u044F ": 18, \u0435\u0431\u0451: 18, \u0435\u0432\u043C\u0435: "x", \u0435\u0432\u044A: 16, \u0435\u0433\u0434\u0430: 18, \u0435\u0433\u043E\u0434: 18, \u0435\u0433\u0443\u0432: "x", "\u0435\u0433\u0456 ": "1l", \u0435\u0434i: "1l", "\u0435\u0434\u0430\u0435 ": 17, \u0435\u0434\u0430\u0448\u0435: "x", \u0435\u0434\u043D\u0430\u0433: 16, \u0435\u0434\u0443\u0432: "x", "\u0435\u0435\u0442 ": 18, \u0435\u0435\u0458: "x", \u0435\u0436\u0434\u0430\u0448: 16, "\u0435\u0437\u043D\u0435 ": "1k", \u0435\u0439\u0434\u0456: "1l", \u0435\u0439\u043C\u0456: "1l", \u0435\u0439\u0447: 18, \u0435\u043A\u0430\u043A: "x", \u0435\u043A\u0430\u043E: "v", \u0435\u043A\u0430\u0442\u0438: 19, \u0435\u043A\u0438\u0432: "v", \u0435\u043A\u043E\u043B\u043A: "x", \u0435\u043A\u043E\u0458: "x", \u0435\u043A\u0443\u0432: "x", \u0435\u043A\u044A: 16, \u0435\u043B\u0430\u043B: 18, \u0435\u043B\u0435\u0434: "1l", "\u0435\u043B\u043B\u0435 ": "1k", \u0435\u043B\u043C\u0438: "1k", \u0435\u043B\u043E\u0432\u0435: 18, \u0435\u043B\u0443\u0432: "x", \u0435\u043C\u0430\u0448\u0435: "x", \u0435\u043C\u0435\u0458: "x", \u0435\u043C\u044A: 16, \u0435\u043C\u044C: 18, "\u0435\u043C\u044F ": 18, "\u0435\u043C\u0456\u043D ": "1l", \u0435\u043D\u0433\u0435\u043D: "1l", "\u0435\u043D\u0434\u0456 ": "1l", "\u0435\u043D\u0435\u0433 ": 18, "\u0435\u043D\u0435\u0441 ": "x", \u0435\u043D\u0438\u043E\u0442: "x", \u0435\u043D\u0438\u044F\u0442: 16, "\u0435\u043D\u0447\u0435 ": "1k", \u0435\u043D\u0449: 18, \u0435\u043D\u0456\u043C: "1l", "\u0435\u043E\u043C\u0430 ": "v", \u0435\u0440i: "1l", "\u0435\u0440\u0430\u0437 ": "1k", "\u0435\u0440\u0434\u0456 ": "1l", \u0435\u0440\u0435\u043D\u0447: "1k", \u0435\u0440\u043E\u0442: "x", \u0435\u0440\u043E\u0458\u0430: "x", \u0435\u0440\u0442\u0435\u04A3: "1l", \u0435\u0440\u0443\u0458: "v", "\u0435\u0440\u044C ": 18, \u0435\u0440\u0456\u043D: "1l", \u0435\u0440\u04AF: "1k", \u0435\u0441\u0432\u0430: 16, "\u0435\u0441\u0446\u0456 ": 17, \u0435\u0441\u0456\u043D: "1l", \u0435\u0442i: "1l", \u0435\u0442\u043E\u0442: "x", \u0435\u0442\u0442\u0435\u0440: "1l", \u0435\u0442\u0443\u0432: "x", \u0435\u0442\u044A: 16, \u0435\u0442\u0456\u043D: "1l", "\u0435\u0443 ": "1l", "\u0435\u0445\u0430\u043B ": 18, \u0435\u0446\u0446: 17, \u0435\u0448\u0435\u043D\u0435: "1k", \u0435\u0448\u043A\u0456: "1l", \u0435\u0448\u044C: 18, \u0435\u0449\u043D: 16, \u0435\u044D: 18, \u0435\u044E\u0441: 18, \u0435\u0451: 18, \u0435\u0458\u043D: "x", \u0435\u0459\u0430: "v", \u0435\u04A3\u0433: "1l", \u0435\u04A3\u043D: "1k", \u0436\u0430\u0430: "x", \u0436\u0430\u043B\u044F\u0432: 16, \u0436\u0430\u0440\u0433\u0430: "1m", \u0436\u0430\u0441\u0442\u0430: "1l", \u0436\u0430\u0442\u044B\u0440: "1l", \u0436\u0430\u0443: "1l", \u0436\u0430\u0448: 17, \u0436\u0430\u04A3: "1l", \u0436\u0431\u0438: 16, \u0436\u0434\u044C: 18, \u0436\u0435\u0431\u0438: "x", "\u0436\u0435\u0432 ": "x", "\u0436\u0435\u043B ": "x", \u0436\u0435\u043B\u0438\u043C: "v", "\u0436\u0435\u043C\u0435 ": "x", \u0436\u0435\u0445: 16, \u0436\u0438\u0437: 18, \u0436\u0438\u043B\u043B: "1m", \u0436\u0438\u0442\u0442: 19, \u0436\u043C: 18, \u0436\u043E\u0442: "x", \u0436\u0440\u0442: "x", \u0436\u0441: 18, \u0436\u044A: 16, \u0436\u044B\u0432: 17, \u0436\u044B\u043B\u0434\u0430: "1l", \u0436\u044B\u043B\u044B: "1l", "\u0436\u044B\u0440 ": 17, \u0436\u044B\u0446: 17, \u0436\u044C: 18, \u0436\u0451: 18, \u0436\u0456\u043D: 19, \u0436\u0458: "x", \u0436\u0459: "v", \u0436\u045A: "v", \u0436\u04AF: "1l", \u0436\u04D9: "1l", \u0436\u04E9: "1l", \u0437i: "1l", \u0437\u0430\u0431\u0456: 17, \u0437\u0430\u043A\u044A: 16, \u0437\u0430\u043A\u0456: 19, \u0437\u0430\u043B\u0438\u0448: 19, \u0437\u0430\u043C\u0430\u0442: "1l", \u0437\u0430\u043F\u0438\u0442: 19, \u0437\u0430\u043F\u043E\u0447: 16, \u0437\u0430\u0440\u0435\u043C: "x", "\u0437\u0430\u0442\u0438 ": 19, \u0437\u0430\u0442\u044C: 18, \u0437\u0430\u0444\u0430: "x", \u0437\u0430\u0446\u044C: 17, \u0437\u0430\u0447\u0435\u043C: 18, \u0437\u0430\u0448\u0442\u043E: "v", \u0437\u0430\u0449\u043E: 16, \u0437\u0430\u04A3: "1l", "\u0437\u0431\u0435\u043D ": "1l", "\u0437\u0431\u043E\u0433 ": "v", \u0437\u0431\u043E\u0440\u0443: "x", \u0437\u0432\u0430\u043C: 16, "\u0437\u0432\u0430\u0442 ": 16, \u0437\u0432\u0438\u0447: 19, \u0437\u0432\u044A: 16, \u0437\u0434\u0435\u0441\u044C: 18, \u0437\u0434\u0437: 17, \u0437\u0434\u043D: 18, \u0437\u0435\u0434: "x", "\u0437\u0435\u043C\u0430 ": 16, \u0437\u0435\u0445: 16, \u0437\u0438\u0458\u0430: "x", \u0437\u043A\u043B\u044E: 16, \u0437\u043B\u0438\u0437: 16, \u0437\u043D\u0430\u0430: "x", \u0437\u043D\u0430\u0439\u043E: 19, \u0437\u043D\u0430\u043A\u043E: 18, \u0437\u043D\u0430\u043E: "v", "\u0437\u043D\u0430\u0448 ": "v", \u0437\u043D\u043E\u0432\u0443: 19, \u0437\u043D\u044C: 18, \u0437\u043E\u0448\u0442: "x", \u0437\u043F\u0438: 16, \u0437\u043F\u043E\u0432: 19, \u0437\u043F\u043E\u043B: 16, \u0437\u043F\u0440\u0430: 16, \u0437\u0440\u0430\u0431\u0456: 17, \u0437\u0440\u0430\u0437\u0443: 17, \u0437\u0440\u043E\u0431\u0438: 19, \u0437\u0440\u043E\u0437: 19, \u0437\u0441\u043A\u0438: 18, \u0437\u0443\u043F\u0438\u043D: 19, \u0437\u0443\u0441\u0442\u0440: 19, \u0437\u0443\u0441\u0456\u043C: 17, \u0437\u0445\u0432: 16, \u0437\u0445\u043E: 16, \u0437\u0447\u0430\u043A: 16, \u0437\u044C\u043A: 19, \u0437\u044C\u044F: 18, \u0437\u044F\u0446: 17, \u0437\u0456\u043D\u0434: "1l", \u0437\u0456\u0446: 17, \u0437\u0458: "x", \u0437\u04AF\u0439: "1m", \u0437\u04D9: "1k", \u0437\u04E9: "1m", "\u0438)": 18, \u0438\u0301: 18, \u0438\u0431\u043A: 18, \u0438\u0431\u0443\u0434\u044C: 18, \u0438\u0432\u0430\u0435: 18, \u0438\u0432\u0438\u0439: 19, \u0438\u0432\u043C: "x", \u0438\u0432\u043E\u0442\u043E: "x", \u0438\u0432\u0441\u044F: 19, \u0438\u0432\u044B: 18, \u0438\u0432\u0451: 18, \u0438\u0432\u0456: 19, "\u0438\u0434\u0430\u043C ": "x", \u0438\u0434\u0435\u0442\u044C: 18, \u0438\u0434\u0442: 18, \u0438\u0434\u0443\u0432: "x", \u0438\u0434\u044D: "1m", \u0438\u0434\u044F\u0445: 16, \u0438\u0435\u0445: 18, \u0438\u0435\u045A: "x", \u0438\u0436\u0434\u0430: 16, "\u0438\u0437-": 18, \u0438\u0437\u043A\u043B: 16, "\u0438\u0437\u043D\u0438 ": 18, \u0438\u0437\u043F: 16, \u0438\u0437\u0441: 16, \u0438\u0437\u0442: 16, \u0438\u0437\u0445: 16, \u0438\u0437\u0447\u0430: 16, \u0438\u0439\u0433: "1m", \u0438\u0439\u0436: "1m", "\u0438\u0439\u043C ": "1m", "\u0438\u0439\u043D ": "1m", \u0438\u0439\u0441\u044D: "1m", \u0438\u0439\u0448: 19, "\u0438\u043A\u043E\u0442 ": "x", \u0438\u043A\u043E\u0458: "x", \u0438\u043A\u0442\u043E: 18, \u0438\u043B\u0430\u0441\u044F: 19, "\u0438\u043B\u0435\u043F ": "1k", \u0438\u043B\u043E\u0441\u044F: 19, \u0438\u043C\u0430\u0430: "x", \u0438\u043C\u0430\u043B\u043D: 16, \u0438\u043D\u0430\u0433\u0438: 16, "\u0438\u043D\u044B ": 18, \u0438\u043D\u0456: 19, \u0438\u0440\u0430\u0430: "x", \u0438\u0440\u043E\u0432\u0430: 18, \u0438\u0440\u044D: "1m", \u0438\u0440\u0456: 19, "\u0438\u0441\u0430\u043C ": "v", \u0438\u0441\u043A\u0430\u0448: 16, \u0438\u0441\u043B\u0435\u0432: "x", "\u0438\u0441\u043B\u044F ": 16, \u0438\u0441\u044A: 16, \u0438\u0442\u0433: "1m", \u0438\u0442\u0435\u043F: "1k", \u0438\u0442\u0435\u0441\u043D: 16, \u0438\u0442\u0438\u043C: 19, "\u0438\u0442\u0442\u0435 ": "1k", \u0438\u0442\u0442\u044F: 19, \u0438\u0442\u044B: 18, \u0438\u0442\u04AF: "1k", \u0438\u0442\u04D9\u0440: "1k", \u0438\u0445\u043C: 16, "\u0438\u0445\u0442\u0435 ": 16, \u0438\u0446\u044B: 18, \u0438\u0446\u0456: 19, \u0438\u0447\u0430\u0442\u0435: 16, \u0438\u0447\u043A\u0438\u0442: 16, \u0438\u0448\u043A\u043E: 18, "\u0438\u0448\u0442\u043E ": "x", \u0438\u0448\u044C: 18, "\u0438\u0449\u043E ": 16, \u0438\u044A: 16, \u0438\u044B: "1l", \u0438\u044D: 18, \u0438\u044F\u043B\u044B: "1l", \u0438\u044F\u0441\u044B: "1l", \u0438\u044F\u0442\u0430: 16, \u0438\u0451: 18, \u0438\u0456: "1l", \u0438\u0458\u0435: "v", \u0438\u0458\u0438: "v", \u0438\u0458\u0443: "v", \u0438\u0459: "v", \u0438\u045A\u0435: "v", \u0438\u04A3: "1k", "\u0439)": 18, "\u0439-\u0434\u043E": 16, \u0439\u0430: 18, "\u0439\u0433 ": "1m", \u0439\u0433\u0430\u0430: "1m", \u0439\u0433\u043E: 17, \u0439\u0434\u0437: 17, \u0439\u0435\u043B: "1l", "\u0439\u0436 ": "1m", \u0439\u0438: 18, \u0439\u043B\u0430\u043D\u044B: "1l", "\u0439\u043B\u0430\u0440 ": "1k", \u0439\u043B\u0433\u043E: "1m", \u0439\u043B\u0435\u043F: 17, \u0439\u043C\u044B\u043D: "1l", \u0439\u043C\u0456\u043D: "1l", \u0439\u043D\u0430\u0442\u0430: 16, \u0439\u043D\u044F\u0442: 19, "\u0439\u043E\u0433\u043E ": 19, \u0439\u043E\u043A\u043B\u0430: "1k", \u0439\u043E\u043C\u0443: 19, \u0439\u0441\u0430\u043D: "1m", \u0439\u0441\u0435\u0442: 16, "\u0439\u0441\u0442\u0430 ": 18, \u0439\u0441\u0446: 17, \u0439\u0441\u044C: 19, \u0439\u0441\u044D\u043D: "1m", \u0439\u0443: 19, \u0439\u0445: "1m", \u0439\u0447\u0430\u043D: "1k", \u0439\u0447\u0430\u0441: 18, \u0439\u0448\u043E\u0432: 19, \u0439\u0449: 18, "\u0439\u044B ": "1l", \u0439\u044B\u043C: "1l", \u0439\u044B\u043D: "1l", \u0439\u044F: 18, \u0439\u0456: "1l", \u0439\u04D9: "1k", \u0439\u04E9: "1k", \u043Ae: "1l", \u043A\u0430\u0430: "x", "\u043A\u0430\u0431 ": 17, "\u043A\u0430\u0432\u043E ": 19, "\u043A\u0430\u0433\u0430 ": 17, "\u043A\u0430\u0434\u0435 ": "x", \u043A\u0430\u0436\u0430\u0432: "x", \u043A\u0430\u0436\u0430\u043C: "x", \u043A\u0430\u0436\u0434: 18, \u043A\u0430\u0437\u044B\u0432: 18, \u043A\u0430\u0439\u0434\u0430: "1k", \u043A\u0430\u0439\u0447: "1k", \u043A\u0430\u043A\u0438: 18, \u043A\u0430\u043A\u043E\u0439: 18, \u043A\u0430\u043A\u0442\u043E: 16, \u043A\u0430\u043A\u044A: 16, \u043A\u0430\u043B\u0434\u044B: "1k", "\u043A\u0430\u043B\u0456 ": 17, \u043A\u0430\u0440\u0448: "1k", \u043A\u0430\u0440\u044B\u0441: 17, "\u043A\u0430\u0442\u043E ": 16, \u043A\u0430\u0445\u0430: 17, \u043A\u0432\u043E\u0442: 16, \u043A\u0433: 18, \u043A\u0435\u0431\u0435: "1k", \u043A\u0435\u0437: "1l", \u043A\u0435\u043B\u0433: "1l", \u043A\u0435\u043B\u043C: "1l", \u043A\u0435\u043B\u0456: "1l", \u043A\u0435\u043C\u043D\u0435: "1k", \u043A\u0435\u043D\u0456: "1l", \u043A\u0435\u0440\u0435\u043A: "1l", \u043A\u0435\u0442\u0442: "1l", \u043A\u0435\u0448\u0435\u043B: "1k", \u043A\u0435\u0448\u0435\u043D: "1k", \u043A\u0435\u04A3: "1l", \u043A\u0436: 18, "\u043A\u0438\u0435 ": 18, \u043A\u0438\u043B\u0435: "1k", "\u043A\u0438\u043E\u0442 ": "x", \u043A\u0438\u0442\u0430\u043F: "1k", \u043A\u0438\u0442\u0435\u0440: "1k", \u043A\u0438\u0442\u0442\u0435: "1k", "\u043A\u0438\u044F\u0442 ": 16, "\u043A\u043B\u0430\u0440 ": "1k", \u043A\u043B\u0430\u0440\u044B: "1k", \u043A\u043B\u0443\u0447: "x", \u043A\u043C\u0443: "x", \u043A\u043D\u044B: "1k", \u043A\u043D\u0456\u0433: 17, "\u043A\u043E\u0433 ": "v", \u043A\u043E\u0433\u0430\u0442: 16, \u043A\u043E\u0433\u0430\u0448: "x", \u043A\u043E\u0435\u0442: 16, \u043A\u043E\u0436\u043D\u044B: 17, \u043A\u043E\u043B\u0438\u043A: "v", \u043A\u043E\u043B\u0438\u0441: 19, \u043A\u043E\u043B\u043A\u0443: "x", \u043A\u043E\u043C\u043D: 18, \u043A\u043E\u043D\u0447\u0438: 18, \u043A\u043E\u0442\u043E\u0440: 18, \u043A\u043E\u0445\u0430: 19, "\u043A\u043E\u044F\u0448 ": "1k", \u043A\u0440\u0441: "x", \u043A\u0440\u0448: "x", \u043A\u0441\u0430\u043C\u0430: 17, \u043A\u0443\u043B\u043B: "1k", "\u043A\u0443\u043B\u044C ": 17, \u043A\u0444: 18, \u043A\u0447\u0430: "1k", \u043A\u0449: 19, \u043A\u044A\u0440: 16, "\u043A\u044B ": "1k", \u043A\u044B\u0437: "1k", \u043A\u044B\u0439: "1k", \u043A\u044B\u043B: "1k", \u043A\u044B\u043D: "1k", \u043A\u044B\u0442: "1k", \u043A\u044D: 18, \u043A\u044E: 18, \u043A\u0451: 18, \u043A\u0456\u0432: 19, \u043A\u0456\u0437: "1l", \u043A\u0456\u043B\u044C: 19, \u043A\u0456\u043C\u043D: 19, \u043A\u0456\u043D\u0434\u0456: "1l", \u043A\u0456\u0445: 17, \u043A\u0456\u044F: 17, \u043A\u0459: "v", \u043A\u045A: "v", \u043A\u04AF\u0437: "1k", \u043A\u04AF\u043A: "1k", "\u043A\u04AF\u043D ": "1l", \u043A\u04AF\u0440\u0435: "1k", \u043A\u04AF\u0448: "1l", \u043A\u04D9\u043D: "1k", \u043A\u04E9\u043C: "1l", "\u043A\u04E9\u043D ": "1k", \u043A\u04E9\u043D\u0435: "1k", \u043A\u04E9\u043F: "1l", \u043A\u04E9\u0440\u0435: "1l", \u043A\u04E9\u0440\u0441: "1l", \u043A\u04E9\u0447: "1k", \u043A\u04E9\u0448: "1l", "\u043B'": "v", \u043B\u0430\u0430\u0440: "1m", \u043B\u0430\u0432\u0435\u043A: 17, \u043B\u0430\u0433\u0430\u043D: "1k", \u043B\u0430\u0435\u0442: 18, "\u043B\u0430\u043B ": 18, \u043B\u0430\u043C\u044B\u0439: "1k", \u043B\u0430\u0440\u0433: "1k", \u043B\u0430\u0440\u0434\u044B: "1l", \u043B\u0430\u0440\u043D\u044B: "1k", \u043B\u0430\u0442\u044C: 18, \u043B\u0430\u044E: 18, \u043B\u0433\u0430\u043D: "1k", \u043B\u0433\u0435\u043D: "1l", \u043B\u0433\u044B: "1k", \u043B\u0433\u0456: "1l", "\u043B\u0434 ": "1m", "\u043B\u0434\u0430\u0430 ": "1m", \u043B\u0434\u0430\u0440: "1l", \u043B\u0434\u0456: "1l", \u043B\u0435\u0434\u0430\u0439: 16, \u043B\u0435\u0434\u0432\u0430: 16, \u043B\u0435\u0434\u0443\u044E: 18, \u043B\u0435\u0434\u0456: "1l", \u043B\u0435\u0436\u0434: 16, \u043B\u0435\u043A\u0435\u0442: "1l", \u043B\u0435\u043F\u0448\u0430: 17, \u043B\u0435\u0440\u0456: "1l", \u043B\u0435\u0441\u0456: "1l", "\u043B\u0435\u0445 ": 16, \u043B\u0435\u0458: "x", \u043B\u0435\u045A: "x", "\u043B\u0436 ": "1m", "\u043B\u0436\u0435\u043D ": 18, \u043B\u0436\u043D\u044B: 18, \u043B\u0436\u044B: 17, \u043B\u0437\u0432: 16, \u043B\u0437\u0438: "x", \u043B\u0437\u0441\u0430\u043D: "1m", \u043B\u0438\u0438: 18, \u043B\u0438\u0439\u043D: "1m", \u043B\u0438\u0441\u044F: 19, \u043B\u0438\u0448\u043A: 18, "\u043B\u043A\u0435\u043D ": "1l", \u043B\u043A\u044B: "1k", \u043B\u043C\u0430\u0433: "1k", \u043B\u043C\u0430\u043D: "1k", \u043B\u043C\u0435\u0439: "1l", \u043B\u043C\u044B\u0439: "1k", \u043B\u043E\u0432\u0435\u043A: 18, \u043B\u043E\u0432\u0456: 19, \u043B\u043E\u043C\u0436: "1m", "\u043B\u043E\u043E ": "1m", \u043B\u043E\u0446: "x", "\u043B\u0441\u043E\u043D ": "1m", \u043B\u0441\u044D: "1m", \u043B\u0441\u044F: 18, \u043B\u0442\u0442\u0430\u0439: "1m", \u043B\u0442\u044D: "1m", \u043B\u0443\u0439\u0441: 18, \u043B\u0443\u0443: "1m", \u043B\u0449: 18, \u043B\u044A: 16, \u043B\u044B\u043A\u043B: "1k", \u043B\u044B\u0440: "1k", \u043B\u044B\u0448\u0430: 18, "\u043B\u044C\u043A\u043E ": 18, "\u043B\u044C\u043A\u0456 ": 17, \u043B\u044C\u043D\u044B\u0439: 18, \u043B\u044C\u0447: 18, \u043B\u044D\u0433: "1m", \u043B\u044D\u0445: "1m", \u043B\u044E\u0431\u0456\u0446: 17, "\u043B\u044F\u0446\u044C ": 17, "\u043B\u0456\u0434 ": 19, "\u043B\u0456\u043C ": "1l", \u043B\u0456\u0441\u044F: 17, \u043B\u0458: "x", \u043B\u04D9: "1k", \u043B\u04E9: "1m", \u043C\u0430\u0430\u0442: "x", \u043C\u0430\u0432\u0430\u0439: 16, \u043C\u0430\u0435\u0442: 18, \u043C\u0430\u0438: "x", \u043C\u0430\u0439\u0434: "1l", \u043C\u0430\u0439\u0436\u0435: 19, \u043C\u0430\u043B\u043A\u043E: 16, \u043C\u0430\u043B\u043A\u0443: "x", \u043C\u0430\u043B\u043D\u0430: 16, \u043C\u0430\u043D\u0430\u0439: "1m", \u043C\u0430\u043E: "v", \u043C\u0430\u0442\u044C: 18, \u043C\u0430\u0448\u044B\u043D: 17, \u043C\u0430\u0451: 17, \u043C\u0430\u045A: "v", \u043C\u0430\u04A3: "1l", \u043C\u0432\u0440: "x", "\u043C\u0434 ": "1m", \u043C\u0434\u0430\u0440: "1l", \u043C\u0434\u044B: "1l", \u043C\u0434\u0456: "1l", \u043C\u0435\u0430: "x", \u043C\u0435\u0439\u0434: "1l", \u043C\u0435\u043A\u0442: "1l", \u043C\u0435\u043C\u043B: "1l", "\u043C\u0435\u043D\u044F ": 18, \u043C\u0435\u0440\u0456: 19, "\u043C\u0435\u0441 ": "1l", "\u043C\u0435\u0441\u0435 ": "1l", \u043C\u0435\u0441\u0442\u0435: 18, \u043C\u0435\u0441\u0446: 17, \u043C\u0435\u0442\u0442: "1l", \u043C\u0437: 18, \u043C\u0438\u0436: "x", \u043C\u0438\u0441\u043B\u044F: 16, "\u043C\u0438\u0446\u0430 ": 16, \u043C\u0438\u045A: "x", \u043C\u043A\u0438\u043D: "1k", \u043C\u043A\u0456\u043D: "1l", \u043C\u043B\u0435\u043A\u0435: "1l", \u043C\u043E\u0432\u043B: 19, "\u043C\u043E\u0432\u044B ": 17, \u043C\u043E\u0433\u0442\u0438: 19, \u043C\u043E\u0436\u0434\u0430: "v", \u043C\u043E\u0436\u0443: 19, \u043C\u043E\u043B\u0430\u043C: "x", "\u043C\u043E\u043B\u044F ": 16, \u043C\u043E\u043C\u0438: 16, \u043C\u043E\u043D\u0434: "1k", \u043C\u043E\u0441\u044F: 19, \u043C\u043E\u0442\u0440: 18, "\u043C\u043E\u0448 ": "x", \u043C\u043E\u044F\u0442: 16, \u043C\u043E\u0451: 18, \u043C\u0440\u0430\u0437\u0430: "x", "\u043C\u0442\u0430\u0439 ": "1m", \u043C\u0443\u0441\u0438: 19, \u043C\u0443\u0443: "1m", \u043C\u0449: 18, \u043C\u044A\u0440: 16, \u043C\u044A\u0442: 16, \u043C\u044B\u0437: "1l", \u043C\u044B\u0441\u0442: "1l", \u043C\u044B\u0441\u044B: "1l", \u043C\u044C\u0434\u0430: "1m", \u043C\u044C\u0434\u0440: "1m", \u043C\u044D\u0434: "1m", "\u043C\u044D\u0440\u044B ": 17, \u043C\u044F\u0441\u0442: 16, \u043C\u0456\u0433: 19, "\u043C\u0456\u0437 ": "1l", \u043C\u0456\u0439: 19, \u043C\u0456\u043D\u0434\u0435: "1l", \u043C\u0456\u044E: 19, \u043C\u0458: "x", \u043C\u0459: "v", \u043C\u045A: "v", \u043C\u04AF\u043C: "1l", \u043C\u04D9\u043A: "1k", \u043C\u04D9\u0441\u0435\u043B: "1l", \u043C\u04D9\u0442: "1k", \u043C\u04E9\u043C: "1k", \u043C\u04E9\u043D\u0433: "1m", \u043D\u0430\u0432\u0447: 19, "\u043D\u0430\u0433\u0438 ": 16, \u043D\u0430\u0434\u0435\u044E: 18, "\u043D\u0430\u0434\u043E ": 18, \u043D\u0430\u0435\u0432: "x", "\u043D\u0430\u0435\u0442 ": 18, "\u043D\u0430\u0437\u0438 ": 16, \u043D\u0430\u0438\u0441: 16, "\u043D\u0430\u0439-": 16, \u043D\u0430\u0439\u0437: "1m", \u043D\u0430\u0439\u043B\u0435: 17, \u043D\u0430\u0439\u043E\u043C: 19, \u043D\u0430\u043A\u043E\u043C: 18, \u043D\u0430\u043B\u0430\u0442: 16, \u043D\u0430\u043C\u0430\u0433: 19, \u043D\u0430\u043C\u0430\u0439: "1m", "\u043D\u0430\u043E ": "v", \u043D\u0430\u0440\u0430\u043D: 16, \u043D\u0430\u0441\u043F\u0440: 19, \u043D\u0430\u0441\u0446: 17, \u043D\u0430\u0442\u044C: 18, "\u043D\u0430\u0445\u0430 ": 16, \u043D\u0430\u0458\u0434: "x", "\u043D\u0433\u0430\u043D ": "1k", \u043D\u0433\u0456: "1l", \u043D\u0434\u0430\u0430: "1m", \u043D\u0434\u0430\u0439: "1l", \u043D\u0434\u0430\u0440\u044B: "1l", \u043D\u0434\u0435\u0442: "1l", \u043D\u0434\u044B\u0439: "1k", "\u043D\u0435\u0430 ": "x", \u043D\u0435\u0434\u0456\u043B: 19, "\u043D\u0435\u0435 ": 18, "\u043D\u0435\u043A\u043E ": "v", "\u043D\u0435\u043C\u0435 ": "x", \u043D\u0435\u043C\u043D\u043E: 18, "\u043D\u0435\u043F ": "1k", \u043D\u0435\u0441\u0430\u043C: "x", \u043D\u0435\u0441\u043A\u043E: 18, \u043D\u0435\u0441\u0443\u0432: "x", "\u043D\u0435\u0449\u0430 ": 16, "\u043D\u0435\u0449\u043E ": 16, \u043D\u0435\u0458: "x", \u043D\u0435\u04A3: "1k", \u043D\u0438\u0431\u0443: 18, "\u043D\u0438\u043A\u043E ": "v", \u043D\u0438\u043A\u043E\u0442: "x", \u043D\u0438\u043A\u0442: 18, \u043D\u0438\u043C\u0430\u0435: 18, \u043D\u0438\u043C\u0430\u044E: 18, \u043D\u0438\u043D\u0434\u0438: "1k", "\u043D\u0438\u043E ": "v", "\u043D\u0438\u043E\u0442 ": "x", \u043D\u0438\u0441\u0430\u043C: "v", "\u043D\u0438\u0441\u0438 ": "v", \u043D\u0438\u0447\u0435\u0433: 18, \u043D\u0438\u0447\u0435\u043A: "1k", \u043D\u0438\u0448\u0442\u043E: "x", \u043D\u0438\u0449\u043E: 16, \u043D\u0438\u044E: 18, \u043D\u043B\u0435: "1k", \u043D\u043D\u0430\u0440: "1k", \u043D\u043D\u044B\u0439: 18, \u043D\u043D\u04D9\u0440: "1k", \u043D\u043E\u0435: 18, \u043D\u043E\u0445\u043E: "1m", "\u043D\u043E\u0449 ": 16, \u043D\u0441\u044C\u043A: 19, "\u043D\u0442\u0430\u0439 ": "1m", \u043D\u0442\u0442: "1l", \u043D\u0442\u044A: 16, "\u043D\u0443\u0432\u0430 ": "x", \u043D\u0443\u0432\u0430\u043C: "x", \u043D\u0443\u0432\u0441\u044F: 19, "\u043D\u0443\u043B ": 18, \u043D\u0443\u043E: "v", \u043D\u0443\u0446: 17, \u043D\u0446\u0456: 19, \u043D\u044A\u0442: 16, \u043D\u044B\u0435: 18, \u043D\u044B\u0441\u0442\u044B: "1l", \u043D\u044B\u044F: 17, \u043D\u044C\u0433: 18, \u043D\u044C\u0448: 18, "\u043D\u044D ": "1m", \u043D\u044D\u0433: "1m", \u043D\u044D\u0445: "1m", \u043D\u044F\u0432\u0430: 16, \u043D\u044F\u0434: 17, \u043D\u0456\u0439: 19, "\u043D\u0456\u043D ": "1l", \u043D\u0456\u0446\u0430: 17, \u043D\u0458: "x", \u043D\u045F: "x", \u043D\u04D9\u043D: "1k", "\u043D\u04D9\u0440 ": "1k", \u043D\u04E9: "1m", "\u043E-\u0442\u043E ": 18, "\u043E-\u0444": 18, \u043E\u0301: 18, "\u043E\u0430 ": "x", \u043E\u0431\u0430\u0434: 16, \u043E\u0431\u0430\u0440\u0430: "x", \u043E\u0431\u0430\u0442\u0430: "x", \u043E\u0431\u0438\u043A: 16, \u043E\u0431\u0438\u0442\u0438: 19, \u043E\u0431\u043E\u0439: 18, \u043E\u0431\u043E\u0442\u0443: 19, \u043E\u0431\u044F\u0441\u043D: 16, "\u043E\u0431\u0456 ": 19, \u043E\u0432\u0430\u0430: "x", "\u043E\u0432\u0430\u043B ": 18, \u043E\u0432\u0430\u0458: "v", \u043E\u0432\u0435\u0442\u0435: 16, \u043E\u0432\u0440\u0448: "x", \u043E\u0432\u044A: 16, \u043E\u0432\u044C: 18, \u043E\u0432\u044F\u0440: 16, "\u043E\u0432\u0456 ": 19, \u043E\u0432\u0456\u0434: 19, \u043E\u0432\u0456\u0440: 19, "\u043E\u0433\u0430\u0448 ": "x", \u043E\u0433\u0434: 18, \u043E\u0433\u044A: 16, \u043E\u0434\u0435\u043A\u0430: "x", \u043E\u0434\u0437\u0456: 17, "\u043E\u0434\u0438\u0442 ": 18, \u043E\u0434\u043C\u0430\u0445: "v", "\u043E\u0434\u043D\u0456 ": 19, \u043E\u0434\u043E\u043E: "1m", \u043E\u0434\u0456: 19, "\u043E\u0435-": 18, \u043E\u0435\u0433: 18, \u043E\u0435\u0439: 18, \u043E\u0435\u043C: 18, \u043E\u0435\u0445: 18, \u043E\u0436\u0435\u0431: "x", \u043E\u0436\u0435\u043C\u0435: "x", "\u043E\u0436\u0435\u0442 ": 18, \u043E\u0436\u043B: 19, \u043E\u0437\u0432\u043E\u043D: 18, \u043E\u0437\u043C\u043E\u0432: 19, \u043E\u0437\u043F: 19, \u043E\u0437\u0443\u043C: 19, \u043E\u0438\u043B: 18, "\u043E\u0438\u0442 ": 18, \u043E\u0438\u0442\u043E: 16, \u043E\u0438\u0445: 18, \u043E\u0439\u043B\u0430: "1l", \u043E\u0439\u043B\u0433: "1m", \u043E\u0439\u0442\u043E: 16, \u043E\u0439\u044B: "1l", "\u043E\u043A\u043B\u044F ": 16, \u043E\u043A\u043E\u043B\u0443: "x", "\u043E\u043A\u043E\u0442 ": "x", \u043E\u043A\u0443\u043A: "1k", \u043E\u043B\u0430\u0434\u044B: "1l", \u043E\u043B\u0430\u0440\u0434: "1l", "\u043E\u043B\u0434\u044B ": "1l", \u043E\u043B\u0435\u043C\u0430: "x", \u043E\u043B\u043E\u043E: "1m", \u043E\u043B\u0441\u043E: "1m", \u043E\u043B\u044B\u043F: "1l", \u043E\u043B\u044C\u0437: 18, \u043E\u043B\u044C\u043A\u043E: 18, \u043E\u043B\u044C\u043A\u0456: 17, "\u043E\u043B\u044C\u0448 ": 17, \u043E\u043B\u044C\u0448\u0435: 18, \u043E\u043B\u044F\u043C\u0430: 16, \u043E\u043C\u043D\u0430\u0442: 18, \u043E\u043C\u043E\u0439: 18, \u043E\u043C\u043E\u0447: 18, \u043E\u043C\u043E\u0448: "x", \u043E\u043C\u044A: 16, \u043E\u043D\u0430\u0437: 16, \u043E\u043D\u0438\u043C\u0430: 18, "\u043E\u043D\u043E\u0442 ": "x", "\u043E\u043D\u0456 ": 19, \u043E\u043E\u0431\u0449: 18, \u043E\u043E\u043F\u0448: "x", "\u043E\u043E\u0440 ": "1m", \u043E\u043F\u0430\u0434\u043D: "x", \u043E\u043F\u043E\u043C\u043E: 19, \u043E\u043F\u044B: 18, \u043E\u0440\u0430\u043C\u0435: "x", "\u043E\u0440\u0438\u0442 ": 18, "\u043E\u0440\u043E\u043E ": "1m", \u043E\u0440\u044B\u043D\u0434: "1l", \u043E\u0440\u0456: 19, "\u043E\u0441\u0438\u043B ": 18, \u043E\u0441\u043C\u043E\u0442: 18, \u043E\u0441\u0442\u044C: 18, \u043E\u0441\u0442\u0456: 19, \u043E\u0441\u044A: 16, "\u043E\u0442\u0435\u0446 ": 18, \u043E\u0442\u043E\u0440\u044B: 18, "\u043E\u0442\u043E\u0442 ": "x", \u043E\u0442\u0440\u0456: 19, \u043E\u0442\u044B\u0440\u044B: "1l", \u043E\u0442\u0456: 19, \u043E\u0445\u043E\u0436: 18, \u043E\u0446\u0456: 19, \u043E\u0447\u0435\u043A\u0438: "v", \u043E\u0447\u0435\u043C\u0443: 18, \u043E\u0447\u0435\u043D\u044C: 18, "\u043E\u0447\u0435\u0448 ": 19, \u043E\u0448\u0438\u0431: 18, \u043E\u0448\u0456: 19, \u043E\u044F\u0442\u0430: 16, \u043E\u044F\u0442\u043E: 16, "\u043E\u0451 ": 18, \u043E\u0451\u043C: 18, \u043E\u0458\u0430\u0442: "x", \u043E\u0458\u0431: "x", \u043E\u0458\u0434: "x", \u043E\u0458\u0435: "v", \u043E\u0458\u0438: "v", \u043E\u0458\u0441: "x", \u043E\u0459\u0430: "v", \u043E\u045A\u0438: "x", \u043E\u045A\u043E: "x", "\u043F'\u044F": 19, "\u043F\u0430-": 17, \u043F\u0430\u0432\u044F: 17, \u043F\u0430\u0434\u0430\u0431: 17, \u043F\u0430\u0434\u0430\u0440: 17, \u043F\u0430\u0434\u0437: 17, \u043F\u0430\u0437\u043D: 17, \u043F\u0430\u0439\u0434\u0430: "1l", \u043F\u0430\u043A\u0430: 17, \u043F\u0430\u043A\u043E\u0439: 17, \u043F\u0430\u043E: "v", \u043F\u0430\u0442\u044C: 18, \u043F\u0430\u0446\u0430\u043B: 17, \u043F\u0430\u0447\u0430: 17, \u043F\u0432: 16, \u043F\u0435\u0430: "x", \u043F\u0435\u0432\u043D: 19, \u043F\u0435\u0440\u0430\u0434: 17, \u043F\u0435\u0440\u0430\u043A: 17, \u043F\u0435\u0440\u0432: 18, \u043F\u0435\u0440\u0448\u044B: 17, \u043F\u0435\u044F: 16, \u043F\u0435\u0458: "x", \u043F\u0438\u0442\u0430\u045A: "v", \u043F\u0438\u0442\u0432: 16, \u043F\u0438\u0448\u0443\u0432: "x", \u043F\u043B\u043E\u0445: 18, \u043F\u043B\u0443\u0432: 16, \u043F\u043C: "1k", "\u043F\u043E-\u0434\u043E": 16, \u043F\u043E\u0431\u0430\u0440: "x", \u043F\u043E\u0431\u0430\u0447: 19, \u043F\u043E\u0432\u0456: 19, \u043F\u043E\u0433\u0430\u043D: 19, \u043F\u043E\u0434\u0438\u0432: 19, \u043F\u043E\u0439\u0442\u0438: 18, "\u043F\u043E\u043A\u0430 ": 18, \u043F\u043E\u043C\u0456: 19, \u043F\u043E\u043D\u0438\u043C: 18, \u043F\u043E\u0441\u043C\u043E: 18, \u043F\u043E\u0442\u043E\u043C: 18, \u043F\u043E\u0447\u0435\u043C: 18, "\u043F\u0440\u0430\u0437 ": 17, \u043F\u0440\u0430\u0446\u0430: 17, \u043F\u0440\u0430\u0446\u0443: 17, \u043F\u0440\u0430\u0448\u0430: "x", \u043F\u0440\u0430\u0448\u0443: "x", "\u043F\u0440\u0435\u0437 ": 16, \u043F\u0440\u0438\u0439\u0434: 19, \u043F\u0440\u0438\u0444: "x", \u043F\u0440\u0438\u0448\u043B: 18, \u043F\u0440\u044B\u0439: 17, \u043F\u0441\u0432: 16, \u043F\u0443\u043D\u043E: "v", \u043F\u0443\u0441\u043D: 16, "\u043F\u0443\u0442 ": "v", \u043F\u0444: 18, \u043F\u0448\u0442\u043E: "x", \u043F\u044A: 16, \u043F\u044F\u0432: 17, "\u043F\u044F\u0442\u044C ": 18, \u043F\u0451: 18, \u043F\u0456\u0434: 19, \u043F\u0456\u0437: 19, \u043F\u0456\u0441\u0430: 17, \u043F\u0456\u0442: 19, \u043F\u0456\u0448\u043E: 19, \u0440\u0430\u0430\u0442: "x", \u0440\u0430\u0431\u0456\u043B: 17, \u0440\u0430\u0434\u0432: 16, \u0440\u0430\u0434\u0437: 17, \u0440\u0430\u0434\u0438\u043C: "v", \u0440\u0430\u0434\u0438\u0448: "v", \u0440\u0430\u0437\u044F: 16, \u0440\u0430\u043C\u044B\u043D: "1l", \u0440\u0430\u043D\u0456\u0448: 19, "\u0440\u0430\u043E ": "v", \u0440\u0430\u0441\u0456: 17, \u0440\u0430\u0442\u044C: 18, \u0440\u0430\u0446\u044C: 17, \u0440\u0430\u0448\u0430\u043C: "x", "\u0440\u0430\u0449\u0435 ": 19, \u0440\u0432\u0430\u043C: 16, \u0440\u0432\u043F: "x", \u0440\u0432\u044B: 18, \u0440\u0432\u0458: "x", \u0440\u0433\u0430\u0430: "1m", \u0440\u0433\u044D: "1m", \u0440\u0433\u04AF: "1m", \u0440\u0434\u044B\u04A3: "1l", \u0440\u0435\u043C\u044F: 18, \u0440\u0435\u043D\u0441: 16, \u0440\u0435\u043D\u0447\u0435: "1k", \u0440\u0435\u0441\u0435\u0439: "1l", "\u0440\u0435\u0442\u044C ": 18, \u0440\u0437\u0443: "x", \u0440\u0438\u0444\u0430: "x", \u0440\u0439: 19, \u0440\u043Ai: "1l", \u0440\u043A\u0435\u043C: "1k", \u0440\u043B\u0435\u043A: "1k", "\u0440\u043B\u044B\u043A ": "1k", \u0440\u043B\u044D: "1m", \u0440\u043C\u044B\u0448: "1k", \u0440\u043D\u044B\u04A3: "1k", \u0440\u043E\u0434\u044A: 16, \u0440\u043E\u0437\u043C: 19, \u0440\u043E\u043A\u0456: 19, "\u0440\u043E\u0445\u0438 ": 19, "\u0440\u043E\u0448\u043E ": 18, "\u0440\u0441\u0430\u043D ": "1m", \u0440\u0441\u0435\u0442: "1l", \u0440\u0441\u044D: "1m", "\u0440\u0442\u0430\u0439 ": "1m", "\u0440\u0442\u0435\u04A3 ": "1l", \u0440\u0442\u044A: 16, "\u0440\u0442\u044B\u043A ": "1k", \u0440\u0442\u044D: "1m", \u0440\u0443\u0432\u0430\u043C: "x", \u0440\u0443\u0432\u0430\u0448: "x", \u0440\u0443\u0441\u0438\u044F: "1k", \u0440\u0443\u0443: "1m", "\u0440\u0447 ": "1m", \u0440\u0448\u0432: 16, \u0440\u044A: 16, \u0440\u044B\u0433\u043E: 17, \u0440\u044B\u044F: 17, \u0440\u044C\u0434: "1m", \u0440\u044D\u0431: 17, \u0440\u044D\u0434: 17, \u0440\u044D\u043B: 17, \u0440\u044D\u0441: 17, \u0440\u044D\u0445: "1m", \u0440\u044D\u0447: 17, \u0440\u0451: 18, \u0440\u0456\u0431: 19, \u0440\u0456\u0432: 19, \u0440\u0456\u0437: 19, \u0440\u0456\u043F: "1l", \u0440\u0456\u0447: 19, \u0440\u0456\u0448: 19, \u0440\u0459: "v", \u0440\u045A: "v", \u0440\u04D9: "1k", "\u0440\u2010": "1l", \u0441\u0430\u0431\u0430\u043A: 17, "\u0441\u0430\u0431\u0435 ": 17, "\u0441\u0430\u0435\u043D ": "1k", \u0441\u0430\u0439\u043D: "1m", \u0441\u0430\u043A\u0430\u0432: "x", \u0441\u0430\u043A\u0430\u043B: "x", \u0441\u0430\u043A\u0430\u043C: "x", \u0441\u0430\u043A\u0430\u0448: "x", "\u0441\u0430\u043C\u0435 ": 19, \u0441\u0430\u043D\u0430\u0430: "1m", "\u0441\u0430\u043D\u0434 ": "1m", \u0441\u0430\u043E: "v", \u0441\u0430\u043F\u0440: 17, "\u0441\u0430\u04A3 ": "1k", \u0441\u0432\u0430\u0431\u043E: 17, \u0441\u0432\u0430\u043A: "v", \u0441\u0432\u0430\u044E: 17, "\u0441\u0432\u0435 ": "v", "\u0441\u0432\u0438 ": "v", \u0441\u0432\u0440: "x", \u0441\u0432\u044A: 16, \u0441\u0432\u0456\u0442: 19, \u0441\u0434\u0435: 18, \u0441\u0435\u0431\u044F: 18, \u0441\u0435\u0433\u0434: 18, \u0441\u0435\u0433\u043E: 18, "\u0441\u0435\u0437 ": "1k", \u0441\u0435\u0437\u043D\u0435: "1k", "\u0441\u0435\u043A\u0438 ": 16, \u0441\u0436: 18, \u0441\u0437: 18, "\u0441\u0438\u043D\u0435 ": "1k", \u0441\u0438\u0447\u043A\u0438: 16, \u0441\u0438\u0447\u043A\u043E: 16, "\u0441\u043A\u0430\u043C ": 16, \u0441\u043A\u0430\u0448\u0435: 16, \u0441\u043A\u0435\u0440: "1l", \u0441\u043A\u0438\u0439: 18, \u0441\u043A\u0438\u043E: "x", \u0441\u043A\u0438\u044F: 16, \u0441\u043A\u043E\u043B: 18, \u0441\u043A\u044A: 16, \u0441\u043A\u0456\u043B: 19, "\u0441\u043B\u0435\u0432 ": "x", \u0441\u043B\u0435\u0434\u0432: 16, \u0441\u043B\u0435\u0434\u0443: 18, \u0441\u043B\u0435\u0445: 16, "\u0441\u043B\u0438\u043C ": "v", \u0441\u043B\u044B\u0448: 18, \u0441\u043B\u0456\u0434: 19, "\u0441\u043C\u0435\u0435 ": "x", \u0441\u043C\u044A: 16, \u0441\u043D\u044F\u0432: 16, \u0441\u043E\u0431\u0430\u0442: "x", \u0441\u043E\u043D\u0441\u043E: "1m", \u0441\u043F\u0430\u0432\u0430: "v", \u0441\u043F\u0438\u0435: "x", \u0441\u043F\u0438\u0458: "x", \u0441\u043F\u0440\u043E\u0441: 18, "\u0441\u043F\u044F ": 16, \u0441\u043F\u0456\u0432\u0430: 19, \u0441\u0440\u0435\u0449: 16, \u0441\u0441\u043A: 18, \u0441\u0441\u0442: 18, \u0441\u0442\u0430\u0434\u044B: "1l", "\u0441\u0442\u0430\u043B ": 18, \u0441\u0442\u0430\u044F\u0442: 16, \u0441\u0442\u0430\u0458: "v", \u0441\u0442\u043E\u043D\u0435: 18, \u0441\u0442\u0440\u0435\u0447: 18, \u0441\u0442\u0440\u0456: 19, \u0441\u0442\u0442: 16, \u0441\u0442\u044A: 16, \u0441\u0442\u0456\u043A: "1l", "\u0441\u0443\u043C ": "x", \u0441\u0443\u0440\u0433\u0443: "1m", \u0441\u0443\u0441\u0442\u0440: 17, \u0441\u0443\u0442\u0440\u0430: "v", \u0441\u0443\u0442\u0440\u0438: 16, \u0441\u0443\u0443: "1m", \u0441\u0443\u0448\u043D: "x", \u0441\u0443\u0449: 18, \u0441\u0446\u044E: 17, \u0441\u0447\u0430\u0441: 18, \u0441\u044A\u0434: 16, \u0441\u044A\u043B: 16, \u0441\u044A\u043D: 16, \u0441\u044A\u0440: 16, \u0441\u044A\u0442: 16, \u0441\u044C\u043A\u043E: 19, "\u0441\u044C\u043A\u0443 ": 19, \u0441\u044C\u0446: 17, "\u0441\u044D\u043D ": "1m", \u0441\u044F\u0431: 17, "\u0441\u044F\u043A\u0430 ": 16, \u0441\u044F\u0440: 17, \u0441\u0451\u0434: 17, \u0441\u0456\u0437: "1l", \u0441\u0456\u0446: 17, \u0441\u04AF\u0437: "1k", \u0441\u04AF\u0439: "1l", \u0441\u04D9\u0442: "1k", \u0441\u04E9\u0437: "1l", \u0441\u04E9\u0439\u043B\u0435: "1l", \u0441\u04E9\u043D: "1m", "\u0442i ": "1l", \u0442i\u043A: "1l", \u0442i\u043B: "1l", \u0442i\u043D: "1l", "\u0442\u0430\u0431\u0435 ": 17, \u0442\u0430\u0431\u0438\u0433: "1k", "\u0442\u0430\u0433\u043E ": 17, \u0442\u0430\u0435\u0442: 18, "\u0442\u0430\u0437\u0438 ": 16, "\u0442\u0430\u043A\u043E ": "v", \u0442\u0430\u043A\u0441\u0430: 17, \u0442\u0430\u043B\u0434\u044B: "1l", "\u0442\u0430\u043C\u043E ": "v", "\u0442\u0430\u043D\u0434 ": "1m", \u0442\u0430\u043D\u0434\u044B: "1l", \u0442\u0430\u043D\u043D\u0435: 17, \u0442\u0430\u043D\u0443\u0432: "x", "\u0442\u0430\u043E ": "v", \u0442\u0430\u0440\u0434: "1l", \u0442\u0430\u0440\u044B\u043D: "1l", \u0442\u0430\u0441\u0442\u044B: "1l", \u0442\u0430\u0442\u044C: 18, \u0442\u0430\u0446\u044C: 17, \u0442\u0432\u0430\u0440\u044F: 16, \u0442\u0432\u0435\u0442: 18, \u0442\u0432\u044A: 16, \u0442\u0432\u0456: 19, "\u0442\u0433\u0438\u0439 ": "1m", \u0442\u0433\u044D: "1m", "\u0442\u0435\u0431 ": 16, \u0442\u0435\u0431\u044F: 18, "\u0442\u0435\u0434\u0456 ": "1l", "\u0442\u0435\u0437\u0438 ": 16, \u0442\u0435\u043A\u043D: "x", \u0442\u0435\u0440\u0434\u0456: "1l", \u0442\u0435\u0441\u044F: 19, \u0442\u0435\u0443: "1l", \u0442\u0438\u0435\u0448: "1k", \u0442\u0438\u0439\u043C: "1m", "\u0442\u0438\u043E ": "v", \u0442\u0438\u0441\u044F: 19, "\u0442\u043A\u0430\u043D ": "1k", \u0442\u043A\u0435\u043D: "1l", \u0442\u043A\u0440\u044B: 18, \u0442\u043A\u044A: 16, \u0442\u043B\u0430\u0440: "1k", \u0442\u043D\u043E\u0432: 16, "\u0442\u043E-\u0442": 18, \u0442\u043E\u0431\u044B: 18, \u0442\u043E\u0431\u0456: 19, "\u0442\u043E\u0433\u0430 ": "v", \u0442\u043E\u0433\u043B: "1m", \u0442\u043E\u0436\u0435: 18, \u0442\u043E\u0437\u0438: 16, \u0442\u043E\u0438\u0442: 18, "\u0442\u043E\u043A\u0443-": 16, \u0442\u043E\u043D\u0456: 19, \u0442\u043E\u0440\u043C\u044B: "1k", "\u0442\u043E\u0441\u044C ": 19, \u0442\u0440\u0430\u043F\u0438: 19, "\u0442\u0440\u0438\u043D ": 16, \u0442\u0440\u043A: "x", \u0442\u0440\u043E\u0445\u0438: 19, \u0442\u0440\u044D: 17, \u0442\u0440\u044F\u0431: 16, \u0442\u0441\u044F: 18, \u0442\u0442i: "1l", "\u0442\u0442\u0430\u0439 ": "1m", \u0442\u0442\u0430\u0440: "1l", \u0442\u0442\u0435\u0440\u0456: "1l", "\u0442\u0442\u044B\u04A3 ": "1l", "\u0442\u0442\u044F ": 19, \u0442\u0442\u0456\u043A: "1l", \u0442\u0443\u0433\u0430\u043D: "1k", \u0442\u0443\u0441\u043B\u0430: "1m", \u0442\u0443\u0445\u0430\u0439: "1m", \u0442\u0443\u0458: "v", \u0442\u0449: 18, \u0442\u044A\u043B: 16, \u0442\u044A\u043D: 16, \u0442\u044A\u0440: 16, \u0442\u044A\u0442: 16, "\u0442\u044B\u044F ": 17, \u0442\u044C\u0435: 18, \u0442\u044C\u044E: 18, \u0442\u044D\u0434: "1m", \u0442\u044D\u0439: "1m", \u0442\u044D\u043B\u0435: 17, \u0442\u0451: 18, \u0442\u0456\u0432: 19, \u0442\u0456\u0433: "1l", \u0442\u0456\u0439: 19, \u0442\u0456\u043B\u0430: 19, \u0442\u0456\u043B\u044C: 19, \u0442\u0456\u043B\u0456: "1l", \u0442\u0456\u043F: "1l", \u0442\u0459: "v", \u0442\u045A: "v", \u0442\u04AF\u0433: "1k", \u0442\u04AF\u0441: "1l", \u0442\u04D9\u043C: "1k", \u0442\u04D9\u043D: "1k", \u0442\u04E9\u0448: "1k", "\u0443-\u0449": 16, \u0443i: "1l", \u0443\u0301: 18, \u0443\u0432\u0430\u0430: "x", \u0443\u0432\u0430\u043B\u0438: 19, \u0443\u0432\u0430\u0442\u0438: 19, \u0443\u0432\u0430\u0448\u0435: "x", "\u0443\u0432\u0430\u0458 ": "x", \u0443\u0432\u0430\u045A: "x", "\u0443\u0432\u0435\u043A ": "v", \u0443\u0432\u0438\u0434: 18, \u0443\u0432\u043A: 16, "\u0443\u0432\u0441\u044F ": 19, \u0443\u0433\u0430\u0430: "1m", \u0443\u0434\u0430\u0430: "1m", "\u0443\u0434\u0430\u043B ": "1m", \u0443\u0434\u0437\u0435: 17, \u0443\u0434\u0438\u043D\u043E: 19, \u0443\u0434\u043B\u0430\u0430: "1m", "\u0443\u0434\u044B\u04A3 ": "1l", \u0443\u0435\u0442: 18, \u0443\u0437\u043C: "v", \u0443\u0437\u0456: 19, \u0443\u0439\u043B: "1k", \u0443\u0439\u0441\u0442: 18, \u0443\u043A\u044B: "1k", "\u0443\u043B\u0430\u0439 ": "1k", \u0443\u043B\u0434\u044B: "1k", \u0443\u043B\u0437: "1m", \u0443\u043B\u043B\u0430: "1k", \u0443\u043B\u043C: "1k", \u0443\u043B\u0441\u0430: "1k", \u0443\u043B\u0443\u044B: "1k", \u0443\u043B\u044B\u043F: "1k", "\u0443\u043C\u0430\u043B ": 18, \u0443\u043C\u0456: 19, "\u0443\u043E ": "v", \u0443\u043E\u043F: "v", "\u0443\u043F\u0430\u043C ": "x", "\u0443\u043F\u044F ": 16, \u0443\u0440\u0430\u0434: "v", \u0443\u0440\u0430\u043B\u044B: "1l", \u0443\u0440\u0442\u0430\u0439: "1m", \u0443\u0440\u044B\u043D: "1k", "\u0443\u0441\u0438\u044F ": "1k", \u0443\u0441\u043F\u044F: 16, \u0443\u0441\u0441: 18, \u0443\u0441\u044A: 16, \u0443\u0441\u0451: 17, \u0443\u0442\u0440\u0438\u043D: 16, \u0443\u0442\u044B\u0440: "1k", "\u0443\u0443 ": "1m", \u0443\u0443\u0434: "1m", \u0443\u0443\u043B: "1m", \u0443\u0443\u0440: "1m", \u0443\u0443\u0441: "1m", "\u0443\u0446\u0430\u0436 ": "1m", \u0443\u0446\u044C: 17, \u0443\u0447\u0432: 16, \u0443\u0447\u0448: 18, \u0443\u0448\u0442\u0438: "x", \u0443\u044B\u043B: "1l", \u0443\u044B\u0440: "1l", \u0443\u044D: 18, \u0443\u044E\u0449: 18, \u0443\u0451: 18, \u0443\u0456: "1l", \u0443\u0458\u0435: "v", \u0443\u0458\u043D: "x", \u0443\u0458\u0443: "v", \u0443\u0459: "v", \u0443\u045A: "v", \u0443\u04A3: "1k", \u0443\u04D9: "1k", "\u0444-": 18, \u0444\u0430\u0442\u0435: "x", "\u0444\u0430\u0442\u0438 ": "x", \u0444\u0433: 18, \u0444\u0438\u043A\u0435\u0440: "1k", \u0444\u043C: 18, \u0444\u043E\u043D\u0443\u0432: 19, \u0444\u0440\u043A: "x", \u0444\u0440\u043B: "x", \u0444\u0443\u0441: "x", \u0444\u0447: 18, \u0444\u044A: 16, \u0444\u04D9: "1k", "\u0445-": 18, \u0445\u0430\u0430: "1m", \u0445\u0430\u0439\u0434: 16, \u0445\u0430\u043D\u0433\u0430: "1m", \u0445\u0430\u0440\u0430\u0430: "1m", \u0445\u0430\u0440\u0430\u0433: "1m", "\u0445\u0430\u0440\u0436 ": "1m", \u0445\u0430\u0440\u0438\u0443: "1m", \u0445\u0430\u0440\u0441: "1m", \u0445\u0430\u0442\u0438: 19, \u0445\u0430\u0442\u044B\u043D: "1k", \u0445\u0430\u0442\u044C: 18, \u0445\u0430\u0446: 17, \u0445\u0430\u0447: 17, \u0445\u0432\u0438: 19, \u0445\u0432\u044A: 16, \u0445\u0433\u04AF: "1m", \u0445\u0437: 18, \u0445\u0438\u0439\u0441: "1m", "\u0445\u0438\u043D ": "1m", "\u0445\u043C\u0435 ": 16, \u0445\u043E\u0434\u0437: 17, \u0445\u043E\u043A\u0443: "1k", \u0445\u043E\u043D\u043E\u0433: "1m", \u0445\u043E\u043E: "1m", "\u0445\u043E\u0440\u0430 ": 16, \u0445\u043E\u0440\u0430\u0442: 16, \u0445\u043E\u0442\u0438: 18, "\u0445\u043E\u0447\u0435 ": 19, \u0445\u043F: 18, \u0445\u0443\u0431: 16, \u0445\u0443\u0434\u0430\u043B: "1m", \u0445\u0447: 18, "\u0445\u0448\u044B ": "1k", \u0445\u044B\u0433: "1m", \u0445\u044D\u0434: "1m", \u0445\u044D\u0437: "1m", "\u0445\u044D\u043B ": "1m", \u0445\u044D\u043D: "1m", \u0445\u044D\u0440: "1m", \u0445\u044F: "1m", \u0445\u04AF: "1m", \u0445\u04D9: "1k", "\u0445\u04E9\u043D ": "1m", "\u0446-": 18, \u0446i: 19, \u0446\u0430\u0430: "1m", \u0446\u0430\u0433: "1m", "\u0446\u0430\u0442\u044C ": 18, \u0446\u0430\u0446: 17, \u0446\u0432\u0440: "x", \u0446\u0437: 18, "\u0446\u0438\u043C ": 19, \u0446\u0438\u044E: 18, \u0446\u0438\u044F\u0442: 16, \u0446\u043C: 17, \u0446\u043E\u0442: "x", \u0446\u0440\u0435: "x", \u0446\u0443\u0437\u044C: 19, \u0446\u0446\u044F: 17, \u0446\u044A: 16, \u0446\u044B\u044E: 17, \u0446\u044B\u044F: 17, \u0446\u044C\u043E: 19, \u0446\u044E\u0432: 19, \u0446\u044F\u0431: 17, \u0446\u044F\u0433: 17, \u0446\u044F\u0436: 17, \u0446\u044F\u043F: 17, \u0446\u044F\u0442: 19, \u0446\u0451: 17, \u0446\u0456\u0446: 17, \u0446\u0456\u044E: 19, \u0446\u0456\u044F: 19, \u0446\u04AF: "1m", \u0447\u0430\u0430: "x", "\u0447\u0430\u0433\u043E ": 17, \u0447\u0430\u0434\u0430\u0445: "1m", \u0447\u0430\u0434\u0434\u0430: "1m", \u0447\u0430\u0434\u043D: "1m", \u0447\u0430\u043A\u0430\u043C: 16, \u0447\u0430\u043A\u0432: 16, \u0447\u0430\u043C\u0430\u0439: "1m", \u0447\u0430\u043C\u0442\u0430: "1m", \u0447\u0430\u043C\u0443: 17, \u0447\u0430\u043E: "v", \u0447\u0430\u0441\u043B\u0456: 17, \u0447\u0430\u0441\u0442\u043B: 18, \u0447\u0435\u0433\u043E: 18, \u0447\u0435\u043A\u0430\u0442: 19, \u0447\u0435\u043B\u043E\u0432: 18, \u0447\u0435\u043D\u043D\u044F: 19, "\u0447\u0435\u0442 ": 18, \u0447\u0436: 18, \u0447\u0438\u0433\u0434: "1m", \u0447\u0438\u043B\u0438\u0449: 16, \u0447\u0438\u043D\u0438\u0439: "1m", \u0447\u0438\u043E: "v", \u0447\u0438\u0445\u0441: "1m", \u0447\u0438\u045A\u0430: "x", \u0447\u043E\u0433\u0430: 17, \u0447\u043E\u0433\u043E: 19, \u0447\u043E\u043B: 19, \u0447\u043E\u043C\u0443: 19, \u0447\u0442\u043E: 18, "\u0447\u0443\u0432\u0430 ": "x", \u0447\u0443\u043E: "v", \u0447\u0443\u0445: 16, \u0447\u0448\u0435: 18, \u0447\u044A: 16, \u0447\u044B\u0433\u0430: "1k", "\u0447\u044B\u043B\u0430 ": 17, \u0447\u044B\u043B\u0430\u0440: "1k", "\u0447\u044B\u043C ": 17, \u0447\u044B\u043C\u0430: 17, \u0447\u044B\u043D\u0430: 17, \u0447\u044B\u0442: 17, \u0447\u044B\u0446: 17, \u0447\u044C: 18, "\u0447\u044D ": 17, \u0447\u044D\u043D: 17, \u0447\u044E: 19, \u0447\u044F: 19, \u0447\u0451: 18, \u0447\u0456: 19, \u0447\u045A: "x", \u0447\u04D9: "1k", \u0447\u04E9: "1k", \u0448i: "1l", \u0448\u0430\u043E: "v", \u0448\u0430\u045A\u0435: "x", \u0448\u0431: "1k", \u0448\u0432\u0438: 19, \u0448\u0433: "1k", "\u0448\u0438\u0433 ": "1m", \u0448\u0438\u044F: 16, \u0448\u043A\u043E\u043C: 18, \u0448\u043B\u0430\u0434: "1k", \u0448\u043B\u0430\u0440: "1k", \u0448\u043B\u0456: 17, "\u0448\u043C\u0430\u0442 ": 17, "\u0448\u043E\u0432 ": 19, "\u0448\u043E\u043B ": "x", \u0448\u0442\u043E\u0442: "x", \u0448\u0442\u044B\u0440: "1k", \u0448\u0443\u0432\u0430\u043C: "x", "\u0448\u0443\u043B ": "1k", \u0448\u0443\u043D: "1k", \u0448\u0447\u0430: 17, \u0448\u0447\u044D: 17, \u0448\u044A: 16, \u0448\u044B\u0439: "1k", \u0448\u044B\u043B\u0430\u0440: "1l", \u0448\u044B\u044F: 17, \u0448\u044C\u0441: 18, \u0448\u044D: 17, \u0448\u044E: 18, \u0448\u0451: 18, \u0448\u0456\u043B: "1l", \u0448\u0456\u043D: "1l", \u0448\u0458: "x", \u0448\u0459: "v", \u0448\u045A: "v", \u0448\u04D9: "1k", \u0449\u0430\u0441\u043B\u0438: 19, \u0449\u0430\u0441\u0442\u043B: 16, \u0449\u0430\u0442\u0430: 16, \u0449\u0435\u0442\u043E: 16, \u0449\u0438\u044F: 16, \u0449\u043D\u0435: 16, \u0449\u043E\u0431: 19, \u0449\u043E\u0439: 19, \u0449\u043E\u0441: 19, \u0449\u043E\u0442: 16, \u0449\u0440: 18, \u0449\u0442: 16, \u0449\u044C: 18, \u0449\u044F: 16, \u0449\u0451: 18, \u0449\u0456: 19, \u044A\u0431: 16, \u044A\u0432: 16, \u044A\u0433: 16, \u044A\u0436: 16, \u044A\u043A: 16, \u044A\u043C: 16, \u044A\u043E: 16, \u044A\u043F: 16, \u044A\u0441: 16, \u044A\u0445: 16, \u044A\u0446: 16, \u044A\u0447: 16, \u044A\u0449: 16, \u044A\u044F: 18, \u044A\u0451: 18, \u044B\u0301: 18, \u044B\u0432\u0430\u0442: 18, \u044B\u0432\u0443\u0447: 17, "\u044B\u0433 ": "1m", \u044B\u0433\u043E\u0436: 17, \u044B\u0433\u044B: "1k", "\u044B\u0435 ": 18, "\u044B\u0437\u0434\u044B ": "1l", \u044B\u0437\u043C\u0435: "1l", "\u044B\u0437\u043C\u044B ": "1k", \u044B\u0438: 18, \u044B\u0439\u043C: "1k", \u044B\u0439\u0441\u044B: "1k", \u044B\u0439\u0448: 17, \u044B\u043A\u043A: "1k", \u044B\u043A\u043B\u0430\u0440: "1k", \u044B\u043A\u0442: "1k", \u044B\u043A\u0456: 17, \u044B\u043B\u0430\u0434: "1l", \u044B\u043B\u0430\u0441\u044F: 17, \u044B\u043B\u0433: "1k", \u044B\u043B\u0438: 18, \u044B\u043B\u044B\u043A: "1k", \u044B\u043B\u044B\u043C: "1l", \u044B\u043B\u0456: 17, \u044B\u043C\u0435\u043D: "1l", "\u044B\u043C\u043D\u044B ": "1k", \u044B\u043C\u0456: 17, \u044B\u043D\u0430\u043D: "1l", \u044B\u043D\u0434\u0430\u0440: "1l", \u044B\u043D\u043D\u0430: "1k", \u044B\u043D\u0448: "1l", \u044B\u043D\u0456: 17, \u044B\u043F\u0442: "1l", \u044B\u0440\u0430\u0434\u044B: "1l", "\u044B\u0440\u0430\u043A ": "1k", \u044B\u0440\u0433: "1k", \u044B\u0440\u044B\u0448: "1k", \u044B\u0441\u0442\u0430\u0440: "1l", \u044B\u0441\u0442\u0440: 18, "\u044B\u0441\u0442\u044B ": "1l", \u044B\u0442\u0430\u043D\u043D: 17, \u044B\u0442\u044C: 18, \u044B\u0443: 18, \u044B\u0444: "1k", \u044B\u0446\u0446: 17, \u044B\u0446\u044C: 17, \u044B\u0448\u0435: 18, \u044B\u0449: 18, \u044B\u044D: 17, \u044B\u0451: 17, \u044B\u0456: 17, \u044B\u04A3\u043C: "1k", \u044B\u04A3\u044B: "1l", \u044C\u0433\u0438: 18, \u044C\u0434\u0430\u0433: "1m", \u044C\u0434\u0430\u0440: "1m", \u044C\u0434\u0440\u0430: "1m", \u044C\u0436: "1m", \u044C\u0437\u043E: 18, \u044C\u0437\u044F: 18, \u044C\u0438: 18, \u044C\u0439: 19, \u044C\u043A\u043E\u044E: 19, "\u044C\u043C\u0456 ": 17, "\u044C\u043D\u044B\u0439 ": 18, \u044C\u043E\u0433: 19, \u044C\u043E\u043C: 19, \u044C\u0447\u0438: 18, \u044C\u0451: 18, \u044C\u04D9: "1k", "\u044D-": 18, \u044D\u0430: 17, \u044D\u0431\u043D: 17, \u044D\u0433\u0442: "1m", \u044D\u0433\u044D: "1m", \u044D\u0433\u04AF: "1m", "\u044D\u0434 ": "1m", \u044D\u0434\u0433\u0438\u0439: "1m", \u044D\u0434\u044D: "1m", \u044D\u0435: 17, "\u044D\u0436 ": "1m", \u044D\u0437\u044D: "1m", \u044D\u0439\u0448: 17, \u044D\u043B\u0435\u0444: 17, \u044D\u043B\u0436: "1m", \u044D\u043B\u0441: "1m", \u044D\u043B\u0442: "1m", \u044D\u043B\u0445\u0438\u0439: "1m", \u044D\u043B\u044D: "1m", \u044D\u043B\u0456: 17, \u044D\u043C\u044D\u0433: "1m", "\u044D\u043D\u0434 ": "1m", \u044D\u043D\u0438: "1m", \u044D\u043D\u043D\u0435: 17, "\u044D\u043D\u043D\u044F ": 17, \u044D\u043D\u044D: "1m", \u044D\u0440\u0438\u0439: "1m", \u044D\u0440\u043B: "1m", \u044D\u0440\u0442: "1m", \u044D\u0440\u0445: "1m", \u044D\u0440\u044D: "1m", \u044D\u0441\u044D\u043D: "1m", \u044D\u0442\u0430\u0433: 17, \u044D\u0442\u0430\u0439: 17, \u044D\u0442\u0438: 18, \u044D\u0442\u043E: 18, \u044D\u0442\u044B\u043C: 17, \u044D\u0445\u0433: "1m", \u044D\u0445\u0438\u0439: "1m", \u044D\u0445\u044D: "1m", \u044D\u0448\u043B: "1k", \u044D\u044D: "1m", \u044D\u0456: 17, "\u044E\u0431\u0438\u0442 ": 18, \u044E\u0432\u0430: 19, \u044E\u0434\u0430: 18, \u044E\u0434\u0437: 17, "\u044E\u0442 ": 18, \u044E\u0442\u0441: 18, \u044E\u0442\u044C: 19, \u044E\u0443: "1m", \u044E\u0446\u0446: 17, \u044E\u0446\u044C: 17, \u044E\u0447\u044B: 17, \u044E\u044B: "1k", \u044E\u0451: 18, \u044F\u0301: 18, \u044F\u0430: "1m", \u044F\u0431\u0432: 16, "\u044F\u0431\u0435 ": 17, \u044F\u0431\u044A: 16, \u044F\u0432\u0430\u0439: 16, \u044F\u0432\u0430\u043C: 16, "\u044F\u0432\u0430\u0445 ": "1m", \u044F\u0432\u0430\u0448: 16, \u044F\u0433\u043D\u0456\u043A: 17, "\u044F\u0433\u043E ": 17, \u044F\u0434\u0437: 17, \u044F\u0434\u043E\u0441\u0430: 16, "\u044F\u0435 ": 17, \u044F\u0435\u0442: 18, \u044F\u0435\u0446: 17, \u044F\u0437\u044B\u043A: 18, \u044F\u043A\u0430\u043A: 16, \u044F\u043A\u043E\u0438: 16, \u044F\u043A\u043E\u043B: 16, \u044F\u043A\u044A: 16, \u044F\u043B\u0433: "1k", \u044F\u043B\u0441: 18, \u044F\u043B\u0451: 17, \u044F\u043B\u0456: 17, \u044F\u043C\u0430\u043C: 16, \u044F\u043C\u0430\u0440: "1m", \u044F\u043C\u0430\u0448: 16, \u044F\u043F\u0435\u0440: 17, \u044F\u0440\u0430\u0442: "1k", \u044F\u0440\u0432: 16, \u044F\u0440\u044C: "1m", \u044F\u0440\u044D: 17, \u044F\u0441\u0442\u043E: 16, "\u044F\u0442\u0435\u043B ": 16, \u044F\u0444: "1k", "\u044F\u0445\u0430 ": 16, \u044F\u0445\u043C: 16, \u044F\u0445\u0448: "1k", \u044F\u0448\u0447: 17, \u044F\u0448\u044C: "1k", \u044F\u04A3: "1k", \u044F\u04AF: "1k", \u0450: "x", \u0451\u0431: 18, \u0451\u0434\u044B: 17, \u0451\u0436: 18, \u0451\u0441\u0446: 17, \u0451\u0442\u0435: 18, \u0451\u0442\u0441: 18, \u0451\u0445: 18, \u0451\u0447: 18, \u0451\u0448: 18, \u0451\u0449: 18, \u0452: "v", \u0453: "x", \u0454: 19, \u0455: "x", \u0456\u0431\u043D: 19, "\u0456\u0432 ": 19, \u0456\u0432\u0430\u044E\u0441: 19, \u0456\u0432\u043D: 19, \u0456\u0432\u0447: 19, \u0456\u0432\u044B: 17, \u0456\u0433\u0456\u043D: "1l", \u0456\u0434\u0432: 19, \u0456\u0434\u043A: 19, \u0456\u0434\u043D: 19, \u0456\u0434\u043E: 19, \u0456\u0434\u043F: 19, \u0456\u0434\u0441: 19, \u0456\u0434\u0447: 19, \u0456\u0434\u044D: 17, \u0456\u0434\u0456: 19, \u0456\u0437\u0433: "1l", \u0456\u0437\u0434\u0435: "1l", \u0456\u0437\u0434\u0456: "1l", \u0456\u0439\u043D: 19, \u0456\u0439\u0441\u043A: 17, \u0456\u043A\u0430\u0432\u043E: 19, \u0456\u043A\u0430\u0440: 19, \u0456\u043A\u043E\u043B\u0438: 19, \u0456\u043A\u043E\u043B\u0456: 17, \u0456\u043A\u0442\u0435: "1l", \u0456\u043A\u0442\u0456: "1l", "\u0456\u043A\u0456 ": 17, \u0456\u043B\u0433: "1l", \u0456\u043B\u0434: "1l", \u0456\u043B\u0438: 19, \u0456\u043B\u043C: "1l", \u0456\u043B\u044C\u043A: 19, \u0456\u043B\u044C\u043D\u0438: 19, \u0456\u043B\u044C\u0448: 19, \u0456\u043B\u0456\u0433\u0456: "1l", \u0456\u043B\u0456\u043A: "1l", "\u0456\u043C'": 19, "\u0456\u043C\u0435\u043D ": "1l", \u0456\u043C\u043D\u0430: 19, \u0456\u043C\u0456\u0437: "1l", \u0456\u043D\u0434\u0435\u0433: "1l", \u0456\u043D\u0438: 19, \u0456\u043D\u0447: 19, \u0456\u043D\u044B: 17, \u0456\u043E: 19, \u0456\u043F\u0442: "1l", \u0456\u0440\u0433: "1l", \u0456\u0440\u0434: "1l", \u0456\u0440\u0438: 19, \u0456\u0441\u0442\u044C: 19, "\u0456\u0441\u044F ": 17, \u0456\u0442\u0430\u043F: "1l", \u0456\u0442\u0435: 19, \u0456\u0442\u0438: 19, \u0456\u0442\u044C: 19, \u0456\u0443: 19, "\u0456\u0446\u0435 ": 17, \u0456\u0446\u0446\u0430: 17, \u0456\u0446\u044B: 17, \u0456\u0446\u044C: 17, \u0456\u0448\u0435: 19, \u0456\u0448\u0438: 19, \u0456\u0448\u043E\u0432: 19, \u0456\u0449: 19, \u0456\u0451: 17, \u0456\u0456: 17, \u0456\u04A3: "1l", \u0457: 19, \u0458\u0430\u0432\u0430: "x", \u0458\u0430\u0433: "x", \u0458\u0430\u0434\u0430: "x", \u0458\u0430\u0434\u0435: "x", \u0458\u0430\u0435: "x", \u0458\u0430\u0436: "x", \u0458\u0430\u0437: "x", \u0458\u0430\u043E: "v", \u0458\u0430\u0440: "x", "\u0458\u0430\u0441 ": "x", "\u0458\u0430\u0442 ": "x", \u0458\u0430\u0442\u0430: "x", \u0458\u0430\u0442\u0435\u043B: "x", \u0458\u0430\u0442\u043D: "x", \u0458\u0430\u0446: "x", \u0458\u0431\u0430: "x", \u0458\u0431\u043E: "v", \u0458\u0433: "x", \u0458\u0434\u0430: "x", \u0458\u0434\u0435\u043C: "x", \u0458\u0434\u0435\u0448: "x", \u0458\u0434\u0438: "x", \u0458\u0434\u043E: "x", \u0458\u0435\u0434: "v", \u0458\u0435\u0437: "v", \u0458\u0435\u043B: "v", \u0458\u0435\u043C: "v", \u0458\u0435\u0440: "v", \u0458\u0435\u0441: "v", \u0458\u0435\u0448: "v", \u0458\u0437\u0438: "x", \u0458\u0438\u043C: "v", \u0458\u043A\u0438: "x", "\u0458\u043B\u0435 ": "x", \u0458\u043C\u043D: "x", \u0458\u043C\u0443: "x", \u0458\u043E\u0432: "x", \u0458\u043E\u0442: "x", \u0458\u043E\u0448: "v", \u0458\u043E\u0458: "v", \u0458\u0441\u0442: "x", "\u0458\u0443 ": "v", \u0458\u0443\u0432: "x", \u0458\u0443\u0447: "v", \u0458\u0446\u0430: "x", \u0458\u0447\u0435: "x", \u0458\u0448: "x", \u0458\u045F: "x", "\u0459 ": "v", "\u0459\u0430 ": "v", \u0459\u0430\u043C: "v", \u0459\u0435: "v", \u0459\u0438: "v", \u0459\u043A: "v", \u0459\u043D: "v", \u0459\u043E: "v", \u0459\u0441: "v", "\u0459\u0443 ": "v", \u0459\u0443\u0431\u0435: "x", \u0459\u0443\u0431\u043E: "x", \u0459\u0443\u0434\u0438: "v", \u0459\u0443\u0442: "v", \u0459\u0443\u0447: "v", \u045A\u0430\u0442: "x", \u045A\u0435\u0433: "v", \u045A\u0435\u043C: "v", \u045A\u0435\u043D: "v", \u045A\u0435\u0442: "x", \u045A\u0438\u0433: "v", \u045A\u0438\u043C: "v", \u045A\u0438\u0442: "x", \u045A\u0438\u0445: "v", \u045A\u043E\u0442: "x", \u045A\u0441: "v", "\u045A\u0443 ": "v", \u045B: "v", \u045C: "x", \u045E: 17, \u045F\u0430: "x", \u045F\u0432: "x", \u045F\u0435\u0431: "x", \u045F\u0435\u043C: "x", \u045F\u0435\u0440: "x", \u045F\u0435\u0458: "x", \u045F\u0443: "x", \u0463: 18, \u0491: 19, \u0493: "1l", \u0497: "1k", \u049B: "1l", \u04A3\u0431: "1l", \u04A3\u0433\u044B: "1k", \u04A3\u0435\u043B: "1k", \u04A3\u043B: "1k", "\u04A3\u043C\u0435 ": "1k", \u04A3\u043C\u044B: "1k", "\u04A3\u043D\u044B ": "1k", \u04A3\u0440: "1k", \u04A3\u0441: "1l", \u04A3\u0442: "1l", \u04A3\u0447: "1k", \u04A3\u044B\u0437: "1l", \u04A3\u0456: "1l", \u04A3\u04AF: "1k", \u04A3\u04D9: "1k", \u04AF\u0431: "1k", \u04AF\u0433\u0435: "1k", \u04AF\u0433\u0456: "1l", "\u04AF\u0434 ": "1m", "\u04AF\u0437 ": "1k", "\u04AF\u0437\u0435 ": "1k", \u04AF\u0437\u0435\u043D: "1k", \u04AF\u0437\u043B: "1k", \u04AF\u0439\u0434: "1l", \u04AF\u0439\u0435: "1l", "\u04AF\u043A ": "1k", \u04AF\u043A\u0456: "1l", \u04AF\u043B\u043A: "1l", \u04AF\u043B\u043C: "1k", \u04AF\u043B\u044D: "1m", \u04AF\u043C\u043A: "1l", "\u04AF\u043D\u0434 ": "1m", \u04AF\u043D\u0438\u0439: "1m", \u04AF\u043D\u0442\u044D: "1m", \u04AF\u043D\u044D: "1m", \u04AF\u043D\u0456: "1l", \u04AF\u043F: "1k", \u04AF\u0441\u0442\u0456: "1l", "\u04AF\u0441\u0447 ": "1m", \u04AF\u0441\u044D: "1m", \u04AF\u0441\u0456: "1l", \u04AF\u0445: "1m", \u04AF\u0447: "1k", "\u04AF\u0448 ": "1l", \u04AF\u0448\u0456: "1l", \u04AF\u04A3: "1k", \u04AF\u04AF: "1m", \u04B1: "1l", \u04BB: "1k", "\u04D9 ": "1k", "\u04D9-": "1k", \u04D9\u0432: "1k", \u04D9\u0433: "1k", "\u04D9\u0434\u0435 ": "1k", \u04D9\u0435: "1k", \u04D9\u0436: "1l", \u04D9\u0437\u0435: "1k", "\u04D9\u0439 ": "1k", \u04D9\u0439\u043B: "1k", \u04D9\u0439\u0442: "1k", "\u04D9\u043A ": "1k", \u04D9\u043A\u0438: "1k", \u04D9\u043A\u043B: "1k", "\u04D9\u043B\u0435 ": "1k", \u04D9\u043B\u0435\u043C: "1l", \u04D9\u043B\u0456: "1l", "\u04D9\u043C ": "1k", "\u04D9\u043D ": "1k", \u04D9\u043D\u0433: "1k", \u04D9\u043D\u0434: "1k", "\u04D9\u043D\u0435\u043D ": "1k", \u04D9\u043D\u043D: "1k", \u04D9\u043F: "1k", \u04D9\u0440\u0432\u0430\u043A: "1k", \u04D9\u0440\u0433: "1k", "\u04D9\u0440\u0435 ": "1k", \u04D9\u0440\u0435\u043D: "1k", \u04D9\u0440\u043D: "1k", \u04D9\u0440\u0456: "1l", "\u04D9\u0441\u0435 ": "1k", \u04D9\u0441\u0435\u043B\u0435: "1l", \u04D9\u0441\u0435\u043D: "1k", \u04D9\u0441\u0435\u04A3: "1k", \u04D9\u0441\u0456: "1l", "\u04D9\u0442 ": "1k", \u04D9\u0442\u0435: "1k", \u04D9\u0442\u043B: "1k", \u04D9\u0442\u0442: "1k", \u04D9\u0443: "1l", \u04D9\u0444: "1k", \u04D9\u0445: "1k", \u04D9\u0447: "1k", \u04D9\u0448: "1k", \u04D9\u044D: "1k", \u04D9\u044F: "1k", \u04D9\u04AF: "1k", "\u04E9 ": "1m", \u04E9\u0432: "1m", \u04E9\u0434: "1m", \u04E9\u0435: "1k", \u04E9\u0436: "1m", \u04E9\u0437\u0434: "1l", \u04E9\u0437\u0456: "1l", \u04E9\u0439\u0440: "1k", \u04E9\u043B\u0456: "1l", \u04E9\u043C\u043A: "1k", \u04E9\u043C\u0456: "1l", \u04E9\u043D\u044C: "1k", \u04E9\u043D\u0456: "1l", "\u04E9\u0440 ": "1m", \u04E9\u0440\u0438\u0439: "1m", \u04E9\u0440\u0441\u0435: "1l", \u04E9\u0440\u0456: "1l", \u04E9\u0441\u0442: "1k", \u04E9\u0442\u043A: "1l", \u04E9\u0442\u0456: "1l", \u04E9\u0447\u0435: "1k", \u04E9\u0447\u0438: "1m", \u04E9\u044E: "1k", \u04E9\u044F: "1k", \u04E9\u04A3: "1l", \u04E9\u04E9: "1m", "\u055B": "1e", "\u055C": "1e", "\u055D": "1e", "\u055E": "1e", \u0561: "1e", \u0562: "1e", \u0563: "1e", \u0564: "1e", \u0565: "1e", \u0566: "1e", \u0567: "1e", \u0568: "1e", \u0569: "1e", \u056A: "1e", \u056B: "1e", \u056C: "1e", \u056D: "1e", \u056E: "1e", \u056F: "1e", \u0570: "1e", \u0571: "1e", \u0572: "1e", \u0573: "1e", \u0574: "1e", \u0575: "1e", \u0576: "1e", \u0577: "1e", \u0578: "1e", \u0579: "1e", \u057A: "1e", \u057B: "1e", \u057C: "1e", \u057D: "1e", \u057E: "1e", \u057F: "1e", \u0580: "1e", \u0581: "1e", \u0582: "1e", \u0583: "1e", \u0584: "1e", \u0585: "1e", \u0586: "1e", \u0587: "1e", "\u0589": "1e", "\u05B0": "1g", "\u05B1": "1g", "\u05B2": "1g", "\u05B4\u05D3\u05D9\u05E9": "1h", "\u05B4\u05D5": "1h", "\u05B4\u05E1": "1h", "\u05B4\u05E2": "1h", "\u05B5": "1g", "\u05B6": "1g", "\u05B7\u05BE": "1h", "\u05B7\u05D2": "1h", "\u05B7\u05D5": "1h", "\u05B7\u05D6 ": "1h", "\u05B7\u05D6\u05D5": "1h", "\u05B7\u05D8": "1h", "\u05B7\u05DA": "1h", "\u05B7\u05DB\u05D8": "1h", "\u05B7\u05DB\u05DF ": "1h", "\u05B7\u05DC\u05D8 ": "1h", "\u05B7\u05DC\u05D8\u05DF ": "1h", "\u05B7\u05DC\u05D9": "1h", "\u05B7\u05DC\u05E2": "1h", "\u05B7\u05DC\u05E5 ": "1h", "\u05B7\u05DD": "1h", "\u05B7\u05DE\u05D9 ": "1h", "\u05B7\u05DE\u05E2\u05DF ": "1h", "\u05B7\u05E0\u05D2\u05E2": "1h", "\u05B7\u05E0\u05D3": "1h", "\u05B7\u05E0\u05D8": "1h", "\u05B7\u05E0\u05E2": "1h", "\u05B7\u05E0\u05E6\u05D9\u05D9": "1h", "\u05B7\u05E1": "1h", "\u05B7\u05E2\u05E8 ": "1h", "\u05B7\u05E3": "1h", "\u05B7\u05E5": "1h", "\u05B7\u05E7": "1h", "\u05B7\u05E8\u05D0": "1h", "\u05B7\u05E8\u05D1\u05E2": "1h", "\u05B7\u05E8\u05D5": "1h", "\u05B8\u05BE": "1h", "\u05B8\u05D1 ": "1h", "\u05B8\u05D1\u05DF": "1h", "\u05B8\u05D1\u05E2\u05E8 ": "1h", "\u05B8\u05D2": "1h", "\u05B8\u05D5": "1h", "\u05B8\u05D6": "1h", "\u05B8\u05D8": "1h", "\u05B8\u05DA": "1h", "\u05B8\u05DC ": "1h", "\u05B8\u05DC\u05D8": "1h", "\u05B8\u05DE\u05D9\u05E8 ": "1h", "\u05B8\u05DE\u05E2": "1h", "\u05B8\u05E1": "1h", "\u05B8\u05E2": "1h", "\u05B8\u05E3": "1h", "\u05B8\u05E4\u05BC": "1h", "\u05B8\u05E6": "1h", "\u05B8\u05E7": "1h", "\u05B8\u05E8 ": "1h", "\u05B8\u05E8\u05D8 ": "1h", "\u05B8\u05E8\u05DF": "1h", "\u05B8\u05E8\u05E0\u05D9\u05E9": "1h", "\u05B9": "1g", "\u05BB": "1g", "\u05BC\u05D0\u05B7": "1h", "\u05BC\u05D0\u05B8": "1h", "\u05BC\u05E8\u05D0": "1h", "\u05BD": "1g", "\u05BE\u05D0": "1h", "\u05BE\u05D1": "1h", "\u05BE\u05D2": "1h", "\u05BE\u05D3": "1h", "\u05BE\u05D5": "1h", "\u05BE\u05D6": "1h", "\u05BE\u05D8": "1h", "\u05BE\u05D9": "1h", "\u05BE\u05DB": "1h", "\u05BE\u05DC": "1h", "\u05BE\u05DE": "1h", "\u05BE\u05E0": "1h", "\u05BE\u05E2": "1h", "\u05BE\u05E4": "1h", "\u05BE\u05E7": "1h", "\u05BE\u05E8": "1h", "\u05BE\u05E9": "1h", "\u05BF": "1h", "\u05C1": "1g", "\u05C2\u05D4": "1h", "\u05C2\u05D5": "1h", "\u05C2\u05D9": "1h", "\u05C2\u05DB": "1h", "\u05C2\u05DD": "1h", "\u05C2\u05E8": "1h", "\u05D0\u05B7 ": "1h", \u05D0\u05B7\u05D1\u05D9\u05DC: "1h", \u05D0\u05B7\u05D6: "1h", \u05D0\u05B7\u05DB: "1h", \u05D0\u05B7\u05DC\u05D8: "1h", \u05D0\u05B7\u05DC\u05E5: "1h", \u05D0\u05B7\u05DE: "1h", \u05D0\u05B7\u05DF: "1h", \u05D0\u05B7\u05E0: "1h", \u05D0\u05B7\u05E4: "1h", \u05D0\u05B7\u05E8: "1h", "\u05D0\u05B8 ": "1h", \u05D0\u05B8\u05D1: "1h", \u05D0\u05B8\u05DC: "1h", \u05D0\u05B8\u05DD: "1h", \u05D0\u05B8\u05DE: "1h", \u05D0\u05B8\u05DF: "1h", \u05D0\u05B8\u05E0: "1h", \u05D0\u05B8\u05E4: "1h", \u05D0\u05B8\u05E8: "1h", "\u05D0\u05BE": "1h", "\u05D0\u05D3\u05DD ": "1g", "\u05D0\u05D5\u05D3 ": "1g", \u05D0\u05D5\u05D4: "1g", \u05D0\u05D5\u05D5\u05D9\u05E8: "1g", "\u05D0\u05D5\u05D9\u05DA ": "1h", \u05D0\u05D5\u05D9\u05E1: "1h", \u05D0\u05D5\u05D9\u05E3: "1h", \u05D0\u05D5\u05D9\u05E4: "1h", "\u05D0\u05D5\u05E0\u05D4 ": "1g", \u05D0\u05D5\u05E0\u05D8\u05E2: "1h", "\u05D0\u05D5\u05E4\u05DF ": "1g", \u05D0\u05D5\u05EA: "1g", \u05D0\u05D7: "1g", "\u05D0\u05D9\u05D6 ": "1h", "\u05D0\u05D9\u05D6\u05D5 ": "1g", "\u05D0\u05D9\u05DC\u05D5 ": "1g", \u05D0\u05D9\u05EA: "1g", "\u05D0\u05DC\u05D4 ": "1g", "\u05D0\u05DE\u05D9\u05DF ": "1g", \u05D0\u05DE\u05E8: "1g", \u05D0\u05E0\u05D2\u05DC: "1g", \u05D0\u05E0\u05D5: "1g", \u05D0\u05E0\u05D9: "1g", \u05D0\u05E0\u05E9\u05D9: "1g", \u05D0\u05E3: "1g", \u05D0\u05E4\u05D9\u05DC\u05D5: "1g", \u05D0\u05E6: "1g", \u05D0\u05E8\u05D5\u05D7\u05EA: "1g", "\u05D0\u05E9\u05D5\u05DF ": "1g", \u05D0\u05EA: "1g", \u05D1\u05D0\u05B7: "1h", \u05D1\u05D1: "1g", \u05D1\u05D2: "1g", \u05D1\u05D3\u05D9\u05D5\u05E7: "1g", \u05D1\u05D5\u05D0: "1g", \u05D1\u05D5\u05D3\u05D4: "1g", "\u05D1\u05D5\u05E7\u05E8 ": "1g", "\u05D1\u05D5\u05E8 ": "1g", \u05D1\u05D5\u05EA: "1g", "\u05D1\u05D9\u05D5\u05DD ": "1g", \u05D1\u05D9\u05D5\u05EA: "1g", \u05D1\u05D9\u05DD: "1g", \u05D1\u05D9\u05E1\u05D8: "1h", \u05D1\u05DA: "1g", "\u05D1\u05DC ": "1g", \u05D1\u05DE: "1g", \u05D1\u05E2\u05D9: "1g", \u05D1\u05E4: "1g", \u05D1\u05E6: "1g", \u05D1\u05E7\u05E9: "1g", \u05D1\u05E8\u05D9\u05DD: "1g", \u05D1\u05E9\u05D1\u05D9\u05DC: "1g", "\u05D2'": "1g", "\u05D2\u05BE": "1h", \u05D2\u05D0\u05B7: "1h", \u05D2\u05D0\u05B8: "1h", \u05D2\u05D3\u05D5\u05DC: "1g", \u05D2\u05D4: "1g", \u05D2\u05D5\u05D8: "1h", "\u05D2\u05D8 ": "1h", "\u05D2\u05D9\u05D9\u05D8 ": "1h", "\u05D2\u05D9\u05D9\u05DF ": "1h", "\u05D2\u05DC\u05D9\u05E9 ": "1h", \u05D2\u05DD: "1g", \u05D2\u05DE: "1g", \u05D2\u05E2\u05D1: "1h", \u05D2\u05E2\u05D4\u05D0: "1h", \u05D2\u05E2\u05D5\u05D5: "1h", \u05D2\u05E2\u05D6: "1h", \u05D2\u05E2\u05D8: "1h", \u05D2\u05E2\u05DC: "1h", "\u05D2\u05E2\u05DF ": "1h", \u05D2\u05E2\u05E4: "1h", \u05D2\u05E2\u05E7\u05D5: "1h", \u05D2\u05E2\u05E8\u05E2\u05DB: "1h", \u05D2\u05E8\u05DE\u05E0\u05D9: "1g", \u05D2\u05E9: "1g", \u05D2\u05EA: "1g", "\u05D3\u05BE": "1h", \u05D3\u05D0\u05B7: "1h", \u05D3\u05D0\u05B8: "1h", \u05D3\u05D1: "1g", \u05D3\u05D2: "1g", \u05D3\u05D3: "1g", \u05D3\u05D6: "1h", \u05D3\u05D7: "1g", \u05D3\u05D8: "1h", "\u05D3\u05D9\u05D5\u05E7 ": "1g", "\u05D3\u05D9\u05E7\u05D8 ": "1h", \u05D3\u05DE: "1g", \u05D3\u05E2\u05DD: "1h", \u05D3\u05E2\u05E8: "1h", \u05D3\u05E2\u05EA: "1g", \u05D3\u05E7: "1g", "\u05D3\u05E8 ": "1g", "\u05D3\u05E8\u05DA ": "1g", \u05D3\u05EA: "1g", "\u05D3\u05F4": "1h", "\u05D4\u05BE": "1h", \u05D4\u05D0\u05B7: "1h", \u05D4\u05D0\u05B8: "1h", \u05D4\u05D0\u05DD: "1g", "\u05D4\u05D1 ": "1g", \u05D4\u05D2: "1g", \u05D4\u05D4: "1g", \u05D4\u05D5\u05D0: "1g", "\u05D4\u05D5\u05D9\u05D6 ": "1h", \u05D4\u05D5\u05E0\u05D8: "1h", \u05D4\u05D6: "1g", \u05D4\u05D7: "1g", \u05D4\u05D9\u05D0: "1g", \u05D4\u05D9\u05D4: "1g", \u05D4\u05D9\u05D5: "1g", "\u05D4\u05D9\u05D8\u05D1 ": "1g", \u05D4\u05D9\u05D9\u05E1\u05D8: "1h", \u05D4\u05D9\u05E8\u05D5\u05EA: "1g", \u05D4\u05DB: "1g", \u05D4\u05DC: "1g", \u05D4\u05DD: "1g", \u05D4\u05E1: "1g", \u05D4\u05E2\u05D1\u05E8\u05E2: "1h", \u05D4\u05E4: "1g", \u05D4\u05E6: "1g", \u05D4\u05E7: "1g", \u05D4\u05E8\u05D1\u05D4: "1g", "\u05D4\u05E8\u05D9\u05DD ": "1g", \u05D4\u05EA: "1g", "\u05D5\u05BE": "1h", "\u05D5\u05D0 ": "1g", \u05D5\u05D0\u05B7: "1h", \u05D5\u05D0\u05B8: "1h", "\u05D5\u05D1\u05D4 ": "1g", "\u05D5\u05D3\u05D4 ": "1g", "\u05D5\u05D3\u05D5\u05EA ": "1g", "\u05D5\u05D3\u05E2 ": "1g", \u05D5\u05D4\u05D1: "1g", "\u05D5\u05D5\u05D0\u05E1 ": "1h", "\u05D5\u05D5\u05D4 ": "1g", \u05D5\u05D5\u05D5: "1h", "\u05D5\u05D5\u05D9\u05D9 ": "1h", \u05D5\u05D5\u05D9\u05DC\u05E1: "1h", \u05D5\u05D5\u05D9\u05E0\u05D8: "1h", \u05D5\u05D5\u05E2\u05D2: "1h", \u05D5\u05D5\u05E2\u05D8: "1h", \u05D5\u05D5\u05E2\u05DC: "1h", \u05D5\u05D5\u05E2\u05DF: "1h", \u05D5\u05D5\u05E2\u05E8: "1h", "\u05D5\u05D8\u05E2\u05E8 ": "1h", "\u05D5\u05D9\u05D2\u05DF ": "1h", "\u05D5\u05D9\u05D5\u05EA ": "1g", "\u05D5\u05D9\u05D8 ": "1h", \u05D5\u05D9\u05D9\u05E1: "1h", \u05D5\u05D9\u05DB\u05D8\u05D9: "1h", \u05D5\u05D9\u05DC\u05E1\u05D8: "1h", "\u05D5\u05D9\u05E0\u05D8 ": "1h", "\u05D5\u05D9\u05E1 ": "1h", \u05D5\u05D9\u05E1\u05D2: "1h", \u05D5\u05D9\u05E1\u05D8\u05E8: "1h", \u05D5\u05DB\u05DC: "1g", \u05D5\u05DC\u05D4: "1g", "\u05D5\u05DC\u05D7\u05DF ": "1g", \u05D5\u05DC\u05D9\u05DD: "1g", \u05D5\u05DE\u05E2\u05DF: "1h", \u05D5\u05E0\u05D5\u05EA: "1g", "\u05D5\u05E0\u05D8 ": "1h", "\u05D5\u05E0\u05D9\u05DD ": "1g", \u05D5\u05E1\u05D8\u05D5\u05DF: "1g", \u05D5\u05E2\u05D2\u05DF: "1h", \u05D5\u05E6\u05D4: "1g", "\u05D5\u05E7\u05D3\u05DD ": "1g", "\u05D5\u05E8\u05D4 ": "1g", "\u05D5\u05E8\u05D5\u05EA ": "1g", "\u05D5\u05E8\u05D9 ": "1g", \u05D5\u05E9\u05D1: "1g", "\u05D5\u05E9\u05D4 ": "1g", \u05D5\u05EA\u05D5: "1g", \u05D5\u05EA\u05D9: "1g", \u05D6\u05D0\u05B8: "1h", \u05D6\u05D3: "1g", \u05D6\u05D4: "1g", "\u05D6\u05D5\u05E8 ": "1g", \u05D6\u05D8: "1h", "\u05D6\u05D9\u05D9 ": "1h", \u05D6\u05D9\u05D9\u05E2: "1h", \u05D6\u05D9\u05DA: "1h", "\u05D6\u05D9\u05E9 ": "1h", \u05D6\u05DB: "1g", \u05D6\u05DE: "1g", "\u05D6\u05E2\u05DF ": "1h", \u05D6\u05E2\u05E0\u05E2: "1h", "\u05D6\u05E2\u05E8 ": "1h", "\u05D7\u05BE": "1h", \u05D7\u05D5\u05E9: "1g", \u05D7\u05D9\u05D9\u05D1: "1g", \u05D7\u05D9\u05D9\u05DD: "1g", "\u05D7\u05D9\u05DD ": "1g", \u05D7\u05DD: "1g", "\u05D7\u05E0\u05D5 ": "1g", \u05D7\u05E4: "1g", \u05D7\u05E6: "1g", "\u05D7\u05E8 ": "1g", "\u05D7\u05E8\u05D9\u05DD ": "1g", "\u05D8\u05BE": "1h", \u05D8\u05D0\u05B7: "1h", \u05D8\u05D0\u05B8: "1h", \u05D8\u05D7: "1g", \u05D8\u05D8: "1g", "\u05D8\u05D9\u05D9\u05D8 ": "1h", \u05D8\u05DC\u05E2\u05DB\u05E2: "1h", \u05D8\u05E8\u05D9\u05E0\u05E7: "1h", "\u05D8\u05E9\u05DF ": "1h", \u05D8\u05EA: "1g", \u05D9\u05B4\u05D3: "1h", \u05D9\u05D0\u05B8: "1h", "\u05D9\u05D1\u05D4 ": "1g", "\u05D9\u05D1\u05DF ": "1h", \u05D9\u05D1\u05E2: "1h", "\u05D9\u05D5 ": "1g", \u05D9\u05D5\u05D3: "1g", "\u05D9\u05D5\u05DF ": "1g", "\u05D9\u05D8\u05DF ": "1h", \u05D9\u05D9\u05B4: "1h", "\u05D9\u05D9\u05D1\u05D8 ": "1h", "\u05D9\u05D9\u05E1\u05D8 ": "1h", "\u05D9\u05D9\u05E2\u05E8 ": "1h", \u05D9\u05D9\u05EA: "1g", \u05D9\u05DB\u05D5: "1g", \u05D9\u05DC\u05D3\u05D9: "1g", "\u05D9\u05DC\u05D9\u05DD ": "1g", "\u05D9\u05DE\u05D9\u05DD ": "1g", "\u05D9\u05E0\u05D5 ": "1g", \u05D9\u05E0\u05D8\u05E2: "1h", \u05D9\u05E0\u05E2: "1h", \u05D9\u05E1\u05D2\u05E2: "1h", \u05D9\u05E1\u05D8\u05E8\u05D0: "1h", "\u05D9\u05E4\u05D5\u05E8 ": "1g", "\u05D9\u05E6\u05D8 ": "1h", \u05D9\u05E7\u05E2: "1h", "\u05D9\u05E8\u05D8 ": "1h", "\u05D9\u05E8\u05DF ": "1h", \u05D9\u05E9\u05D4: "1g", "\u05D9\u05E9\u05D5\u05DF ": "1g", "\u05D9\u05E9\u05D8 ": "1h", "\u05D9\u05E9\u05E2 ": "1h", \u05D9\u05E9\u05E2\u05E8: "1h", \u05D9\u05EA\u05D9: "1g", "\u05DA\u05BE": "1h", "\u05DB'": "1h", "\u05DB\u05D0\u05DF ": "1g", \u05DB\u05D1: "1g", \u05DB\u05D3: "1g", \u05DB\u05D5\u05DC: "1g", \u05DB\u05D6: "1g", \u05DB\u05D7: "1g", "\u05DB\u05D8 ": "1h", \u05DB\u05D8\u05D9\u05E7: "1h", \u05DB\u05D9\u05DD: "1g", \u05DB\u05DA: "1g", \u05DB\u05DB: "1g", \u05DB\u05DE\u05D4: "1g", \u05DB\u05E2\u05E8: "1h", \u05DB\u05E4: "1g", \u05DB\u05E8: "1g", \u05DB\u05EA: "1g", "\u05DB\u05F3": "1h", \u05DC\u05D0\u05B7: "1h", \u05DC\u05D0\u05B8: "1h", "\u05DC\u05D1\u05D9\u05EA ": "1g", \u05DC\u05D4\u05D9: "1g", "\u05DC\u05D9 ": "1g", "\u05DC\u05D9\u05D2\u05DF ": "1h", \u05DC\u05D9\u05D9\u05D1: "1h", \u05DC\u05D9\u05D9\u05E2\u05E0: "1h", "\u05DC\u05D9\u05DA ": "1g", "\u05DC\u05D9\u05DC\u05D4 ": "1g", "\u05DC\u05D9\u05EA ": "1g", \u05DC\u05DE\u05D4: "1g", \u05DC\u05E0\u05D5: "1g", \u05DC\u05E2\u05D5\u05DC\u05DD: "1g", \u05DC\u05E2\u05D6\u05D5: "1g", \u05DC\u05E2\u05DA: "1h", "\u05DC\u05E2\u05DB\u05E2 ": "1h", \u05DC\u05E2\u05DE\u05E2\u05DF: "1h", \u05DC\u05E2\u05E8\u05E0: "1h", \u05DC\u05E2\u05E9\u05D5: "1g", \u05DC\u05EA: "1g", "\u05DD\u05BE": "1h", \u05DE\u05D0\u05B7: "1h", \u05DE\u05D0\u05B8: "1h", "\u05DE\u05D0\u05D3 ": "1g", \u05DE\u05D0\u05D5: "1g", "\u05DE\u05D0\u05E9\u05E8 ": "1g", "\u05DE\u05D3\u05D5\u05E2 ": "1g", "\u05DE\u05D3\u05D9 ": "1g", "\u05DE\u05D5 ": "1g", "\u05DE\u05D5\u05D3 ": "1g", "\u05DE\u05D5\u05DC ": "1g", "\u05DE\u05D5\u05E0\u05D4 ": "1g", \u05DE\u05D5\u05E7\u05D3\u05DD: "1g", \u05DE\u05DA: "1g", \u05DE\u05DB\u05D5\u05E0: "1g", "\u05DE\u05DB\u05D9\u05E8 ": "1g", "\u05DE\u05DE\u05E0\u05D9 ": "1g", \u05DE\u05E1\u05D5\u05D2\u05DC: "1g", "\u05DE\u05E2\u05E8 ": "1h", "\u05DE\u05E2\u05E8\u05D9 ": "1h", \u05DE\u05E2\u05E8\u05D9\u05E7: "1h", \u05DE\u05E7\u05D5: "1g", "\u05DE\u05E8 ": "1g", \u05DE\u05E8\u05D9: "1g", "\u05DE\u05EA\u05E0\u05D4 ": "1g", "\u05DE\u05F3": "1h", "\u05DF\u05BE": "1h", "\u05DF\u200E": "1h", \u05E0\u05D0\u05B7: "1h", \u05E0\u05D0\u05B8: "1h", \u05E0\u05D2\u05DC\u05D9\u05E9: "1h", \u05E0\u05D2\u05E2\u05DF: "1h", \u05E0\u05D3\u05D9\u05E7: "1h", \u05E0\u05D5\u05DE\u05E2: "1h", "\u05E0\u05D5\u05E0\u05D2 ": "1h", \u05E0\u05D7: "1g", \u05E0\u05D8\u05E2\u05E8: "1h", \u05E0\u05D8\u05E9\u05DF: "1h", "\u05E0\u05D9\u05D5\u05EA ": "1g", \u05E0\u05D9\u05D9\u05DD: "1g", \u05E0\u05D9\u05E9\u05D8: "1h", \u05E0\u05D9\u05EA: "1g", \u05E0\u05DA: "1g", \u05E0\u05DB: "1g", \u05E0\u05DD: "1g", "\u05E0\u05DE\u05E6\u05D0 ": "1g", \u05E0\u05DF: "1g", \u05E0\u05E0: "1g", \u05E0\u05E2\u05DD: "1h", \u05E0\u05E2\u05DF: "1h", \u05E0\u05E6\u05D9\u05D9\u05D6: "1h", \u05E0\u05E8\u05D0: "1g", "\u05E1'": "1h", "\u05E1\u05BE": "1h", \u05E1\u05D0\u05B7: "1h", "\u05E1\u05D8\u05D5 ": "1h", "\u05E1\u05D8\u05D5\u05DF ": "1g", \u05E1\u05D8\u05E2\u05E8: "1h", \u05E1\u05E3: "1g", "\u05E1\u05E4\u05D9\u05E7 ": "1g", \u05E1\u05E4\u05E8: "1g", "\u05E1\u05F3": "1h", "\u05E2\u05BE": "1h", \u05E2\u05D0: "1h", \u05E2\u05D1\u05D5\u05D3: "1g", \u05E2\u05D1\u05DF: "1h", "\u05E2\u05D2\u05DF ": "1h", "\u05E2\u05D5\u05D3 ": "1g", \u05E2\u05D5\u05D5\u05E2: "1h", "\u05E2\u05D6\u05D5\u05D1 ": "1g", \u05E2\u05D6\u05D5\u05E8: "1g", \u05E2\u05D7: "1h", "\u05E2\u05D9\u05DD ": "1g", \u05E2\u05D9\u05E0\u05D9\u05D9: "1g", "\u05E2\u05D9\u05E8 ": "1g", \u05E2\u05DB\u05D8: "1h", \u05E2\u05DB\u05E9\u05D9: "1g", \u05E2\u05DC\u05D8: "1h", "\u05E2\u05DC\u05DF ": "1h", \u05E2\u05DC\u05E2: "1h", "\u05E2\u05DE\u05D9\u05DD ": "1g", "\u05E2\u05DE\u05E2\u05DF ": "1h", \u05E2\u05E0\u05D8: "1h", \u05E2\u05E0\u05D9\u05D9: "1g", \u05E2\u05E0\u05E2\u05E8: "1h", \u05E2\u05E1\u05D8: "1h", "\u05E2\u05E1\u05DF ": "1h", \u05E2\u05E1\u05E2\u05E8: "1h", \u05E2\u05E2: "1h", "\u05E2\u05E4\u05BC\u05DC ": "1h", \u05E2\u05E8\u05D8: "1h", \u05E2\u05E8\u05D9\u05DF: "1h", \u05E2\u05E8\u05DF: "1h", "\u05E2\u05E8\u05E0\u05D8 ": "1h", \u05E2\u05E8\u05E0\u05E2: "1h", "\u05E2\u05E8\u05E1 ": "1h", "\u05E2\u05E8\u05E2 ": "1h", "\u05E2\u05E8\u05E2\u05E8 ": "1h", \u05E2\u05EA\u05D9: "1g", "\u05E2\u05F4": "1h", "\u05E3\u05BE": "1h", "\u05E4\u05BC ": "1h", \u05E4\u05BC\u05D0: "1h", \u05E4\u05BC\u05D9: "1h", \u05E4\u05BC\u05E2: "1h", \u05E4\u05BC\u05E8: "1h", \u05E4\u05D2: "1g", \u05E4\u05D4: "1g", "\u05E4\u05D5\u05EA ": "1g", \u05E4\u05D7: "1g", "\u05E4\u05D9\u05DC\u05D5 ": "1g", \u05E4\u05E0: "1g", \u05E4\u05E1: "1g", \u05E4\u05E6: "1g", \u05E4\u05E7: "1g", "\u05E4\u05E8 ": "1g", "\u05E4\u05E8\u05D9\u05DD ": "1g", \u05E4\u05E9: "1g", \u05E4\u05EA: "1g", "\u05E5\u05BE": "1h", \u05E6\u05D5\u05D5\u05D9\u05D9: "1h", \u05E6\u05D5\u05E8\u05D9\u05E7: "1h", \u05E6\u05D9\u05D9\u05D6\u05D9: "1h", "\u05E6\u05D9\u05DD ": "1g", \u05E6\u05D9\u05E4\u05D5\u05E8: "1g", \u05E6\u05DE: "1g", \u05E6\u05E8\u05D9\u05DB: "1g", \u05E6\u05EA: "1g", "\u05E7\u05BE": "1h", \u05E7\u05D0\u05B7: "1h", \u05E7\u05D0\u05B8: "1h", \u05E7\u05D4: "1g", "\u05E7\u05D5\u05DE\u05D8 ": "1h", \u05E7\u05D5\u05DE\u05E2: "1h", \u05E7\u05D7: "1g", \u05E7\u05D9\u05D9\u05DF: "1h", "\u05E7\u05D9\u05DD ": "1g", \u05E7\u05D9\u05E0\u05D3: "1h", "\u05E7\u05E0\u05D5\u05EA ": "1g", \u05E7\u05E2\u05DF: "1h", "\u05E7\u05E2\u05E5 ": "1h", "\u05E7\u05E2\u05E8 ": "1h", "\u05E7\u05E8\u05D4 ": "1g", "\u05E7\u05E8\u05D5\u05D1 ": "1g", \u05E7\u05E9\u05D4: "1g", \u05E7\u05EA: "1g", "\u05E8'": "1h", "\u05E8\u05BE": "1h", \u05E8\u05D0\u05B7: "1h", \u05E8\u05D0\u05B8: "1h", \u05E8\u05D0\u05D4: "1g", \u05E8\u05D0\u05E9\u05D5: "1g", "\u05E8\u05D1\u05D4 ": "1g", \u05E8\u05D1\u05E2\u05D8: "1h", "\u05E8\u05D2\u05D9\u05E9 ": "1g", "\u05E8\u05D5\u05D7\u05EA ": "1g", \u05E8\u05D5\u05D9\u05E1: "1h", "\u05E8\u05D5\u05E4\u05D0 ": "1g", \u05E8\u05D9\u05DA: "1g", "\u05E8\u05D9\u05DB\u05D4 ": "1g", \u05E8\u05E2\u05D3\u05DF: "1h", \u05E8\u05E2\u05D9\u05B4\u05E9: "1h", \u05E8\u05E9\u05D8: "1h", "\u05E8\u05EA ": "1g", "\u05E8\u05F3": "1h", "\u05E9\u05BE": "1h", \u05E9\u05D0\u05E0: "1g", "\u05E9\u05D0\u05E8 ": "1g", "\u05E9\u05D1 ": "1g", "\u05E9\u05D1\u05D5\u05E2 ": "1g", "\u05E9\u05D1\u05EA ": "1g", \u05E9\u05D2: "1g", \u05E9\u05D4\u05D5: "1g", "\u05E9\u05D5\u05D1 ": "1g", \u05E9\u05D5\u05D5\u05E2: "1h", \u05E9\u05D5\u05D9\u05DF: "1h", \u05E9\u05D5\u05DC\u05D7\u05DF: "1g", "\u05E9\u05D5\u05E0\u05D4 ": "1g", \u05E9\u05D6: "1g", \u05E9\u05D7: "1g", \u05E9\u05D8\u05D0: "1h", \u05E9\u05D8\u05D9\u05D9\u05D8: "1h", "\u05E9\u05D9\u05D9\u05DF ": "1h", \u05E9\u05D9\u05DD: "1g", \u05E9\u05D9\u05E2\u05D5\u05E8: "1g", \u05E9\u05DA: "1g", "\u05E9\u05DC\u05D0 ": "1g", "\u05E9\u05DC\u05D4 ": "1g", "\u05E9\u05DC\u05D5 ": "1g", \u05E9\u05DC\u05D5\u05E9: "1g", \u05E9\u05DC\u05DA: "1g", "\u05E9\u05DC\u05DB\u05DD ": "1g", "\u05E9\u05E0\u05D4 ": "1g", "\u05E9\u05E0\u05D9 ": "1g", "\u05E9\u05E0\u05D9\u05DD ": "1g", \u05E9\u05E4\u05BC: "1h", \u05E9\u05E9: "1g", \u05E9\u05EA: "1g", \u05EA\u05BC: "1h", \u05EA\u05D0\u05D5\u05E0\u05D4: "1g", \u05EA\u05D1: "1g", \u05EA\u05D2: "1g", \u05EA\u05D4: "1g", "\u05EA\u05D5 ": "1g", \u05EA\u05D5\u05DD: "1g", \u05EA\u05D6: "1g", \u05EA\u05D7: "1g", "\u05EA\u05D9 ": "1g", "\u05EA\u05D9\u05D9\u05DD ": "1g", \u05EA\u05DA: "1g", \u05EA\u05DB: "1g", \u05EA\u05DC: "1g", \u05EA\u05DD: "1g", "\u05EA\u05E0\u05D5 ": "1g", \u05EA\u05E1: "1g", \u05EA\u05E4: "1g", \u05EA\u05E6: "1g", \u05EA\u05E7: "1g", \u05EA\u05E8: "1g", \u05EA\u05E9: "1g", \u05EA\u05EA: "1g", \u05F0: "1h", \u05F1: "1h", \u05F2: "1h", "\u05F3\u05D0": "1h", "\u05F3\u05D1": "1h", "\u05F3\u05D4": "1h", "\u05F3\u05D6": "1h", "\u05F3\u05E2": "1h", "\u05F3\u05E7": "1h", "\u05F3\u05E8": "1h", "\u0622\u0628 ": "1j", \u0622\u062C: "h", \u0622\u062F\u0645: "1j", \u0622\u0634: "1j", \u0622\u063A: "1j", \u0622\u0641: "1j", \u0622\u0642: "1j", \u0622\u0645\u062F: "1j", \u0622\u0646\u0647: "1j", \u0622\u0648: "1j", "\u0622\u067E ": "h", "\u0623 ": "1i", \u0623\u0628: "1i", \u0623\u062C: "1i", \u0623\u062D: "1i", \u0623\u062E: "1i", \u0623\u0631: "1i", \u0623\u0634: "1i", \u0623\u0635: "1i", \u0623\u0637: "1i", \u0623\u0639: "1i", \u0623\u0641: "1i", \u0623\u0642: "1i", \u0623\u0643: "1i", \u0623\u0645\u0627: "1i", \u0623\u0645\u0631: "1i", \u0623\u0646: "1i", \u0623\u0648: "1i", \u0623\u064A: "1i", \u0623\u067E: "h", \u0625: "1i", \u0626\u0631: "1i", "\u0626\u0645\u0627 ": "1i", "\u0626\u0648 ": "h", \u0626\u064A: "1i", "\u0627\u0628\u0648 ": "h", \u0627\u0629: "1i", "\u0627\u062A\u0627\u0642 ": "1j", \u0627\u062A\u0641\u0627\u0642: "1j", \u0627\u062A\u0646\u06CC: "h", "\u0627\u062A\u0647 ": "1i", \u0627\u062D\u0633\u0627\u0633: "1j", \u0627\u0630\u0627: "1i", "\u0627\u0631\u0627\u062A ": "1i", \u0627\u0631\u0627\u0646: "1j", "\u0627\u0631\u062D\u0629 ": "1i", "\u0627\u0631\u0645 ": "1j", \u0627\u0631\u064A: "1i", \u0627\u0631\u06CC\u062F: "1j", "\u0627\u0631\u06CC\u0645 ": "1j", \u0627\u0632\u0647: "1j", \u0627\u0632\u064A: "1i", \u0627\u0632\u06CC: "1j", "\u0627\u0633\u062A ": "1j", \u0627\u0633\u062A\u0641\u0627: "1j", "\u0627\u0634\u062A ": "1j", \u0627\u0634\u062A\u0628\u0627: "1j", \u0627\u0634\u062A\u0631: "1i", "\u0627\u0634\u062A\u0645 ": "1j", \u0627\u0634\u062A\u0647: "1j", \u0627\u0634\u062F: "1j", \u0627\u0634\u06CC: "1j", \u0627\u0636\u0644: "1i", "\u0627\u0639\u062A ": "1j", "\u0627\u063A\u0644\u0628 ": "1j", \u0627\u0641\u062A\u0627\u062F: "1j", "\u0627\u0641\u0630\u0629 ": "1i", \u0627\u0642\u0639\u0627\u064B: "1j", \u0627\u0642\u0648\u0627: "h", \u0627\u0643: "1i", \u0627\u0644\u0622\u062E\u0631: "1i", \u0627\u0644\u0628\u0627\u0631: "1i", \u0627\u0644\u0628\u0644\u062F: "1i", \u0627\u0644\u0628\u064A\u062A: "1i", \u0627\u0644\u062C: "1i", \u0627\u0644\u062D: "1i", \u0627\u0644\u062E: "1i", \u0627\u0644\u0630: "1i", \u0627\u0644\u0631: "1i", \u0627\u0644\u0633\u0627: "1i", \u0627\u0644\u0634\u0631: "1i", \u0627\u0644\u0637: "1i", \u0627\u0644\u0639\u0627\u0635: "1i", \u0627\u0644\u0639\u0627\u0644: "1i", \u0627\u0644\u0639\u0631: "1i", \u0627\u0644\u0639\u0645: "1i", \u0627\u0644\u0641\u0631: "1i", \u0627\u0644\u0642: "1i", \u0627\u0644\u0644: "1i", \u0627\u0644\u0645\u0627\u0636: "1i", \u0627\u0644\u0645\u062A: "1i", \u0627\u0644\u0645\u062D: "1i", \u0627\u0644\u0645\u0631: "1i", \u0627\u0644\u0645\u0633: "1i", \u0627\u0644\u0645\u0634: "1i", \u0627\u0644\u0645\u0637: "1i", \u0627\u0644\u0648\u0642: "1i", \u0627\u0644\u064A: "1i", \u0627\u0645\u0631\u0648: "1j", \u0627\u0645\u0631\u06CC: "h", \u0627\u0645\u064A: "1i", \u0627\u0646\u062A\u0638\u0631: "1i", \u0627\u0646\u062C\u0627: "1j", "\u0627\u0646\u062F ": "1j", \u0627\u0646\u062F\u0627\u0646: "h", "\u0627\u0646\u062F\u0646 ": "1j", \u0627\u0646\u0645: "1j", \u0627\u0646\u064A: "1i", \u0627\u0646\u06AF\u0631\u06CC: "h", \u0627\u064F\u0633: "h", \u0627\u0650\u0633: "h", \u0627\u067E\u0633: "h", \u0627\u06A9\u06CC\u0644: "h", \u0627\u06AF\u0644: "h", "\u0627\u06CC ": "1j", \u0627\u06CC\u062A: "1j", \u0627\u06CC\u062F: "1j", \u0627\u06CC\u0634: "1j", "\u0627\u06CC\u0645 ": "1j", \u0627\u06CC\u0646: "1j", \u0628\u0623: "1i", \u0628\u0627\u0626\u0644: "1i", "\u0628\u0627\u062D\u0629 ": "1i", \u0628\u0627\u0631\u062D\u0629: "1i", "\u0628\u0627\u0631\u0647 ": "1j", \u0628\u0627\u0632: "1j", \u0628\u0627\u06CC: "1j", \u0628\u0629: "1i", "\u0628\u062A\u0627 ": "h", \u0628\u062A\u0627\u0626: "h", \u0628\u062D\u0627\u062C: "1i", "\u0628\u062F\u0627 ": "1i", \u0628\u062F\u0647: "1j", "\u0628\u062F\u0648 ": "1i", \u0628\u0631\u0627\u0626: "h", \u0628\u0631\u0627\u062F\u0631: "1j", \u0628\u0632\u0631: "1j", "\u0628\u0633\u0628\u0628 ": "1i", \u0628\u0633\u06CC: "1j", \u0628\u0635\u0648\u0631: "h", "\u0628\u0639\u0636 ": "1i", \u0628\u063A\u06CC: "h", \u0628\u0643: "1i", "\u0628\u0645\u0627 ": "1i", \u0628\u0647\u062A: "1j", \u0628\u0648\u062F: "1j", \u0628\u0648\u0644\u062A: "h", "\u0628\u064A ": "1i", "\u0628\u064A\u0646 ": "1i", \u0628\u0651: "1i", \u0628\u067E: "1j", \u0628\u06A9: "1j", \u0628\u06AF: "1j", \u0628\u06CC\u0627: "1j", \u0628\u06CC\u0634: "1j", "\u0628\u06CC\u0646 ": "1j", \u0628\u200C: "1j", "\u0629\u061F": "1i", "\u062A\u0627\u0645 ": "1j", \u062A\u0627\u06CC\u0627: "h", \u062A\u062D\u062F: "1i", \u062A\u0630: "1i", \u062A\u0631\u064A: "1i", \u062A\u0631\u06CC: "1j", "\u062A\u0634\u0641\u0649 ": "1i", \u062A\u0639\u0631\u0641: "1i", \u062A\u0639\u0644\u0645: "1i", \u062A\u0639\u0645\u0644: "1i", \u062A\u0641\u0627\u062F\u0647: "1j", \u062A\u0643: "1i", \u062A\u0644\u0641\u0627\u0632: "1i", "\u062A\u0645\u0627\u0639 ": "1i", "\u062A\u0646\u062F ": "1j", "\u062A\u0646\u064A ": "1i", \u062A\u0648\u0627\u0646: "1j", "\u062A\u0648\u0645 ": "1i", \u062A\u0649: "1i", "\u062A\u064A ": "1i", \u062A\u064F: "1i", \u062A\u06AF: "1j", \u062A\u06CC\u0631\u0627: "h", \u062A\u200C: "1j", \u062B\u0644\u0627\u062B: "1i", \u062B\u064A: "1i", \u062B\u06CC: "1j", \u062C\u0627\u062A\u06CC: "h", "\u062C\u0627\u0645 ": "1j", \u062C\u0627\u0646\u062A: "h", \u062C\u0627\u067E: "h", \u062C\u0629: "1i", "\u062C\u062F ": "1i", "\u062C\u062F\u0627\u064B ": "1i", "\u062C\u0633 ": "h", \u062C\u0634: "1j", \u062C\u0644\u062F\u06CC: "h", \u062C\u0644\u064A\u0632: "1i", "\u062C\u0645\u0627\u0644 ": "1i", \u062C\u0645\u064A: "1i", \u062C\u064A: "1i", \u062C\u06CC\u062A: "h", \u062C\u06CC\u0633: "h", \u062D\u0627\u0641\u0644: "1i", \u062D\u0627\u0648\u0644: "1i", "\u062D\u0628\u062A ": "1j", \u062D\u062A\u0627\u062C: "1i", \u062D\u062A\u06CC: "1j", \u062D\u062F\u062B: "1i", "\u062D\u0631\u0641 ": "1j", \u062D\u064A: "1i", \u062D\u06A9: "1j", \u062E\u0627\u0646\u062F: "h", \u062E\u0627\u0646\u0647: "1j", \u062E\u0630: "1i", \u062E\u0647: "1j", \u062E\u0648\u0627\u0628: "1j", \u062E\u0648\u0627\u0633: "1j", \u062E\u0648\u0627\u0647: "1j", "\u062E\u0648\u0628 ": "1j", "\u062E\u0648\u062F\u0634 ": "1j", \u062E\u0648\u0631\u062F: "1j", \u062E\u06CC\u0644: "1j", \u062F\u0623: "1i", \u062F\u0627\u0631\u062F: "1j", \u062F\u0627\u0631\u0645: "1j", \u062F\u0627\u0631\u0646: "1j", \u062F\u0627\u0631\u06CC: "1j", \u062F\u0627\u0632: "1j", \u062F\u0627\u0634: "1j", \u062F\u0629: "1i", "\u062F\u062B ": "1i", "\u062F\u0631\u0633\u0647 ": "1j", \u062F\u0632: "1j", "\u062F\u0633\u062A ": "1j", "\u062F\u0645\u0627 ": "1i", \u062F\u0646\u0628\u0627\u0644: "1j", \u062F\u0646\u062F: "1j", \u062F\u0647\u062F: "1j", \u062F\u0648\u0633\u062A\u0627: "1j", \u062F\u0648\u0646\u0648: "h", "\u062F\u064A ": "1i", \u062F\u064A\u062F: "1i", \u062F\u064A\u0646: "1i", \u062F\u064A\u0647: "1i", "\u062F\u06CC\u0627 ": "h", \u062F\u06CC\u062F: "1j", \u062F\u06CC\u0645: "1j", \u0630\u0634: "1j", \u0630\u0644: "1i", "\u0630\u0647 ": "1i", \u0630\u0647\u0627\u0628: "1i", \u0630\u0647\u0628: "1i", \u0630\u064A: "1i", \u0630\u06CC: "1j", "\u0631\u0627\u0621 ": "1i", \u0631\u0627\u0646\u0633\u06CC: "h", \u0631\u0627\u06CC: "1j", \u0631\u0629: "1i", "\u0631\u062A\u0627 ": "h", "\u0631\u062C\u0644 ": "1i", "\u0631\u062F\u060C ": "1j", \u0631\u062F\u0645: "1j", "\u0631\u062F\u0646 ": "1j", \u0631\u062F\u06CC: "1j", \u0631\u0633\u06CC: "1j", \u0631\u0641\u062A\u0646: "1j", \u0631\u0643: "1i", \u0631\u0645\u0636\u0627\u0646: "1i", \u0631\u0646\u062F: "1j", "\u0631\u0646\u064A ": "1i", \u0631\u0648\u0631\u062A: "h", "\u0631\u0648\u0632 ": "1j", \u0631\u0648\u06CC: "1j", \u0631\u0649: "1i", \u0631\u064A\u062F: "1i", \u0631\u064A\u0645: "1i", \u0631\u0686: "1j", \u0631\u06AF: "1j", "\u0631\u06CC\u062F ": "1j", \u0632\u0627\u0626: "1i", "\u0632\u0627\u0644 ": "1i", \u0632\u062E: "1j", "\u0632\u062F ": "1j", \u0632\u0634: "1j", \u0632\u0645\u0627\u0646: "1j", "\u0632\u0645\u06CC\u0646 ": "1j", \u0632\u064A\u0631: "1i", \u0632\u06AF: "1j", \u0633\u0627\u0639\u062F: "1i", "\u0633\u0628\u0648\u0639 ": "1i", \u0633\u0629: "1i", "\u0633\u062A\u060C": "1j", "\u0633\u062A\u061F": "1j", \u0633\u062A\u0634\u0641\u0649: "1i", \u0633\u062A\u0637: "1i", \u0633\u062A\u0641\u0627\u062F: "1j", "\u0633\u062A\u0645 ": "1j", "\u0633\u062A\u0645\u0639 ": "1i", \u0633\u062A\u06CC: "1j", \u0633\u0634: "1j", \u0633\u0643: "1i", \u0633\u0644\u0645\u064A\u0646: "1i", \u0633\u0645\u062C: "h", \u0633\u0648\u0686: "h", \u0633\u064A\u0627: "1i", \u0633\u0686: "h", \u0633\u06A9\u062A: "h", \u0633\u06A9\u0648\u0644: "h", \u0633\u06AF: "1j", \u0633\u06CC\u0627\u0631: "1j", \u0633\u06CC\u062F: "1j", \u0633\u06CC\u0633\u06CC: "h", \u0633\u200C: "1j", "\u0634\u060C": "1j", "\u0634\u0627\u0645\u0644 ": "h", "\u0634\u0627\u0647\u062F ": "1i", \u0634\u062A\u0628\u0627\u0647: "1j", "\u0634\u062A\u0631 ": "1j", "\u0634\u062A\u0647 ": "1j", \u0634\u062F\u0647: "1j", "\u0634\u0631\u0628 ": "1i", \u0634\u0633: "1j", \u0634\u0643: "1i", "\u0634\u0645\u0627 ": "1j", \u0634\u0646\u0627: "1j", "\u0634\u0647 ": "1j", \u0634\u0648\u062F: "1j", \u0634\u064A: "1i", \u0634\u067E: "1j", \u0634\u06A9\u0631\u06CC: "h", \u0634\u06AF: "1j", \u0634\u06CC\u062F: "1j", \u0634\u200C: "1j", "\u0635\u0628\u0627\u062D ": "1i", \u0635\u062D\u0628: "1j", \u0635\u064A: "1i", "\u0636\u0644 ": "1i", \u0636\u064A: "1i", \u0637\u0629: "1i", \u0637\u0641\u0627\u0644: "1i", \u0637\u0641\u0627\u064B: "1j", "\u0637\u0648\u0627\u0644 ": "1i", \u0637\u064A: "1i", \u0637\u06CC: "1j", \u0638\u06CC: "1j", "\u0639\u0628 ": "1i", \u0639\u0629: "1i", "\u0639\u062A\u0642\u062F ": "1i", "\u0639\u0631\u0641 ": "1i", \u0639\u0644\u064A: "1i", "\u0639\u0646 ": "1i", \u0639\u0646\u062F: "1i", \u0639\u0648\u0631\u062A: "h", \u0639\u064A: "1i", \u0639\u06A9: "1j", \u063A\u0627\u062F\u0631: "1i", \u063A\u064A: "1i", \u0640: "1i", "\u0641\u0627\u062F\u0647 ": "1j", \u0641\u0627\u0636: "1i", \u0641\u0629: "1i", "\u0641\u062A\u0646 ": "1j", \u0641\u0631\u0627\u0645\u0648: "1j", "\u0641\u0631\u062F\u0627 ": "1j", \u0641\u0631\u0646\u0633: "1i", \u0641\u0635\u0627\u0644: "1i", \u0641\u0636\u0644: "1i", "\u0641\u0639\u0644 ": "1i", "\u0641\u0639\u0644\u0647 ": "1i", \u0641\u064A: "1i", \u0641\u06A9: "1j", \u0641\u200C: "1j", "\u0642\u0627\u0621 ": "1i", \u0642\u0628\u0627\u0626: "1i", \u0642\u0629: "1i", "\u0642\u062A\u06CC ": "1j", \u0642\u0631\u064A\u0628\u0627: "1i", "\u0642\u0639\u0627\u064B ": "1j", "\u0642\u0647\u0648\u0647 ": "1j", \u0642\u0648\u0627\u0645: "h", \u0642\u0648\u0645\u06CC: "h", "\u0642\u064A\u0627\u0645 ": "1i", \u0642\u06CC\u0642: "1j", \u0642\u06CC\u0646: "h", \u0642\u200C: "1j", "\u0643 ": "1i", "\u0643\u061F": "1i", \u0643\u0627\u0646: "1i", \u0643\u0628: "1i", \u0643\u062A: "1i", \u0643\u062B: "1i", \u0643\u0630: "1i", \u0643\u0644: "1i", \u0643\u0645: "1i", "\u0643\u0646 ": "1i", \u0643\u0646\u062A: "1i", \u0643\u0648: "1i", \u0643\u064A: "1i", \u0643\u06CC: "1k", \u0644\u0623: "1i", \u0644\u0626\u06CC: "h", "\u0644\u0627\u062B\u0629 ": "1i", \u0644\u0628\u0627\u0628: "1i", \u0644\u0628\u0627\u0631\u062D: "1i", "\u0644\u0628\u064A\u062A ": "1i", \u0644\u0629: "1i", "\u0644\u062A\u0627 ": "h", \u0644\u062A\u0644\u0641\u0627: "1i", \u0644\u062A\u064A: "1i", \u0644\u062C\u0632: "1i", \u0644\u062D\u0627: "1i", \u0644\u062F\u064A: "1i", \u0644\u0633\u064A: "1i", \u0644\u0637\u0641\u0627: "1j", \u0644\u0639\u0627\u0635\u0645: "1i", \u0644\u0639\u0627\u0644\u0645: "1i", \u0644\u0639\u0631\u0628: "1i", \u0644\u0639\u0645\u0644: "1i", "\u0644\u063A\u0629 ": "1i", "\u0644\u0641\u0627\u0632 ": "1i", \u0644\u0642\u062F: "1i", \u0644\u0643: "1i", "\u0644\u0645\u0627 ": "1i", \u0644\u0645\u0627\u0644: "1i", \u0644\u0645\u062F: "1i", \u0644\u0645\u0632\u064A\u062F: "1i", \u0644\u0645\u0633\u062A: "1i", \u0644\u0645\u0633\u0644\u0645: "1i", \u0644\u0645\u0646: "1i", \u0644\u0645\u0648: "1i", "\u0644\u0645\u064A\u0646 ": "1i", \u0644\u0646\u0627: "1i", \u0644\u0648\u0642\u062A: "1i", \u0644\u0648\u06AF: "h", \u0644\u0649: "1i", "\u0644\u064A ": "1i", \u0644\u064A\u0633: "1i", \u0644\u064A\u0647: "1i", \u0644\u0651: "1i", "\u0644\u06A9\u0644 ": "h", "\u0644\u06AF ": "h", \u0644\u06AF\u0627: "h", \u0644\u06AF\u062A: "h", \u0644\u06CC\u06A9\u0646: "h", \u0644\u200C: "1j", \u0645\u0627\u0621: "1i", \u0645\u0627\u0630: "1i", \u0645\u0627\u0632: "1i", \u0645\u0627\u0646\u0646: "1j", \u0645\u0627\u0646\u06CC: "1j", \u0645\u0627\u06CC: "1j", \u0645\u0629: "1i", "\u0645\u062F\u062F ": "h", \u0645\u062F\u0631\u0633\u0647: "1j", "\u0645\u0631\u0623\u0629 ": "1i", "\u0645\u0631\u062F ": "1j", \u0645\u0631\u0648\u0632: "1j", \u0645\u0631\u06CC\u0645: "h", "\u0645\u0632\u064A\u062F ": "1i", \u0645\u0633\u0627\u0639: "1i", \u0645\u0633\u062A\u0634\u0641: "1i", \u0645\u0633\u0644\u0645\u064A: "1i", "\u0645\u0636\u0627\u0646 ": "1i", \u0645\u0639\u0627\u0634: "h", \u0645\u0643: "1i", \u0645\u0644\u0627\u0628\u0633: "1i", "\u0645\u0644\u06A9 ": "h", \u0645\u0646\u062A\u0638\u0631: "1j", \u0645\u0646\u0632\u0644\u0647: "1i", "\u0645\u0648\u0631\u062F ": "1j", "\u0645\u0648\u0634 ": "1j", \u0645\u067E: "1j", \u0645\u0686: "1j", "\u0645\u06A9 ": "1j", \u0645\u06CC\u0631\u0627: "h", "\u0645\u06CC\u0631\u06CC ": "h", \u0645\u200C: "1j", \u0646\u0626: "h", \u0646\u0627\u0645\u0647: "1j", \u0646\u0627\u0648\u0644: "1i", \u0646\u0629: "1i", "\u0646\u062C\u0627 ": "1j", \u0646\u062C\u0627\u0645: "1j", "\u0646\u062D\u0646 ": "1i", "\u0646\u062F\u060C": "1j", \u0646\u062F\u0627\u0631: "1j", \u0646\u062F\u0645\u0627: "1i", \u0646\u0632\u062F\u06CC\u06A9: "1j", \u0646\u0633\u06CC\u0633: "h", "\u0646\u0634\u0627\u0646 ": "1j", \u0646\u0641\u0633\u0647: "1i", \u0646\u0641\u0635\u0627: "1i", "\u0646\u0642\u062F\u0631 ": "1j", \u0646\u0643: "1i", \u0646\u0645\u06CC: "1j", "\u0646\u0646\u0627 ": "1i", \u0646\u0646\u062F: "1j", \u0646\u0646\u064A: "1i", \u0646\u0648\u0634: "1j", \u0646\u0651: "1i", "\u0646\u0686 ": "h", \u0646\u06A9\u0644: "h", \u0646\u06A9\u0646: "1j", \u0646\u06CC\u062F: "1j", \u0646\u06CC\u0633: "1j", \u0646\u06CC\u0645: "1j", \u0646\u200C: "1j", "\u0647\u0627\u0628 ": "1i", \u0647\u0627\u062A\u0641: "1i", \u0647\u0627\u06CC: "1j", "\u0647\u0628 ": "1i", \u0647\u062A\u0631: "1j", \u0647\u0630: "1i", \u0647\u0633: "1j", \u0647\u0641: "1j", "\u0647\u0645\u0627 ": "1i", \u0647\u0645\u06CC: "1j", \u0647\u0646\u0627: "1i", "\u0647\u0646\u0648\u0632 ": "1j", \u0647\u0646\u06AF: "1j", "\u0647\u064A ": "1i", \u0647\u06CC: "1j", \u0647\u200C: "1j", "\u0648\u0626 ": "h", \u0648\u0627\u062D\u062F: "1i", \u0648\u0627\u0633\u062A: "1j", \u0648\u0627\u0635\u0644: "1i", \u0648\u0627\u0642\u0639\u0627: "1j", "\u0648\u0627\u0644\u0627 ": "h", \u0648\u0627\u0646\u062F: "1j", \u0648\u0627\u0646\u0633\u062A: "1j", \u0648\u0627\u0646\u06CC: "1j", \u0648\u0627\u0647\u062F: "1j", \u0648\u0627\u0647\u0645: "1j", \u0648\u0628\u0635: "h", \u0648\u0628\u06CC: "1j", "\u0648\u062F\u060C ": "1j", \u0648\u062F\u0645: "1j", \u0648\u062F\u0646: "1j", \u0648\u0633\u062A\u0627\u0646: "1j", \u0648\u0633\u0631: "h", \u0648\u0633\u0645: "h", \u0648\u0642\u062A\u06CC: "1j", \u0648\u0643: "1i", \u0648\u0644\u062A\u0627: "h", "\u0648\u0644\u06CC ": "1j", \u0648\u0646\u062F: "1j", "\u0648\u0646\u064A ": "1i", \u0648\u0646\u06A9: "h", "\u0648\u06AF ": "h", \u0648\u06AF\u0648: "h", \u0648\u06CC\u062F: "1j", "\u064A\u061F": "1i", \u064A\u0621: "1i", \u064A\u0626: "1i", "\u064A\u0627 ": "1i", \u064A\u0627\u062A: "1i", \u064A\u0627\u0631: "1i", \u064A\u0627\u0646: "1i", "\u064A\u0628 ": "1i", \u064A\u0629: "1i", \u064A\u062C: "1i", \u064A\u062D: "1i", "\u064A\u062F\u0627 ": "1i", "\u064A\u0631 ": "1i", \u064A\u0631\u0627: "1i", \u064A\u0631\u064A: "1i", "\u064A\u0633 ": "1i", \u064A\u0636: "1i", \u064A\u0639: "1i", \u064A\u063A: "1i", \u064A\u0641: "1i", \u064A\u0642: "1i", \u064A\u0643: "1i", \u064A\u0644: "1i", \u064A\u0646\u0627: "1i", \u064A\u0647\u0627: "1i", \u064A\u0648: "1i", \u064A\u0651: "1i", "\u064B\u0627": "1i", "\u064C": "1i", "\u064D": "1i", "\u064E ": "1i", "\u064F ": "1i", "\u064F\u0633 ": "h", "\u0650\u0633 ": "h", "\u0651 ": "1i", "\u0651\u0627 ": "1i", "\u0651\u0627\u062F ": "1i", "\u0651\u0629": "1i", "\u0651\u0631": "1i", "\u0651\u0633": "1i", "\u0651\u0645": "1i", "\u0651\u064A": "1i", "\u0652": "1i", "\u0654": "1j", "\u0660": "1i", "\u0661": "1i", "\u0669": "1i", "\u066A": "1j", \u0671: "1i", \u0674: "h", \u0679: "h", "\u067E\u0627\u0633 ": "h", "\u067E\u0627\u0646\u06CC ": "h", \u067E\u0627\u06CC: "1j", \u067E\u062F: "1j", \u067E\u0630: "1j", \u067E\u0632: "1j", \u067E\u0634: "1j", \u067E\u0644: "1j", "\u067E\u0646\u0627 ": "h", \u067E\u0648\u0631\u0627: "h", \u067E\u0648\u0631\u06CC: "h", \u067E\u0648\u0644: "1j", \u067E\u0686: "h", \u067E\u06CC\u0627\u0631: "h", \u067E\u06CC\u0633: "h", \u067E\u06CC\u0646: "h", "\u0686\u0627 ": "h", \u0686\u0627\u0626: "h", \u0686\u0631: "1j", \u0686\u0634: "1j", \u0686\u0637: "1j", \u0686\u0642: "1j", \u0686\u0644: "h", \u0686\u0646: "1j", \u0686\u0647: "1j", \u0686\u06AF: "1j", "\u0686\u06CC\u0632 ": "1j", \u0686\u06CC\u0632\u06CC: "1j", \u0686\u200C: "1j", \u0688: "h", \u0691: "h", \u0698: "1j", \u06A9\u0626: "h", "\u06A9\u0627\u0631\u06CC ": "1j", "\u06A9\u0627\u0645 ": "h", "\u06A9\u062A\u0627 ": "h", \u06A9\u062A\u0646: "h", \u06A9\u062A\u06CC: "h", \u06A9\u062B: "1j", \u06A9\u062C: "1j", \u06A9\u0631\u062A: "h", \u06A9\u0631\u062F: "1j", \u06A9\u0631\u0646: "h", "\u06A9\u0631\u0648 ": "h", \u06A9\u0632: "1j", \u06A9\u0634: "1j", \u06A9\u0641: "1j", \u06A9\u0646\u062F: "1j", \u06A9\u0646\u0645: "1j", \u06A9\u0646\u0646: "1j", \u06A9\u0646\u06CC: "1j", \u06A9\u0647: "1j", \u06A9\u0648\u0626: "h", \u06A9\u0648\u0634\u0634: "h", "\u06A9\u0648\u0644 ": "h", "\u06A9\u0648\u0646 ": "h", "\u06A9\u0648\u0686\u06A9 ": "1j", \u06A9\u0686: "h", \u06A9\u06CC\u0627: "h", \u06A9\u200C: "1j", \u06AD: "1k", \u06AF\u0626: "h", "\u06AF\u0627 ": "h", "\u06AF\u0627\u0645\u06CC ": "1j", \u06AF\u0627\u0647: "1j", \u06AF\u062A\u0627: "h", \u06AF\u0630: "1j", \u06AF\u0631\u0627: "1j", \u06AF\u0631\u062F: "1j", \u06AF\u0631\u0641: "1j", \u06AF\u0633: "1j", \u06AF\u0634: "1j", \u06AF\u0641: "1j", \u06AF\u0645: "1j", \u06AF\u0647: "1j", \u06AF\u0648\u06CC: "1j", "\u06AF\u06CC\u0627 ": "h", \u06AF\u06CC\u0631: "1j", \u06AF\u200C: "1j", \u06BA: "h", \u06BE: "h", \u06C0: "1j", \u06C1: "h", "\u06CC\u061F": "1j", \u06CC\u0626: "h", "\u06CC\u0627\u061F": "h", "\u06CC\u0627\u062F ": "1j", \u06CC\u0627\u062F\u06CC: "1j", "\u06CC\u0627\u0631\u06CC ": "1j", \u06CC\u0627\u0641\u062A: "1j", "\u06CC\u0627\u0644 ": "h", "\u06CC\u0627\u0646 ": "1j", \u06CC\u0628\u0627: "1j", "\u06CC\u062F\u060C": "1j", "\u06CC\u062F\u061F": "1j", "\u06CC\u062F\u0627\u0631 ": "1j", "\u06CC\u062F\u0645 ": "1j", \u06CC\u062F\u0646: "1j", \u06CC\u062F\u0647: "1j", \u06CC\u0631\u0648: "1j", \u06CC\u0633\u062A: "1j", "\u06CC\u0634 ": "1j", \u06CC\u0634\u062A: "1j", \u06CC\u0634\u0647: "1j", \u06CC\u0635: "1j", \u06CC\u0637: "1j", \u06CC\u0641: "1j", \u06CC\u0646\u062C: "1j", \u06CC\u0646\u062F: "1j", \u06CC\u0647: "1j", "\u06CC\u0686 ": "1j", "\u06CC\u0686\u06A9\u0633 ": "1j", \u06CC\u06AF: "1j", \u06CC\u06CC: "1j", \u06CC\u200C: "1j", \u06D2: "h", "\u06D4": "h", "\u06F1\u06F0": "h", "\u06F2": "1j", "\u06F3": "1j", "\u06F5": "1j", "\u06F6": "1j", "\u06F8": "1j", "\u06F9": "1j", "\u0901": "g", "\u0902": "g", "\u0903": "g", \u0905: "g", \u0906: "g", \u0907: "g", \u0908: "g", \u0909: "g", \u090A: "g", \u090F: "g", \u0910: "g", \u0911: "g", \u0913: "g", \u0914: "g", \u0915: "g", \u0916: "g", \u0917: "g", \u0918: "g", \u091A: "g", \u091B: "g", \u091C: "g", \u091D: "g", \u091E: "g", \u091F: "g", \u0920: "g", \u0921: "g", \u0922: "g", \u0923: "g", \u0924: "g", \u0925: "g", \u0926: "g", \u0927: "g", \u0928: "g", \u092A: "g", \u092B: "g", \u092C: "g", \u092D: "g", \u092E: "g", \u092F: "g", \u0930: "g", \u0932: "g", \u0935: "g", \u0936: "g", \u0937: "g", \u0938: "g", \u0939: "g", "\u093C": "g", "\u093E": "g", "\u093F": "g", "\u0940": "g", "\u0941": "g", "\u0942": "g", "\u0943": "g", "\u0945": "g", "\u0947": "g", "\u0948": "g", "\u0949": "g", "\u094B": "g", "\u094C": "g", "\u094D": "g", \u0958: "g", \u095B: "g", "\u0966": "g", "\u0967": "g", "\u0968": "g", "\u0969": "g", "\u096A": "g", "\u096B": "g", "\u096C": "g", "\u096D": "g", "\u096E": "g", "\u096F": "g", "\u0981": "e", "\u0982": "e", "\u0983": "e", \u0985: "e", \u0986: "e", \u0987: "e", \u0988: "e", \u0989: "e", \u098B: "e", \u098F: "e", \u0990: "e", \u0993: "e", \u0994: "e", \u0995: "e", \u0996: "e", \u0997: "e", \u0998: "e", \u0999: "e", \u099A: "e", \u099B: "e", \u099C: "e", \u099D: "e", \u099E: "e", \u099F: "e", \u09A0: "e", \u09A1: "e", \u09A2: "e", \u09A3: "e", \u09A4: "e", \u09A5: "e", \u09A6: "e", \u09A7: "e", \u09A8: "e", \u09AA: "e", \u09AB: "e", \u09AC: "e", \u09AD: "e", \u09AE: "e", \u09AF: "e", \u09B0: "e", \u09B2: "e", \u09B6: "e", \u09B7: "e", \u09B8: "e", \u09B9: "e", "\u09BC": "e", "\u09BE": "e", "\u09BF": "e", "\u09C0": "e", "\u09C1": "e", "\u09C2": "e", "\u09C3": "e", "\u09C7": "e", "\u09C8": "e", "\u09CB": "e", "\u09CC": "e", "\u09CD": "e", "\u09CE": "e", "\u09E6": "e", "\u09E7": "e", "\u09E8": "e", "\u09E9": "e", "\u09EA": "e", "\u09EB": "e", "\u09EC": "e", "\u09ED": "e", "\u09EE": "e", "\u09EF": "e", "\u0A82": "i", \u0A85: "i", \u0A86: "i", \u0A87: "i", \u0A88: "i", \u0A89: "i", \u0A8F: "i", \u0A93: "i", \u0A95: "i", \u0A96: "i", \u0A97: "i", \u0A98: "i", \u0A9A: "i", \u0A9B: "i", \u0A9C: "i", \u0A9F: "i", \u0AA0: "i", \u0AA1: "i", \u0AA3: "i", \u0AA4: "i", \u0AA5: "i", \u0AA6: "i", \u0AA7: "i", \u0AA8: "i", \u0AAA: "i", \u0AAB: "i", \u0AAC: "i", \u0AAD: "i", \u0AAE: "i", \u0AAF: "i", \u0AB0: "i", \u0AB2: "i", \u0AB3: "i", \u0AB5: "i", \u0AB6: "i", \u0AB7: "i", \u0AB8: "i", \u0AB9: "i", "\u0ABE": "i", "\u0ABF": "i", "\u0AC0": "i", "\u0AC1": "i", "\u0AC2": "i", "\u0AC3": "i", "\u0AC7": "i", "\u0ACB": "i", "\u0ACD": "i", \u0B85: "f", \u0B86: "f", \u0B87: "f", \u0B89: "f", \u0B8E: "f", \u0B8F: "f", \u0B92: "f", \u0B93: "f", \u0B95: "f", \u0B99: "f", \u0B9A: "f", \u0B9C: "f", \u0B9F: "f", \u0BA3: "f", \u0BA4: "f", \u0BA8: "f", \u0BA9: "f", \u0BAA: "f", \u0BAE: "f", \u0BAF: "f", \u0BB0: "f", \u0BB1: "f", \u0BB2: "f", \u0BB3: "f", \u0BB4: "f", \u0BB5: "f", "\u0BBE": "f", "\u0BBF": "f", "\u0BC0": "f", "\u0BC1": "f", "\u0BC2": "f", "\u0BC6": "f", "\u0BC7": "f", "\u0BC8": "f", "\u0BCA": "f", "\u0BCB": "f", "\u0BCD": "f", "\u0C02": "k", \u0C05: "k", \u0C06: "k", \u0C07: "k", \u0C08: "k", \u0C09: "k", \u0C0E: "k", \u0C0F: "k", \u0C12: "k", \u0C15: "k", \u0C17: "k", \u0C1A: "k", \u0C1B: "k", \u0C1C: "k", \u0C1F: "k", \u0C21: "k", \u0C23: "k", \u0C24: "k", \u0C25: "k", \u0C26: "k", \u0C27: "k", \u0C28: "k", \u0C2A: "k", \u0C2B: "k", \u0C2C: "k", \u0C2D: "k", \u0C2E: "k", \u0C2F: "k", \u0C30: "k", \u0C32: "k", \u0C33: "k", \u0C35: "k", \u0C36: "k", \u0C37: "k", \u0C38: "k", \u0C39: "k", "\u0C3E": "k", "\u0C3F": "k", "\u0C40": "k", "\u0C41": "k", "\u0C42": "k", "\u0C43": "k", "\u0C46": "k", "\u0C47": "k", "\u0C48": "k", "\u0C4A": "k", "\u0C4B": "k", "\u0C4C": "k", "\u0C4D": "k", "\u0C82": "j", \u0C85: "j", \u0C86: "j", \u0C87: "j", \u0C88: "j", \u0C89: "j", \u0C8E: "j", \u0C8F: "j", \u0C92: "j", \u0C95: "j", \u0C96: "j", \u0C97: "j", \u0C98: "j", \u0C9A: "j", \u0C9C: "j", \u0C9F: "j", \u0CA1: "j", \u0CA3: "j", \u0CA4: "j", \u0CA5: "j", \u0CA6: "j", \u0CA7: "j", \u0CA8: "j", \u0CAA: "j", \u0CAC: "j", \u0CAD: "j", \u0CAE: "j", \u0CAF: "j", \u0CB0: "j", \u0CB2: "j", \u0CB3: "j", \u0CB5: "j", \u0CB6: "j", \u0CB7: "j", \u0CB8: "j", \u0CB9: "j", "\u0CBE": "j", "\u0CBF": "j", "\u0CC0": "j", "\u0CC1": "j", "\u0CC2": "j", "\u0CC3": "j", "\u0CC6": "j", "\u0CC7": "j", "\u0CC8": "j", "\u0CCA": "j", "\u0CCB": "j", "\u0CCC": "j", "\u0CCD": "j", \u0E01: 9, \u0E02: 9, \u0E04: 9, \u0E06: 9, \u0E07: 9, \u0E08: 9, \u0E09: 9, \u0E0A: 9, \u0E0B: 9, \u0E0D: 9, \u0E0E: 9, \u0E0F: 9, \u0E10: 9, \u0E13: 9, \u0E14: 9, \u0E15: 9, \u0E16: 9, \u0E17: 9, \u0E18: 9, \u0E19: 9, \u0E1A: 9, \u0E1B: 9, \u0E1C: 9, \u0E1D: 9, \u0E1E: 9, \u0E1F: 9, \u0E20: 9, \u0E21: 9, \u0E22: 9, \u0E23: 9, \u0E24: 9, \u0E25: 9, \u0E27: 9, \u0E28: 9, \u0E29: 9, \u0E2A: 9, \u0E2B: 9, \u0E2C: 9, \u0E2D: 9, \u0E2E: 9, \u0E30: 9, "\u0E31": 9, \u0E32: 9, \u0E33: 9, "\u0E34": 9, "\u0E35": 9, "\u0E36": 9, "\u0E37": 9, "\u0E38": 9, "\u0E39": 9, \u0E40: 9, \u0E41: 9, \u0E42: 9, \u0E43: 9, \u0E44: 9, \u0E46: 9, "\u0E47": 9, "\u0E48": 9, "\u0E49": 9, "\u0E4A": 9, "\u0E4B": 9, "\u0E4C": 9, "\u0E4D": 9, \u1000: 8, \u1001: 8, \u1002: 8, \u1004: 8, \u1005: 8, \u1006: 8, \u1007: 8, \u1009: 8, \u100A: 8, \u100F: 8, \u1010: 8, \u1011: 8, \u1012: 8, \u1014: 8, \u1015: 8, \u1016: 8, \u1017: 8, \u1018: 8, \u1019: 8, \u101A: 8, \u101B: 8, \u101C: 8, \u101D: 8, \u101E: 8, \u101F: 8, \u1021: 8, \u1025: 8, \u1026: 8, "\u102B": 8, "\u102C": 8, "\u102D": 8, "\u102E": 8, "\u102F": 8, "\u1030": 8, "\u1031": 8, "\u1032": 8, "\u1036": 8, "\u1037": 8, "\u1038": 8, "\u1039": 8, "\u103A": 8, "\u103B": 8, "\u103C": 8, "\u103D": 8, "\u103E": 8, "\u104A": 8, "\u104B": 8, "\u104C": 8, "\u104D": 8, "\u104F": 8, \u1201: 2, \u1203: 2, \u1204: 2, \u1205: 2, \u1206: 2, \u1208: 2, \u1209: 2, \u120A: 2, \u120B: 2, \u120D: 2, \u120E: 2, \u1210: 2, \u1215: 2, \u1218: 2, \u1219: 2, \u121A: 2, \u121B: 2, \u121C: 2, \u121D: 2, \u1225: 2, \u1228: 2, \u1229: 2, \u122A: 2, \u122B: 2, \u122D: 2, \u122E: 2, \u1230: 2, \u1231: 2, \u1233: 2, \u1234: 2, \u1235: 2, \u123D: 2, \u1240: 2, \u1243: 2, \u1245: 2, \u124B: 2, \u1260: 2, \u1261: 2, \u1262: 2, \u1263: 2, \u1264: 2, \u1265: 2, \u1270: 2, \u1271: 2, \u1273: 2, \u1275: 2, \u1276: 2, \u1278: 2, \u127B: 2, \u127D: 2, \u1280: 2, \u1290: 2, \u1291: 2, \u1293: 2, \u1294: 2, \u1295: 2, \u1296: 2, \u1298: 2, \u129B: 2, \u129D: 2, \u12A0: 2, \u12A5: 2, \u12A8: 2, \u12A9: 2, \u12AB: 2, \u12AD: 2, \u12C8: 2, \u12CA: 2, \u12CD: 2, \u12CE: 2, \u12D3: 2, \u12D8: 2, \u12DA: 2, \u12DC: 2, \u12DD: 2, \u12E8: 2, \u12E9: 2, \u12EB: 2, \u12ED: 2, \u12F0: 2, \u12F1: 2, \u12F2: 2, \u12F3: 2, \u12F5: 2, \u1303: 2, \u1305: 2, \u1306: 2, \u1308: 2, \u130A: 2, \u130B: 2, \u130D: 2, \u1320: 2, \u1323: 2, \u1325: 2, \u1338: 2, \u133B: 2, \u133D: 2, \u1348: 2, \u134D: 2, "\u1361": 2, "\u1362": 2, "\u1700": "d", "\u1705": "d", "\u1708": "d", "\u170B": "d", "\u170E": "d", "\u1712": "d", "\u1713": "d", "\u1714": "d", \u1780: "c", \u1781: "c", \u1782: "c", \u1783: "c", \u1784: "c", \u1785: "c", \u1786: "c", \u1787: "c", \u1788: "c", \u1789: "c", \u178A: "c", \u178B: "c", \u178C: "c", \u178E: "c", \u178F: "c", \u1790: "c", \u1791: "c", \u1792: "c", \u1793: "c", \u1794: "c", \u1795: "c", \u1796: "c", \u1797: "c", \u1798: "c", \u1799: "c", \u179A: "c", \u179B: "c", \u179C: "c", \u179F: "c", \u17A0: "c", \u17A1: "c", \u17A2: "c", \u17A5: "c", \u17AC: "c", \u17AE: "c", \u17AF: "c", \u17B1: "c", \u17B2: "c", "\u17B6": "c", "\u17B7": "c", "\u17B8": "c", "\u17B9": "c", "\u17BA": "c", "\u17BB": "c", "\u17BC": "c", "\u17BD": "c", "\u17BE": "c", "\u17BF": "c", "\u17C0": "c", "\u17C1": "c", "\u17C2": "c", "\u17C3": "c", "\u17C4": "c", "\u17C5": "c", "\u17C6": "c", "\u17C7": "c", "\u17C8": "c", "\u17C9": "c", "\u17CA": "c", "\u17CB": "c", "\u17CC": "c", "\u17CD": "c", "\u17CE": "c", "\u17CF": "c", "\u17D0": "c", "\u17D2": "c", "\u17D4": "c", "\u17D7": "c", \u1E05: 3, \u1E0D: 3, \u1E25: 3, \u1E33: 3, \u1E37: 3, \u1E43: 3, \u1E5B: 3, \u1E63: 3, \u1E6D: 3, \u1E93: 3, \u1EA1: "a", \u1EA3: "a", \u1EA5: "a", \u1EA7: "a", \u1EA9: "a", \u1EAB: "a", \u1EAD: "a", \u1EAF: "a", \u1EB1: "a", \u1EB3: "a", \u1EB5: "a", \u1EB7: "a", \u1EB9: "a", \u1EBB: "a", \u1EBD: "a", \u1EBF: "a", \u1EC1: "a", \u1EC3: "a", \u1EC5: "a", \u1EC7: "a", \u1EC9: "a", \u1ECB: "a", \u1ECD: "a", \u1ECF: "a", \u1ED1: "a", \u1ED3: "a", \u1ED5: "a", \u1ED7: "a", \u1ED9: "a", \u1EDB: "a", \u1EDD: "a", \u1EDF: "a", \u1EE1: "a", \u1EE3: "a", \u1EE5: "a", \u1EE7: "a", \u1EE9: "a", \u1EEB: "a", \u1EED: "a", \u1EEF: "a", \u1EF1: "a", \u1EF3: "a", \u1EF7: "a", \u1EF9: "a", \u1F70: "w", \u1F78: "w", "\u200Ba": "z", "\u200Bb": "1f", "\u200Bd": "z", "\u200Be": "r", "\u200Bg": "1f", "\u200Bh": "z", "\u200Bk": "1f", "\u200Bm": "z", "\u200Bn": "1f", "\u200Bo": "1f", "\u200Bv": "r", "\u200By": "1f", "\u200C ": "1j", "\u200C\u0622": "1j", "\u200C\u0627": "1j", "\u200C\u0628": "1j", "\u200C\u062A": "1j", "\u200C\u062C": "1j", "\u200C\u062E": "1j", "\u200C\u062F": "1j", "\u200C\u0631": "1j", "\u200C\u0632": "1j", "\u200C\u0633": "1j", "\u200C\u0634": "1j", "\u200C\u0641": "1j", "\u200C\u0645": "1j", "\u200C\u0646": "1j", "\u200C\u0647": "1j", "\u200C\u067E": "1j", "\u200C\u06A9": "1j", "\u200C\u06AF": "1j", "\u200C\u06CC": "1j", "\u2011": 3, "\u2015 ": 18, "\u2018 ": "n", "\u2018k": "1o", "\u2018m": "1o", "\u2018s": "r", "\u201A": "n", "\u201F": "1h", "\u2024": "1e", "\u202E": "1i", "\u202F\xB0": "n", "\u2060": "1h", "\u2116 ": 18, "\u2212": "n", "\u2D30": 3, "\u2D31": 3, "\u2D33": 3, "\u2D37": 3, "\u2D39": 3, "\u2D3B": 3, "\u2D3C": 3, "\u2D3D": 3, "\u2D49": 3, "\u2D4D": 3, "\u2D4E": 3, "\u2D4F": 3, "\u2D53": 3, "\u2D54": 3, "\u2D56": 3, "\u2D59": 3, "\u2D5B": 3, "\u2D5C": 3, "\u2D61": 3, "\u2D62": 3, "\u2D63": 3, \u3005: 5, "\u3041 ": 5, \u3042: 5, \u3044: 5, \u3046: 5, \u3048: 5, \u304A: 5, \u304B: 5, \u304C: 5, \u304D: 5, \u304E: 5, \u304F: 5, \u3050: 5, \u3051: 5, \u3052: 5, \u3053: 5, \u3054: 5, \u3055: 5, \u3057: 5, \u3058: 5, \u3059: 5, \u305A: 5, \u305B: 5, \u305D: 5, "\u305E ": 5, \u305F: 5, \u3060: 5, \u3061: 5, \u3063: 5, \u3064: 5, \u3066: 5, \u3067: 5, \u3068: 5, \u3069: 5, \u306A: 5, \u306B: 5, \u306D: 5, \u306E: 5, \u306F: 5, \u3070: 5, \u3073: 5, \u3078: 5, \u3079: 5, \u307B: 5, \u307E: 5, \u307F: 5, \u3080: 5, \u3081: 5, \u3082: 5, \u3083: 5, \u3084: 5, \u3087: 5, \u3088: 5, \u3089: 5, \u308A: 5, \u308B: 5, \u308C: 5, \u308D: 5, \u308F: 5, \u3092: 5, \u3093: 5, \u30A2: 5, \u30A3: 5, \u30A4: 5, \u30A6\u30B5\u30AE: 5, \u30AA: 5, \u30AB: 5, \u30AD: 5, \u30AF: 5, \u30B3: 5, \u30B7: 5, \u30B8: 5, \u30B9: 5, \u30BF: 5, \u30C1: 5, \u30C3: 5, \u30C6: 5, \u30C8: 5, \u30C9: 5, \u30CB: 5, \u30D0: 5, \u30D1: 5, \u30D3: 5, \u30D5: 5, \u30D6: 5, \u30D7: 5, \u30DC: 5, \u30DE: 5, \u30E0: 5, \u30E1: 5, \u30E9: 5, \u30EA: 5, \u30EB: 5, \u30EC: 5, \u30ED: 5, \u30F3: 5, "\u30FB\u30FB": 5, \u30FC: 5, \u4E00\u4E0B: 6, \u4E00\u4E9B: 6, \u4E00\u500B\u4EBA: 6, \u4E00\u5B9A\u8981: 6, "\u4E00\u5C01\u4FE1 ": 6, \u4E00\u5EA6: 5, \u4E00\u65E5\u4E2D: 5, \u4E00\u6642\u9593: 5, \u4E00\u6669\u4E2D: 5, \u4E00\u6B21: 6, "\u4E00\u70B9 ": 6, \u4E00\u70B9\u90FD\u4E0D: 6, \u4E00\u756A: 5, \u4E00\u76F4: 6, \u4E00\u7DD2: 5, \u4E00\u822C\u7684: 5, \u4E00\u8D77: 6, \u4E0A\u624B: 5, "\u4E0B\u6765 ": 6, "\u4E0B\u96E8 ": 6, \u4E0D\u4F1A: 6, \u4E0D\u53EF\u80FD\u7684: 6, \u4E0D\u559C: 6, "\u4E0D\u5BB9\u6613 ": 6, \u4E0D\u601D\u8B70: 5, \u4E0D\u60F3: 6, \u4E0D\u662F: 6, \u4E0D\u6CE8\u610F: 5, \u4E0D\u77E5: 6, \u4E0D\u80FD: 6, "\u4E0D\u8212\u670D ": 6, \u4E0D\u8981: 6, "\u4E0D\u8D77 ": 6, \u4E0D\u9700\u8981: 6, \u4E16\u754C\u4E00\u5468: 5, \u4E16\u754C\u4E0A: 6, \u4E16\u754C\u4E2D: 5, \u4E16\u754C\u5927\u6226: 5, \u4E16\u754C\u5E73\u548C: 5, \u4E1C: 6, \u4E21\u89AA: 5, \u4E24: 6, \u4E2A: 6, \u4E2D\u56FD\u8A9E: 5, \u4E2D\u83EF\u6599\u7406: 5, \u4E2D\u9014\u534A\u7AEF: 5, \u4E3A: 6, \u4E3D: 6, \u4E48: 6, \u4E4B: 6, \u4E5F: 6, \u4E66: 6, \u4E70: 6, "\u4E86 ": 6, \u4E86\u4E00: 6, \u4E86\u4ED6: 6, \u4E86\u6211: 6, \u4E88\u5B9A: 5, \u4E88\u9632\u63A5\u7A2E: 5, \u4E8B\u52D9\u6240: 5, "\u4E8B\u60C5 ": 6, \u4E8C\u4EBA: 5, \u4E8C\u6B21\u4E16\u754C: 5, \u4E8C\u9178\u5316\u70AD: 5, \u4E8E: 6, \u4EBA\u90FD: 6, \u4EBA\u9593: 5, \u4EC0: 6, "\u4ECA ": 5, \u4ECA\u591C: 5, \u4ECA\u5929: 6, "\u4ECA\u65E5 ": 5, \u4ECA\u65E5\u5B66\u6821: 5, \u4ECE: 6, \u4ED5: 5, "\u4ED6 ": 6, \u4ED6\u4E0D: 6, \u4ED6\u5728: 6, \u4ED6\u662F: 6, \u4ED6\u7684: 6, \u4EE5\u4E0A\u6211\u6162: 5, \u4EEC: 6, "\u4EF6\u4E8B ": 6, \u4EFB\u4F55: 6, \u4F1A\u793E: 5, \u4F1A\u8B70: 5, \u4F46: 6, \u4F4F\u5728: 6, \u4F55\u6642\u9593: 5, "\u4F5C ": 6, \u4F60: 6, \u4F86: 6, \u4FA1\u5024: 5, \u500B\u554F\u984C: 6, \u500B\u5C0F\u6642: 6, \u5011: 6, "\u5019 ": 6, \u505A: 6, \u50D5: 5, \u5104\u4E07\u9577\u8005: 5, \u513F: 6, \u5152: 6, \u5171\u7523\u4E3B\u7FA9: 5, "\u5174\u8DA3 ": 6, \u5176: 6, \u5199\u771F: 5, \u51B7\u8535\u5EAB: 5, \u51E0: 6, \u51FA\u6765\u4E8B: 5, "\u51FA\u751F\u7684 ": 6, \u5206\u81EA\u8EAB: 5, \u5217\u8ECA: 5, \u522B: 6, "\u5230 ": 6, \u5230\u4E86: 6, \u5230\u7740: 5, \u52A0\u62FF\u5927: 6, \u52A8: 6, \u52B4\u50CD\u8005: 5, \u52C9\u5F37: 5, \u52D5\u8CA9\u58F2\u6A5F: 5, \u52D5\u8ECA\u4E8B\u6545: 5, \u533B\u8005: 5, \u5341\u4E2D\u516B\u4E5D: 5, \u5348\u524D\u4E2D: 5, \u5348\u5F8C: 5, \u5371\u967A: 5, "\u5371\u96AA\u7684 ": 6, "\u53BB ": 6, \u53BB\u4E86: 6, "\u53BB\u5B66\u6821 ": 6, \u53BB\u770B\u96FB\u5F71: 6, "\u53CB ": 6, \u53CB\u4EBA: 5, \u53CB\u9054: 5, \u53CD\u5BFE: 5, \u53D1: 6, \u53D8\u5F97\u8D8A\u6765\u8D8A: 6, \u53EF\u4EE5: 6, \u53EF\u4FD7\u8A71\u53C8: 6, "\u53EF\u80FD\u7684 ": 6, \u53F2\u5BC6\u65AF\u5148: 6, "\u5403\u65E9\u9910 ": 6, \u5408\u8846\u56FD: 5, \u540D\u524D: 5, "\u540D\u5B57 ": 6, \u540E: 6, \u5417: 6, \u5427: 6, \u542C: 6, \u544A\u8BC9: 6, \u5462: 6, "\u5496\u5561 ": 6, \u54EA: 6, "\u554A ": 6, \u55CE: 6, \u56DE\u5BB6: 6, "\u56DE\u6765 ": 6, \u56F3\u66F8\u9928: 5, "\u56FD\u4EBA ": 6, \u570B: 6, \u5728tato: 6, \u5728\u4E00: 6, "\u5728\u5BB6 ": 6, \u5728\u684C\u5B50\u4E0A: 6, \u5728\u6CE2\u58EB: 6, \u5728\u9019: 6, "\u5730\u65B9 ": 6, "\u57CE\u5E02 ": 6, \u5831\u544A\u66F8: 5, \u5834\u6240: 5, \u589C\u843D\u4E8B\u6545: 5, \u5915\u98DF: 5, \u5916\u56FD\u8A9E: 5, "\u591A ": 6, "\u591A\u5C11 ": 6, "\u591A\u5C11\u9322 ": 6, \u5927\u4E08\u592B: 5, \u5927\u5207: 5, \u5927\u5909: 5, \u5927\u597D: 5, \u5927\u5BB6\u90FD: 6, \u5927\u7684: 6, \u5927\u7D71\u9818: 5, "\u5929 ": 6, \u5929\u4E0B\u5348: 6, \u5929\u65E9\u4E0A: 6, \u5929\u7136\u8CC7\u6E90: 5, \u5979: 6, "\u597D ": 6, "\u597D\u4E3B\u610F ": 6, \u597D\u7684: 6, \u5982\u679C: 6, \u59C6: 6, \u59D4\u54E1\u4F1A: 5, \u5B50\u4F9B: 5, \u5B66\u4E60: 6, \u5B66\u6821\u6642\u4EE3: 5, "\u5B66\u751F ": 6, \u5B66\u751F\u6642\u4EE3: 5, \u5B69: 6, \u5B78: 6, \u5B83: 6, \u5B87\u5B99\u98DB\u884C: 5, \u5B99\u98DB\u884C\u58EB: 5, \u5B9F: 5, \u5BB6\u65CF: 5, \u5BBF\u984C: 5, \u5BC6\u65AF\u5148\u751F: 6, \u5BF9: 6, \u5C0D: 6, \u5C0F\u8AAC: 5, \u5C11\u5973: 5, \u5C14\u53CA\u5229\u4E9A: 6, \u5C31\u662F: 6, \u5DE5\u4F5C: 6, "\u5DE7\u514B\u529B ": 6, \u5DF2: 6, \u5E2E: 6, \u5E81\u6240\u5728\u5730: 5, \u5E94: 6, \u5F00: 6, \u5F01\u8B77\u58EB: 5, "\u5F39\u94A2\u7434 ": 6, "\u5F48\u92FC\u7434 ": 6, \u5F7C\u5973: 5, \u5F88: 6, \u5F93\u696D\u54E1: 5, \u5F9E: 6, \u5FC3\u914D: 5, \u5FC5\u987B: 6, \u600E: 6, \u606F\u5B50: 5, \u60A8: 6, \u60F3\u8981: 6, \u610F\u5927\u5229: 6, "\u610F\u601D ": 6, \u611F\u5174\u8DA3: 6, "\u611F\u5230\u60CA\u8BB6 ": 6, \u61C9: 6, \u61F8\u547D: 5, "\u6210\u529F ": 6, \u6210\u70BA\u4E00\u540D: 6, \u6210\u7530\u7A7A\u6E2F: 5, "\u6211 ": 6, \u6211\u4E00: 6, \u6211\u4E0D: 6, \u6211\u559C: 6, \u6211\u5728: 6, \u6211\u5B8C\u5168\u4E0D: 6, \u6211\u5E0C\u671B: 6, \u6211\u60F3: 6, "\u6211\u6240\u77E5 ": 6, \u6211\u662F: 6, \u6211\u6709: 6, \u6211\u7236\u4EB2: 6, \u6211\u7236\u89AA: 6, \u6211\u7684: 6, \u6211\u770B: 6, \u6211\u8981: 6, \u6211\u89BA\u5F97: 6, \u6211\u9700\u8981: 6, \u6226\u4E89: 5, \u623F\u5B50: 6, "\u623F\u9593 ": 6, \u6240\u4EE5: 6, \u6240\u6709\u7684: 6, \u624B\u4F1D: 5, \u624B\u7D19: 5, "\u6253\u68D2\u7403 ": 6, "\u6253\u7DB2\u7403 ": 6, "\u6253\u7F51\u7403 ": 6, \u6253\u96FB\u8A71: 6, \u627E: 6, "\u62B1\u6B49 ": 6, "\u62FF\u5927\u4EBA ": 6, \u6388\u696D: 5, \u643A\u5E2F\u96FB\u8A71: 5, \u653E\u8AB2\u5F8C: 5, "\u6563\u6B65 ": 6, \u6563\u6B69: 5, \u65E0: 6, \u65E5\u66DC: 5, "\u65E5\u672C ": 6, "\u65E5\u672C\u4EBA ": 6, \u65E5\u672C\u6599\u7406: 5, \u65E5\u672C\u7D4C\u6E08: 5, \u65E9\u5BDD\u65E9\u8D77: 5, \u65F6: 6, \u660E\u5929: 6, \u660E\u65E5: 5, \u661F\u671F: 6, \u6620\u753B: 5, "\u6628\u591C ": 5, \u6628\u5929: 6, \u6628\u65E5: 5, \u662F\u4E00: 6, \u662F\u4E0D: 6, "\u662F\u533B\u751F ": 6, \u662F\u6211: 6, "\u662F\u65B0\u7684 ": 6, \u662F\u65E5\u672C\u4EBA: 6, "\u662F\u6B63\u786E\u7684 ": 6, \u662F\u6B63\u78BA\u7684: 6, "\u662F\u7A7A\u7684 ": 6, "\u662F\u8C01 ": 6, \u6642\u5019: 6, \u6642\u8A08: 5, \u6642\u9593\u4EE5\u4E0A: 5, \u6642\u9593\u4EE5\u5185: 5, \u6642\u9593\u901A: 5, \u665A: 6, \u66DC\u65E5: 5, \u6700\u597D: 6, "\u6700\u8FD1 ": 5, \u6703: 6, \u6709\u4E00: 6, \u6709\u4EBA: 6, \u6709\u591A\u5C11: 6, "\u6709\u8208\u8DA3 ": 6, \u6709\u8DB3\u591F\u7684: 6, \u670B: 6, \u672C\u5F53: 5, "\u672C\u66F8 ": 6, \u672C\u8A9E: 5, "\u6765\u7684 ": 6, \u6771\u897F: 6, \u6821\u9577\u5148\u751F: 5, \u682A\u5F0F\u5E02\u5834: 5, \u6837: 6, "\u684C\u5B50\u4E0A ": 6, \u697D: 5, \u6A21\u578B\u98DB\u884C: 5, \u6A23: 6, \u6B22: 6, \u6B61: 6, \u6B63\u5728: 6, \u6B63\u76F4: 5, \u6BBA\u4EBA\u4E8B\u4EF6: 5, \u6BCE\u65E5: 5, \u6BCF: 6, \u6C11\u4E3B\u4E3B\u7FA9: 5, \u6C14: 6, \u6C17: 5, \u6C64: 6, \u6C92: 6, \u6CA1\u6709: 6, \u6CE2\u58EB\u9813: 6, \u6CE2\u58EB\u987F: 6, \u6CE8\u610F\u6DF1: 5, \u6D77\u5916\u65C5\u884C: 5, \u6E38: 6, "\u6F02\u4EAE ": 6, \u6F02\u4EAE\u7684: 6, \u6FB3\u5927\u5229\u4E9A: 6, \u6FB3\u5927\u5229\u4E9E: 6, \u7121\u7406\u77E2\u7406: 5, \u71B1\u5E2F\u96E8\u6797: 5, \u7231: 6, \u7238: 6, \u739B: 6, \u73B0: 6, \u73ED: 6, \u746A\u9E97: 6, \u751F\u5F92: 5, \u751F\u61F8: 5, "\u751F\u6D3B ": 6, \u751F\u6D3B\u69D8\u5F0F: 5, \u7535: 6, \u754C\u4E00\u5468\u65C5\u884C: 5, \u767A: 5, \u767C: 6, \u7684\u4E00: 6, \u7684\u4E8B: 6, \u7684\u4EBA: 6, "\u7684\u539F\u56E0 ": 6, "\u7684\u53E5\u5B50 ": 6, \u7684\u540D\u5B57: 6, "\u7684\u5473\u9053 ": 6, \u7684\u554F\u984C: 6, "\u7684\u56FD\u5BB6 ": 6, \u7684\u5730\u65B9: 6, "\u7684\u5973\u4EBA ": 6, "\u7684\u5E3D\u5B50 ": 6, "\u7684\u5EFA\u8BAE ": 6, \u7684\u60F3\u6CD5: 6, \u7684\u610F\u601D: 6, \u7684\u623F: 6, "\u7684\u6545\u4E8B ": 6, "\u7684\u65B9\u6CD5 ": 6, \u7684\u6642: 6, "\u7684\u6BCD\u89AA ": 6, "\u7684\u6D88\u606F ": 6, "\u7684\u7167\u7247 ": 6, \u7684\u7236\u6BCD: 6, "\u7684\u751F\u65E5 ": 6, \u7684\u751F\u6D3B: 6, "\u7684\u7537\u4EBA ": 6, "\u7684\u773C\u775B ": 6, "\u7684\u8072\u97F3 ": 6, "\u7684\u8A71 ": 6, "\u7684\u8A9E\u8A00 ": 6, "\u7684\u8BA1\u5212 ": 6, "\u7684\u9519\u8BEF ": 6, "\u7684\u98DF\u7269 ": 6, "\u7684\u9996\u90FD ": 6, \u76F8\u4FE1: 6, \u770B\u5230: 6, \u770B\u8B77\u5A66: 5, "\u770B\u96FB\u8996 ": 6, \u770C\u5E81\u6240\u5728: 5, \u771F\u7684: 6, \u7761\u7720\u4E0D\u8DB3: 5, \u77E5\u9053: 6, \u79C1\u9054: 5, \u79CD: 6, \u79D1\u5B66\u6280\u8853: 5, \u79D1\u5B66\u8005: 5, \u7B2C\u4E8C\u6B21\u4E16: 5, \u7B2C\u6B21\u4E16\u754C: 5, \u7C21\u5358: 5, \u7D04\u675F: 5, \u7D4C\u9A13\u4E0D\u8DB3: 5, \u7D50\u5A5A\u5F0F: 5, \u7D66\u6211: 6, \u7D93: 6, \u7DCF\u7406\u5927\u81E3: 5, "\u7EAF\u7D20\u98DF\u8005 ": 6, \u7ECF: 6, \u7ED9: 6, "\u8001\u5E08 ": 6, \u800C: 6, \u81EA\u5206: 5, \u81EA\u52D5\u8CA9\u58F2: 5, \u81EA\u52D5\u8ECA: 5, "\u81EA\u5DF1 ": 6, \u81EA\u5DF1\u7684: 6, \u81EA\u5DF1\u7D39\u4ECB: 5, \u81EA\u8EE2: 5, \u8208\u5473: 5, "\u8272\u7684 ": 6, "\u8461\u8404\u9152 ": 6, \u884C\u65B9\u4E0D\u660E: 5, \u884C\u6A5F: 5, "\u8863\u670D ": 6, \u88E1: 6, "\u897F ": 6, \u8981\u7684: 6, \u89C1: 6, \u89C9: 6, \u8A00\u8449: 5, \u8A00\u8A9E: 5, \u8A08\u753B: 5, \u8A66\u5408: 5, \u8A66\u9A13: 5, \u8A71\u756A\u53F7: 5, \u8A72: 6, \u8A95\u751F: 5, \u8AAA: 6, \u8AAC\u660E: 5, \u8AAD: 5, \u8B93: 6, \u8BA4: 6, \u8BA9: 6, \u8BDD: 6, \u8BE5: 6, \u8BED: 6, \u8BF4: 6, \u8BF7: 6, \u8CC7\u91D1\u4E0D\u8DB3: 5, \u8CEA\u554F: 5, "\u8D77\u5E8A ": 6, \u8D77\u6765: 6, \u8DDF: 6, \u8EAB\u5206\u8A3C\u660E: 5, \u8EE2\u514D\u8A31\u8A3C: 5, \u8EE2\u8ECA: 5, \u8F66: 6, \u8F9E\u66F8: 5, \u8FC7: 6, \u8FD8: 6, \u8FD9: 6, \u9019\u500B: 6, \u9019\u662F: 6, \u9031\u9593: 5, \u904B\u8EE2: 5, \u90E8\u5C4B: 5, \u90F5\u4FBF\u5C40: 5, \u90FD\u662F: 6, \u9178\u5316\u70AD\u7D20: 5, "\u91CC ": 6, "\u91CD\u8981 ": 6, \u91CE\u7403: 5, \u91CE\u751F\u52D5\u7269: 5, \u91D1\u6301: 5, \u94B1: 6, \u9593\u9055: 5, \u95A2\u4FC2: 5, \u95EE: 6, \u95F4: 6, \u963F\u5C14\u53CA\u5229: 6, \u96FB\u8A71\u756A: 5, \u96FB\u8A71\u865F\u78BC: 6, \u96FB\u8ECA: 5, "\u975E\u5E38\u6709\u8DA3 ": 6, \u9762\u767D: 5, \u9898: 6, \u98A8\u90AA: 5, \u98DF\u4E8B: 5, \u9AD8\u6821\u6642\u4EE3: 5, \u9AD8\u723E\u592B\u7403: 6, \u9AD8\u901F\u9053\u8DEF: 5, \u9EBC: 6, \u9EDE: 6, \uAC00: 7, \uAC01: 7, \uAC04: 7, \uAC19: 7, \uAC70: 7, \uAC74: 7, \uAC78: 7, \uAC83: 7, \uAC8C: 7, \uACE0: 7, \uACFC: 7, \uAD6C: 7, \uADF8: 7, "\uAE08 ": 7, \uAE30: 7, \uAE4C: 7, \uB098: 7, \uB09C: 7, "\uB0A0 ": 7, \uB0B4: 7, \uB108: 7, \uB124: 7, \uB140: 7, \uB294: 7, "\uB298 ": 7, \uB2C8: 7, \uB2E4: 7, \uB2F9: 7, \uB300: 7, \uB354: 7, "\uB370 ": 7, \uB3C4: 7, \uB3D9: 7, "\uB450 ": 7, "\uB4E0 ": 7, \uB4E4: 7, "\uB54C ": 7, \uB77C: 7, \uB78C: 7, \uB791: 7, "\uB798 ": 7, "\uB798\uB41C ": 7, "\uB7EC ": 7, "\uB7F0 ": 7, \uB824: 7, \uB85C: 7, "\uB978 ": 7, \uB97C: 7, \uB9AC: 7, "\uB9B0 ": 7, \uB9C8: 7, \uB9CC: 7, \uB9D0: 7, \uBA74: 7, "\uBA87 ": 7, \uBAA8: 7, "\uBABB ": 7, \uBB34: 7, \uBB38: 7, \uBBF8: 7, "\uBC8C\uC368 ": 7, \uBCF4: 7, "\uBCF8 ": 7, "\uBD10 ": 7, \uBD80: 7, \uC0AC: 7, \uC0C1: 7, \uC0DD: 7, \uC11C: 7, \uC138: 7, \uC18C: 7, \uC218: 7, \uC2A4: 7, \uC2B5: 7, \uC2DC: 7, \uC2E0: 7, \uC2E4: 7, \uC2F6: 7, \uC544: 7, \uC548: 7, \uC54A: 7, \uC54C: 7, \uC558: 7, \uC57C: 7, \uC5B4: 7, "\uC5C4\uCCAD ": 7, \uC5C6: 7, \uC5C8: 7, \uC5D0: 7, \uC5EC: 7, \uC624: 7, \uC640: 7, "\uC65C ": 7, \uC694: 7, \uC6B0: 7, "\uC6B4 ": 7, "\uC6CC ": 7, \uC73C: 7, \uC740: 7, \uC744: 7, \uC758: 7, \uC774: 7, \uC778: 7, \uC77C: 7, \uC785: 7, \uC788: 7, \uC790: 7, "\uC798 ": 7, \uC7A5: 7, \uC800: 7, \uC801: 7, \uC804: 7, "\uC810\uC2EC ": 7, \uC815: 7, \uC81C: 7, "\uC880 ": 7, \uC88B: 7, \uC8C4\uC1A1\uD569: 7, \uC8FC: 7, "\uC904 ": 7, "\uC918 ": 7, \uC9C0: 7, "\uCC98\uB7FC ": 7, "\uCC98\uC74C ": 7, "\uCEE4\uD53C ": 7, \uCEF4\uD4E8\uD130: 7, "\uD14C ": 7, \uD154\uB808\uBE44: 7, \uD1B0: 7, \uD504: 7, \uD558: 7, \uD559\uAD50: 7, \uD55C: 7, \uD560: 7, "\uD568\uAED8 ": 7, \uD574: 7, \uD588: 7, "\uD6E8\uC52C ": 7, "\uD788 ": 7, "\u{1D465}": "n", "\uFF0D ": "n", "\uFF1B\u53EF\u4FD7\u8A71": 6 } };
var J = /([,，、。!¿?！？":;()「」{}„“«»”"“<>⋯《》*]|[.[\]\\])+/;
var K = /[ ]+/;
function q(a) {
  return a.split(J);
}
function W(a) {
  return a.split(K);
}
function Z(a, i, n = true) {
  let o = [], t = n ? " ".repeat(i - 1) + a + " ".repeat(i - 1) : a;
  for (let B = 0; B < t.length - (i - 1); B++) {
    let r = [], s = 0;
    for (let e = 0; e < i; e++)
      t[B + e] === " " ? s += 1 : s = 0, !(s > 1) && r.push(t[B + e]);
    let O = r.join("");
    O.trim().length > 0 && O.length === i && o.push(O);
  }
  return o;
}
function w(a, i, n, o) {
  for (let t of F) {
    let B = Z(a, t);
    for (let r of B) {
      if (!n.has(r))
        continue;
      let s = m(i.uniques[r]);
      if (!(o.only.length > 0 && !o.only.includes(s)))
        return o.verbose && console.log(`[Pass 1] detectUniqueGrams ${t}-grams - match '${r}' to ${s}`), s;
    }
  }
  return "";
}
function x(a, i, n) {
  let o = /* @__PURE__ */ new Map(), t = F.map((e) => Z(a, e)).flat();
  n.verbose && console.log("[Pass 2] DetectPotentialGrams", a, t);
  let B = new Set([...h.values()].filter((e) => n.only.length > 0 ? n.only.includes(e) || n.only.includes(m(e)) : true));
  B.forEach((e) => o.set(e, 0));
  for (let e of t) {
    let l = U(e), D = i.multiples[l];
    if (!D)
      continue;
    let d = new Set(Object.keys(D)), A = [];
    for (let L of B)
      d.has(L) && (o.set(L, (o.get(L) || 0) + D[L] * l.length / 4), A.push(`${L} = ${D[L] / 1024 * 100}%`));
    n.verbose && A.length > 0 && console.log(`Gram '${l}'`, A);
  }
  let r = [...o.entries()];
  r.sort((e, l) => l[1] - e[1]);
  let s = Math.max(...r.map((e) => e[1])) || 1, O = r.slice(0, 8).map((e) => ({ lang: m(e[0]), accuracy: 1 - Q((s - e[1]) / s), score: Q(e[1]) }));
  return n.verbose && console.log("Result", a, O), O;
}
function Y(a, i, n, o) {
  let t = q(a);
  t = t.map((e) => V(e)).filter((e) => !!e), t.sort((e, l) => l.length - e.length), t = t.slice(0, 7), i.verbose && console.log("Analize chunks", t);
  let B = 0, r = {};
  for (let e of t) {
    let l = w(e, n, o, i);
    if (l) {
      r[l] = (r[l] || 0) + 1 * e.length, B += e.length;
      continue;
    }
    let D = W(e);
    for (let d of D)
      x(d, n, i).forEach((L) => {
        r[L.lang] = (r[L.lang] || 0) + L.accuracy;
      }), B += d.length;
  }
  let s = Object.entries(r).filter((e) => e[1] > 0);
  s.sort((e, l) => l[1] - e[1]);
  let O = s.map((e) => ({ lang: e[0], accuracy: e[1] / B }));
  return i.verbose && console.log("Merge Results", O), O;
}
var c = C;
var _ = { uniques: Object.fromEntries(Object.entries(c.uniques).map((a) => [a[0], g[parseInt(a[1].toString(), 36)]])), multiples: Object.fromEntries(Object.entries(c.multiples).map((a) => {
  let i = Object.fromEntries(a[1].match(/(.{1,4})/g)?.map((n) => {
    let [o, t] = n.match(/(.{1,2})/g);
    return [g[parseInt(o, 36)], parseInt(t, 36)];
  }) || []);
  return [a[0], i];
})) };
var $ = new Set(Object.keys(C.uniques));
function a0(a, i) {
  let n = T(i);
  return X(a) ? Y(a, n, _, $) : [];
}

// l10nCommands.js
var import_helpers16 = __toESM(require_helpers(), 1);
var consoleColor = {
  red: "\x1B[31m",
  yellow: "\x1B[33m",
  green: "\x1B[32m",
  reset: "\x1B[0m",
  dim: "\x1B[2m",
  bright: "\x1B[1m"
};
function printContent(contentPairs) {
  for (const [prj, uc] of Object.entries(contentPairs)) {
    console.log(`Project: ${prj}`);
    for (const [rid, content] of Object.entries(uc)) {
      console.log(`  \u2023 ${rid}`);
      for (const [sid, str] of Object.entries(content)) {
        console.log(`    \u2219 ${consoleColor.dim}${sid}:${consoleColor.reset} ${str.color}${str.confidence ? `[${str.confidence.toFixed(2)}] ` : ""}${sid === str.txt ? "\u2263" : str.txt}${consoleColor.reset}`);
      }
    }
  }
}
function printRequest(req) {
  const untranslatedContent = {};
  const srcLang = req.sourceLang.substring(0, 2);
  for (const tu of req.tus) {
    const prj = tu.prj || "default";
    untranslatedContent[prj] ??= {};
    untranslatedContent[prj][tu.rid] ??= {};
    const text = tu.nsrc ? tu.nsrc.map((e) => typeof e === "string" ? e : "").join("") : tu.src;
    const heuristics = Object.fromEntries(a0(text).map((x2) => [x2.lang, x2.accuracy]));
    const confidence = heuristics[srcLang] ?? 0;
    untranslatedContent[prj][tu.rid][tu.sid] = {
      confidence,
      txt: tu.nsrc ? import_helpers16.utils.flattenNormalizedSourceV1(tu.nsrc)[0] : tu.src,
      // eslint-disable-next-line no-nested-ternary
      color: confidence <= 0.1 ? consoleColor.red : confidence <= 0.2 ? consoleColor.yellow : consoleColor.green
    };
  }
  printContent(untranslatedContent);
}
function printResponse(req, res, showPair) {
  const translations = res.tus.reduce((p2, c2) => (p2[c2.guid] = c2.ntgt ?? c2.tgt, p2), {});
  let matchedTranslations = 0;
  const translatedContent = {};
  for (const tu of req.tus) {
    const prj = tu.prj || "default";
    translatedContent[prj] ??= {};
    translatedContent[prj][tu.rid] ??= {};
    if (translations[tu.guid]) {
      const key = showPair ? tu.nsrc ? import_helpers16.utils.flattenNormalizedSourceV1(tu.nsrc)[0] : tu.src : tu.sid;
      translatedContent[prj][tu.rid][key] = {
        txt: Array.isArray(translations[tu.guid]) ? import_helpers16.utils.flattenNormalizedSourceV1(translations[tu.guid])[0] : translations[tu.guid],
        color: consoleColor.green
      };
      matchedTranslations++;
    }
  }
  if (req.tus.length !== res.tus.length || req.tus.length !== matchedTranslations) {
    console.log(`${consoleColor.red}${req.tus.length} TU in request, ${res.tus.length} TU in response, ${matchedTranslations} matching translations${consoleColor.reset}`);
  }
  printContent(translatedContent);
}
function printLeverage(leverage, detailed) {
  const totalStrings = leverage.translated + leverage.pending + leverage.untranslated + leverage.internalRepetitions;
  detailed && console.log(`    - total strings for target language: ${totalStrings.toLocaleString()} (${leverage.translatedWords.toLocaleString()} translated words)`);
  for (const [q2, num] of Object.entries(leverage.translatedByQ).sort((a, b) => b[1] - a[1])) {
    detailed && console.log(`    - translated strings @ quality ${q2}: ${num.toLocaleString()}`);
  }
  leverage.pending && console.log(`    - strings pending translation: ${leverage.pending.toLocaleString()} (${leverage.pendingWords.toLocaleString()} words)`);
  leverage.untranslated && console.log(`    - untranslated unique strings: ${leverage.untranslated.toLocaleString()} (${leverage.untranslatedChars.toLocaleString()} chars - ${leverage.untranslatedWords.toLocaleString()} words - $${(leverage.untranslatedWords * 0.2).toFixed(2)})`);
  leverage.internalRepetitions && console.log(`    - untranslated repeated strings: ${leverage.internalRepetitions.toLocaleString()} (${leverage.internalRepetitionWords.toLocaleString()} words)`);
}
function computeTotals(totals, partial) {
  for (const [k2, v2] of Object.entries(partial)) {
    if (typeof v2 === "object") {
      totals[k2] ??= {};
      computeTotals(totals[k2], v2);
    } else {
      totals[k2] ??= 0;
      totals[k2] += v2;
    }
  }
}
async function status(monsterManager, options) {
  const limitToLang = options.lang;
  const all = Boolean(options.all);
  const output = options.output;
  const status2 = await statusCmd(monsterManager, { limitToLang });
  if (output) {
    (0, import_fs10.writeFileSync)(output, JSON.stringify(status2, null, "	"), "utf8");
  } else {
    console.log(`${consoleColor.reset}${status2.numSources.toLocaleString()} translatable resources`);
    for (const [lang, langStatus] of Object.entries(status2.lang)) {
      console.log(`
${consoleColor.bright}Language ${lang}${consoleColor.reset} (minimum quality ${langStatus.leverage.minimumQuality}, TM size:${langStatus.leverage.tmSize.toLocaleString()}):`);
      const totals = {};
      const prjLeverage = Object.entries(langStatus.leverage.prjLeverage).sort((a, b) => a[0] > b[0] ? 1 : -1);
      for (const [prj, leverage] of prjLeverage) {
        computeTotals(totals, leverage);
        const untranslated = leverage.pending + leverage.untranslated + leverage.internalRepetitions;
        if (leverage.translated + untranslated > 0) {
          (all || untranslated > 0) && console.log(`  Project: ${consoleColor.bright}${prj}${consoleColor.reset}`);
          printLeverage(leverage, all);
        }
      }
      if (prjLeverage.length > 1) {
        console.log(`  Total:`);
        printLeverage(totals, true);
      }
    }
  }
}
async function jobs(monsterManager, options) {
  const limitToLang = options.lang;
  const jobs2 = await jobsCmd(monsterManager, { limitToLang });
  for (const [lang, jobManifests] of Object.entries(jobs2)) {
    if (jobManifests.length > 0) {
      console.log(`Target language ${consoleColor.bright}${lang}${consoleColor.reset}:`);
      for (const mf of jobManifests) {
        const numUnits = mf.inflight?.length ?? mf.tus?.length ?? 0;
        const lastModified = new Date(mf.updatedAt);
        console.log(`  Job ${mf.jobGuid}: status ${consoleColor.bright}${mf.status}${consoleColor.reset} ${numUnits.toLocaleString()} ${mf.sourceLang} units with ${mf.translationProvider} - ${lastModified.toDateString()} ${lastModified.toLocaleTimeString()}`);
      }
    }
  }
}
async function analyze(monsterManager, options) {
  try {
    if (options.analyzer) {
      const analyzer = import_helpers16.utils.fixCaseInsensitiveKey(monsterManager.analyzers, options.analyzer);
      const Analyzer = monsterManager.analyzers[analyzer];
      if (!Analyzer) {
        throw `couldn't find a ${analyzer} analyzer`;
      }
      const analysis = await analyzeCmd(monsterManager, Analyzer, options.params, options.lang, options.filter);
      const header = analysis.head;
      if (options.output) {
        const rows = header ? [header, ...analysis.body].map((row) => row.join(",")) : analysis.body;
        rows.push("\n");
        (0, import_fs10.writeFileSync)(options.output, rows.join("\n"));
      } else {
        if (header) {
          const groups = analysis.groupBy;
          let previousGroup;
          for (const row of analysis.body) {
            const columns = row.map((col, idx) => [col, idx]);
            if (groups) {
              const currentGroup = columns.filter(([col, idx]) => groups.includes(header[idx]));
              const currentGroupSmashed = currentGroup.map(([col, idx]) => col).join("|");
              if (currentGroupSmashed !== previousGroup) {
                previousGroup = currentGroupSmashed;
                console.log(currentGroup.map(([col, idx]) => `${consoleColor.dim}${header[idx]}: ${consoleColor.reset}${consoleColor.bright}${col}${consoleColor.reset}`).join("	"));
              }
            }
            const currentData = columns.filter(([col, idx]) => (!groups || !groups.includes(header[idx])) && col !== null && col !== void 0);
            console.log(currentData.map(([col, idx]) => `	${consoleColor.dim}${header[idx]}: ${consoleColor.reset}${col}`).join(""));
          }
        } else {
          console.log(analysis.body.join("\n"));
        }
      }
    } else {
      console.log("Available analyzers:");
      for (const [name, analyzer] of Object.entries(monsterManager.analyzers)) {
        console.log(`  ${typeof analyzer.prototype.processSegment === "function" ? "(src)" : " (tu)"} ${consoleColor.bright}${name} ${analyzer.helpParams ?? ""}${consoleColor.reset} ${analyzer.help}`);
      }
    }
  } catch (e) {
    console.error(`Failed to analyze: ${e.stack || e}`);
  }
}
async function push(monsterManager, options) {
  const limitToLang = options.lang;
  const tuFilter = options.filter;
  const driverOption = options.driver ?? "untranslated";
  const driver = {};
  if (driverOption.indexOf("job:") === 0) {
    driver.jobGuid = driverOption.split(":")[1];
  } else if (["untranslated", "source", "tm"].includes(driverOption)) {
    driver[driverOption] = true;
  } else {
    throw `invalid ${driverOption} driver`;
  }
  const refresh = options.refresh;
  const leverage = options.leverage;
  const dryRun = options.dryrun;
  const instructions = options.instructions;
  console.log(`Pushing content upstream...${dryRun ? " (dry run)" : ""}`);
  try {
    if (dryRun) {
      const status2 = await pushCmd(monsterManager, { limitToLang, tuFilter, driver, refresh, leverage, dryRun, instructions });
      for (const langStatus of status2) {
        console.log(`
Dry run of ${langStatus.sourceLang} -> ${langStatus.targetLang} push:`);
        printRequest(langStatus);
      }
    } else {
      let status2 = [];
      for (const provider of (options.provider ?? "default").split(",")) {
        const translationProviderName = provider.toLowerCase() === "default" ? void 0 : provider;
        status2.push(await pushCmd(monsterManager, { limitToLang, tuFilter, driver, refresh, translationProviderName, leverage, dryRun, instructions }));
      }
      status2 = status2.flat(1);
      if (status2.length > 0) {
        for (const ls of status2) {
          if (ls.minimumJobSize !== void 0) {
            console.log(`${ls.num.toLocaleString()} translations units for language ${ls.targetLang} not sent to provider ${consoleColor.bright}${ls.provider}${consoleColor.reset} because you need at least ${ls.minimumJobSize}`);
          } else {
            console.log(`job ${ls.jobGuid} with ${ls.num.toLocaleString()} translations received for language ${consoleColor.bright}${ls.targetLang}${consoleColor.reset} from provider ${consoleColor.bright}${ls.provider}${consoleColor.reset} -> status: ${consoleColor.bright}${ls.status}${consoleColor.reset}`);
          }
        }
      } else {
        console.log("Nothing to push!");
      }
    }
  } catch (e) {
    console.error(`Failed to push: ${e.stack || e}`);
  }
}
async function job(monsterManager, options) {
  const op = options.operation;
  const jobGuid = options.jobGuid;
  if (op === "req") {
    const req = await monsterManager.jobStore.getJobRequest(jobGuid);
    if (req) {
      console.log(`Showing request of job ${jobGuid} ${req.sourceLang} -> ${req.targetLang}`);
      printRequest(req);
    } else {
      console.error("Could not fetch the specified job");
    }
  } else if (op === "res") {
    const req = await monsterManager.jobStore.getJobRequest(jobGuid);
    const res = await monsterManager.jobStore.getJob(jobGuid);
    if (req && res) {
      console.log(`Showing response of job ${jobGuid} ${req.sourceLang} -> ${req.targetLang} (${res.translationProvider}) ${res.status}`);
      printResponse(req, res);
    } else {
      console.error("Could not fetch the specified job");
    }
  } else if (op === "pairs") {
    const req = await monsterManager.jobStore.getJobRequest(jobGuid);
    const res = await monsterManager.jobStore.getJob(jobGuid);
    if (req && res) {
      console.log(`Showing source-target pairs of job ${jobGuid} ${req.sourceLang} -> ${req.targetLang} (${res.translationProvider}) ${res.status}`);
      printResponse(req, res, true);
    } else {
      console.error("Could not fetch the specified job");
    }
  } else if (op === "push") {
    console.log(`Pushing job ${jobGuid}...`);
    try {
      const pushResponse = await jobPushCmd(monsterManager, jobGuid);
      console.log(`${pushResponse.num.toLocaleString()} translations units requested -> status: ${pushResponse.status}`);
    } catch (e) {
      console.error(`Failed to push job: ${e}`);
    }
  } else if (op === "delete") {
    console.log(`Deleting job ${jobGuid}...`);
    try {
      const res = await monsterManager.jobStore.getJob(jobGuid);
      if (res) {
        console.error(`Can only delete blocked/failed jobs. This job has status: ${res.status}`);
      } else {
        await monsterManager.jobStore.deleteJobRequest(jobGuid);
      }
    } catch (e) {
      console.error(`Failed to push job: ${e}`);
    }
  } else {
    console.error(`Invalid operation: ${op}`);
  }
}
async function pull(monsterManager, options) {
  const limitToLang = options.lang;
  const partial = options.partial;
  console.log(`Pulling pending translations...`);
  const stats = await pullCmd(monsterManager, { limitToLang, partial });
  console.log(`Checked ${stats.numPendingJobs.toLocaleString()} pending jobs, ${stats.doneJobs.toLocaleString()} done jobs, ${stats.newPendingJobs.toLocaleString()} pending jobs created, ${stats.translatedStrings.toLocaleString()} translated strings found`);
}
async function snap(monsterManager, options) {
  console.log(`Taking a snapshot of sources...`);
  const numSources = await snapCmd(monsterManager, options);
  console.log(`${numSources} sources committed`);
}
async function translate(monsterManager, options) {
  const limitToLang = options.lang;
  const dryRun = options.dryrun;
  console.log(`Generating translated resources for ${limitToLang ? limitToLang : "all languages"}...${dryRun ? " (dry run)" : ""}`);
  const status2 = await translateCmd(monsterManager, { limitToLang, dryRun });
  if (dryRun) {
    for (const [lang, diff2] of Object.entries(status2.diff)) {
      for (const [fname, lines] of Object.entries(diff2)) {
        console.log(`${lang}: diffing ${fname}`);
        lines.forEach(([added, change]) => console.log(`${added ? `${consoleColor.green}+` : `${consoleColor.red}-`} ${change}${consoleColor.reset}`));
      }
    }
  } else {
    for (const [lang, files] of Object.entries(status2.generatedResources)) {
      console.log(`  - ${lang}: ${files.length} resources generated`);
    }
    for (const [lang, files] of Object.entries(status2.deleteResources)) {
      console.log(`  - ${lang}: ${files.length} resources deleted`);
    }
  }
}
async function tmexport(monsterManager, options) {
  const format2 = options.format;
  const mode = options.mode;
  const limitToLang = options.lang;
  const prjsplit = options.prjsplit;
  if (["job", "json", "tmx"].includes(format2)) {
    if (["source", "tm"].includes(mode)) {
      console.log(`Exporting TM in mode ${consoleColor.bright}${mode}${consoleColor.reset} and format ${consoleColor.bright}${format2}${consoleColor.reset} for ${consoleColor.bright}${limitToLang ? limitToLang : "all languages"}${consoleColor.reset}...`);
      const status2 = await tmExportCmd(monsterManager, { limitToLang, mode, format: format2, prjsplit });
      console.log(`Generated files: ${status2.files.join(", ")}`);
    } else {
      console.error("Invalid mode");
    }
  } else {
    console.error("Invalid export format");
  }
}
async function monster(monsterManager) {
  console.log(`
    _.------.                        .----.__
   /         \\_.       ._           /---.__  \\
  |  O    O   |\\\\___  //|          /       \`\\ |
  |  .vvvvv.  | )   \`(/ |         | o     o  \\|
  /  |     |  |/      \\ |  /|   ./| .vvvvv.  |\\
 /   \`^^^^^'  / _   _  \`|_ ||  / /| |     |  | \\
./  /|         | O)  O   ) \\|| //' | \`^vvvv'  |/\\\\
/   / |         \\        /  | | ~   \\          |  \\\\
\\  /  |        / \\ Y   /'   | \\     |          |   ~
\`'   |  _     |  \`._/' |   |  \\     7        /
 _.-'-' \`-'-'|  |\`-._/   /    \\ _ /    .    |
__.-'            \\  \\   .   / \\_.  \\ -|_/\\/ \`--.|_
--'                  \\  \\ |   /    |  |              \`-
               \\uU \\UU/     |  /   :F_P:
`);
  console.time("Initialization time");
  const resourceStats = await monsterManager.source.getResourceStats();
  const targetLangs = await monsterManager.getTargetLangs(false, true);
  console.log(`Resources: ${resourceStats.length}`);
  console.log(`Possible languages: ${targetLangs.join(", ")}`);
  console.log("Translation Memories:");
  const availableLangPairs = (await monsterManager.jobStore.getAvailableLangPairs()).sort();
  for (const [sourceLang, targetLang] of availableLangPairs) {
    const tm = await monsterManager.tmm.getTM(sourceLang, targetLang);
    console.log(`  - ${sourceLang} / ${targetLang} (${tm.guids.length} entries)`);
  }
  console.timeEnd("Initialization time");
  const printCapabilities = (cap) => `${Object.entries(cap).map(([cmd, available]) => `${available ? consoleColor.green : consoleColor.red}${cmd}`).join(" ")}${consoleColor.reset}`;
  console.log(`
Your config allows the following commands: ${printCapabilities(monsterManager.capabilities)}`);
  if (Object.keys(monsterManager.capabilitiesByType).length > 1) {
    Object.entries(monsterManager.capabilitiesByType).forEach(([type, cap]) => console.log(`  - ${type}: ${printCapabilities(cap)}`));
  }
}
function createLogger2(verboseOption) {
  const verboseLevel = verboseOption === void 0 || verboseOption === 0 ? "error" : (
    // eslint-disable-next-line no-nested-ternary
    verboseOption === 1 ? "warn" : verboseOption === true || verboseOption === 2 ? "info" : "verbose"
  );
  return winston.createLogger({
    level: verboseLevel,
    transports: [
      new winston.transports.Console({
        format: winston.format.combine(
          winston.format.ms(),
          winston.format.timestamp(),
          winston.format.printf(({ level, message, timestamp, ms }) => `${consoleColor.green}${timestamp.substr(11, 12)} (${ms}) [${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB] ${level}: ${typeof message === "string" ? message : util.inspect(message)}${consoleColor.reset}`)
        )
      })
    ]
  });
}

// cli.js
function intOptionParser(value, _dummyPrevious) {
  const parsedValue = parseInt(value, 10);
  if (isNaN(parsedValue)) {
    throw new InvalidArgumentError("Not an integer");
  }
  return parsedValue;
}
function createMonsterCLI(cliCtx, preAction) {
  const monsterCLI = new Command();
  monsterCLI.name("l10n").version("0.1.0", "--version", "output the current version number").description("Continuous localization for the rest of us.").option("-v, --verbose [level]", "0=error, 1=warning, 2=info, 3=verbose", intOptionParser).option("-p, --prj <prj1,...>", "limit source to specified projects").option("--arg <string>", "optional config constructor argument").option("--cfg <filename.cjs>", "specify the configuration file to use").option("--regression", "keep variables constant during regression testing");
  preAction && monsterCLI.hook("preAction", preAction);
  monsterCLI.command("status").description("translation status of content.").option("-l, --lang <language>", "only get status of target language").option("-a, --all", "show information for all projects, not just untranslated ones").option("--output <filename>", "write status to the specified file").action(async function status2() {
    await status(cliCtx.monsterManager, this.optsWithGlobals());
  });
  monsterCLI.command("jobs").description("unfinished jobs status.").option("-l, --lang <language>", "only get jobs for the target language").action(async function jobs2() {
    await jobs(cliCtx.monsterManager, this.optsWithGlobals());
  });
  monsterCLI.command("analyze").description("content reports and validation.").argument("[analyzer]", "name of the analyzer to run").argument("[params...]", "optional parameters to the analyzer").option("-l, --lang <language>", "target language to analyze (if TM analyzer)").option("--filter <filter>", "use the specified tu filter").option("--output <filename>", "filename to write the analysis to)").action(async function analyze2(analyzer, params) {
    await analyze(cliCtx.monsterManager, { ...this.optsWithGlobals(), analyzer, params });
  });
  monsterCLI.command("push").description("push source content upstream (send to translation).").option("-l, --lang <language>", "target language to push").option("--filter <filter>", "use the specified tu filter").option("--driver <untranslated|source|tm|job:jobGuid>", "driver of translations need to be pushed (default: untranslated)").option("--leverage", "eliminate internal repetitions from untranslated driver").option("--refresh", "refresh existing translations without requesting new ones").option("--provider <name,...>", "use the specified translation providers").option("--instructions <instructions>", "send the specified translation instructions").option("--dryrun", "simulate translating and compare with existing translations").action(async function push2() {
    await push(cliCtx.monsterManager, this.optsWithGlobals());
  });
  monsterCLI.command("job").description("show request/response/pairs of a job or push/delete jobs.").addArgument(new Argument("<operation>", "operation to perform on job").choices(["req", "res", "pairs", "push", "delete"])).requiredOption("-g, --jobGuid <guid>", "guid of job").action(async function job2(operation) {
    await job(cliCtx.monsterManager, { ...this.optsWithGlobals(), operation });
  });
  monsterCLI.command("pull").description("receive outstanding translation jobs.").option("--partial", "commit partial deliveries").option("-l, --lang <language>", "only get jobs for the target language").action(async function pull2() {
    await pull(cliCtx.monsterManager, this.optsWithGlobals());
  });
  monsterCLI.command("snap").description("commits a snapshot of sources in normalized format.").option("--maxSegments <number>", "threshold to break up snapshots into chunks").action(async function snap2() {
    await snap(cliCtx.monsterManager, this.optsWithGlobals());
  });
  monsterCLI.command("translate").description("generate translated resources based on latest source and translations.").option("-l, --lang <language>", "target language to translate").option("-d, --dryrun", "simulate translating and compare with existing translations").action(async function translate2() {
    await translate(cliCtx.monsterManager, this.optsWithGlobals());
  });
  monsterCLI.command("tmexport").description("export translation memory in various formats.").addArgument(new Argument("<mode>", "export source (including untranslated) or tm entries (including missing in source)").choices(["source", "tm"])).addArgument(new Argument("<format>", "exported file format").choices(["tmx", "json", "job"])).option("-l, --lang <language>", "target language to export").option("--prjsplit", "split target files by project").action(async function tmexport2(mode, format2) {
    await tmexport(cliCtx.monsterManager, { ...this.optsWithGlobals(), mode, format: format2 });
  });
  monsterCLI.command("monster").description("just because...").action(async function monster2() {
    await monster(cliCtx.monsterManager, this.optsWithGlobals());
  });
  cliCtx.setupExtensions && cliCtx.setupExtensions(monsterCLI, cliCtx);
  return monsterCLI;
}
async function runMonsterCLI(monsterConfigPath2, extensionsPath2) {
  const cliCtx = {};
  const cliExtensions = extensionsPath2 || process.env.l10nmonster_cliextensions && path9.resolve(".", process.env.l10nmonster_cliextensions);
  if (cliExtensions) {
    try {
      const extensionsModule = await import(cliExtensions);
      if (extensionsModule.setupExtensions) {
        cliCtx.setupExtensions = extensionsModule.setupExtensions;
      } else {
        console.log("Found extensions but no setupExtensions export found");
      }
    } catch (e) {
      console.log(`Couldn't load extensions from ${cliExtensions}: ${e.stack || e}`);
    }
  }
  try {
    await createMonsterCLI(
      cliCtx,
      async (cli) => {
        const options = cli.opts();
        const configPath = (options.cfg && path9.resolve(".", options.cfg)) ?? monsterConfigPath2;
        const logger = createLogger2(options.verbose);
        const mm = await createMonsterManager({
          configPath,
          options,
          logger,
          env: process.env
        });
        cliCtx.monsterManager = mm;
      }
    ).parseAsync();
  } catch (e) {
    console.error(`Unable to run: ${e.stack || e}`);
    process.exit(1);
  } finally {
    cliCtx.monsterManager && await cliCtx.monsterManager.shutdown();
  }
}

// l10n.js
function findConfig() {
  let baseDir = path10.resolve("."), previousDir = null;
  while (baseDir !== previousDir) {
    const configPath = path10.join(baseDir, "l10nmonster.cjs");
    if ((0, import_fs11.existsSync)(configPath)) {
      const cliExtensions = path10.join(baseDir, "l10nmonster-cli.cjs");
      return [configPath, (0, import_fs11.existsSync)(cliExtensions) && cliExtensions];
    }
    previousDir = baseDir;
    baseDir = path10.resolve(baseDir, "..");
  }
  return [];
}
var [monsterConfigPath, extensionsPath] = findConfig();
(async () => {
  await runMonsterCLI(monsterConfigPath, extensionsPath);
})();
/*! Bundled license information:

is-extglob/index.js:
  (*!
   * is-extglob <https://github.com/jonschlinkert/is-extglob>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

is-glob/index.js:
  (*!
   * is-glob <https://github.com/jonschlinkert/is-glob>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-number/index.js:
  (*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

to-regex-range/index.js:
  (*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

fill-range/index.js:
  (*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

queue-microtask/index.js:
  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

run-parallel/index.js:
  (*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

sax/lib/sax.js:
  (*! http://mths.be/fromcodepoint v0.1.0 by @mathias *)
*/
//# sourceMappingURL=l10n.cjs.map
